29.10 18:00:18 TIMER: Starting timer...
29.10 18:00:18 TIMER: Timer running...
29.10 18:00:18 DB: SELECT * FROM GameVars
29.10 18:00:18 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 18:00:18 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 18:00:18 DB: SELECT * FROM Shops WHERE ID = 1
29.10 18:00:18 TEMP: load ./tmp/quest_daily_ids
29.10 18:00:18 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
29.10 18:00:18 TEMP: save ./tmp/quest_daily_ids
29.10 18:00:18 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
29.10 18:00:18 QUEUE: vdl.0 (thread) response server.login
29.10 18:00:18 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
29.10 18:00:18 DB: SELECT * FROM LocalizationStrings
29.10 18:00:18 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:18 TIME: core/server.query : 7.84 ms
29.10 18:00:18 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
29.10 18:00:18 DB: SELECT * FROM GameVars
29.10 18:00:18 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:18 TIME: core/server.query : 0.68 ms
29.10 18:00:18 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
29.10 18:00:18 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
29.10 18:00:18 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:18 TIME: core/server.query : 1.13 ms
29.10 18:00:18 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
29.10 18:00:18 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
29.10 18:00:18 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:18 TIME: core/server.query : 0.72 ms
29.10 18:00:18 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
29.10 18:00:18 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
29.10 18:00:18 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:18 TIME: core/server.query : 0.73 ms
29.10 18:00:18 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
29.10 18:00:18 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
29.10 18:00:18 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:18 TIME: core/server.query : 0.95 ms
29.10 18:00:18 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
29.10 18:00:18 QUEUE: vdl.0 (thread) response core/quest.getDaily
29.10 18:00:18 TIME: core/quest.getDaily : 0.02 ms
29.10 18:00:18 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
29.10 18:00:18 DB: SELECT * FROM UserAttributeTypes
29.10 18:00:18 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:18 TIME: core/server.query : 0.58 ms
29.10 18:00:18 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
29.10 18:00:18 DB: SELECT * FROM UserVariableTypes
29.10 18:00:18 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:18 TIME: core/server.query : 0.52 ms
29.10 18:00:18 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
29.10 18:00:18 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
29.10 18:00:18 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:18 TIME: core/server.query : 4.06 ms
29.10 18:00:18 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
29.10 18:00:18 DB: SELECT * FROM ItemGroups
29.10 18:00:18 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:18 TIME: core/server.query : 0.65 ms
29.10 18:00:18 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
29.10 18:00:18 DB: SELECT * FROM Bundles ORDER BY ID
29.10 18:00:18 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:18 TIME: core/server.query : 0.69 ms
29.10 18:00:18 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
29.10 18:00:18 DB: SELECT * FROM BundleItems ORDER BY ID
29.10 18:00:18 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:18 TIME: core/server.query : 0.6 ms
29.10 18:00:18 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
29.10 18:00:18 QUEUE: vdl.0 (thread) response core/shop.getList
29.10 18:00:18 TIME: core/shop.getList : 0.03 ms
29.10 18:00:18 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
29.10 18:00:18 DB: SELECT * FROM EffectAttributeTypes
29.10 18:00:18 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:18 TIME: core/server.query : 0.49 ms
29.10 18:00:18 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
29.10 18:00:18 DB: SELECT * FROM Effects
29.10 18:00:19 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:19 TIME: core/server.query : 0.45 ms
29.10 18:00:19 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
29.10 18:00:19 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 18:00:19 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:19 TIME: core/server.query : 0.88 ms
29.10 18:00:19 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
29.10 18:00:19 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 18:00:19 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:19 TIME: core/server.query : 0.74 ms
29.10 18:00:19 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
29.10 18:00:19 DB: SELECT * FROM Badges
29.10 18:00:19 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:00:19 TIME: core/server.query : 0.47 ms
29.10 18:01:17 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113', _type => core/server.query }
29.10 18:01:17 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113'
29.10 18:01:17 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:01:17 TIME: core/server.query : 1.99 ms
29.10 18:01:17 NET: vdl.0 (thread) request core/user.isOnlineID { id => 113, _type => core/user.isOnlineID }
29.10 18:01:17 QUEUE: vdl.0 (thread) response core/user.isOnlineID
29.10 18:01:17 TIME: core/user.isOnlineID : 0.08 ms
29.10 18:01:17 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 113, _type => core/cache.get }
29.10 18:01:17 READDB: SELECT * FROM Users WHERE ID = 113
29.10 18:01:17 QUEUE: vdl.0 (thread) response core/cache.get
29.10 18:01:17 TIME: core/cache.get : 4.18 ms
29.10 18:01:17 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 113, _type => core/cache.get }
29.10 18:01:17 READDB: SELECT * FROM UserQuests WHERE ID = 113
29.10 18:01:17 QUEUE: vdl.0 (thread) response core/cache.get
29.10 18:01:17 TIME: core/cache.get : 1.27 ms
29.10 18:01:17 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 113, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
29.10 18:01:17 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
29.10 18:01:17 TIME: core/user.loginPost : 0.13 ms
29.10 18:01:19 TIMER: Clans cache...
29.10 18:01:19 TIMER: Clans cache: 0ms
29.10 18:01:19 TIMER: Check tournament...
29.10 18:01:19 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:01' OR rounddate = '2016-29-10 18:01' AND status <> 'finished'
29.10 18:01:19 STATS: cache [tournament], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
29.10 18:01:19 STATS: cache [tournament], segments [1 calls, 0 hits, 0 misses]
29.10 18:01:19 STATS: cache [tournament], database [61 calls, 0 reads, 0 writes]
29.10 18:01:19 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
29.10 18:01:19 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:01:19 DB: SELECT nextval('Battle_id_seq') AS id
29.10 18:01:19 READDB: SELECT ID FROM Battle WHERE ID = 105
29.10 18:01:19 READDB: INSERT INTO Battle (ID) VALUES (105)
29.10 18:01:19 STATS: cache [battle], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
29.10 18:01:19 STATS: cache [battle], segments [1 calls, 0 hits, 0 misses]
29.10 18:01:19 STATS: cache [battle], database [61 calls, 0 reads, 0 writes]
29.10 18:01:19 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
29.10 18:01:19 READDB: SELECT * FROM Battle WHERE ID = 105
29.10 18:01:19 DB: SELECT name FROM users WHERE id=113
29.10 18:01:19 DB: SELECT name FROM users WHERE id=107
29.10 18:01:19 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => uid113, tournamentId => 1, enemy.id => 107, enemy.name => uid107, round => 1, roundDate => 2016-29-10 18:01, id => 113, enemy.num => 2, battleId => 105, player => 1 }, _isNotify => true, id => 113, _type => tournament.enemyEvent }
29.10 18:01:20 TRACE: Check tournament timer exception:
29.10 18:01:20 TRACE: C Stack Overflow

29.10 18:01:20 TIMER: Check tournament: 1437ms
29.10 18:01:24 WRITEDB: UPDATE Battle SET secondid = E'107', turnid = E'113', finished = E'false', firstid = E'113', params = E'{}', avaliable = E'false' WHERE ID = 105
29.10 18:01:24 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 113, _type => core/cache.update }
29.10 18:01:24 STATS: cache [user], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
29.10 18:01:24 STATS: cache [user], segments [3 calls, 0 hits, 2 misses]
29.10 18:01:24 STATS: cache [user], database [66 calls, 1 reads, 0 writes]
29.10 18:01:24 STATS: cache [user], lock [1 calls, 1 attempts, 0 failures]
29.10 18:01:24 STATS: cache manager [1], get [2 calls, total 0.01 sec spent, avg 2.63 ms]
29.10 18:01:24 STATS: cache manager [1], update [1 calls, total 0 sec spent, avg 0.17 ms]
29.10 18:01:24 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:01:24 TIME: core/cache.update : 0.31 ms
29.10 18:01:25 WRITEDB: UPDATE Users SET name = E'uid113', deleted = E'false', email = E'', networktype = E'  ', password = E'uid113', isbanned = E'false', regdate = E'2016-10-29 17:12:53.911759+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477750380,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}' WHERE ID = 113
29.10 18:01:29 BLOCKREMOVE: tournament 1 removed
29.10 18:01:34 BLOCKREMOVE: battle 105 removed
29.10 18:02:19 TIMER: Clans cache...
29.10 18:02:19 TIMER: Clans cache: 0ms
29.10 18:02:46 TIMER: Starting timer...
29.10 18:02:46 TIMER: Timer running...
29.10 18:02:46 DB: SELECT * FROM GameVars
29.10 18:02:46 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 18:02:46 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 18:02:46 DB: SELECT * FROM Shops WHERE ID = 1
29.10 18:02:46 TEMP: load ./tmp/quest_daily_ids
29.10 18:02:46 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
29.10 18:02:46 TEMP: save ./tmp/quest_daily_ids
29.10 18:02:46 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
29.10 18:02:46 QUEUE: vdl.0 (thread) response server.login
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
29.10 18:02:46 DB: SELECT * FROM LocalizationStrings
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 6.61 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
29.10 18:02:46 DB: SELECT * FROM GameVars
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 0.52 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
29.10 18:02:46 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 0.64 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
29.10 18:02:46 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 0.45 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
29.10 18:02:46 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 0.81 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
29.10 18:02:46 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 0.96 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/quest.getDaily
29.10 18:02:46 TIME: core/quest.getDaily : 0.02 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
29.10 18:02:46 DB: SELECT * FROM UserAttributeTypes
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 0.69 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
29.10 18:02:46 DB: SELECT * FROM UserVariableTypes
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 0.31 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
29.10 18:02:46 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 1.04 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
29.10 18:02:46 DB: SELECT * FROM ItemGroups
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 0.43 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
29.10 18:02:46 DB: SELECT * FROM Bundles ORDER BY ID
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 0.52 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
29.10 18:02:46 DB: SELECT * FROM BundleItems ORDER BY ID
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 0.57 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/shop.getList
29.10 18:02:46 TIME: core/shop.getList : 0.02 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
29.10 18:02:46 DB: SELECT * FROM EffectAttributeTypes
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 0.33 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
29.10 18:02:46 DB: SELECT * FROM Effects
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 0.31 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
29.10 18:02:46 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 0.77 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
29.10 18:02:46 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 0.59 ms
29.10 18:02:46 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
29.10 18:02:46 DB: SELECT * FROM Badges
29.10 18:02:46 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:02:46 TIME: core/server.query : 0.29 ms
29.10 18:03:20 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113', _type => core/server.query }
29.10 18:03:20 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113'
29.10 18:03:20 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:03:20 TIME: core/server.query : 1.52 ms
29.10 18:03:20 NET: vdl.0 (thread) request core/user.isOnlineID { id => 113, _type => core/user.isOnlineID }
29.10 18:03:20 QUEUE: vdl.0 (thread) response core/user.isOnlineID
29.10 18:03:20 TIME: core/user.isOnlineID : 0.07 ms
29.10 18:03:20 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 113, _type => core/cache.get }
29.10 18:03:20 READDB: SELECT * FROM Users WHERE ID = 113
29.10 18:03:20 QUEUE: vdl.0 (thread) response core/cache.get
29.10 18:03:20 TIME: core/cache.get : 2.88 ms
29.10 18:03:20 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 113, _type => core/cache.get }
29.10 18:03:20 READDB: SELECT * FROM UserQuests WHERE ID = 113
29.10 18:03:20 QUEUE: vdl.0 (thread) response core/cache.get
29.10 18:03:20 TIME: core/cache.get : 0.83 ms
29.10 18:03:20 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 113, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
29.10 18:03:20 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
29.10 18:03:20 TIME: core/user.loginPost : 0.06 ms
29.10 18:03:27 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 113, _type => core/cache.update }
29.10 18:03:27 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:03:27 TIME: core/cache.update : 0.09 ms
29.10 18:03:27 WRITEDB: UPDATE Users SET name = E'uid113', deleted = E'false', email = E'', networktype = E'  ', password = E'uid113', isbanned = E'false', regdate = E'2016-10-29 17:12:53.911759+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477750380,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}' WHERE ID = 113
29.10 18:03:46 TIMER: Clans cache...
29.10 18:03:46 TIMER: Clans cache: 0ms
29.10 18:03:46 TIMER: Check tournament...
29.10 18:03:46 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:03' OR rounddate = '2016-29-10 18:03' AND status <> 'finished'
29.10 18:03:46 TIMER: Check tournament: 1ms
29.10 18:03:49 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:03:49 DB: SELECT * FROM tournament
29.10 18:03:49 STATS: cache [tournament], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
29.10 18:03:49 STATS: cache [tournament], segments [1 calls, 0 hits, 0 misses]
29.10 18:03:49 STATS: cache [tournament], database [63 calls, 0 reads, 0 writes]
29.10 18:03:49 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
29.10 18:03:49 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:03:49 DB: SELECT name FROM users WHERE id = 107
29.10 18:03:49 DB: SELECT name FROM users WHERE id = 113
29.10 18:03:49 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 18:04, startdate => 2016-29-10 18:04 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:03:49 TIME: vdl/cache.tournament.getAvailableTournament : 6.07 ms
29.10 18:03:59 BLOCKREMOVE: tournament 1 removed
29.10 18:04:46 TIMER: Clans cache...
29.10 18:04:46 TIMER: Clans cache: 0ms
29.10 18:04:46 TIMER: Check tournament...
29.10 18:04:46 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:04' OR rounddate = '2016-29-10 18:04' AND status <> 'finished'
29.10 18:04:46 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:04:46 DB: SELECT nextval('Battle_id_seq') AS id
29.10 18:04:46 READDB: SELECT ID FROM Battle WHERE ID = 106
29.10 18:04:46 READDB: INSERT INTO Battle (ID) VALUES (106)
29.10 18:04:46 STATS: cache [battle], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
29.10 18:04:46 STATS: cache [battle], segments [1 calls, 0 hits, 0 misses]
29.10 18:04:46 STATS: cache [battle], database [121 calls, 0 reads, 0 writes]
29.10 18:04:46 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
29.10 18:04:46 READDB: SELECT * FROM Battle WHERE ID = 106
29.10 18:04:46 DB: SELECT name FROM users WHERE id=113
29.10 18:04:46 DB: SELECT name FROM users WHERE id=107
29.10 18:04:46 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => uid113, tournamentId => 1, enemy.id => 107, enemy.name => uid107, round => 1, roundDate => 2016-29-10 18:04, id => 113, enemy.num => 2, battleId => 106, player => 1 }, _isNotify => true, id => 113, _type => tournament.enemyEvent }
29.10 18:04:46 QUEUE: vdl.0 (thread) response tournament.leaveEvent { type => winGame, typeBattle => tournament, _isNotify => true, tournamentId => 1, id => 113, _type => tournament.leaveEvent, battleId => 106 }
29.10 18:04:46 TIMER: Check tournament: 48ms
29.10 18:04:51 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'active', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-29-10 18:04', roundinterval = E'1', params = E'{"params":{"usersList":[107,113],"battleActive":[106],"usersAll":[107,113]}}', rounddate = E'2016-29-10 18:04' WHERE ID = 1
29.10 18:04:53 WRITEDB: UPDATE Battle SET secondid = E'107', turnid = E'113', finished = E'false', firstid = E'113', params = E'{}', avaliable = E'false' WHERE ID = 106
29.10 18:05:00 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 106, _type => vdl/cache.battle.infoRoom }
29.10 18:05:00 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 107, firstId => 113, _type => vdl/cache.battle.infoRoom, turnId => 113 }
29.10 18:05:00 TIME: vdl/cache.battle.infoRoom : 0.11 ms
29.10 18:05:00 NET: vdl.0 (thread) request core/user.sendTo { id => 107, _type => core/user.sendTo, msg => { dice => 0, from => (0.0, 0.0), roomId => 106, name => throw, side => 2, type => battle.task, dices => 415143, messageType => battle.sendtask, to => (0.0, 0.0), _type => battle.task, diceID => 0 } }
29.10 18:05:00 QUEUE: vdl.0 (thread) response core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
29.10 18:05:00 TIME: core/user.sendTo : 0.07 ms
29.10 18:05:02 BLOCKREMOVE: tournament 1 removed
29.10 18:05:11 BLOCKREMOVE: battle 106 removed
29.10 18:05:46 TIMER: Clans cache...
29.10 18:12:35 TIMER: Starting timer...
29.10 18:12:35 TIMER: Timer running...
29.10 18:12:35 DB: SELECT * FROM GameVars
29.10 18:12:35 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 18:12:35 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 18:12:35 DB: SELECT * FROM Shops WHERE ID = 1
29.10 18:12:35 TEMP: load ./tmp/quest_daily_ids
29.10 18:12:35 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
29.10 18:12:35 TEMP: save ./tmp/quest_daily_ids
29.10 18:12:35 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
29.10 18:12:35 QUEUE: vdl.0 (thread) response server.login
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
29.10 18:12:35 DB: SELECT * FROM LocalizationStrings
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 6.16 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
29.10 18:12:35 DB: SELECT * FROM GameVars
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 0.51 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
29.10 18:12:35 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 0.61 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
29.10 18:12:35 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 0.54 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
29.10 18:12:35 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 0.45 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
29.10 18:12:35 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 0.85 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/quest.getDaily
29.10 18:12:35 TIME: core/quest.getDaily : 0.02 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
29.10 18:12:35 DB: SELECT * FROM UserAttributeTypes
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 0.28 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
29.10 18:12:35 DB: SELECT * FROM UserVariableTypes
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 0.42 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
29.10 18:12:35 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 0.97 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
29.10 18:12:35 DB: SELECT * FROM ItemGroups
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 0.42 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
29.10 18:12:35 DB: SELECT * FROM Bundles ORDER BY ID
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 0.43 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
29.10 18:12:35 DB: SELECT * FROM BundleItems ORDER BY ID
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 0.4 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/shop.getList
29.10 18:12:35 TIME: core/shop.getList : 0.02 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
29.10 18:12:35 DB: SELECT * FROM EffectAttributeTypes
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 0.29 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
29.10 18:12:35 DB: SELECT * FROM Effects
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 0.33 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
29.10 18:12:35 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 0.76 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
29.10 18:12:35 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 0.48 ms
29.10 18:12:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
29.10 18:12:35 DB: SELECT * FROM Badges
29.10 18:12:35 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:12:35 TIME: core/server.query : 0.45 ms
29.10 18:13:10 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113', _type => core/server.query }
29.10 18:13:10 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113'
29.10 18:13:10 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:13:10 TIME: core/server.query : 1.46 ms
29.10 18:13:10 NET: vdl.0 (thread) request core/user.isOnlineID { id => 113, _type => core/user.isOnlineID }
29.10 18:13:10 QUEUE: vdl.0 (thread) response core/user.isOnlineID
29.10 18:13:10 TIME: core/user.isOnlineID : 0.05 ms
29.10 18:13:10 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 113, _type => core/cache.get }
29.10 18:13:10 READDB: SELECT * FROM Users WHERE ID = 113
29.10 18:13:10 QUEUE: vdl.0 (thread) response core/cache.get
29.10 18:13:10 TIME: core/cache.get : 1.99 ms
29.10 18:13:10 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 113, _type => core/cache.get }
29.10 18:13:10 READDB: SELECT * FROM UserQuests WHERE ID = 113
29.10 18:13:10 QUEUE: vdl.0 (thread) response core/cache.get
29.10 18:13:10 TIME: core/cache.get : 0.74 ms
29.10 18:13:10 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 113, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
29.10 18:13:10 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
29.10 18:13:10 TIME: core/user.loginPost : 0.06 ms
29.10 18:13:20 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 113, _type => core/cache.update }
29.10 18:13:20 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:13:20 TIME: core/cache.update : 0.13 ms
29.10 18:13:21 WRITEDB: UPDATE Users SET name = E'uid113', deleted = E'false', email = E'', networktype = E'  ', password = E'uid113', isbanned = E'false', regdate = E'2016-10-29 17:12:53.911759+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477750380,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}' WHERE ID = 113
29.10 18:13:35 TIMER: Clans cache...
29.10 18:13:35 TIMER: Clans cache: 0ms
29.10 18:13:35 TIMER: Check tournament...
29.10 18:13:35 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:13' OR rounddate = '2016-29-10 18:13' AND status <> 'finished'
29.10 18:13:35 TIMER: Check tournament: 1ms
29.10 18:13:37 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:13:37 DB: SELECT * FROM tournament
29.10 18:13:37 STATS: cache [tournament], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
29.10 18:13:37 STATS: cache [tournament], segments [1 calls, 0 hits, 0 misses]
29.10 18:13:37 STATS: cache [tournament], database [63 calls, 0 reads, 0 writes]
29.10 18:13:37 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
29.10 18:13:37 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:13:37 DB: SELECT name FROM users WHERE id = 107
29.10 18:13:37 DB: SELECT name FROM users WHERE id = 113
29.10 18:13:37 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => [106], rounddate => 2016-29-10 18:14, startdate => 2016-29-10 18:14 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:13:37 TIME: vdl/cache.tournament.getAvailableTournament : 6.81 ms
29.10 18:13:47 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:13:47 DB: SELECT * FROM tournament
29.10 18:13:47 DB: SELECT name FROM users WHERE id = 107
29.10 18:13:47 DB: SELECT name FROM users WHERE id = 113
29.10 18:13:47 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => [106], rounddate => 2016-29-10 18:14, startdate => 2016-29-10 18:14 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:13:47 TIME: vdl/cache.tournament.getAvailableTournament : 3.2 ms
29.10 18:13:58 BLOCKREMOVE: tournament 1 removed
29.10 18:14:09 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:14:09 DB: SELECT * FROM tournament
29.10 18:14:09 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:14:09 DB: SELECT name FROM users WHERE id = 107
29.10 18:14:09 DB: SELECT name FROM users WHERE id = 113
29.10 18:14:09 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => [106], rounddate => 2016-29-10 18:14, startdate => 2016-29-10 18:14 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:14:09 TIME: vdl/cache.tournament.getAvailableTournament : 4.6 ms
29.10 18:14:20 BLOCKREMOVE: tournament 1 removed
29.10 18:14:35 TIMER: Clans cache...
29.10 18:14:35 TIMER: Clans cache: 0ms
29.10 18:14:35 TIMER: Check tournament...
29.10 18:14:35 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:14' OR rounddate = '2016-29-10 18:14' AND status <> 'finished'
29.10 18:14:35 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:14:35 DB: SELECT nextval('Battle_id_seq') AS id
29.10 18:14:35 READDB: SELECT ID FROM Battle WHERE ID = 107
29.10 18:14:35 READDB: INSERT INTO Battle (ID) VALUES (107)
29.10 18:14:35 STATS: cache [battle], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
29.10 18:14:35 STATS: cache [battle], segments [1 calls, 0 hits, 0 misses]
29.10 18:14:35 STATS: cache [battle], database [121 calls, 0 reads, 0 writes]
29.10 18:14:35 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
29.10 18:14:35 READDB: SELECT * FROM Battle WHERE ID = 107
29.10 18:14:35 DB: SELECT name FROM users WHERE id=113
29.10 18:14:35 DB: SELECT name FROM users WHERE id=107
29.10 18:14:35 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => uid113, tournamentId => 1, enemy.id => 107, enemy.name => uid107, round => 1, roundDate => 2016-29-10 18:14, id => 113, enemy.num => 2, battleId => 107, player => 1 }, _isNotify => true, id => 113, _type => tournament.enemyEvent }
29.10 18:14:35 QUEUE: vdl.0 (thread) response tournament.leaveEvent { type => winGame, typeBattle => tournament, _isNotify => true, tournamentId => 1, id => 113, _type => tournament.leaveEvent, battleId => 107 }
29.10 18:14:35 TIMER: Check tournament: 66ms
29.10 18:14:35 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 0, _type => core/cache.get }
29.10 18:14:35 STATS: cache [user], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
29.10 18:14:35 STATS: cache [user], segments [4 calls, 1 hits, 2 misses]
29.10 18:14:35 STATS: cache [user], database [121 calls, 1 reads, 1 writes]
29.10 18:14:35 STATS: cache [user], lock [2 calls, 2 attempts, 0 failures]
29.10 18:14:35 READDB: SELECT * FROM Users WHERE ID = 0
29.10 18:14:35 STATS: cache manager [1], get [3 calls, total 0 sec spent, avg 1.12 ms]
29.10 18:14:35 STATS: cache manager [1], update [1 calls, total 0 sec spent, avg 0.04 ms]
29.10 18:14:35 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => notFound, _type => core/cache.get }
29.10 18:14:35 TIME: core/cache.get : 0.86 ms
29.10 18:14:35 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 107, _type => vdl/cache.battle.infoRoom }
29.10 18:14:35 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 107, firstId => 113, _type => vdl/cache.battle.infoRoom, turnId => 113 }
29.10 18:14:35 TIME: vdl/cache.battle.infoRoom : 0.06 ms
29.10 18:14:40 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'active', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-29-10 18:14', roundinterval = E'1', params = E'{"params":{"usersList":[107,113],"battleActive":[107],"usersAll":[107,113]}}', rounddate = E'2016-29-10 18:14' WHERE ID = 1
29.10 18:14:41 WRITEDB: UPDATE Battle SET secondid = E'107', turnid = E'113', finished = E'false', firstid = E'113', params = E'{}', avaliable = E'false' WHERE ID = 107
29.10 18:14:50 BLOCKREMOVE: tournament 1 removed
29.10 18:14:59 TIMER: Starting timer...
29.10 18:14:59 TIMER: Timer running...
29.10 18:14:59 DB: SELECT * FROM GameVars
29.10 18:14:59 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 18:14:59 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 18:14:59 DB: SELECT * FROM Shops WHERE ID = 1
29.10 18:14:59 TEMP: load ./tmp/quest_daily_ids
29.10 18:14:59 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
29.10 18:14:59 TEMP: save ./tmp/quest_daily_ids
29.10 18:14:59 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
29.10 18:14:59 QUEUE: vdl.0 (thread) response server.login
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
29.10 18:14:59 DB: SELECT * FROM LocalizationStrings
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 6.35 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
29.10 18:14:59 DB: SELECT * FROM GameVars
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 0.64 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
29.10 18:14:59 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 0.76 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
29.10 18:14:59 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 0.4 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
29.10 18:14:59 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 0.56 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
29.10 18:14:59 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 0.89 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/quest.getDaily
29.10 18:14:59 TIME: core/quest.getDaily : 0.02 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
29.10 18:14:59 DB: SELECT * FROM UserAttributeTypes
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 0.67 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
29.10 18:14:59 DB: SELECT * FROM UserVariableTypes
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 0.36 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
29.10 18:14:59 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 1.3 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
29.10 18:14:59 DB: SELECT * FROM ItemGroups
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 0.41 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
29.10 18:14:59 DB: SELECT * FROM Bundles ORDER BY ID
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 0.42 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
29.10 18:14:59 DB: SELECT * FROM BundleItems ORDER BY ID
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 0.56 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/shop.getList
29.10 18:14:59 TIME: core/shop.getList : 0.02 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
29.10 18:14:59 DB: SELECT * FROM EffectAttributeTypes
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 0.32 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
29.10 18:14:59 DB: SELECT * FROM Effects
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 0.3 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
29.10 18:14:59 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 0.96 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
29.10 18:14:59 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 0.56 ms
29.10 18:14:59 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
29.10 18:14:59 DB: SELECT * FROM Badges
29.10 18:14:59 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:14:59 TIME: core/server.query : 0.29 ms
29.10 18:15:32 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113', _type => core/server.query }
29.10 18:15:32 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113'
29.10 18:15:32 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:15:32 TIME: core/server.query : 2.25 ms
29.10 18:15:32 NET: vdl.0 (thread) request core/user.isOnlineID { id => 113, _type => core/user.isOnlineID }
29.10 18:15:32 QUEUE: vdl.0 (thread) response core/user.isOnlineID
29.10 18:15:32 TIME: core/user.isOnlineID : 0.08 ms
29.10 18:15:32 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 113, _type => core/cache.get }
29.10 18:15:32 READDB: SELECT * FROM Users WHERE ID = 113
29.10 18:15:32 QUEUE: vdl.0 (thread) response core/cache.get
29.10 18:15:32 TIME: core/cache.get : 3.37 ms
29.10 18:15:32 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 113, _type => core/cache.get }
29.10 18:15:32 READDB: SELECT * FROM UserQuests WHERE ID = 113
29.10 18:15:32 QUEUE: vdl.0 (thread) response core/cache.get
29.10 18:15:32 TIME: core/cache.get : 0.96 ms
29.10 18:15:32 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 113, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
29.10 18:15:32 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
29.10 18:15:32 TIME: core/user.loginPost : 0.11 ms
29.10 18:15:39 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 113, _type => core/cache.update }
29.10 18:15:39 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:15:39 TIME: core/cache.update : 0.19 ms
29.10 18:15:40 WRITEDB: UPDATE Users SET name = E'uid113', deleted = E'false', email = E'', networktype = E'  ', password = E'uid113', isbanned = E'false', regdate = E'2016-10-29 17:12:53.911759+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477750380,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}' WHERE ID = 113
29.10 18:15:50 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:15:50 DB: SELECT * FROM tournament
29.10 18:15:50 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:15:50 DB: SELECT name FROM users WHERE id = 107
29.10 18:15:50 DB: SELECT name FROM users WHERE id = 113
29.10 18:15:50 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => [107], rounddate => 2016-29-10 18:16, startdate => 2016-29-10 18:16 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:15:50 TIME: vdl/cache.tournament.getAvailableTournament : 6.25 ms
29.10 18:15:59 TIMER: Clans cache...
29.10 18:15:59 TIMER: Clans cache: 0ms
29.10 18:15:59 TIMER: Check tournament...
29.10 18:15:59 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:15' OR rounddate = '2016-29-10 18:15' AND status <> 'finished'
29.10 18:15:59 TIMER: Check tournament: 1ms
29.10 18:16:00 BLOCKREMOVE: tournament 1 removed
29.10 18:16:59 TIMER: Clans cache...
29.10 18:16:59 TIMER: Clans cache: 0ms
29.10 18:16:59 TIMER: Check tournament...
29.10 18:16:59 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:16' OR rounddate = '2016-29-10 18:16' AND status <> 'finished'
29.10 18:16:59 STATS: cache [tournament], get [2 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
29.10 18:16:59 STATS: cache [tournament], segments [2 calls, 0 hits, 1 misses]
29.10 18:16:59 STATS: cache [tournament], database [120 calls, 1 reads, 0 writes]
29.10 18:16:59 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
29.10 18:16:59 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:16:59 DB: SELECT nextval('Battle_id_seq') AS id
29.10 18:16:59 READDB: SELECT ID FROM Battle WHERE ID = 108
29.10 18:16:59 READDB: INSERT INTO Battle (ID) VALUES (108)
29.10 18:16:59 STATS: cache [battle], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
29.10 18:16:59 STATS: cache [battle], segments [1 calls, 0 hits, 0 misses]
29.10 18:16:59 STATS: cache [battle], database [121 calls, 0 reads, 0 writes]
29.10 18:16:59 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
29.10 18:16:59 READDB: SELECT * FROM Battle WHERE ID = 108
29.10 18:16:59 DB: SELECT name FROM users WHERE id=113
29.10 18:16:59 DB: SELECT name FROM users WHERE id=107
29.10 18:16:59 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => uid113, tournamentId => 1, enemy.id => 107, enemy.name => uid107, round => 1, roundDate => 2016-29-10 18:16, id => 113, enemy.num => 2, battleId => 108, player => 1 }, _isNotify => true, id => 113, _type => tournament.enemyEvent }
29.10 18:16:59 QUEUE: vdl.0 (thread) response tournament.leaveEvent { type => winGame, typeBattle => tournament, _isNotify => true, tournamentId => 1, id => 113, _type => tournament.leaveEvent, battleId => 108 }
29.10 18:16:59 TIMER: Check tournament: 41ms
29.10 18:16:59 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 1, _type => core/cache.get }
29.10 18:16:59 STATS: cache [user], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
29.10 18:16:59 STATS: cache [user], segments [4 calls, 1 hits, 2 misses]
29.10 18:16:59 STATS: cache [user], database [121 calls, 1 reads, 1 writes]
29.10 18:16:59 STATS: cache [user], lock [2 calls, 2 attempts, 0 failures]
29.10 18:16:59 READDB: SELECT * FROM Users WHERE ID = 1
29.10 18:16:59 STATS: cache manager [1], get [3 calls, total 0 sec spent, avg 1.65 ms]
29.10 18:16:59 STATS: cache manager [1], update [1 calls, total 0 sec spent, avg 0.06 ms]
29.10 18:16:59 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => --- DEFAULT ATTRIBUTES ---, deleted => false, email => , networktype =>   , password => , isbanned => false, regdate => 2016-08-30 15:45:16.008574+03, language =>   , networkid => , params => { inventory => { list => [] }, attrs => {} }}, version => 0, id => 1 } }
29.10 18:16:59 TIME: core/cache.get : 0.98 ms
29.10 18:16:59 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 1, _type => core/cache.get }
29.10 18:16:59 STATS: cache [questdata], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
29.10 18:16:59 STATS: cache [questdata], segments [3 calls, 0 hits, 2 misses]
29.10 18:16:59 STATS: cache [questdata], database [121 calls, 1 reads, 0 writes]
29.10 18:16:59 STATS: cache [questdata], lock [2 calls, 2 attempts, 0 failures]
29.10 18:16:59 READDB: SELECT * FROM UserQuests WHERE ID = 1
29.10 18:16:59 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => notFound, _type => core/cache.get }
29.10 18:16:59 TIME: core/cache.get : 0.67 ms
29.10 18:16:59 NET: vdl.0 (thread) request core/cache.create { type => questdata, id => 1, _type => core/cache.create }
29.10 18:16:59 READDB: SELECT ID FROM UserQuests WHERE ID = 1
29.10 18:16:59 READDB: INSERT INTO UserQuests (ID) VALUES (1)
29.10 18:16:59 QUEUE: vdl.0 (thread) response core/cache.create { errorCode => ok, _type => core/cache.create }
29.10 18:16:59 TIME: core/cache.create : 6.85 ms
29.10 18:16:59 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 1, _type => core/cache.get }
29.10 18:16:59 READDB: SELECT * FROM UserQuests WHERE ID = 1
29.10 18:16:59 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 1 } }
29.10 18:16:59 TIME: core/cache.get : 0.51 ms
29.10 18:16:59 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 108, _type => vdl/cache.battle.infoRoom }
29.10 18:16:59 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 107, firstId => 113, _type => vdl/cache.battle.infoRoom, turnId => 113 }
29.10 18:16:59 TIME: vdl/cache.battle.infoRoom : 0.08 ms
29.10 18:16:59 NET: vdl.0 (thread) request vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
29.10 18:16:59 DB: SELECT * FROM tournament WHERE id = 1
29.10 18:16:59 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[107,113],"battleActive":[107],"usersAll":[107,113]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => starting, rounddate => 2016-29-10 18:16, startdate => 2016-29-10 18:16, roundinterval => 1 }
29.10 18:16:59 TIME: vdl/cache.tournament.getTournament : 0.58 ms
29.10 18:16:59 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 108, _type => vdl/cache.battle.infoRoom }
29.10 18:16:59 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 107, firstId => 113, _type => vdl/cache.battle.infoRoom, turnId => 113 }
29.10 18:16:59 TIME: vdl/cache.battle.infoRoom : 0.08 ms
29.10 18:16:59 NET: vdl.0 (thread) request vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
29.10 18:16:59 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getBattlesTournaments [108]
29.10 18:16:59 TIME: vdl/cache.tournament.getBattlesTournaments : 0.08 ms
29.10 18:16:59 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
29.10 18:16:59 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [107,113] }
29.10 18:16:59 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.1 ms
29.10 18:16:59 NET: vdl.0 (thread) request vdl/cache.battle.finishRoom { roomId => 108, _type => vdl/cache.battle.finishRoom }
29.10 18:16:59 QUEUE: vdl.0 (thread) response vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
29.10 18:16:59 TIME: vdl/cache.battle.finishRoom : 0.07 ms
29.10 18:16:59 NET: vdl.0 (thread) request vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [108] }
29.10 18:16:59 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
29.10 18:16:59 TIME: vdl/cache.tournament.setBattlesTournaments : 0.15 ms
29.10 18:16:59 NET: vdl.0 (thread) request vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [107], _type => vdl/cache.tournament.setUsersTournament }
29.10 18:16:59 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
29.10 18:16:59 TIME: vdl/cache.tournament.setUsersTournament : 0.3 ms
29.10 18:16:59 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [{ winner => 1, round => 1, player1 => 113, player2 => 107 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
29.10 18:16:59 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 1, round => 1, player1 => 113, player2 => 107 },{ winner => -1, round => 2, player1 => 1, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 18:16:59 TIME: vdl/cache.tournament.setGrid : 0.09 ms
29.10 18:16:59 NET: vdl.0 (thread) request vdl/cache.tournament.addRound { dateRound => 2016-29-10 18:16, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
29.10 18:16:59 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
29.10 18:16:59 TIME: vdl/cache.tournament.addRound : 0.11 ms
29.10 18:16:59 NET: vdl.0 (thread) request vdl/cache.tournament.finish { winner => 1, tournamentId => 1, _type => vdl/cache.tournament.finish }
29.10 18:16:59 QUEUE: vdl.0 (thread) response vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
29.10 18:16:59 TIME: vdl/cache.tournament.finish : 0.06 ms
29.10 18:17:04 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'1', status = E'finished', type = E'once', repeatinterval = E'0', round = E'2', startdate = E'2016-29-10 18:16', roundinterval = E'1', params = E'{"params":{"battleFinished":[108],"usersList":[107],"battleActive":[],"usersAll":[107,113]}}', rounddate = E'2016-29-10 18:16' WHERE ID = 1
29.10 18:17:04 NET: vdl.0 (thread) request core/cache.update { diff => {params => { effects => { list => [] } }}, type => user, unlock => false, id => 1, _type => core/cache.update }
29.10 18:17:04 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:17:04 TIME: core/cache.update : 0.08 ms
29.10 18:17:05 WRITEDB: UPDATE Users SET name = E'--- DEFAULT ATTRIBUTES ---', deleted = E'false', email = E'', networktype = E'  ', password = E'', isbanned = E'false', regdate = E'2016-08-30 15:45:16.008574+03', language = E'  ', networkid = E'', params = E'{"inventory":{"list":[]},"attrs":{},"effects":{"list":[]}}' WHERE ID = 1
29.10 18:17:05 WRITEDB: UPDATE Battle SET secondid = E'107', turnid = E'113', finished = E'true', firstid = E'113', params = E'{}', avaliable = E'false' WHERE ID = 108
29.10 18:17:14 BLOCKREMOVE: tournament 1 removed
29.10 18:17:15 BLOCKREMOVE: battle 108 removed
29.10 18:20:30 TIMER: Starting timer...
29.10 18:20:30 TIMER: Timer running...
29.10 18:20:30 DB: SELECT * FROM GameVars
29.10 18:20:30 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 18:20:30 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 18:20:30 DB: SELECT * FROM Shops WHERE ID = 1
29.10 18:20:30 TEMP: load ./tmp/quest_daily_ids
29.10 18:20:30 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
29.10 18:20:30 TEMP: save ./tmp/quest_daily_ids
29.10 18:20:30 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
29.10 18:20:30 QUEUE: vdl.0 (thread) response server.login
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
29.10 18:20:30 DB: SELECT * FROM LocalizationStrings
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 5.64 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
29.10 18:20:30 DB: SELECT * FROM GameVars
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 0.84 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
29.10 18:20:30 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 0.82 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
29.10 18:20:30 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 0.43 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
29.10 18:20:30 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 0.54 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
29.10 18:20:30 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 0.87 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/quest.getDaily
29.10 18:20:30 TIME: core/quest.getDaily : 0.02 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
29.10 18:20:30 DB: SELECT * FROM UserAttributeTypes
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 0.38 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
29.10 18:20:30 DB: SELECT * FROM UserVariableTypes
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 0.29 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
29.10 18:20:30 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 0.95 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
29.10 18:20:30 DB: SELECT * FROM ItemGroups
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 0.43 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
29.10 18:20:30 DB: SELECT * FROM Bundles ORDER BY ID
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 0.44 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
29.10 18:20:30 DB: SELECT * FROM BundleItems ORDER BY ID
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 0.49 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/shop.getList
29.10 18:20:30 TIME: core/shop.getList : 0.02 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
29.10 18:20:30 DB: SELECT * FROM EffectAttributeTypes
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 0.29 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
29.10 18:20:30 DB: SELECT * FROM Effects
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 0.28 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
29.10 18:20:30 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 0.94 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
29.10 18:20:30 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 0.97 ms
29.10 18:20:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
29.10 18:20:30 DB: SELECT * FROM Badges
29.10 18:20:30 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:20:30 TIME: core/server.query : 0.55 ms
29.10 18:20:30 TIMER: Clans cache...
29.10 18:20:30 TIMER: Clans cache: 0ms
29.10 18:20:30 TIMER: Check tournament...
29.10 18:20:30 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:21' OR rounddate = '2016-29-10 18:21' AND status <> 'finished'
29.10 18:20:30 TIMER: Check tournament: 1ms
29.10 18:20:30 TIMER: Clans cache...
29.10 18:20:30 TIMER: Clans cache: 0ms
29.10 18:20:30 TIMER: Check tournament...
29.10 18:20:30 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:22' OR rounddate = '2016-29-10 18:22' AND status <> 'finished'
29.10 18:20:30 TIMER: Check tournament: 1ms
29.10 18:20:30 TIMER: Clans cache...
29.10 18:20:30 TIMER: Clans cache: 0ms
29.10 18:20:30 TIMER: Check tournament...
29.10 18:20:30 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:23' OR rounddate = '2016-29-10 18:23' AND status <> 'finished'
29.10 18:20:30 TIMER: Check tournament: 1ms
29.10 18:20:30 TIMER: Clans cache...
29.10 18:20:30 TIMER: Clans c29.10 18:29:39 TIMER: Starting timer...
29.10 18:29:39 TIMER: Timer running...
29.10 18:29:39 DB: SELECT * FROM GameVars
29.10 18:29:39 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 18:29:39 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 18:29:39 DB: SELECT * FROM Shops WHERE ID = 1
29.10 18:29:39 TEMP: load ./tmp/quest_daily_ids
29.10 18:29:39 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
29.10 18:29:39 TEMP: save ./tmp/quest_daily_ids
29.10 18:29:39 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
29.10 18:29:39 QUEUE: vdl.0 (thread) response server.login
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
29.10 18:29:39 DB: SELECT * FROM LocalizationStrings
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 6.27 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
29.10 18:29:39 DB: SELECT * FROM GameVars
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 0.56 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
29.10 18:29:39 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 0.59 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
29.10 18:29:39 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 0.51 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
29.10 18:29:39 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 0.47 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
29.10 18:29:39 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 0.99 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/quest.getDaily
29.10 18:29:39 TIME: core/quest.getDaily : 0.02 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
29.10 18:29:39 DB: SELECT * FROM UserAttributeTypes
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 0.32 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
29.10 18:29:39 DB: SELECT * FROM UserVariableTypes
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 0.51 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
29.10 18:29:39 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 1.03 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
29.10 18:29:39 DB: SELECT * FROM ItemGroups
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 0.44 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
29.10 18:29:39 DB: SELECT * FROM Bundles ORDER BY ID
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 0.4 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
29.10 18:29:39 DB: SELECT * FROM BundleItems ORDER BY ID
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 0.69 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/shop.getList
29.10 18:29:39 TIME: core/shop.getList : 0.02 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
29.10 18:29:39 DB: SELECT * FROM EffectAttributeTypes
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 0.29 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
29.10 18:29:39 DB: SELECT * FROM Effects
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 0.27 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
29.10 18:29:39 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 0.73 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
29.10 18:29:39 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 0.83 ms
29.10 18:29:39 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
29.10 18:29:39 DB: SELECT * FROM Badges
29.10 18:29:39 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:29:39 TIME: core/server.query : 0.5 ms
29.10 18:30:28 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113', _type => core/server.query }
29.10 18:30:28 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113'
29.10 18:30:28 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:30:28 TIME: core/server.query : 2.4 ms
29.10 18:30:28 NET: vdl.0 (thread) request core/user.isOnlineID { id => 113, _type => core/user.isOnlineID }
29.10 18:30:28 QUEUE: vdl.0 (thread) response core/user.isOnlineID
29.10 18:30:28 TIME: core/user.isOnlineID : 0.08 ms
29.10 18:30:28 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 113, _type => core/cache.get }
29.10 18:30:28 READDB: SELECT * FROM Users WHERE ID = 113
29.10 18:30:28 QUEUE: vdl.0 (thread) response core/cache.get
29.10 18:30:28 TIME: core/cache.get : 3.68 ms
29.10 18:30:28 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 113, _type => core/cache.get }
29.10 18:30:28 READDB: SELECT * FROM UserQuests WHERE ID = 113
29.10 18:30:28 QUEUE: vdl.0 (thread) response core/cache.get
29.10 18:30:28 TIME: core/cache.get : 1.16 ms
29.10 18:30:28 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 113, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
29.10 18:30:28 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
29.10 18:30:28 TIME: core/user.loginPost : 0.09 ms
29.10 18:30:35 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 113, _type => core/cache.update }
29.10 18:30:35 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:30:35 TIME: core/cache.update : 0.17 ms
29.10 18:30:35 WRITEDB: UPDATE Users SET name = E'uid113', deleted = E'false', email = E'', networktype = E'  ', password = E'uid113', isbanned = E'false', regdate = E'2016-10-29 17:12:53.911759+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477750380,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}' WHERE ID = 113
29.10 18:30:40 TIMER: Clans cache...
29.10 18:30:40 TIMER: Clans cache: 0ms
29.10 18:30:40 TIMER: Check tournament...
29.10 18:30:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:30' OR rounddate = '2016-29-10 18:30' AND status <> 'finished'
29.10 18:30:40 TIMER: Check tournament: 1ms
29.10 18:30:49 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:30:49 DB: SELECT * FROM tournament
29.10 18:30:49 STATS: cache [tournament], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
29.10 18:30:49 STATS: cache [tournament], segments [1 calls, 0 hits, 0 misses]
29.10 18:30:49 STATS: cache [tournament], database [70 calls, 0 reads, 0 writes]
29.10 18:30:49 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
29.10 18:30:49 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:30:49 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => strating, userList => [], battleActive => null, rounddate => 2016-29-10 18:33, startdate => 2016-29-10 18:33 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:30:49 TIME: vdl/cache.tournament.getAvailableTournament : 2.13 ms
29.10 18:30:56 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:30:56 DB: SELECT * FROM tournament
29.10 18:30:56 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => strating, userList => [], battleActive => null, rounddate => 2016-29-10 18:33, startdate => 2016-29-10 18:33 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:30:56 TIME: vdl/cache.tournament.getAvailableTournament : 1.29 ms
29.10 18:31:07 BLOCKREMOVE: tournament 1 removed
29.10 18:31:11 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=113 OR secondid=113 AND finished <> true, _type => core/server.query }
29.10 18:31:11 DB: SELECT id FROM battle WHERE firstid=113 OR secondid=113 AND finished <> true
29.10 18:31:11 QUEUE: vdl.0 (thread) response core/server.query { list => {{ id => 101 }, { id => 102 }, { id => 103 }, { id => 104 }, { id => 105 }, { id => 106 }, { id => 107 }, { id => 108 }}, errorCode => ok, _type => core/server.query }
29.10 18:31:11 TIME: core/server.query : 1.26 ms
29.10 18:31:11 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 108, _type => vdl/cache.battle.infoRoom }
29.10 18:31:11 STATS: cache [battle], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
29.10 18:31:11 STATS: cache [battle], segments [1 calls, 0 hits, 0 misses]
29.10 18:31:11 STATS: cache [battle], database [92 calls, 0 reads, 0 writes]
29.10 18:31:11 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
29.10 18:31:11 READDB: SELECT * FROM Battle WHERE ID = 108
29.10 18:31:11 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 107, firstId => 113, _type => vdl/cache.battle.infoRoom, turnId => 113 }
29.10 18:31:11 TIME: vdl/cache.battle.infoRoom : 1.21 ms
29.10 18:31:11 NET: vdl.0 (thread) request vdl/cache.battle.deleteRoom { roomId => 108, _type => vdl/cache.battle.deleteRoom }
29.10 18:31:11 ROOM: deleted room 108
29.10 18:31:11 DB: DELETE FROM Battle WHERE ID = 108
29.10 18:31:11 QUEUE: vdl.0 (thread) response vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
29.10 18:31:11 TIME: vdl/cache.battle.deleteRoom : 18.91 ms
29.10 18:31:11 NET: vdl.0 (thread) request core/user.sendTo { id => 107, _type => core/user.sendTo, msg => { _type => battle.end } }
29.10 18:31:11 QUEUE: vdl.0 (thread) response core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
29.10 18:31:11 TIME: core/user.sendTo : 0.07 ms
29.10 18:31:11 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 113, _type => core/cache.update }
29.10 18:31:11 STATS: cache [user], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
29.10 18:31:11 STATS: cache [user], segments [4 calls, 1 hits, 2 misses]
29.10 18:31:11 STATS: cache [user], database [92 calls, 1 reads, 1 writes]
29.10 18:31:11 STATS: cache [user], lock [1 calls, 1 attempts, 0 failures]
29.10 18:31:11 STATS: cache manager [1], get [2 calls, total 0 sec spent, avg 2.33 ms]
29.10 18:31:11 STATS: cache manager [1], update [2 calls, total 0 sec spent, avg 0.11 ms]
29.10 18:31:11 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.10 18:31:11 TIME: core/cache.update : 0.3 ms
29.10 18:31:11 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 113, _type => core/cache.update }
29.10 18:31:11 STATS: cache [questdata], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
29.10 18:31:11 STATS: cache [questdata], segments [3 calls, 0 hits, 2 misses]
29.10 18:31:11 STATS: cache [questdata], database [92 calls, 1 reads, 0 writes]
29.10 18:31:11 STATS: cache [questdata], lock [1 calls, 1 attempts, 0 failures]
29.10 18:31:11 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:31:11 TIME: core/cache.update : 0.15 ms
29.10 18:31:11 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 113, _type => core/user.logoutPost }
29.10 18:31:11 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 18:31:11 TIME: core/user.logoutPost : 0.04 ms
29.10 18:31:12 WRITEDB: UPDATE Users SET name = E'uid113', deleted = E'false', email = E'', networktype = E'  ', password = E'uid113', isbanned = E'false', regdate = E'2016-10-29 17:12:53.911759+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477750380,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}' WHERE ID = 113
29.10 18:31:12 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 113
29.10 18:31:22 BLOCKREMOVE: user 113 removed
29.10 18:31:22 BLOCKREMOVE: questdata 113 removed
29.10 18:31:22 BLOCKREMOVE: battle 108 removed
29.10 18:31:38 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113', _type => core/server.query }
29.10 18:31:38 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113'
29.10 18:31:38 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid113, networkid => , isbanned => false, id => 113 }}, errorCode => ok, _type => core/server.query }
29.10 18:31:38 TIME: core/server.query : 1.31 ms
29.10 18:31:38 NET: vdl.0 (thread) request core/user.isOnlineID { id => 113, _type => core/user.isOnlineID }
29.10 18:31:38 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.10 18:31:38 TIME: core/user.isOnlineID : 0.07 ms
29.10 18:31:38 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 113, _type => core/cache.get }
29.10 18:31:38 READDB: SELECT * FROM Users WHERE ID = 113
29.10 18:31:38 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid113, deleted => false, email => , networktype =>   , password => uid113, isbanned => false, regdate => 2016-10-29 17:12:53.911759+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477750380, lastLoginDate => 303, lastLoadDate => 1030 }, effects => { list => [] } }}, version => 0, id => 113 } }
29.10 18:31:38 TIME: core/cache.get : 0.91 ms
29.10 18:31:38 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 113, _type => core/cache.get }
29.10 18:31:38 READDB: SELECT * FROM UserQuests WHERE ID = 113
29.10 18:31:38 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 113 } }
29.10 18:31:38 TIME: core/cache.get : 0.6 ms
29.10 18:31:38 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 113, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
29.10 18:31:38 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
29.10 18:31:38 TIME: core/user.loginPost : 0.05 ms
29.10 18:31:40 TIMER: Clans cache...
29.10 18:31:40 TIMER: Clans cache: 0ms
29.10 18:31:40 TIMER: Check tournament...
29.10 18:31:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:31' OR rounddate = '2016-29-10 18:31' AND status <> 'finished'
29.10 18:31:40 TIMER: Check tournament: 0ms
29.10 18:31:45 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 113, _type => core/cache.update }
29.10 18:31:45 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:31:45 TIME: core/cache.update : 0.1 ms
29.10 18:31:46 WRITEDB: UPDATE Users SET name = E'uid113', deleted = E'false', email = E'', networktype = E'  ', password = E'uid113', isbanned = E'false', regdate = E'2016-10-29 17:12:53.911759+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477750380,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}' WHERE ID = 113
29.10 18:31:49 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:31:49 DB: SELECT * FROM tournament
29.10 18:31:49 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:31:49 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => strating, userList => [], battleActive => null, rounddate => 2016-29-10 18:33, startdate => 2016-29-10 18:33 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:31:49 TIME: vdl/cache.tournament.getAvailableTournament : 2.6 ms
29.10 18:32:00 BLOCKREMOVE: tournament 1 removed
29.10 18:32:07 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:32:07 DB: SELECT * FROM tournament
29.10 18:32:07 STATS: cache [tournament], get [4 calls, 1 cache hits, 2 cache misses, 0 same version, 0 not found]
29.10 18:32:07 STATS: cache [tournament], segments [4 calls, 1 hits, 2 misses]
29.10 18:32:07 STATS: cache [tournament], database [148 calls, 2 reads, 0 writes]
29.10 18:32:07 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
29.10 18:32:07 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:32:07 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => strating, userList => [], battleActive => null, rounddate => 2016-29-10 18:33, startdate => 2016-29-10 18:33 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:32:07 TIME: vdl/cache.tournament.getAvailableTournament : 2.12 ms
29.10 18:32:18 BLOCKREMOVE: tournament 1 removed
29.10 18:32:32 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:32:32 DB: SELECT * FROM tournament
29.10 18:32:32 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:32:32 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => strating, userList => [], battleActive => null, rounddate => 2016-29-10 18:33, startdate => 2016-29-10 18:33 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:32:32 TIME: vdl/cache.tournament.getAvailableTournament : 2.24 ms
29.10 18:32:39 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=113 OR secondid=113 AND finished <> true, _type => core/server.query }
29.10 18:32:39 DB: SELECT id FROM battle WHERE firstid=113 OR secondid=113 AND finished <> true
29.10 18:32:39 QUEUE: vdl.0 (thread) response core/server.query { list => {{ id => 101 }, { id => 102 }, { id => 103 }, { id => 104 }, { id => 105 }, { id => 106 }, { id => 107 }}, errorCode => ok, _type => core/server.query }
29.10 18:32:39 TIME: core/server.query : 1.2 ms
29.10 18:32:39 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 107, _type => vdl/cache.battle.infoRoom }
29.10 18:32:39 STATS: cache [battle], get [2 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
29.10 18:32:39 STATS: cache [battle], segments [3 calls, 1 hits, 1 misses]
29.10 18:32:39 STATS: cache [battle], database [180 calls, 1 reads, 0 writes]
29.10 18:32:39 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
29.10 18:32:39 READDB: SELECT * FROM Battle WHERE ID = 107
29.10 18:32:39 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 107, firstId => 113, _type => vdl/cache.battle.infoRoom, turnId => 113 }
29.10 18:32:39 TIME: vdl/cache.battle.infoRoom : 0.65 ms
29.10 18:32:39 NET: vdl.0 (thread) request vdl/cache.battle.deleteRoom { roomId => 107, _type => vdl/cache.battle.deleteRoom }
29.10 18:32:39 ROOM: deleted room 107
29.10 18:32:39 DB: DELETE FROM Battle WHERE ID = 107
29.10 18:32:39 QUEUE: vdl.0 (thread) response vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
29.10 18:32:39 TIME: vdl/cache.battle.deleteRoom : 20.13 ms
29.10 18:32:39 NET: vdl.0 (thread) request core/user.sendTo { id => 107, _type => core/user.sendTo, msg => { _type => battle.end } }
29.10 18:32:39 QUEUE: vdl.0 (thread) response core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
29.10 18:32:39 TIME: core/user.sendTo : 0.07 ms
29.10 18:32:39 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 113, _type => core/cache.update }
29.10 18:32:39 STATS: cache [user], get [2 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
29.10 18:32:39 STATS: cache [user], segments [9 calls, 4 hits, 4 misses]
29.10 18:32:39 STATS: cache [user], database [180 calls, 2 reads, 3 writes]
29.10 18:32:39 STATS: cache [user], lock [2 calls, 2 attempts, 0 failures]
29.10 18:32:39 STATS: cache manager [1], get [4 calls, total 0.01 sec spent, avg 1.48 ms]
29.10 18:32:39 STATS: cache manager [1], update [5 calls, total 0 sec spent, avg 0.11 ms]
29.10 18:32:39 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.10 18:32:39 TIME: core/cache.update : 0.29 ms
29.10 18:32:39 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 113, _type => core/cache.update }
29.10 18:32:39 STATS: cache [questdata], get [2 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
29.10 18:32:39 STATS: cache [questdata], segments [7 calls, 2 hits, 4 misses]
29.10 18:32:39 STATS: cache [questdata], database [180 calls, 2 reads, 1 writes]
29.10 18:32:39 STATS: cache [questdata], lock [2 calls, 2 attempts, 0 failures]
29.10 18:32:39 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:32:39 TIME: core/cache.update : 0.2 ms
29.10 18:32:39 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 113, _type => core/user.logoutPost }
29.10 18:32:39 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 18:32:39 TIME: core/user.logoutPost : 0.07 ms
29.10 18:32:40 TIMER: Clans cache...
29.10 18:32:40 TIMER: Clans cache: 0ms
29.10 18:32:40 TIMER: Check tournament...
29.10 18:32:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:32' OR rounddate = '2016-29-10 18:32' AND status <> 'finished'
29.10 18:32:40 TIMER: Check tournament: 0ms
29.10 18:32:40 WRITEDB: UPDATE Users SET name = E'uid113', deleted = E'false', email = E'', networktype = E'  ', password = E'uid113', isbanned = E'false', regdate = E'2016-10-29 17:12:53.911759+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477750380,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}' WHERE ID = 113
29.10 18:32:40 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 113
29.10 18:32:43 BLOCKREMOVE: tournament 1 removed
29.10 18:32:50 BLOCKREMOVE: user 113 removed
29.10 18:32:50 BLOCKREMOVE: questdata 113 removed
29.10 18:32:50 BLOCKREMOVE: battle 107 removed
29.10 18:32:52 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
29.10 18:32:52 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
29.10 18:32:52 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
29.10 18:32:52 TIME: core/server.query : 1.15 ms
29.10 18:32:52 NET: vdl.0 (thread) request core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
29.10 18:32:52 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.10 18:32:52 TIME: core/user.isOnlineID : 0.11 ms
29.10 18:32:52 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
29.10 18:32:52 READDB: SELECT * FROM Users WHERE ID = 107
29.10 18:32:52 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477748429, lastLoginDate => 303, lastLoadDate => 1030 }, effects => { list => [] } }}, version => 0, id => 107 } }
29.10 18:32:52 TIME: core/cache.get : 1.67 ms
29.10 18:32:52 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
29.10 18:32:52 READDB: SELECT * FROM UserQuests WHERE ID = 107
29.10 18:32:52 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
29.10 18:32:52 TIME: core/cache.get : 0.84 ms
29.10 18:32:52 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
29.10 18:32:52 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
29.10 18:32:52 TIME: core/user.loginPost : 0.12 ms
29.10 18:33:00 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
29.10 18:33:00 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:33:00 TIME: core/cache.update : 0.18 ms
29.10 18:33:00 WRITEDB: UPDATE Users SET name = E'uid107', deleted = E'false', email = E'', networktype = E'  ', password = E'uid107', isbanned = E'false', regdate = E'2016-10-28 16:37:18.693533+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477748429,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}' WHERE ID = 107
29.10 18:33:05 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:33:05 DB: SELECT * FROM tournament
29.10 18:33:05 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:33:05 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => strating, userList => [], battleActive => null, rounddate => 2016-29-10 18:33, startdate => 2016-29-10 18:33 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:33:05 TIME: vdl/cache.tournament.getAvailableTournament : 1.36 ms
29.10 18:33:16 BLOCKREMOVE: tournament 1 removed
29.10 18:33:17 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113', _type => core/server.query }
29.10 18:33:17 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113'
29.10 18:33:17 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid113, networkid => , isbanned => false, id => 113 }}, errorCode => ok, _type => core/server.query }
29.10 18:33:17 TIME: core/server.query : 0.9 ms
29.10 18:33:17 NET: vdl.0 (thread) request core/user.isOnlineID { id => 113, _type => core/user.isOnlineID }
29.10 18:33:17 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.10 18:33:17 TIME: core/user.isOnlineID : 0.09 ms
29.10 18:33:17 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 113, _type => core/cache.get }
29.10 18:33:18 READDB: SELECT * FROM Users WHERE ID = 113
29.10 18:33:18 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid113, deleted => false, email => , networktype =>   , password => uid113, isbanned => false, regdate => 2016-10-29 17:12:53.911759+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477750380, lastLoginDate => 303, lastLoadDate => 1030 }, effects => { list => [] } }}, version => 0, id => 113 } }
29.10 18:33:18 TIME: core/cache.get : 1.6 ms
29.10 18:33:18 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 113, _type => core/cache.get }
29.10 18:33:18 READDB: SELECT * FROM UserQuests WHERE ID = 113
29.10 18:33:18 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 113 } }
29.10 18:33:18 TIME: core/cache.get : 0.97 ms
29.10 18:33:18 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 113, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
29.10 18:33:18 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
29.10 18:33:18 TIME: core/user.loginPost : 0.09 ms
29.10 18:33:25 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 113, _type => core/cache.update }
29.10 18:33:25 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:33:25 TIME: core/cache.update : 0.09 ms
29.10 18:33:25 WRITEDB: UPDATE Users SET name = E'uid113', deleted = E'false', email = E'', networktype = E'  ', password = E'uid113', isbanned = E'false', regdate = E'2016-10-29 17:12:53.911759+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477750380,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}' WHERE ID = 113
29.10 18:33:40 TIMER: Clans cache...
29.10 18:33:40 TIMER: Clans cache: 0ms
29.10 18:33:40 TIMER: Check tournament...
29.10 18:33:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:33' OR rounddate = '2016-29-10 18:33' AND status <> 'finished'
29.10 18:33:40 STATS: cache [tournament], get [7 calls, 1 cache hits, 5 cache misses, 0 same version, 0 not found]
29.10 18:33:40 STATS: cache [tournament], segments [7 calls, 1 hits, 5 misses]
29.10 18:33:40 STATS: cache [tournament], database [240 calls, 5 reads, 0 writes]
29.10 18:33:40 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
29.10 18:33:40 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:33:40 TIMER: Check tournament: 1ms
29.10 18:33:50 BLOCKREMOVE: tournament 1 removed
29.10 18:34:37 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:34:37 DB: SELECT * FROM tournament
29.10 18:34:37 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:34:37 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-29-10 18:35, startdate => 2016-29-10 18:35 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:34:37 TIME: vdl/cache.tournament.getAvailableTournament : 1.74 ms
29.10 18:34:40 TIMER: Clans cache...
29.10 18:34:40 TIMER: Clans cache: 0ms
29.10 18:34:40 TIMER: Check tournament...
29.10 18:34:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:34' OR rounddate = '2016-29-10 18:34' AND status <> 'finished'
29.10 18:34:40 TIMER: Check tournament: 0ms
29.10 18:34:40 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 107, tournament => 1, _type => vdl/cache.tournament.addUsers }
29.10 18:34:40 STATS: cache [tournament], get [9 calls, 1 cache hits, 7 cache misses, 0 same version, 0 not found]
29.10 18:34:40 STATS: cache [tournament], segments [9 calls, 1 hits, 7 misses]
29.10 18:34:40 STATS: cache [tournament], database [301 calls, 7 reads, 0 writes]
29.10 18:34:40 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
29.10 18:34:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 18:34:40 TIME: vdl/cache.tournament.addUsers : 0.46 ms
29.10 18:34:40 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:34:40 DB: SELECT * FROM tournament
29.10 18:34:40 DB: SELECT name FROM users WHERE id = 107
29.10 18:34:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 }], battleActive => null, rounddate => 2016-29-10 18:35, startdate => 2016-29-10 18:35 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:34:40 TIME: vdl/cache.tournament.getAvailableTournament : 1.45 ms
29.10 18:34:43 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-29-10 18:35', roundinterval = E'1', params = E'{"params":{"usersList":[107],"usersAll":[107]}}', rounddate = E'2016-29-10 18:35' WHERE ID = 1
29.10 18:34:44 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:34:44 DB: SELECT * FROM tournament
29.10 18:34:44 DB: SELECT name FROM users WHERE id = 107
29.10 18:34:44 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 }], battleActive => null, rounddate => 2016-29-10 18:35, startdate => 2016-29-10 18:35 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:34:44 TIME: vdl/cache.tournament.getAvailableTournament : 2.02 ms
29.10 18:34:48 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 113, tournament => 1, _type => vdl/cache.tournament.addUsers }
29.10 18:34:48 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 18:34:48 TIME: vdl/cache.tournament.addUsers : 0.23 ms
29.10 18:34:48 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:34:48 DB: SELECT * FROM tournament
29.10 18:34:48 DB: SELECT name FROM users WHERE id = 107
29.10 18:34:48 DB: SELECT name FROM users WHERE id = 113
29.10 18:34:48 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 18:35, startdate => 2016-29-10 18:35 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:34:48 TIME: vdl/cache.tournament.getAvailableTournament : 1.76 ms
29.10 18:34:49 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-29-10 18:35', roundinterval = E'1', params = E'{"params":{"usersList":[107,113],"usersAll":[107,113]}}', rounddate = E'2016-29-10 18:35' WHERE ID = 1
29.10 18:34:53 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=113 OR secondid=113 AND finished <> true, _type => core/server.query }
29.10 18:34:53 DB: SELECT id FROM battle WHERE firstid=113 OR secondid=113 AND finished <> true
29.10 18:34:53 QUEUE: vdl.0 (thread) response core/server.query { list => {{ id => 101 }, { id => 102 }, { id => 103 }, { id => 104 }, { id => 105 }, { id => 106 }}, errorCode => ok, _type => core/server.query }
29.10 18:34:53 TIME: core/server.query : 0.86 ms
29.10 18:34:53 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 106, _type => vdl/cache.battle.infoRoom }
29.10 18:34:53 STATS: cache [battle], get [3 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
29.10 18:34:53 STATS: cache [battle], segments [5 calls, 2 hits, 2 misses]
29.10 18:34:53 STATS: cache [battle], database [313 calls, 2 reads, 0 writes]
29.10 18:34:53 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
29.10 18:34:53 READDB: SELECT * FROM Battle WHERE ID = 106
29.10 18:34:53 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 107, firstId => 113, _type => vdl/cache.battle.infoRoom, turnId => 113 }
29.10 18:34:53 TIME: vdl/cache.battle.infoRoom : 1.07 ms
29.10 18:34:53 NET: vdl.0 (thread) request vdl/cache.battle.deleteRoom { roomId => 106, _type => vdl/cache.battle.deleteRoom }
29.10 18:34:53 ROOM: deleted room 106
29.10 18:34:53 DB: DELETE FROM Battle WHERE ID = 106
29.10 18:34:53 QUEUE: vdl.0 (thread) response vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
29.10 18:34:53 TIME: vdl/cache.battle.deleteRoom : 25.52 ms
29.10 18:34:53 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 113, _type => core/cache.update }
29.10 18:34:53 STATS: cache [user], get [4 calls, 0 cache hits, 4 cache misses, 0 same version, 0 not found]
29.10 18:34:53 STATS: cache [user], segments [17 calls, 8 hits, 8 misses]
29.10 18:34:53 STATS: cache [user], database [313 calls, 4 reads, 6 writes]
29.10 18:34:53 STATS: cache [user], lock [4 calls, 4 attempts, 0 failures]
29.10 18:34:53 STATS: cache manager [1], get [8 calls, total 0.01 sec spent, avg 1.26 ms]
29.10 18:34:53 STATS: cache manager [1], update [9 calls, total 0 sec spent, avg 0.11 ms]
29.10 18:34:53 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.10 18:34:53 TIME: core/cache.update : 0.38 ms
29.10 18:34:53 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 113, _type => core/cache.update }
29.10 18:34:53 STATS: cache [questdata], get [4 calls, 0 cache hits, 4 cache misses, 0 same version, 0 not found]
29.10 18:34:53 STATS: cache [questdata], segments [13 calls, 4 hits, 8 misses]
29.10 18:34:53 STATS: cache [questdata], database [313 calls, 4 reads, 2 writes]
29.10 18:34:53 STATS: cache [questdata], lock [4 calls, 4 attempts, 0 failures]
29.10 18:34:53 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:34:53 TIME: core/cache.update : 0.38 ms
29.10 18:34:53 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 113, _type => core/user.logoutPost }
29.10 18:34:53 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 18:34:53 TIME: core/user.logoutPost : 0.07 ms
29.10 18:34:53 WRITEDB: UPDATE Users SET name = E'uid113', deleted = E'false', email = E'', networktype = E'  ', password = E'uid113', isbanned = E'false', regdate = E'2016-10-29 17:12:53.911759+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477750380,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}' WHERE ID = 113
29.10 18:34:53 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 113
29.10 18:34:59 BLOCKREMOVE: tournament 1 removed
29.10 18:35:03 BLOCKREMOVE: user 113 removed
29.10 18:35:03 BLOCKREMOVE: questdata 113 removed
29.10 18:35:03 BLOCKREMOVE: battle 106 removed
29.10 18:35:29 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:35:29 DB: SELECT * FROM tournament
29.10 18:35:29 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:35:29 DB: SELECT name FROM users WHERE id = 107
29.10 18:35:29 DB: SELECT name FROM users WHERE id = 113
29.10 18:35:29 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 18:35, startdate => 2016-29-10 18:35 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:35:29 TIME: vdl/cache.tournament.getAvailableTournament : 4.04 ms
29.10 18:35:40 TIMER: Clans cache...
29.10 18:35:40 TIMER: Clans cache: 0ms
29.10 18:35:40 TIMER: Check tournament...
29.10 18:35:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:35' OR rounddate = '2016-29-10 18:35' AND status <> 'finished'
29.10 18:35:40 DB: SELECT nextval('Battle_id_seq') AS id
29.10 18:35:40 READDB: SELECT ID FROM Battle WHERE ID = 109
29.10 18:35:40 READDB: INSERT INTO Battle (ID) VALUES (109)
29.10 18:35:40 READDB: SELECT * FROM Battle WHERE ID = 109
29.10 18:35:40 DB: SELECT name FROM users WHERE id=113
29.10 18:35:40 DB: SELECT name FROM users WHERE id=107
29.10 18:35:40 QUEUE: vdl.0 (thread) response tournament.leaveEvent { type => winGame, typeBattle => tournament, _isNotify => true, tournamentId => 1, id => 107, _type => tournament.leaveEvent, battleId => 109 }
29.10 18:35:40 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => uid107, tournamentId => 1, enemy.id => 113, enemy.name => uid113, round => 1, roundDate => 2016-29-10 18:35, id => 107, enemy.num => 1, battleId => 109, player => 2 }, _isNotify => true, id => 107, _type => tournament.enemyEvent }
29.10 18:35:40 TIMER: Check tournament: 93ms
29.10 18:35:40 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 1, _type => core/cache.get }
29.10 18:35:40 READDB: SELECT * FROM Users WHERE ID = 1
29.10 18:35:40 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => --- DEFAULT ATTRIBUTES ---, deleted => false, email => , networktype =>   , password => , isbanned => false, regdate => 2016-08-30 15:45:16.008574+03, language =>   , networkid => , params => { inventory => { list => [] }, attrs => {}, effects => { list => [] } }}, version => 0, id => 1 } }
29.10 18:35:40 TIME: core/cache.get : 0.96 ms
29.10 18:35:40 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 1, _type => core/cache.get }
29.10 18:35:40 READDB: SELECT * FROM UserQuests WHERE ID = 1
29.10 18:35:40 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 1 } }
29.10 18:35:40 TIME: core/cache.get : 1.91 ms
29.10 18:35:40 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 109, _type => vdl/cache.battle.infoRoom }
29.10 18:35:40 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 107, firstId => 113, _type => vdl/cache.battle.infoRoom, turnId => 113 }
29.10 18:35:40 TIME: vdl/cache.battle.infoRoom : 0.07 ms
29.10 18:35:40 NET: vdl.0 (thread) request core/user.sendTo { id => 113, _type => core/user.sendTo, msg => { _type => battle.end } }
29.10 18:35:40 QUEUE: vdl.0 (thread) response core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
29.10 18:35:40 TIME: core/user.sendTo : 0.05 ms
29.10 18:35:40 NET: vdl.0 (thread) request vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
29.10 18:35:40 DB: SELECT * FROM tournament WHERE id = 1
29.10 18:35:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[107,113],"usersAll":[107,113]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => starting, rounddate => 2016-29-10 18:35, startdate => 2016-29-10 18:35, roundinterval => 1 }
29.10 18:35:40 TIME: vdl/cache.tournament.getTournament : 0.83 ms
29.10 18:35:40 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 109, _type => vdl/cache.battle.infoRoom }
29.10 18:35:40 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 107, firstId => 113, _type => vdl/cache.battle.infoRoom, turnId => 113 }
29.10 18:35:40 TIME: vdl/cache.battle.infoRoom : 0.08 ms
29.10 18:35:40 NET: vdl.0 (thread) request vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
29.10 18:35:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getBattlesTournaments [109]
29.10 18:35:40 TIME: vdl/cache.tournament.getBattlesTournaments : 0.08 ms
29.10 18:35:40 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
29.10 18:35:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [107,113] }
29.10 18:35:40 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.06 ms
29.10 18:35:40 NET: vdl.0 (thread) request vdl/cache.battle.finishRoom { roomId => 109, _type => vdl/cache.battle.finishRoom }
29.10 18:35:40 QUEUE: vdl.0 (thread) response vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
29.10 18:35:40 TIME: vdl/cache.battle.finishRoom : 0.07 ms
29.10 18:35:40 NET: vdl.0 (thread) request vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [109] }
29.10 18:35:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
29.10 18:35:40 TIME: vdl/cache.tournament.setBattlesTournaments : 0.1 ms
29.10 18:35:40 NET: vdl.0 (thread) request vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [107], _type => vdl/cache.tournament.setUsersTournament }
29.10 18:35:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
29.10 18:35:40 TIME: vdl/cache.tournament.setUsersTournament : 0.08 ms
29.10 18:35:40 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [{ winner => 107, round => 1, player1 => 113, player2 => 107 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
29.10 18:35:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 107, round => 1, player1 => 113, player2 => 107 },{ winner => -1, round => 2, player1 => 107, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 18:35:40 TIME: vdl/cache.tournament.setGrid : 0.08 ms
29.10 18:35:40 NET: vdl.0 (thread) request vdl/cache.tournament.addRound { dateRound => 2016-29-10 18:35, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
29.10 18:35:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
29.10 18:35:40 TIME: vdl/cache.tournament.addRound : 0.09 ms
29.10 18:35:40 NET: vdl.0 (thread) request vdl/cache.tournament.finish { winner => 107, tournamentId => 1, _type => vdl/cache.tournament.finish }
29.10 18:35:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
29.10 18:35:40 TIME: vdl/cache.tournament.finish : 0.07 ms
29.10 18:35:40 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'107', status = E'finished', type = E'once', repeatinterval = E'0', round = E'2', startdate = E'2016-29-10 18:35', roundinterval = E'1', params = E'{"params":{"battleFinished":[109],"usersList":[107],"battleActive":[],"usersAll":[107,113]}}', rounddate = E'2016-29-10 18:35' WHERE ID = 1
29.10 18:35:45 WRITEDB: UPDATE Battle SET secondid = E'107', turnid = E'113', finished = E'true', firstid = E'113', params = E'{}', avaliable = E'false' WHERE ID = 109
29.10 18:35:50 BLOCKREMOVE: tournament 1 removed
29.10 18:35:55 BLOCKREMOVE: battle 109 removed
29.10 18:36:04 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113', _type => core/server.query }
29.10 18:36:04 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113'
29.10 18:36:04 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid113, networkid => , isbanned => false, id => 113 }}, errorCode => ok, _type => core/server.query }
29.10 18:36:04 TIME: core/server.query : 1.43 ms
29.10 18:36:04 NET: vdl.0 (thread) request core/user.isOnlineID { id => 113, _type => core/user.isOnlineID }
29.10 18:36:04 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.10 18:36:04 TIME: core/user.isOnlineID : 0.1 ms
29.10 18:36:04 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 113, _type => core/cache.get }
29.10 18:36:04 STATS: cache [user], get [5 calls, 0 cache hits, 5 cache misses, 0 same version, 0 not found]
29.10 18:36:04 STATS: cache [user], segments [21 calls, 10 hits, 10 misses]
29.10 18:36:04 STATS: cache [user], database [385 calls, 5 reads, 7 writes]
29.10 18:36:04 STATS: cache [user], lock [6 calls, 6 attempts, 0 failures]
29.10 18:36:04 READDB: SELECT * FROM Users WHERE ID = 113
29.10 18:36:04 STATS: cache manager [1], get [11 calls, total 0.01 sec spent, avg 1.32 ms]
29.10 18:36:04 STATS: cache manager [1], update [10 calls, total 0 sec spent, avg 0.13 ms]
29.10 18:36:04 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid113, deleted => false, email => , networktype =>   , password => uid113, isbanned => false, regdate => 2016-10-29 17:12:53.911759+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477750380, lastLoginDate => 303, lastLoadDate => 1030 }, effects => { list => [] } }}, version => 0, id => 113 } }
29.10 18:36:04 TIME: core/cache.get : 2.5 ms
29.10 18:36:04 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 113, _type => core/cache.get }
29.10 18:36:04 STATS: cache [questdata], get [5 calls, 0 cache hits, 5 cache misses, 0 same version, 0 not found]
29.10 18:36:04 STATS: cache [questdata], segments [17 calls, 6 hits, 10 misses]
29.10 18:36:04 STATS: cache [questdata], database [385 calls, 5 reads, 3 writes]
29.10 18:36:04 STATS: cache [questdata], lock [6 calls, 6 attempts, 0 failures]
29.10 18:36:04 READDB: SELECT * FROM UserQuests WHERE ID = 113
29.10 18:36:04 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 113 } }
29.10 18:36:04 TIME: core/cache.get : 2.08 ms
29.10 18:36:04 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 113, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
29.10 18:36:04 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
29.10 18:36:04 TIME: core/user.loginPost : 0.06 ms
29.10 18:36:10 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 113, _type => core/cache.update }
29.10 18:36:10 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:36:10 TIME: core/cache.update : 0.2 ms
29.10 18:36:10 WRITEDB: UPDATE Users SET name = E'uid113', deleted = E'false', email = E'', networktype = E'  ', password = E'uid113', isbanned = E'false', regdate = E'2016-10-29 17:12:53.911759+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477750380,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}' WHERE ID = 113
29.10 18:36:40 TIMER: Clans cache...
29.10 18:36:40 TIMER: Clans cache: 0ms
29.10 18:36:40 TIMER: Check tournament...
29.10 18:36:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:36' OR rounddate = '2016-29-10 18:36' AND status <> 'finished'
29.10 18:36:40 TIMER: Check tournament: 1ms
29.10 18:36:40 TIMER: Clans cache...
29.10 18:36:40 TIMER: Clans cache: 0ms
29.10 18:36:40 TIMER: Check tournament...
29.10 18:36:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:37' OR rounddate = '2016-29-10 18:37' AND status <> 'finished'
29.10 18:36:40 TIMER: Check tournament: 0ms
29.10 18:36:40 TIMER: Clans cache...
29.10 18:36:40 TIMER: Clans cache: 0ms
29.10 18:36:40 TIMER: Check tournament...
29.10 18:36:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:38' OR rounddate = '2016-29-10 18:38' AND status <> 'finished'
29.10 18:36:40 TIMER: Check tournament: 0ms
29.10 18:39:39 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=113 OR secondid=113 AND finished <> true, _type => core/server.query }
29.10 18:39:39 DB: SELECT id FROM battle WHERE firstid=113 OR secondid=113 AND finished <> true
29.10 18:39:39 QUEUE: vdl.0 (thread) response core/server.query { list => {{ id => 101 }, { id => 102 }, { id => 103 }, { id => 104 }, { id => 105 }, { id => 109 }}, errorCode => ok, _type => core/server.query }
29.10 18:39:39 TIME: core/server.query : 0.81 ms
29.10 18:39:39 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 109, _type => vdl/cache.battle.infoRoom }
29.10 18:39:39 STATS: cache [battle], get [8 calls, 3 cache hits, 4 cache misses, 0 same version, 0 not found]
29.10 18:39:39 STATS: cache [battle], segments [14 calls, 9 hits, 4 misses]
29.10 18:39:39 STATS: cache [battle], database [600 calls, 4 reads, 1 writes]
29.10 18:39:39 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
29.10 18:39:39 READDB: SELECT * FROM Battle WHERE ID = 109
29.10 18:39:39 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 107, firstId => 113, _type => vdl/cache.battle.infoRoom, turnId => 113 }
29.10 18:39:39 TIME: vdl/cache.battle.infoRoom : 0.9 ms
29.10 18:39:39 NET: vdl.0 (thread) request vdl/cache.battle.deleteRoom { roomId => 109, _type => vdl/cache.battle.deleteRoom }
29.10 18:39:39 ROOM: deleted room 109
29.10 18:39:39 DB: DELETE FROM Battle WHERE ID = 109
29.10 18:39:40 QUEUE: vdl.0 (thread) response vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
29.10 18:39:40 TIME: vdl/cache.battle.deleteRoom : 19.86 ms
29.10 18:39:40 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 113, _type => core/cache.update }
29.10 18:39:40 STATS: cache [user], get [6 calls, 0 cache hits, 6 cache misses, 0 same version, 0 not found]
29.10 18:39:40 STATS: cache [user], segments [24 calls, 11 hits, 12 misses]
29.10 18:39:40 STATS: cache [user], database [600 calls, 6 reads, 8 writes]
29.10 18:39:40 STATS: cache [user], lock [6 calls, 6 attempts, 0 failures]
29.10 18:39:40 STATS: cache manager [1], get [12 calls, total 0.02 sec spent, avg 1.37 ms]
29.10 18:39:40 STATS: cache manager [1], update [12 calls, total 0 sec spent, avg 0.12 ms]
29.10 18:39:40 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.10 18:39:40 TIME: core/cache.update : 0.19 ms
29.10 18:39:40 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 113, _type => core/cache.update }
29.10 18:39:40 STATS: cache [questdata], get [6 calls, 0 cache hits, 6 cache misses, 0 same version, 0 not found]
29.10 18:39:40 STATS: cache [questdata], segments [19 calls, 6 hits, 12 misses]
29.10 18:39:40 STATS: cache [questdata], database [600 calls, 6 reads, 3 writes]
29.10 18:39:40 STATS: cache [questdata], lock [6 calls, 6 attempts, 0 failures]
29.10 18:39:40 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:39:40 TIME: core/cache.update : 0.2 ms
29.10 18:39:40 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 113, _type => core/user.logoutPost }
29.10 18:39:40 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 18:39:40 TIME: core/user.logoutPost : 0.07 ms
29.10 18:39:40 TIMER: Clans cache...
29.10 18:39:40 TIMER: Clans cache: 0ms
29.10 18:39:40 TIMER: Check tournament...
29.10 18:39:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:39' OR rounddate = '2016-29-10 18:39' AND status <> 'finished'
29.10 18:39:40 TIMER: Check tournament: 0ms
29.10 18:39:40 WRITEDB: UPDATE Users SET name = E'uid113', deleted = E'false', email = E'', networktype = E'  ', password = E'uid113', isbanned = E'false', regdate = E'2016-10-29 17:12:53.911759+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477750380,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}' WHERE ID = 113
29.10 18:39:40 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 113
29.10 18:39:50 BLOCKREMOVE: user 113 removed
29.10 18:39:50 BLOCKREMOVE: questdata 113 removed
29.10 18:39:50 BLOCKREMOVE: battle 109 removed
29.10 18:40:40 TIMER: Clans cache...
29.10 18:40:40 TIMER: Clans cache: 0ms
29.10 18:40:40 TIMER: Check tournament...
29.10 18:40:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:40' OR rounddate = '2016-29-10 18:40' AND status <> 'finished'
29.10 18:40:40 TIMER: Check tournament: 1ms
29.10 18:40:40 TIMER: Clans cache...
29.10 18:40:40 TIMER: Clans cache: 0ms
29.10 18:40:40 TIMER: Check tournament...
29.10 18:40:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:41' OR rounddate = '2016-29-10 18:41' AND status <> 'finished'
29.10 18:40:40 TIMER: Check tournament: 1ms
29.10 18:40:40 TIMER: Clans cache...
29.10 18:40:40 TIMER: Clans cache: 0ms
29.10 18:40:40 TIMER: Check tournament...
29.10 18:40:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:42' OR rounddate = '2016-29-10 18:42' AND status <> 'finished'
29.10 18:40:40 TIMER: Check tournament: 0ms
29.10 18:40:40 TIMER: Clans cache...
29.10 18:40:40 TIMER: Clans cache: 0ms
29.10 18:40:40 TIMER: Check tournament...
29.10 18:40:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:43' OR rounddate = '2016-29-10 18:43' AND status <> 'finished'
29.10 18:40:40 TIMER: Check tournament: 0ms
29.10 18:40:40 TIMER: Clans cache...
29.10 18:40:40 TIMER: Clans cache: 0ms
29.10 18:40:40 TIMER: Check tournament...
29.10 18:40:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:44' OR rounddate = '2016-29-10 18:44' AND status <> 'finished'
29.10 18:40:40 TIMER: Check tournament: 1ms
29.10 18:40:40 TIMER: Clans cache...
29.10 18:40:40 TIMER: Clans cache: 0ms
29.10 18:40:40 TIMER: Check tournament...
29.10 18:40:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:45' OR rounddate = '2016-29-10 18:45' AND status <> 'finished'
29.10 18:40:40 TIMER: Check tournament: 1ms
29.10 18:40:40 TIMER: Clans cache...
29.10 18:40:40 TIMER: Clans cache: 0ms
29.10 18:40:40 TIMER: Check tournament...
29.10 18:40:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:46' OR rounddate = '2016-29-10 18:46' AND status <> 'finished'
29.10 18:40:40 TIMER: Check tournament: 0ms
29.10 18:40:40 TIMER: Clans cache...
29.10 18:40:40 TIMER: Clans cache: 0ms
29.10 18:40:40 TIMER: Check tournament...
29.10 18:40:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:47' OR rounddate = '2016-29-10 18:47' AND status <> 'finished'
29.10 18:40:40 TIMER: Check tournament: 0ms
29.10 18:40:40 TIMER: Clans cache...
29.10 18:40:40 TIMER: Clans cache: 0ms
29.10 18:40:40 TIMER: Check tournament...
29.10 18:40:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:48' OR rounddate = '2016-29-10 18:48' AND status <> 'finished'
29.10 18:40:40 TIMER: Check tournament: 0ms
29.10 18:40:40 TIMER: Clans cache...
29.10 18:40:40 TIMER: Clans cache: 0ms
29.10 18:40:40 TIMER: Check tournament...
29.10 18:40:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:49' OR rounddate = '2016-29-10 18:49' AND status <> 'finished'
29.10 18:40:40 TIMER: Check tournament: 0ms
29.10 18:40:40 TIMER: Clans cache...
29.10 18:40:40 TIMER: Clans cache: 0ms
29.10 18:40:40 TIMER: Check tournament...
29.10 18:40:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:50' OR rounddate = '2016-29-10 18:50' AND status <> 'finished'
29.10 18:40:40 TIMER: Check tournament: 1ms
29.10 18:40:40 TIMER: Clans cache...
29.10 18:40:40 TIMER: Clans cache: 0ms
29.10 18:40:40 TIMER: Check tournament...
29.10 18:40:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:51' OR rounddate = '2016-29-10 18:51' AND status <> 'finished'
29.10 18:40:40 TIMER: Check tournament: 1ms
29.10 18:40:40 TIMER: Clans cache...
29.10 18:40:40 TIMER: Clans cache: 0ms
29.10 18:40:40 TIMER: Check tournament...
29.10 18:40:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:52' OR rounddate = '2016-29-10 18:52' AND status <> 'finished'
29.10 18:40:40 TIMER: Check tournament: 0ms
29.10 18:40:40 TIMER: Clans cache...
29.10 18:40:40 TIMER: Clans cache: 0ms
29.10 18:40:40 TIMER: Check tournament...
29.10 18:40:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:53' OR rounddate = '2016-29-10 18:53' AND status <> 'finished'
29.10 18:40:40 TIMER: Check tournament: 0ms
29.10 18:40:40 TIMER: Clans cache...
29.10 18:40:40 TIMER: Clans cache: 0ms
29.10 18:40:40 TIMER: Check tournament...
29.10 18:40:40 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:54' OR rounddate = '2016-29-10 18:54' AND status <> 'finished'
29.10 18:40:40 TIMER: Check tournament: 0ms
29.10 18:55:29 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 109, _type => vdl/cache.battle.infoRoom }
29.10 18:55:29 STATS: cache [battle], get [9 calls, 3 cache hits, 5 cache misses, 0 same version, 0 not found]
29.10 18:55:29 STATS: cache [battle], segments [16 calls, 10 hits, 5 misses]
29.10 18:55:29 STATS: cache [battle], database [1549 calls, 5 reads, 1 writes]
29.10 18:55:29 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
29.10 18:55:29 READDB: SELECT * FROM Battle WHERE ID = 109
29.10 18:55:29 TRACE: vdl/cache.battle.infoRoom : Invalid field access : get
29.10 18:55:29 TRACE: vdl/cache.battle.infoRoom : 
Called from modules/VDLCache.hx line 156
Called from modules/VDLCache.hx line 149
Called from modules/VDLCache.hx line 99
Called from snipe/cache/CacheServer.hx line 487
29.10 18:55:29 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
29.10 18:55:29 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
29.10 18:55:29 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
29.10 18:55:29 QUEUE: vdl.0 (thread) response core/server.query { list => {{ id => 101 }, { id => 102 }, { id => 103 }, { id => 104 }, { id => 105 }}, errorCode => ok, _type => core/server.query }
29.10 18:55:29 TIME: core/server.query : 0.56 ms
29.10 18:55:29 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 105, _type => vdl/cache.battle.infoRoom }
29.10 18:55:29 READDB: SELECT * FROM Battle WHERE ID = 105
29.10 18:55:29 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 107, firstId => 113, _type => vdl/cache.battle.infoRoom, turnId => 113 }
29.10 18:55:29 TIME: vdl/cache.battle.infoRoom : 0.34 ms
29.10 18:55:29 NET: vdl.0 (thread) request vdl/cache.battle.deleteRoom { roomId => 105, _type => vdl/cache.battle.deleteRoom }
29.10 18:55:29 ROOM: deleted room 105
29.10 18:55:29 DB: DELETE FROM Battle WHERE ID = 105
29.10 18:55:29 QUEUE: vdl.0 (thread) response vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
29.10 18:55:29 TIME: vdl/cache.battle.deleteRoom : 24.13 ms
29.10 18:55:29 NET: vdl.0 (thread) request core/user.sendTo { id => 113, _type => core/user.sendTo, msg => { _type => battle.end } }
29.10 18:55:29 QUEUE: vdl.0 (thread) response core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
29.10 18:55:29 TIME: core/user.sendTo : 0.04 ms
29.10 18:55:29 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
29.10 18:55:29 STATS: cache [user], get [6 calls, 0 cache hits, 6 cache misses, 0 same version, 0 not found]
29.10 18:55:29 STATS: cache [user], segments [26 calls, 13 hits, 12 misses]
29.10 18:55:29 STATS: cache [user], database [1549 calls, 6 reads, 9 writes]
29.10 18:55:29 STATS: cache [user], lock [6 calls, 6 attempts, 0 failures]
29.10 18:55:29 STATS: cache manager [1], get [12 calls, total 0.02 sec spent, avg 1.37 ms]
29.10 18:55:29 STATS: cache manager [1], update [14 calls, total 0 sec spent, avg 0.12 ms]
29.10 18:55:29 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.10 18:55:29 TIME: core/cache.update : 0.27 ms
29.10 18:55:29 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
29.10 18:55:29 STATS: cache [questdata], get [6 calls, 0 cache hits, 6 cache misses, 0 same version, 0 not found]
29.10 18:55:29 STATS: cache [questdata], segments [21 calls, 8 hits, 12 misses]
29.10 18:55:29 STATS: cache [questdata], database [1549 calls, 6 reads, 4 writes]
29.10 18:55:29 STATS: cache [questdata], lock [6 calls, 6 attempts, 0 failures]
29.10 18:55:29 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:55:29 TIME: core/cache.update : 0.2 ms
29.10 18:55:29 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
29.10 18:55:29 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 18:55:29 TIME: core/user.logoutPost : 0.07 ms
29.10 18:55:29 WRITEDB: UPDATE Users SET name = E'uid107', deleted = E'false', email = E'', networktype = E'  ', password = E'uid107', isbanned = E'false', regdate = E'2016-10-28 16:37:18.693533+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477748429,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}' WHERE ID = 107
29.10 18:55:29 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 107
29.10 18:55:39 BLOCKREMOVE: user 107 removed
29.10 18:55:39 BLOCKREMOVE: questdata 107 removed
29.10 18:55:39 BLOCKREMOVE: battle 105 removed
29.10 18:57:09 TIMER: Starting timer...
29.10 18:57:09 TIMER: Timer running...
29.10 18:57:09 DB: SELECT * FROM GameVars
29.10 18:57:09 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 18:57:09 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 18:57:09 DB: SELECT * FROM Shops WHERE ID = 1
29.10 18:57:09 TEMP: load ./tmp/quest_daily_ids
29.10 18:57:09 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
29.10 18:57:09 TEMP: save ./tmp/quest_daily_ids
29.10 18:57:09 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
29.10 18:57:09 QUEUE: vdl.0 (thread) response server.login
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
29.10 18:57:09 DB: SELECT * FROM LocalizationStrings
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 5.64 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
29.10 18:57:09 DB: SELECT * FROM GameVars
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 0.69 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
29.10 18:57:09 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 0.65 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
29.10 18:57:09 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 0.43 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
29.10 18:57:09 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 0.63 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
29.10 18:57:09 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 1.24 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/quest.getDaily
29.10 18:57:09 TIME: core/quest.getDaily : 0.02 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
29.10 18:57:09 DB: SELECT * FROM UserAttributeTypes
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 0.43 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
29.10 18:57:09 DB: SELECT * FROM UserVariableTypes
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 0.33 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
29.10 18:57:09 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 0.92 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
29.10 18:57:09 DB: SELECT * FROM ItemGroups
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 0.31 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
29.10 18:57:09 DB: SELECT * FROM Bundles ORDER BY ID
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 0.5 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
29.10 18:57:09 DB: SELECT * FROM BundleItems ORDER BY ID
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 0.47 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/shop.getList
29.10 18:57:09 TIME: core/shop.getList : 0.04 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
29.10 18:57:09 DB: SELECT * FROM EffectAttributeTypes
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 0.37 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
29.10 18:57:09 DB: SELECT * FROM Effects
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 0.32 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
29.10 18:57:09 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 0.8 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
29.10 18:57:09 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 0.58 ms
29.10 18:57:09 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
29.10 18:57:09 DB: SELECT * FROM Badges
29.10 18:57:09 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:57:09 TIME: core/server.query : 0.33 ms
29.10 18:57:09 TIMER: Clans cache...
29.10 18:57:09 TIMER: Clans cache: 0ms
29.10 18:57:09 TIMER: Check tournament...
29.10 18:57:09 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:58' OR rounddate = '2016-29-10 18:58' AND status <> 'finished'
29.10 18:57:09 TIMER: Check tournament: 1ms
29.10 18:58:31 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
29.10 18:58:31 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
29.10 18:58:31 QUEUE: vdl.0 (thread) response core/server.query
29.10 18:58:31 TIME: core/server.query : 2.5 ms
29.10 18:58:31 NET: vdl.0 (thread) request core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
29.10 18:58:31 QUEUE: vdl.0 (thread) response core/user.isOnlineID
29.10 18:58:31 TIME: core/user.isOnlineID : 0.08 ms
29.10 18:58:31 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
29.10 18:58:31 STATS: cache [user], get [0 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
29.10 18:58:31 STATS: cache [user], segments [1 calls, 0 hits, 0 misses]
29.10 18:58:31 STATS: cache [user], database [83 calls, 0 reads, 0 writes]
29.10 18:58:31 STATS: cache [user], lock [1 calls, 1 attempts, 0 failures]
29.10 18:58:31 READDB: SELECT * FROM Users WHERE ID = 107
29.10 18:58:31 STATS: cache manager [1], get [1 calls, total 0 sec spent, avg 3.93 ms]
29.10 18:58:31 STATS: cache manager [1], update [0 calls, total 0 sec spent, avg -21474836.48 ms]
29.10 18:58:31 QUEUE: vdl.0 (thread) response core/cache.get
29.10 18:58:31 TIME: core/cache.get : 4.08 ms
29.10 18:58:31 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
29.10 18:58:31 STATS: cache [questdata], get [0 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
29.10 18:58:31 STATS: cache [questdata], segments [1 calls, 0 hits, 0 misses]
29.10 18:58:31 STATS: cache [questdata], database [83 calls, 0 reads, 0 writes]
29.10 18:58:31 STATS: cache [questdata], lock [1 calls, 1 attempts, 0 failures]
29.10 18:58:31 READDB: SELECT * FROM UserQuests WHERE ID = 107
29.10 18:58:31 QUEUE: vdl.0 (thread) response core/cache.get
29.10 18:58:31 TIME: core/cache.get : 1.44 ms
29.10 18:58:31 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
29.10 18:58:31 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
29.10 18:58:31 TIME: core/user.loginPost : 0.11 ms
29.10 18:58:39 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
29.10 18:58:39 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:58:39 TIME: core/cache.update : 0.18 ms
29.10 18:58:40 WRITEDB: UPDATE Users SET name = E'uid107', deleted = E'false', email = E'', networktype = E'  ', password = E'uid107', isbanned = E'false', regdate = E'2016-10-28 16:37:18.693533+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477748429,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}' WHERE ID = 107
29.10 18:58:53 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:58:53 DB: SELECT * FROM tournament
29.10 18:58:53 STATS: cache [tournament], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
29.10 18:58:53 STATS: cache [tournament], segments [1 calls, 0 hits, 0 misses]
29.10 18:58:53 STATS: cache [tournament], database [105 calls, 0 reads, 0 writes]
29.10 18:58:53 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
29.10 18:58:53 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:58:53 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-29-10 19:05, startdate => 2016-29-10 19:05 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:58:53 TIME: vdl/cache.tournament.getAvailableTournament : 1.95 ms
29.10 18:58:58 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 107, tournament => 1, _type => vdl/cache.tournament.addUsers }
29.10 18:58:58 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 18:58:58 TIME: vdl/cache.tournament.addUsers : 0.18 ms
29.10 18:58:58 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:58:58 DB: SELECT * FROM tournament
29.10 18:58:58 DB: SELECT name FROM users WHERE id = 107
29.10 18:58:58 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 }], battleActive => null, rounddate => 2016-29-10 19:05, startdate => 2016-29-10 19:05 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:58:58 TIME: vdl/cache.tournament.getAvailableTournament : 2.55 ms
29.10 18:58:59 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-29-10 19:05', roundinterval = E'1', params = E'{"params":{"usersList":[107],"usersAll":[107]}}', rounddate = E'2016-29-10 19:05' WHERE ID = 1
29.10 18:59:01 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113', _type => core/server.query }
29.10 18:59:01 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113'
29.10 18:59:01 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid113, networkid => , isbanned => false, id => 113 }}, errorCode => ok, _type => core/server.query }
29.10 18:59:01 TIME: core/server.query : 0.63 ms
29.10 18:59:01 NET: vdl.0 (thread) request core/user.isOnlineID { id => 113, _type => core/user.isOnlineID }
29.10 18:59:01 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.10 18:59:01 TIME: core/user.isOnlineID : 0.07 ms
29.10 18:59:01 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 113, _type => core/cache.get }
29.10 18:59:01 READDB: SELECT * FROM Users WHERE ID = 113
29.10 18:59:01 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid113, deleted => false, email => , networktype =>   , password => uid113, isbanned => false, regdate => 2016-10-29 17:12:53.911759+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477750380, lastLoginDate => 303, lastLoadDate => 1030 }, effects => { list => [] } }}, version => 0, id => 113 } }
29.10 18:59:01 TIME: core/cache.get : 0.71 ms
29.10 18:59:01 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 113, _type => core/cache.get }
29.10 18:59:01 READDB: SELECT * FROM UserQuests WHERE ID = 113
29.10 18:59:01 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 113 } }
29.10 18:59:01 TIME: core/cache.get : 0.43 ms
29.10 18:59:01 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 113, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
29.10 18:59:01 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
29.10 18:59:01 TIME: core/user.loginPost : 0.05 ms
29.10 18:59:09 TIMER: Clans cache...
29.10 18:59:09 TIMER: Clans cache: 0ms
29.10 18:59:09 TIMER: Check tournament...
29.10 18:59:09 DB: SELECT * FROM tournament WHERE startdate = '2016-29-10 18:59' OR rounddate = '2016-29-10 18:59' AND status <> 'finished'
29.10 18:59:09 TIMER: Check tournament: 0ms
29.10 18:59:09 BLOCKREMOVE: tournament 1 removed
29.10 18:59:09 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 113, _type => core/cache.update }
29.10 18:59:09 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 18:59:09 TIME: core/cache.update : 0.11 ms
29.10 18:59:10 WRITEDB: UPDATE Users SET name = E'uid113', deleted = E'false', email = E'', networktype = E'  ', password = E'uid113', isbanned = E'false', regdate = E'2016-10-29 17:12:53.911759+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477750380,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}' WHERE ID = 113
29.10 18:59:12 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:59:12 DB: SELECT * FROM tournament
29.10 18:59:12 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:59:12 DB: SELECT name FROM users WHERE id = 107
29.10 18:59:12 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 }], battleActive => null, rounddate => 2016-29-10 19:05, startdate => 2016-29-10 19:05 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:59:12 TIME: vdl/cache.tournament.getAvailableTournament : 2.62 ms
29.10 18:59:19 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 113, tournament => 1, _type => vdl/cache.tournament.addUsers }
29.10 18:59:19 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 18:59:19 TIME: vdl/cache.tournament.addUsers : 0.13 ms
29.10 18:59:19 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-29-10 19:05', roundinterval = E'1', params = E'{"params":{"usersList":[107,113],"usersAll":[107,113]}}', rounddate = E'2016-29-10 19:05' WHERE ID = 1
29.10 18:59:21 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 113, tournament => 1, _type => vdl/cache.tournament.addUsers }
29.10 18:59:21 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => userExist, _type => vdl/cache.tournament.addUsers }
29.10 18:59:21 TIME: vdl/cache.tournament.addUsers : 0.25 ms
29.10 18:59:21 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 113, tournament => 1, _type => vdl/cache.tournament.addUsers }
29.10 18:59:21 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => userExist, _type => vdl/cache.tournament.addUsers }
29.10 18:59:21 TIME: vdl/cache.tournament.addUsers : 0.14 ms
29.10 18:59:21 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:59:21 DB: SELECT * FROM tournament
29.10 18:59:21 DB: SELECT name FROM users WHERE id = 107
29.10 18:59:21 DB: SELECT name FROM users WHERE id = 113
29.10 18:59:21 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 19:05, startdate => 2016-29-10 19:05 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:59:21 TIME: vdl/cache.tournament.getAvailableTournament : 3.53 ms
29.10 18:59:32 BLOCKREMOVE: tournament 1 removed
29.10 18:59:38 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:59:38 DB: SELECT * FROM tournament
29.10 18:59:38 READDB: SELECT * FROM Tournament WHERE ID = 1
29.10 18:59:38 DB: SELECT name FROM users WHERE id = 107
29.10 18:59:38 DB: SELECT name FROM users WHERE id = 113
29.10 18:59:38 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 19:05, startdate => 2016-29-10 19:05 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:59:38 TIME: vdl/cache.tournament.getAvailableTournament : 2.31 ms
29.10 18:59:38 NET: vdl.0 (thread) request vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
29.10 18:59:38 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
29.10 18:59:38 TIME: vdl/cache.tournament.getStatus : 0.11 ms
29.10 18:59:38 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
29.10 18:59:38 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [107,113] }
29.10 18:59:38 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.13 ms
29.10 18:59:38 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 107, player2 => 113 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
29.10 18:59:38 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 107, player2 => 113 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 18:59:38 TIME: vdl/cache.tournament.setGrid : 0.1 ms
29.10 18:59:46 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:59:46 DB: SELECT * FROM tournament
29.10 18:59:46 DB: SELECT name FROM users WHERE id = 107
29.10 18:59:46 DB: SELECT name FROM users WHERE id = 113
29.10 18:59:46 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 19:05, startdate => 2016-29-10 19:05 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:59:46 TIME: vdl/cache.tournament.getAvailableTournament : 2.69 ms
29.10 18:59:47 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:59:47 DB: SELECT * FROM tournament
29.10 18:59:47 DB: SELECT name FROM users WHERE id = 107
29.10 18:59:47 DB: SELECT name FROM users WHERE id = 113
29.10 18:59:47 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 19:05, startdate => 2016-29-10 19:05 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:59:47 TIME: vdl/cache.tournament.getAvailableTournament : 2.24 ms
29.10 18:59:50 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:59:50 DB: SELECT * FROM tournament
29.10 18:59:50 DB: SELECT name FROM users WHERE id = 107
29.10 18:59:50 DB: SELECT name FROM users WHERE id = 113
29.10 18:59:50 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 19:05, startdate => 2016-29-10 19:05 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:59:50 TIME: vdl/cache.tournament.getAvailableTournament : 1.08 ms
29.10 18:59:54 NET: vdl.0 (thread) request vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
29.10 18:59:54 STATS: cache [tournament], get [15 calls, 11 cache hits, 3 cache misses, 0 same version, 0 not found]
29.10 18:59:54 STATS: cache [tournament], segments [18 calls, 14 hits, 3 misses]
29.10 18:59:54 STATS: cache [tournament], database [165 calls, 3 reads, 2 writes]
29.10 18:59:54 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
29.10 18:59:54 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
29.10 18:59:54 TIME: vdl/cache.tournament.getStatus : 0.32 ms
29.10 18:59:54 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
29.10 18:59:54 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [107,113] }
29.10 18:59:54 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.16 ms
29.10 18:59:54 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 107, player2 => 113 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
29.10 18:59:54 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 107, player2 => 113 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 18:59:54 TIME: vdl/cache.tournament.setGrid : 0.11 ms
29.10 18:59:56 NET: vdl.0 (thread) request vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
29.10 18:59:56 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
29.10 18:59:56 TIME: vdl/cache.tournament.getStatus : 0.14 ms
29.10 18:59:56 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
29.10 18:59:56 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [107,113] }
29.10 18:59:56 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.2 ms
29.10 18:59:56 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 107, player2 => 113 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
29.10 18:59:56 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 107, player2 => 113 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 18:59:56 TIME: vdl/cache.tournament.setGrid : 0.17 ms
29.10 18:59:59 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:59:59 DB: SELECT * FROM tournament
29.10 18:59:59 DB: SELECT name FROM users WHERE id = 107
29.10 18:59:59 DB: SELECT name FROM users WHERE id = 113
29.10 18:59:59 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 19:05, startdate => 2016-29-10 19:05 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 18:59:59 TIME: vdl/cache.tournament.getAvailableTournament : 1.89 ms
