25.10 17:01:14 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true, _type => core/server.query }
25.10 17:01:14 DB: SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true
25.10 17:01:14 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 17:01:14 TIME: core/server.query : 1.12 ms
25.10 17:01:14 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 17:01:14 STATS: cache [battle], get [6 calls, 1 cache hits, 4 cache misses, 0 same version, 1 not found]
25.10 17:01:14 STATS: cache [battle], segments [11 calls, 6 hits, 4 misses]
25.10 17:01:14 STATS: cache [battle], database [747 calls, 4 reads, 2 writes]
25.10 17:01:14 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
25.10 17:01:14 READDB: SELECT * FROM Battle WHERE ID = 0
25.10 17:01:14 TRACE: vdl/cache.battle.infoRoom : Invalid field access : get
25.10 17:01:14 TRACE: vdl/cache.battle.infoRoom : 
Called from modules/VDLCache.hx line 149
Called from modules/VDLCache.hx line 142
Called from modules/VDLCache.hx line 97
Called from snipe/cache/CacheServer.hx line 487
25.10 17:01:14 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 17:01:14 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 94, _type => core/cache.update }
25.10 17:01:14 STATS: cache [user], get [2 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
25.10 17:01:14 STATS: cache [user], segments [9 calls, 4 hits, 4 misses]
25.10 17:01:14 STATS: cache [user], database [747 calls, 2 reads, 3 writes]
25.10 17:01:14 STATS: cache [user], lock [2 calls, 2 attempts, 0 failures]
25.10 17:01:14 STATS: cache manager [1], get [4 calls, total 0.01 sec spent, avg 1.25 ms]
25.10 17:01:14 STATS: cache manager [1], update [5 calls, total 0 sec spent, avg 0.23 ms]
25.10 17:01:14 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 17:01:14 TIME: core/cache.update : 0.72 ms
25.10 17:01:14 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 94, _type => core/cache.update }
25.10 17:01:14 STATS: cache [questdata], get [2 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
25.10 17:01:14 STATS: cache [questdata], segments [7 calls, 2 hits, 4 misses]
25.10 17:01:14 STATS: cache [questdata], database [747 calls, 2 reads, 1 writes]
25.10 17:01:14 STATS: cache [questdata], lock [2 calls, 2 attempts, 0 failures]
25.10 17:01:14 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:01:14 TIME: core/cache.update : 0.52 ms
25.10 17:01:14 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 94, _type => core/user.logoutPost }
25.10 17:01:14 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 17:01:14 TIME: core/user.logoutPost : 0.18 ms
25.10 17:01:14 WRITEDB: UPDATE Users SET name = E'uid94', deleted = E'false', email = E'', networktype = E'  ', password = E'uid94', isbanned = E'false', regdate = E'2016-10-25 16:32:22.177493+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477402348,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}' WHERE ID = 94
25.10 17:01:14 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 94
25.10 17:01:41 TIMER: Starting timer...
25.10 17:01:41 TIMER: Timer running...
25.10 17:01:41 DB: SELECT * FROM GameVars
25.10 17:01:41 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 17:01:41 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 17:01:41 DB: SELECT * FROM Shops WHERE ID = 1
25.10 17:01:41 TEMP: load ./tmp/quest_daily_ids
25.10 17:01:41 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
25.10 17:01:41 TEMP: save ./tmp/quest_daily_ids
25.10 17:01:42 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
25.10 17:01:42 QUEUE: vdl.0 (thread) response server.login
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.10 17:01:42 DB: SELECT * FROM LocalizationStrings
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 7.9 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.10 17:01:42 DB: SELECT * FROM GameVars
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 0.75 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.10 17:01:42 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 0.61 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.10 17:01:42 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 0.37 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.10 17:01:42 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 0.48 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.10 17:01:42 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 0.73 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/quest.getDaily
25.10 17:01:42 TIME: core/quest.getDaily : 0.03 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.10 17:01:42 DB: SELECT * FROM UserAttributeTypes
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 0.31 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.10 17:01:42 DB: SELECT * FROM UserVariableTypes
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 0.37 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.10 17:01:42 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 1.11 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.10 17:01:42 DB: SELECT * FROM ItemGroups
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 0.3 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.10 17:01:42 DB: SELECT * FROM Bundles ORDER BY ID
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 0.39 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.10 17:01:42 DB: SELECT * FROM BundleItems ORDER BY ID
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 0.54 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/shop.getList
25.10 17:01:42 TIME: core/shop.getList : 0.09 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.10 17:01:42 DB: SELECT * FROM EffectAttributeTypes
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 0.35 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.10 17:01:42 DB: SELECT * FROM Effects
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 0.51 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.10 17:01:42 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 0.61 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.10 17:01:42 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 0.58 ms
25.10 17:01:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.10 17:01:42 DB: SELECT * FROM Badges
25.10 17:01:42 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:01:42 TIME: core/server.query : 0.34 ms
25.10 17:02:07 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 17:02:07 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 17:02:07 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:02:07 TIME: core/server.query : 3.12 ms
25.10 17:02:07 NET: vdl.0 (thread) request core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 17:02:07 QUEUE: vdl.0 (thread) response core/user.isOnlineID
25.10 17:02:07 TIME: core/user.isOnlineID : 0.13 ms
25.10 17:02:07 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 17:02:07 READDB: SELECT * FROM Users WHERE ID = 94
25.10 17:02:07 QUEUE: vdl.0 (thread) response core/cache.get
25.10 17:02:07 TIME: core/cache.get : 4.4 ms
25.10 17:02:07 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 17:02:07 READDB: SELECT * FROM UserQuests WHERE ID = 94
25.10 17:02:07 QUEUE: vdl.0 (thread) response core/cache.get
25.10 17:02:07 TIME: core/cache.get : 2.36 ms
25.10 17:02:07 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 17:02:07 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
25.10 17:02:07 TIME: core/user.loginPost : 0.09 ms
25.10 17:02:17 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 17:02:17 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:02:17 TIME: core/cache.update : 0.13 ms
25.10 17:02:18 WRITEDB: UPDATE Users SET name = E'uid94', deleted = E'false', email = E'', networktype = E'  ', password = E'uid94', isbanned = E'false', regdate = E'2016-10-25 16:32:22.177493+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477402348,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}' WHERE ID = 94
25.10 17:02:42 TIMER: Clans cache...
25.10 17:02:42 TIMER: Clans cache: 0ms
25.10 17:02:42 TIMER: Check tournament...
25.10 17:02:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:02' OR rounddate = '2016-25-10 17:02' AND status <> 'finished'
25.10 17:02:42 TIMER: Check tournament: 1ms
25.10 17:02:43 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 17:02:43 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 17:02:43 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid95, networkid => , isbanned => false, id => 95 }}, errorCode => ok, _type => core/server.query }
25.10 17:02:43 TIME: core/server.query : 2.73 ms
25.10 17:02:43 NET: vdl.0 (thread) request core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 17:02:43 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 17:02:43 TIME: core/user.isOnlineID : 0.1 ms
25.10 17:02:43 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 17:02:43 STATS: cache [user], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
25.10 17:02:43 STATS: cache [user], segments [4 calls, 1 hits, 2 misses]
25.10 17:02:43 STATS: cache [user], database [62 calls, 1 reads, 1 writes]
25.10 17:02:43 STATS: cache [user], lock [2 calls, 2 attempts, 0 failures]
25.10 17:02:43 READDB: SELECT * FROM Users WHERE ID = 95
25.10 17:02:43 STATS: cache manager [1], get [3 calls, total 0.01 sec spent, avg 2.74 ms]
25.10 17:02:43 STATS: cache manager [1], update [1 calls, total 0 sec spent, avg 0.04 ms]
25.10 17:02:43 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid95, deleted => false, email => , networktype =>   , password => uid95, isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402835, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 95 } }
25.10 17:02:43 TIME: core/cache.get : 8.18 ms
25.10 17:02:43 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 17:02:43 STATS: cache [questdata], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
25.10 17:02:43 STATS: cache [questdata], segments [3 calls, 0 hits, 2 misses]
25.10 17:02:43 STATS: cache [questdata], database [62 calls, 1 reads, 0 writes]
25.10 17:02:43 STATS: cache [questdata], lock [2 calls, 2 attempts, 0 failures]
25.10 17:02:43 READDB: SELECT * FROM UserQuests WHERE ID = 95
25.10 17:02:43 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 95 } }
25.10 17:02:43 TIME: core/cache.get : 1.79 ms
25.10 17:02:43 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 17:02:43 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
25.10 17:02:43 TIME: core/user.loginPost : 0.34 ms
25.10 17:02:48 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:02:48 DB: SELECT * FROM tournament
25.10 17:02:48 STATS: cache [tournament], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
25.10 17:02:48 STATS: cache [tournament], segments [1 calls, 0 hits, 0 misses]
25.10 17:02:48 STATS: cache [tournament], database [67 calls, 0 reads, 0 writes]
25.10 17:02:48 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
25.10 17:02:48 READDB: SELECT * FROM Tournament WHERE ID = 1
25.10 17:02:48 DB: SELECT name FROM users WHERE id = 95
25.10 17:02:48 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [76], round => 1, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:04, startdate => 2016-25-10 17:04 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:02:48 TIME: vdl/cache.tournament.getAvailableTournament : 2.29 ms
25.10 17:02:52 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 17:02:52 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:02:52 TIME: core/cache.update : 0.16 ms
25.10 17:02:53 WRITEDB: UPDATE Users SET name = E'uid95', deleted = E'false', email = E'', networktype = E'  ', password = E'uid95', isbanned = E'false', regdate = E'2016-10-25 16:40:34.208622+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477402835,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}' WHERE ID = 95
25.10 17:02:59 BLOCKREMOVE: tournament 1 removed
25.10 17:03:42 TIMER: Clans cache...
25.10 17:03:42 TIMER: Clans cache: 0ms
25.10 17:03:42 TIMER: Check tournament...
25.10 17:03:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:03' OR rounddate = '2016-25-10 17:03' AND status <> 'finished'
25.10 17:03:42 TIMER: Check tournament: 0ms
25.10 17:04:17 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:04:17 DB: SELECT * FROM tournament
25.10 17:04:17 STATS: cache [tournament], get [2 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
25.10 17:04:17 STATS: cache [tournament], segments [2 calls, 0 hits, 1 misses]
25.10 17:04:17 STATS: cache [tournament], database [156 calls, 1 reads, 0 writes]
25.10 17:04:17 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
25.10 17:04:17 READDB: SELECT * FROM Tournament WHERE ID = 1
25.10 17:04:17 DB: SELECT name FROM users WHERE id = 95
25.10 17:04:17 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [76], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:04, startdate => 2016-25-10 17:04 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:04:17 TIME: vdl/cache.tournament.getAvailableTournament : 5.32 ms
25.10 17:04:28 BLOCKREMOVE: tournament 1 removed
25.10 17:04:42 TIMER: Clans cache...
25.10 17:04:42 TIMER: Clans cache: 0ms
25.10 17:04:42 TIMER: Check tournament...
25.10 17:04:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:04' OR rounddate = '2016-25-10 17:04' AND status <> 'finished'
25.10 17:04:42 READDB: SELECT * FROM Tournament WHERE ID = 1
25.10 17:04:42 DB: SELECT nextval('Battle_id_seq') AS id
25.10 17:04:42 READDB: SELECT ID FROM Battle WHERE ID = 77
25.10 17:04:42 READDB: INSERT INTO Battle (ID) VALUES (77)
25.10 17:04:42 STATS: cache [battle], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
25.10 17:04:42 STATS: cache [battle], segments [1 calls, 0 hits, 0 misses]
25.10 17:04:42 STATS: cache [battle], database [180 calls, 0 reads, 0 writes]
25.10 17:04:42 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
25.10 17:04:42 READDB: SELECT * FROM Battle WHERE ID = 77
25.10 17:04:42 TRACE: Check tournament timer exception:
25.10 17:04:42 TRACE: Invalid field access : id

25.10 17:04:42 TIMER: Check tournament: 38ms
25.10 17:04:47 WRITEDB: UPDATE Battle SET secondid = E'null', turnid = E'95', finished = E'false', firstid = E'95', params = E'{}', avaliable = E'false' WHERE ID = 77
25.10 17:04:52 BLOCKREMOVE: tournament 1 removed
25.10 17:04:57 BLOCKREMOVE: battle 77 removed
25.10 17:07:34 TIMER: Starting timer...
25.10 17:07:34 TIMER: Timer running...
25.10 17:07:34 DB: SELECT * FROM GameVars
25.10 17:07:34 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 17:07:34 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 17:07:34 DB: SELECT * FROM Shops WHERE ID = 1
25.10 17:07:34 TEMP: load ./tmp/quest_daily_ids
25.10 17:07:34 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
25.10 17:07:34 TEMP: save ./tmp/quest_daily_ids
25.10 17:07:34 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
25.10 17:07:34 QUEUE: vdl.0 (thread) response server.login
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.10 17:07:34 DB: SELECT * FROM LocalizationStrings
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 9.39 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.10 17:07:34 DB: SELECT * FROM GameVars
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 0.66 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.10 17:07:34 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 0.87 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.10 17:07:34 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 0.64 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.10 17:07:34 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 0.56 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.10 17:07:34 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 1.1 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/quest.getDaily
25.10 17:07:34 TIME: core/quest.getDaily : 0.02 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.10 17:07:34 DB: SELECT * FROM UserAttributeTypes
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 0.48 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.10 17:07:34 DB: SELECT * FROM UserVariableTypes
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 0.36 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.10 17:07:34 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 1.41 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.10 17:07:34 DB: SELECT * FROM ItemGroups
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 0.52 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.10 17:07:34 DB: SELECT * FROM Bundles ORDER BY ID
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 0.69 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.10 17:07:34 DB: SELECT * FROM BundleItems ORDER BY ID
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 0.6 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/shop.getList
25.10 17:07:34 TIME: core/shop.getList : 0.03 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.10 17:07:34 DB: SELECT * FROM EffectAttributeTypes
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 0.77 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.10 17:07:34 DB: SELECT * FROM Effects
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 0.68 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.10 17:07:34 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 1.02 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.10 17:07:34 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 0.81 ms
25.10 17:07:34 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.10 17:07:34 DB: SELECT * FROM Badges
25.10 17:07:34 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:07:34 TIME: core/server.query : 0.41 ms
25.10 17:07:34 TIMER: Clans cache...
25.10 17:07:34 TIMER: Clans cache: 0ms
25.10 17:07:34 TIMER: Check tournament...
25.10 17:07:34 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:08' OR rounddate = '2016-25-10 17:08' AND status <> 'finished'
25.10 17:07:34 TIMER: Check tournament: 1ms
25.10 17:09:03 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 17:09:03 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 17:09:03 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:09:03 TIME: core/server.query : 1.95 ms
25.10 17:09:03 NET: vdl.0 (thread) request core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 17:09:03 QUEUE: vdl.0 (thread) response core/user.isOnlineID
25.10 17:09:03 TIME: core/user.isOnlineID : 0.1 ms
25.10 17:09:03 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 17:09:03 STATS: cache [user], get [0 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
25.10 17:09:03 STATS: cache [user], segments [1 calls, 0 hits, 0 misses]
25.10 17:09:03 STATS: cache [user], database [89 calls, 0 reads, 0 writes]
25.10 17:09:03 STATS: cache [user], lock [1 calls, 1 attempts, 0 failures]
25.10 17:09:03 READDB: SELECT * FROM Users WHERE ID = 95
25.10 17:09:03 STATS: cache manager [1], get [1 calls, total 0 sec spent, avg 4.44 ms]
25.10 17:09:03 STATS: cache manager [1], update [0 calls, total 0 sec spent, avg -21474836.48 ms]
25.10 17:09:03 QUEUE: vdl.0 (thread) response core/cache.get
25.10 17:09:03 TIME: core/cache.get : 4.67 ms
25.10 17:09:03 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 17:09:03 STATS: cache [questdata], get [0 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
25.10 17:09:03 STATS: cache [questdata], segments [1 calls, 0 hits, 0 misses]
25.10 17:09:03 STATS: cache [questdata], database [89 calls, 0 reads, 0 writes]
25.10 17:09:03 STATS: cache [questdata], lock [1 calls, 1 attempts, 0 failures]
25.10 17:09:03 READDB: SELECT * FROM UserQuests WHERE ID = 95
25.10 17:09:03 QUEUE: vdl.0 (thread) response core/cache.get
25.10 17:09:03 TIME: core/cache.get : 1.65 ms
25.10 17:09:03 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 17:09:03 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
25.10 17:09:03 TIME: core/user.loginPost : 0.2 ms
25.10 17:09:09 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 17:09:09 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:09:09 TIME: core/cache.update : 0.17 ms
25.10 17:09:10 WRITEDB: UPDATE Users SET name = E'uid95', deleted = E'false', email = E'', networktype = E'  ', password = E'uid95', isbanned = E'false', regdate = E'2016-10-25 16:40:34.208622+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477402835,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}' WHERE ID = 95
25.10 17:09:16 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:16 DB: SELECT * FROM tournament
25.10 17:09:16 STATS: cache [tournament], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
25.10 17:09:16 STATS: cache [tournament], segments [1 calls, 0 hits, 0 misses]
25.10 17:09:16 STATS: cache [tournament], database [103 calls, 0 reads, 0 writes]
25.10 17:09:16 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
25.10 17:09:16 READDB: SELECT * FROM Tournament WHERE ID = 1
25.10 17:09:16 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:16 TIME: vdl/cache.tournament.getAvailableTournament : 2.9 ms
25.10 17:09:22 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 95, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 17:09:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 17:09:22 TIME: vdl/cache.tournament.addUsers : 0.16 ms
25.10 17:09:22 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:22 DB: SELECT * FROM tournament
25.10 17:09:22 DB: SELECT name FROM users WHERE id = 95
25.10 17:09:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:22 TIME: vdl/cache.tournament.getAvailableTournament : 3.44 ms
25.10 17:09:22 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-25-10 17:15', roundinterval = E'60', params = E'{"params":{"battleFinished":[],"usersList":[95],"battleActive":[]}}', rounddate = E'2016-25-10 17:15' WHERE ID = 1
25.10 17:09:23 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 17:09:23 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 17:09:23 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
25.10 17:09:23 TIME: core/server.query : 1.03 ms
25.10 17:09:23 NET: vdl.0 (thread) request core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 17:09:23 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 17:09:23 TIME: core/user.isOnlineID : 0.06 ms
25.10 17:09:23 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 17:09:23 READDB: SELECT * FROM Users WHERE ID = 94
25.10 17:09:23 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 94 } }
25.10 17:09:23 TIME: core/cache.get : 1.19 ms
25.10 17:09:23 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 17:09:23 READDB: SELECT * FROM UserQuests WHERE ID = 94
25.10 17:09:23 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
25.10 17:09:23 TIME: core/cache.get : 0.93 ms
25.10 17:09:23 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 17:09:23 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
25.10 17:09:23 TIME: core/user.loginPost : 0.12 ms
25.10 17:09:29 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 17:09:29 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:09:29 TIME: core/cache.update : 0.2 ms
25.10 17:09:30 WRITEDB: UPDATE Users SET name = E'uid94', deleted = E'false', email = E'', networktype = E'  ', password = E'uid94', isbanned = E'false', regdate = E'2016-10-25 16:32:22.177493+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477402348,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}' WHERE ID = 94
25.10 17:09:32 BLOCKREMOVE: tournament 1 removed
25.10 17:09:34 TIMER: Clans cache...
25.10 17:09:34 TIMER: Clans cache: 0ms
25.10 17:09:34 TIMER: Check tournament...
25.10 17:09:34 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:09' OR rounddate = '2016-25-10 17:09' AND status <> 'finished'
25.10 17:09:34 TIMER: Check tournament: 0ms
25.10 17:09:38 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:38 DB: SELECT * FROM tournament
25.10 17:09:38 READDB: SELECT * FROM Tournament WHERE ID = 1
25.10 17:09:38 DB: SELECT name FROM users WHERE id = 95
25.10 17:09:38 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:38 TIME: vdl/cache.tournament.getAvailableTournament : 2.89 ms
25.10 17:09:43 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 94, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 17:09:43 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 17:09:43 TIME: vdl/cache.tournament.addUsers : 0.27 ms
25.10 17:09:44 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-25-10 17:15', roundinterval = E'60', params = E'{"params":{"battleFinished":[],"usersList":[95,94],"battleActive":[]}}', rounddate = E'2016-25-10 17:15' WHERE ID = 1
25.10 17:09:54 BLOCKREMOVE: tournament 1 removed
25.10 17:09:57 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:57 DB: SELECT * FROM tournament
25.10 17:09:57 READDB: SELECT * FROM Tournament WHERE ID = 1
25.10 17:09:57 DB: SELECT name FROM users WHERE id = 95
25.10 17:09:57 DB: SELECT name FROM users WHERE id = 94
25.10 17:09:57 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:57 TIME: vdl/cache.tournament.getAvailableTournament : 5.6 ms
25.10 17:09:59 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 17:09:59 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95,94] }
25.10 17:09:59 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.21 ms
25.10 17:09:59 NET: vdl.0 (thread) request vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [95], _type => vdl/cache.tournament.setUsersTournament }
25.10 17:09:59 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
25.10 17:09:59 TIME: vdl/cache.tournament.setUsersTournament : 0.09 ms
25.10 17:09:59 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:59 DB: SELECT * FROM tournament
25.10 17:09:59 DB: SELECT name FROM users WHERE id = 95
25.10 17:09:59 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:59 TIME: vdl/cache.tournament.getAvailableTournament : 0.89 ms
25.10 17:10:03 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-25-10 17:15', roundinterval = E'60', params = E'{"params":{"battleFinished":[],"usersList":[95],"battleActive":[]}}', rounddate = E'2016-25-10 17:15' WHERE ID = 1
25.10 17:10:05 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true, _type => core/server.query }
25.10 17:10:05 DB: SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true
25.10 17:10:05 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 17:10:05 TIME: core/server.query : 1.18 ms
25.10 17:10:05 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 17:10:05 STATS: cache [battle], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
25.10 17:10:05 STATS: cache [battle], segments [1 calls, 0 hits, 0 misses]
25.10 17:10:05 STATS: cache [battle], database [152 calls, 0 reads, 0 writes]
25.10 17:10:05 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
25.10 17:10:05 READDB: SELECT * FROM Battle WHERE ID = 0
25.10 17:10:05 TRACE: vdl/cache.battle.infoRoom : Invalid field access : get
25.10 17:10:05 TRACE: vdl/cache.battle.infoRoom : 
Called from modules/VDLCache.hx line 149
Called from modules/VDLCache.hx line 142
Called from modules/VDLCache.hx line 97
Called from snipe/cache/CacheServer.hx line 487
25.10 17:10:05 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 17:10:05 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 95, _type => core/cache.update }
25.10 17:10:05 STATS: cache [user], get [2 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
25.10 17:10:05 STATS: cache [user], segments [7 calls, 2 hits, 4 misses]
25.10 17:10:05 STATS: cache [user], database [152 calls, 2 reads, 2 writes]
25.10 17:10:05 STATS: cache [user], lock [2 calls, 2 attempts, 0 failures]
25.10 17:10:05 STATS: cache manager [1], get [4 calls, total 0.01 sec spent, avg 1.91 ms]
25.10 17:10:05 STATS: cache manager [1], update [3 calls, total 0 sec spent, avg 0.11 ms]
25.10 17:10:05 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 17:10:05 TIME: core/cache.update : 0.37 ms
25.10 17:10:05 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 95, _type => core/cache.update }
25.10 17:10:05 STATS: cache [questdata], get [2 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
25.10 17:10:05 STATS: cache [questdata], segments [5 calls, 0 hits, 4 misses]
25.10 17:10:05 STATS: cache [questdata], database [152 calls, 2 reads, 0 writes]
25.10 17:10:05 STATS: cache [questdata], lock [2 calls, 2 attempts, 0 failures]
25.10 17:10:05 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:10:05 TIME: core/cache.update : 0.23 ms
25.10 17:10:05 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 95, _type => core/user.logoutPost }
25.10 17:10:05 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 17:10:05 TIME: core/user.logoutPost : 0.08 ms
25.10 17:10:06 WRITEDB: UPDATE Users SET name = E'uid95', deleted = E'false', email = E'', networktype = E'  ', password = E'uid95', isbanned = E'false', regdate = E'2016-10-25 16:40:34.208622+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477402835,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}' WHERE ID = 95
25.10 17:10:06 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 95
25.10 17:10:13 BLOCKREMOVE: tournament 1 removed
25.10 17:10:16 BLOCKREMOVE: user 95 removed
25.10 17:10:16 BLOCKREMOVE: questdata 95 removed
25.10 17:10:34 TIMER: Clans cache...
25.10 17:10:34 TIMER: Clans cache: 0ms
25.10 17:10:34 TIMER: Check tournament...
25.10 17:10:34 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:10' OR rounddate = '2016-25-10 17:10' AND status <> 'finished'
25.10 17:10:34 TIMER: Check tournament: 1ms
25.10 17:10:34 TIMER: Clans cache...
25.10 17:10:34 TIMER: Clans cache: 0ms
25.10 17:10:34 TIMER: Check tournament...
25.10 17:10:34 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:11' OR rounddate = '2016-25-10 17:11' AND status <> 'finished'
25.10 17:10:34 TIMER: Check tournament: 1ms
25.10 17:11:42 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true, _type => core/server.query }
25.10 17:11:42 DB: SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true
25.10 17:11:42 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 17:11:42 TIME: core/server.query : 1.26 ms
25.10 17:11:42 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 17:11:42 STATS: cache [battle], get [2 calls, 0 cache hits, 1 cache misses, 0 same version, 1 not found]
25.10 17:11:42 STATS: cache [battle], segments [2 calls, 0 hits, 1 misses]
25.10 17:11:42 STATS: cache [battle], database [249 calls, 1 reads, 0 writes]
25.10 17:11:42 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
25.10 17:11:42 READDB: SELECT * FROM Battle WHERE ID = 0
25.10 17:11:42 TRACE: vdl/cache.battle.infoRoom : Invalid field access : get
25.10 17:11:42 TRACE: vdl/cache.battle.infoRoom : 
Called from modules/VDLCache.hx line 149
Called from modules/VDLCache.hx line 142
Called from modules/VDLCache.hx line 97
Called from snipe/cache/CacheServer.hx line 487
25.10 17:11:42 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 17:11:42 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 94, _type => core/cache.update }
25.10 17:11:42 STATS: cache [user], get [2 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
25.10 17:11:42 STATS: cache [user], segments [9 calls, 4 hits, 4 misses]
25.10 17:11:42 STATS: cache [user], database [249 calls, 2 reads, 3 writes]
25.10 17:11:42 STATS: cache [user], lock [2 calls, 2 attempts, 0 failures]
25.10 17:11:42 STATS: cache manager [1], get [4 calls, total 0.01 sec spent, avg 1.91 ms]
25.10 17:11:42 STATS: cache manager [1], update [5 calls, total 0 sec spent, avg 0.17 ms]
25.10 17:11:42 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 17:11:42 TIME: core/cache.update : 0.63 ms
25.10 17:11:42 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 94, _type => core/cache.update }
25.10 17:11:42 STATS: cache [questdata], get [2 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
25.10 17:11:42 STATS: cache [questdata], segments [7 calls, 2 hits, 4 misses]
25.10 17:11:42 STATS: cache [questdata], database [249 calls, 2 reads, 1 writes]
25.10 17:11:42 STATS: cache [questdata], lock [2 calls, 2 attempts, 0 failures]
25.10 17:11:42 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:11:42 TIME: core/cache.update : 0.38 ms
25.10 17:11:42 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 94, _type => core/user.logoutPost }
25.10 17:11:42 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 17:11:42 TIME: core/user.logoutPost : 0.17 ms
25.10 17:11:43 WRITEDB: UPDATE Users SET name = E'uid94', deleted = E'false', email = E'', networktype = E'  ', password = E'uid94', isbanned = E'false', regdate = E'2016-10-25 16:32:22.177493+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477402348,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}' WHERE ID = 94
25.10 17:11:43 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 94
25.10 17:11:53 BLOCKREMOVE: user 94 removed
25.10 17:11:53 BLOCKREMOVE: questdata 94 removed
25.10 17:12:03 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 17:12:03 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 17:12:03 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
25.10 17:12:03 TIME: core/server.query : 1.07 ms
25.10 17:12:03 NET: vdl.0 (thread) request core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 17:12:03 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 17:12:03 TIME: core/user.isOnlineID : 0.08 ms
25.10 17:12:03 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 17:12:03 READDB: SELECT * FROM Users WHERE ID = 94
25.10 17:12:03 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 94 } }
25.10 17:12:03 TIME: core/cache.get : 1.21 ms
25.10 17:12:03 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 17:12:03 READDB: SELECT * FROM UserQuests WHERE ID = 94
25.10 17:12:03 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
25.10 17:12:03 TIME: core/cache.get : 0.71 ms
25.10 17:12:03 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 17:12:03 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
25.10 17:12:03 TIME: core/user.loginPost : 0.07 ms
25.10 17:12:08 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 17:12:08 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 17:12:08 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid95, networkid => , isbanned => false, id => 95 }}, errorCode => ok, _type => core/server.query }
25.10 17:12:08 TIME: core/server.query : 0.98 ms
25.10 17:12:08 NET: vdl.0 (thread) request core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 17:12:08 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 17:12:08 TIME: core/user.isOnlineID : 0.06 ms
25.10 17:12:08 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 17:12:08 READDB: SELECT * FROM Users WHERE ID = 95
25.10 17:12:08 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid95, deleted => false, email => , networktype =>   , password => uid95, isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402835, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 95 } }
25.10 17:12:08 TIME: core/cache.get : 1.34 ms
25.10 17:12:08 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 17:12:08 READDB: SELECT * FROM UserQuests WHERE ID = 95
25.10 17:12:08 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 95 } }
25.10 17:12:08 TIME: core/cache.get : 0.74 ms
25.10 17:12:08 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 17:12:08 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
25.10 17:12:08 TIME: core/user.loginPost : 0.08 ms
25.10 17:12:09 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 17:12:09 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:12:09 TIME: core/cache.update : 0.1 ms
25.10 17:12:09 WRITEDB: UPDATE Users SET name = E'uid94', deleted = E'false', email = E'', networktype = E'  ', password = E'uid94', isbanned = E'false', regdate = E'2016-10-25 16:32:22.177493+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477402348,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}' WHERE ID = 94
25.10 17:12:14 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 17:12:14 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:12:14 TIME: core/cache.update : 0.11 ms
25.10 17:12:14 WRITEDB: UPDATE Users SET name = E'uid95', deleted = E'false', email = E'', networktype = E'  ', password = E'uid95', isbanned = E'false', regdate = E'2016-10-25 16:40:34.208622+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477402835,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}' WHERE ID = 95
25.10 17:12:17 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:12:17 DB: SELECT * FROM tournament
25.10 17:12:17 STATS: cache [tournament], get [10 calls, 6 cache hits, 3 cache misses, 0 same version, 0 not found]
25.10 17:12:17 STATS: cache [tournament], segments [14 calls, 10 hits, 3 misses]
25.10 17:12:17 STATS: cache [tournament], database [284 calls, 3 reads, 3 writes]
25.10 17:12:17 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
25.10 17:12:17 READDB: SELECT * FROM Tournament WHERE ID = 1
25.10 17:12:17 DB: SELECT name FROM users WHERE id = 95
25.10 17:12:17 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:12:17 TIME: vdl/cache.tournament.getAvailableTournament : 3.42 ms
25.10 17:12:23 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 94, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 17:12:23 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 17:12:23 TIME: vdl/cache.tournament.addUsers : 0.12 ms
25.10 17:12:23 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-25-10 17:15', roundinterval = E'60', params = E'{"params":{"battleFinished":[],"usersList":[95,94],"battleActive":[]}}', rounddate = E'2016-25-10 17:15' WHERE ID = 1
25.10 17:15:41 TIMER: Starting timer...
25.10 17:15:41 TIMER: Timer running...
25.10 17:15:41 DB: SELECT * FROM GameVars
25.10 17:15:41 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 17:15:41 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 17:15:41 DB: SELECT * FROM Shops WHERE ID = 1
25.10 17:15:41 TEMP: load ./tmp/quest_daily_ids
25.10 17:15:41 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
25.10 17:15:41 TEMP: save ./tmp/quest_daily_ids
25.10 17:15:41 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
25.10 17:15:41 QUEUE: vdl.0 (thread) response server.login
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.10 17:15:41 DB: SELECT * FROM LocalizationStrings
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 6 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.10 17:15:41 DB: SELECT * FROM GameVars
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 0.59 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.10 17:15:41 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 0.6 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.10 17:15:41 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 0.67 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.10 17:15:41 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 0.48 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.10 17:15:41 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 1.06 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/quest.getDaily
25.10 17:15:41 TIME: core/quest.getDaily : 0.02 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.10 17:15:41 DB: SELECT * FROM UserAttributeTypes
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 0.32 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.10 17:15:41 DB: SELECT * FROM UserVariableTypes
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 0.38 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.10 17:15:41 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 1.07 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.10 17:15:41 DB: SELECT * FROM ItemGroups
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 0.37 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.10 17:15:41 DB: SELECT * FROM Bundles ORDER BY ID
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 0.51 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.10 17:15:41 DB: SELECT * FROM BundleItems ORDER BY ID
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 0.49 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/shop.getList
25.10 17:15:41 TIME: core/shop.getList : 0.02 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.10 17:15:41 DB: SELECT * FROM EffectAttributeTypes
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 0.45 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.10 17:15:41 DB: SELECT * FROM Effects
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 0.43 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.10 17:15:41 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 0.58 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.10 17:15:41 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 0.55 ms
25.10 17:15:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.10 17:15:41 DB: SELECT * FROM Badges
25.10 17:15:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:15:41 TIME: core/server.query : 0.28 ms
25.10 17:16:06 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 17:16:06 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 17:16:06 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:16:06 TIME: core/server.query : 2.39 ms
25.10 17:16:06 NET: vdl.0 (thread) request core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 17:16:06 QUEUE: vdl.0 (thread) response core/user.isOnlineID
25.10 17:16:06 TIME: core/user.isOnlineID : 0.08 ms
25.10 17:16:06 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 17:16:06 READDB: SELECT * FROM Users WHERE ID = 95
25.10 17:16:06 QUEUE: vdl.0 (thread) response core/cache.get
25.10 17:16:06 TIME: core/cache.get : 5.1 ms
25.10 17:16:06 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 17:16:06 READDB: SELECT * FROM UserQuests WHERE ID = 95
25.10 17:16:06 QUEUE: vdl.0 (thread) response core/cache.get
25.10 17:16:06 TIME: core/cache.get : 1.43 ms
25.10 17:16:06 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 17:16:06 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
25.10 17:16:06 TIME: core/user.loginPost : 0.18 ms
25.10 17:16:11 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 17:16:11 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:16:11 TIME: core/cache.update : 0.07 ms
25.10 17:16:12 WRITEDB: UPDATE Users SET name = E'uid95', deleted = E'false', email = E'', networktype = E'  ', password = E'uid95', isbanned = E'false', regdate = E'2016-10-25 16:40:34.208622+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477402835,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}' WHERE ID = 95
25.10 17:16:41 TIMER: Clans cache...
25.10 17:16:41 TIMER: Clans cache: 0ms
25.10 17:16:41 TIMER: Check tournament...
25.10 17:16:41 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:16' OR rounddate = '2016-25-10 17:16' AND status <> 'finished'
25.10 17:16:41 TIMER: Check tournament: 1ms
25.10 17:16:57 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 17:16:57 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 17:16:57 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
25.10 17:16:57 TIME: core/server.query : 2.77 ms
25.10 17:16:57 NET: vdl.0 (thread) request core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 17:16:57 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 17:16:57 TIME: core/user.isOnlineID : 0.11 ms
25.10 17:16:57 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 17:16:57 STATS: cache [user], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
25.10 17:16:57 STATS: cache [user], segments [4 calls, 1 hits, 2 misses]
25.10 17:16:57 STATS: cache [user], database [77 calls, 1 reads, 1 writes]
25.10 17:16:57 STATS: cache [user], lock [2 calls, 2 attempts, 0 failures]
25.10 17:16:57 READDB: SELECT * FROM Users WHERE ID = 94
25.10 17:16:57 STATS: cache manager [1], get [3 calls, total 0.01 sec spent, avg 2.67 ms]
25.10 17:16:57 STATS: cache manager [1], update [1 calls, total 0 sec spent, avg 0.03 ms]
25.10 17:16:57 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 94 } }
25.10 17:16:57 TIME: core/cache.get : 2.15 ms
25.10 17:16:57 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 17:16:57 STATS: cache [questdata], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
25.10 17:16:57 STATS: cache [questdata], segments [3 calls, 0 hits, 2 misses]
25.10 17:16:57 STATS: cache [questdata], database [77 calls, 1 reads, 0 writes]
25.10 17:16:57 STATS: cache [questdata], lock [2 calls, 2 attempts, 0 failures]
25.10 17:16:57 READDB: SELECT * FROM UserQuests WHERE ID = 94
25.10 17:16:57 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
25.10 17:16:57 TIME: core/cache.get : 1.4 ms
25.10 17:16:57 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 17:16:57 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
25.10 17:16:57 TIME: core/user.loginPost : 0.13 ms
25.10 17:17:06 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 17:17:06 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:17:06 TIME: core/cache.update : 0.14 ms
25.10 17:17:07 WRITEDB: UPDATE Users SET name = E'uid94', deleted = E'false', email = E'', networktype = E'  ', password = E'uid94', isbanned = E'false', regdate = E'2016-10-25 16:32:22.177493+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477402348,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}' WHERE ID = 94
25.10 17:17:15 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:17:15 DB: SELECT * FROM tournament
25.10 17:17:15 STATS: cache [tournament], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
25.10 17:17:15 STATS: cache [tournament], segments [1 calls, 0 hits, 0 misses]
25.10 17:17:15 STATS: cache [tournament], database [94 calls, 0 reads, 0 writes]
25.10 17:17:15 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
25.10 17:17:15 READDB: SELECT * FROM Tournament WHERE ID = 1
25.10 17:17:15 DB: SELECT name FROM users WHERE id = 95
25.10 17:17:15 DB: SELECT name FROM users WHERE id = 94
25.10 17:17:15 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 17:19, startdate => 2016-25-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:17:15 TIME: vdl/cache.tournament.getAvailableTournament : 3.06 ms
25.10 17:17:19 NET: vdl.0 (thread) request vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 17:17:19 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
25.10 17:17:19 TIME: vdl/cache.tournament.getStatus : 0.15 ms
25.10 17:17:19 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 17:17:19 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95,94] }
25.10 17:17:19 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.14 ms
25.10 17:17:19 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 95, player2 => 94 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
25.10 17:17:19 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 95, player2 => 94 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 17:17:19 TIME: vdl/cache.tournament.setGrid : 0.08 ms
25.10 17:17:23 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:17:23 DB: SELECT * FROM tournament
25.10 17:17:23 DB: SELECT name FROM users WHERE id = 95
25.10 17:17:23 DB: SELECT name FROM users WHERE id = 94
25.10 17:17:23 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 17:19, startdate => 2016-25-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:17:23 TIME: vdl/cache.tournament.getAvailableTournament : 4.38 ms
25.10 17:17:33 BLOCKREMOVE: tournament 1 removed
25.10 17:17:41 TIMER: Clans cache...
25.10 17:17:41 TIMER: Clans cache: 0ms
25.10 17:17:41 TIMER: Check tournament...
25.10 17:17:41 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:17' OR rounddate = '2016-25-10 17:17' AND status <> 'finished'
25.10 17:17:41 TIMER: Check tournament: 0ms
25.10 17:17:41 TIMER: Clans cache...
25.10 17:17:41 TIMER: Clans cache: 0ms
25.10 17:17:41 TIMER: Check tournament...
25.10 17:17:41 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:18' OR rounddate = '2016-25-10 17:18' AND status <> 'finished'
25.10 17:17:41 TIMER: Check tournament: 0ms
25.10 17:17:41 TIMER: Clans cache...
25.10 17:17:41 TIMER: Clans cache: 0ms
25.10 17:17:41 TIMER: Check tournament...
25.10 17:17:41 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:19' OR rounddate = '2016-25-10 17:19' AND status <> 'finished'
25.10 17:17:41 STATS: cache [tournament], get [5 calls, 3 cache hits, 1 cache misses, 0 same version, 0 not found]
25.10 17:17:41 STATS: cache [tournament], segments [6 calls, 4 hits, 1 misses]
25.10 17:17:41 STATS: cache [tournament], database [240 calls, 1 reads, 0 writes]
25.10 17:17:41 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
25.10 17:17:41 READDB: SELECT * FROM Tournament WHERE ID = 1
25.10 17:17:41 DB: SELECT nextval('Battle_id_seq') AS id
25.10 17:17:41 READDB: SELECT ID FROM Battle WHERE ID = 78
25.10 17:17:41 READDB: INSERT INTO Battle (ID) VALUES (78)
25.10 17:17:41 STATS: cache [battle], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
25.10 17:17:41 STATS: cache [battle], segments [1 calls, 0 hits, 0 misses]
25.10 17:17:41 STATS: cache [battle], database [241 calls, 0 reads, 0 writes]
25.10 17:17:41 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
25.10 17:17:41 READDB: SELECT * FROM Battle WHERE ID = 78
25.10 17:17:41 DB: SELECT name FROM users WHERE id=94
25.10 17:17:41 DB: SELECT name FROM users WHERE id=95
25.10 17:17:41 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-25-10 17:19, id => 94, enemy.num => 2, battleId => 78, player => 1 }, _isNotify => true, id => 94, _type => tournament.enemyEvent }
25.10 17:17:41 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-25-10 17:19, id => 95, enemy.num => 1, battleId => 78, player => 2 }, _isNotify => true, id => 95, _type => tournament.enemyEvent }
25.10 17:17:41 TIMER: Check tournament: 58ms
25.10 17:19:46 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'active', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-25-10 17:19', roundinterval = E'60', params = E'{"params":{"battleFinished":[],"usersList":[95,94],"battleActive":[78]}}', rounddate = E'2016-25-10 17:19' WHERE ID = 1
25.10 17:19:47 WRITEDB: UPDATE Battle SET secondid = E'95', turnid = E'94', finished = E'false', firstid = E'94', params = E'{}', avaliable = E'false' WHERE ID = 78
25.10 17:19:56 BLOCKREMOVE: tournament 1 removed
25.10 17:19:57 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 78, _type => vdl/cache.battle.infoRoom }
25.10 17:19:57 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 95, firstId => 94, _type => vdl/cache.battle.infoRoom, turnId => 94 }
25.10 17:19:57 TIME: vdl/cache.battle.infoRoom : 0.14 ms
25.10 17:20:02 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 78, _type => vdl/cache.battle.infoRoom }
25.10 17:20:02 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 95, firstId => 94, _type => vdl/cache.battle.infoRoom, turnId => 94 }
25.10 17:20:02 TIME: vdl/cache.battle.infoRoom : 0.2 ms
25.10 17:20:03 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 78, _type => vdl/cache.battle.infoRoom }
25.10 17:20:03 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 95, firstId => 94, _type => vdl/cache.battle.infoRoom, turnId => 94 }
25.10 17:20:03 TIME: vdl/cache.battle.infoRoom : 0.14 ms
25.10 17:20:07 NET: vdl.0 (thread) request vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 17:20:07 READDB: SELECT * FROM Tournament WHERE ID = 1
25.10 17:20:07 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => active }
25.10 17:20:07 TIME: vdl/cache.tournament.getStatus : 1.93 ms
25.10 17:20:07 NET: vdl.0 (thread) request vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
25.10 17:20:07 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getBattlesTournaments [78]
25.10 17:20:07 TIME: vdl/cache.tournament.getBattlesTournaments : 0.21 ms
25.10 17:20:07 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 17:20:07 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95,94] }
25.10 17:20:07 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.25 ms
25.10 17:20:07 NET: vdl.0 (thread) request vdl/cache.battle.finishRoom { roomId => 78, _type => vdl/cache.battle.finishRoom }
25.10 17:20:07 QUEUE: vdl.0 (thread) response vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
25.10 17:20:07 TIME: vdl/cache.battle.finishRoom : 0.2 ms
25.10 17:20:07 NET: vdl.0 (thread) request vdl/cache.battle.deleteRoom { roomId => 78, _type => vdl/cache.battle.deleteRoom }
25.10 17:20:07 ROOM: deleted room 78
25.10 17:20:07 DB: DELETE FROM Battle WHERE ID = 78
25.10 17:20:07 QUEUE: vdl.0 (thread) response vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
25.10 17:20:07 TIME: vdl/cache.battle.deleteRoom : 26.89 ms
25.10 17:20:07 NET: vdl.0 (thread) request vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [78] }
25.10 17:20:07 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
25.10 17:20:07 TIME: vdl/cache.tournament.setBattlesTournaments : 0.09 ms
25.10 17:20:07 NET: vdl.0 (thread) request vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [95], _type => vdl/cache.tournament.setUsersTournament }
25.10 17:20:07 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
25.10 17:20:07 TIME: vdl/cache.tournament.setUsersTournament : 0.34 ms
25.10 17:20:07 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [{ winner => 95, round => 1, player1 => 94, player2 => 95 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => active }
25.10 17:20:07 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 95, player2 => 94 },{ winner => -1, round => 1, player1 => 95, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 17:20:07 TIME: vdl/cache.tournament.setGrid : 0.47 ms
25.10 17:20:07 NET: vdl.0 (thread) request vdl/cache.tournament.finish { tournamentId => 1, _type => vdl/cache.tournament.finish }
25.10 17:20:07 QUEUE: vdl.0 (thread) response vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
25.10 17:20:07 TIME: vdl/cache.tournament.finish : 0.06 ms
25.10 17:20:07 WRITEDB: UPDATE Battle SET secondid = E'95', turnid = E'94', finished = E'true', firstid = E'94', params = E'{}', avaliable = E'false' WHERE ID = 78
25.10 17:20:12 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'finished', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-25-10 17:19', roundinterval = E'60', params = E'{"params":{"battleFinished":[78],"usersList":[95],"battleActive":[]}}', rounddate = E'2016-25-10 17:19' WHERE ID = 1
25.10 17:20:17 BLOCKREMOVE: battle 78 removed
25.10 17:20:22 BLOCKREMOVE: tournament 1 removed
25.10 17:20:24 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:20:24 DB: SELECT * FROM tournament
25.10 17:20:24 READDB: SELECT * FROM Tournament WHERE ID = 1
25.10 17:20:24 DB: SELECT name FROM users WHERE id = 95
25.10 17:20:24 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78], round => 1, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:19, startdate => 2016-25-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:20:24 TIME: vdl/cache.tournament.getAvailableTournament : 2.89 ms
25.10 17:20:29 NET: vdl.0 (thread) request vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 17:20:29 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
25.10 17:20:29 TIME: vdl/cache.tournament.getStatus : 0.18 ms
25.10 17:20:29 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 17:20:29 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 95, player2 => 94 },{ winner => -1, round => 1, player1 => 95, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 17:20:29 TIME: vdl/cache.tournament.setGrid : 0.24 ms
25.10 17:20:39 BLOCKREMOVE: tournament 1 removed
25.10 17:27:41 TIMER: Starting timer...
25.10 17:27:41 TIMER: Timer running...
25.10 17:27:41 DB: SELECT * FROM GameVars
25.10 17:27:41 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 17:27:41 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 17:27:41 DB: SELECT * FROM Shops WHERE ID = 1
25.10 17:27:41 TEMP: load ./tmp/quest_daily_ids
25.10 17:27:41 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
25.10 17:27:41 TEMP: save ./tmp/quest_daily_ids
25.10 17:27:41 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
25.10 17:27:41 QUEUE: vdl.0 (thread) response server.login
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.10 17:27:41 DB: SELECT * FROM LocalizationStrings
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 8.38 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.10 17:27:41 DB: SELECT * FROM GameVars
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 0.63 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.10 17:27:41 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 0.66 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.10 17:27:41 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 0.4 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.10 17:27:41 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 0.61 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.10 17:27:41 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 0.8 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/quest.getDaily
25.10 17:27:41 TIME: core/quest.getDaily : 0.03 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.10 17:27:41 DB: SELECT * FROM UserAttributeTypes
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 0.32 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.10 17:27:41 DB: SELECT * FROM UserVariableTypes
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 0.55 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.10 17:27:41 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 0.95 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.10 17:27:41 DB: SELECT * FROM ItemGroups
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 0.42 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.10 17:27:41 DB: SELECT * FROM Bundles ORDER BY ID
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 0.41 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.10 17:27:41 DB: SELECT * FROM BundleItems ORDER BY ID
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 0.53 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/shop.getList
25.10 17:27:41 TIME: core/shop.getList : 0.04 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.10 17:27:41 DB: SELECT * FROM EffectAttributeTypes
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 0.92 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.10 17:27:41 DB: SELECT * FROM Effects
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 0.45 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.10 17:27:41 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 1.06 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.10 17:27:41 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 0.74 ms
25.10 17:27:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.10 17:27:41 DB: SELECT * FROM Badges
25.10 17:27:41 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:27:41 TIME: core/server.query : 2.88 ms
25.10 17:27:41 TIMER: Clans cache...
25.10 17:27:41 TIMER: Clans cache: 0ms
25.10 17:27:41 TIMER: Check tournament...
25.10 17:27:41 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:28' OR rounddate = '2016-25-10 17:28' AND status <> 'finished'
25.10 17:27:41 TIMER: Check tournament: 1ms
25.10 17:27:41 TIMER: Clans cache...
25.10 17:27:41 TIMER: Clans cache: 0ms
25.10 17:27:41 TIMER: Check tournament...
25.10 17:27:41 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:29' OR rounddate = '2016-25-10 17:29' AND status <> 'finished'
25.10 17:27:41 TIMER: Check tournament: 1ms
25.10 17:30:19 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 17:30:19 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 17:30:19 QUEUE: vdl.0 (thread) response core/server.query
25.10 17:30:19 TIME: core/server.query : 1.94 ms
25.10 17:30:19 NET: vdl.0 (thread) request core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 17:30:19 QUEUE: vdl.0 (thread) response core/user.isOnlineID
25.10 17:30:19 TIME: core/user.isOnlineID : 0.08 ms
25.10 17:30:19 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 17:30:19 STATS: cache [user], get [0 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
25.10 17:30:19 STATS: cache [user], segments [1 calls, 0 hits, 0 misses]
25.10 17:30:19 STATS: cache [user], database [158 calls, 0 reads, 0 writes]
25.10 17:30:19 STATS: cache [user], lock [1 calls, 1 attempts, 0 failures]
25.10 17:30:19 READDB: SELECT * FROM Users WHERE ID = 95
25.10 17:30:19 STATS: cache manager [1], get [1 calls, total 0 sec spent, avg 3.18 ms]
25.10 17:30:19 STATS: cache manager [1], update [0 calls, total 0 sec spent, avg -21474836.48 ms]
25.10 17:30:19 QUEUE: vdl.0 (thread) response core/cache.get
25.10 17:30:19 TIME: core/cache.get : 3.41 ms
25.10 17:30:19 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 17:30:19 STATS: cache [questdata], get [0 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
25.10 17:30:19 STATS: cache [questdata], segments [1 calls, 0 hits, 0 misses]
25.10 17:30:19 STATS: cache [questdata], database [158 calls, 0 reads, 0 writes]
25.10 17:30:19 STATS: cache [questdata], lock [1 calls, 1 attempts, 0 failures]
25.10 17:30:19 READDB: SELECT * FROM UserQuests WHERE ID = 95
25.10 17:30:19 QUEUE: vdl.0 (thread) response core/cache.get
25.10 17:30:19 TIME: core/cache.get : 1.19 ms
25.10 17:30:19 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 17:30:19 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
25.10 17:30:19 TIME: core/user.loginPost : 0.1 ms
25.10 17:30:24 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:30:24 DB: SELECT * FROM tournament
25.10 17:30:24 STATS: cache [tournament], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
25.10 17:30:24 STATS: cache [tournament], segments [1 calls, 0 hits, 0 misses]
25.10 17:30:24 STATS: cache [tournament], database [163 calls, 0 reads, 0 writes]
25.10 17:30:24 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
25.10 17:30:24 READDB: SELECT * FROM Tournament WHERE ID = 1
25.10 17:30:24 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:30:24 TIME: vdl/cache.tournament.getAvailableTournament : 3.23 ms
25.10 17:30:27 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 17:30:27 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:30:27 TIME: core/cache.update : 0.07 ms
25.10 17:30:27 WRITEDB: UPDATE Users SET name = E'uid95', deleted = E'false', email = E'', networktype = E'  ', password = E'uid95', isbanned = E'false', regdate = E'2016-10-25 16:40:34.208622+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477402835,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}' WHERE ID = 95
25.10 17:30:28 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 95, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 17:30:28 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 17:30:28 TIME: vdl/cache.tournament.addUsers : 0.2 ms
25.10 17:30:28 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:30:28 DB: SELECT * FROM tournament
25.10 17:30:28 DB: SELECT name FROM users WHERE id = 95
25.10 17:30:28 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:30:28 TIME: vdl/cache.tournament.getAvailableTournament : 1.58 ms
25.10 17:30:29 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-25-10 17:32', roundinterval = E'60', params = E'{"params":{"battleFinished":[78],"usersList":[95],"battleActive":[]}}', rounddate = E'2016-25-10 17:32' WHERE ID = 1
25.10 17:30:39 BLOCKREMOVE: tournament 1 removed
25.10 17:30:41 TIMER: Clans cache...
25.10 17:30:41 TIMER: Clans cache: 0ms
25.10 17:30:41 TIMER: Check tournament...
25.10 17:30:41 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:30' OR rounddate = '2016-25-10 17:30' AND status <> 'finished'
25.10 17:30:41 TIMER: Check tournament: 1ms
25.10 17:30:52 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 17:30:52 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 17:30:52 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
25.10 17:30:52 TIME: core/server.query : 1.26 ms
25.10 17:30:52 NET: vdl.0 (thread) request core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 17:30:52 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 17:30:52 TIME: core/user.isOnlineID : 0.04 ms
25.10 17:30:52 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 17:30:52 READDB: SELECT * FROM Users WHERE ID = 94
25.10 17:30:52 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 94 } }
25.10 17:30:52 TIME: core/cache.get : 0.72 ms
25.10 17:30:52 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 17:30:52 READDB: SELECT * FROM UserQuests WHERE ID = 94
25.10 17:30:52 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
25.10 17:30:52 TIME: core/cache.get : 0.31 ms
25.10 17:30:52 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 17:30:52 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
25.10 17:30:52 TIME: core/user.loginPost : 0.06 ms
25.10 17:31:00 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:31:00 DB: SELECT * FROM tournament
25.10 17:31:00 READDB: SELECT * FROM Tournament WHERE ID = 1
25.10 17:31:00 DB: SELECT name FROM users WHERE id = 95
25.10 17:31:00 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:31:00 TIME: vdl/cache.tournament.getAvailableTournament : 2.79 ms
25.10 17:31:02 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 17:31:02 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:31:02 TIME: core/cache.update : 0.12 ms
25.10 17:31:02 WRITEDB: UPDATE Users SET name = E'uid94', deleted = E'false', email = E'', networktype = E'  ', password = E'uid94', isbanned = E'false', regdate = E'2016-10-25 16:32:22.177493+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477402348,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}' WHERE ID = 94
25.10 17:31:07 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 94, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 17:31:07 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 17:31:07 TIME: vdl/cache.tournament.addUsers : 0.29 ms
25.10 17:31:08 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-25-10 17:32', roundinterval = E'60', params = E'{"params":{"battleFinished":[78],"usersList":[95,94],"battleActive":[]}}', rounddate = E'2016-25-10 17:32' WHERE ID = 1
25.10 17:31:16 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:31:16 DB: SELECT * FROM tournament
25.10 17:31:16 DB: SELECT name FROM users WHERE id = 95
25.10 17:31:16 DB: SELECT name FROM users WHERE id = 94
25.10 17:31:16 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:31:16 TIME: vdl/cache.tournament.getAvailableTournament : 3.99 ms
25.10 17:31:26 BLOCKREMOVE: tournament 1 removed
25.10 17:31:41 TIMER: Clans cache...
25.10 17:31:41 TIMER: Clans cache: 0ms
25.10 17:31:41 TIMER: Check tournament...
25.10 17:31:41 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:31' OR rounddate = '2016-25-10 17:31' AND status <> 'finished'
25.10 17:31:41 TIMER: Check tournament: 0ms
25.10 17:31:41 TIMER: Clans cache...
25.10 17:31:41 TIMER: Clans cache: 0ms
25.10 17:31:41 TIMER: Check tournament...
25.10 17:31:41 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:32' OR rounddate = '2016-25-10 17:32' AND status <> 'finished'
25.10 17:31:41 STATS: cache [tournament], get [7 calls, 4 cache hits, 2 cache misses, 0 same version, 0 not found]
25.10 17:31:41 STATS: cache [tournament], segments [9 calls, 6 hits, 2 misses]
25.10 17:31:41 STATS: cache [tournament], database [300 calls, 2 reads, 2 writes]
25.10 17:31:41 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
25.10 17:31:41 READDB: SELECT * FROM Tournament WHERE ID = 1
25.10 17:31:41 DB: SELECT nextval('Battle_id_seq') AS id
25.10 17:32:42 READDB: SELECT ID FROM Battle WHERE ID = 79
25.10 17:32:42 READDB: INSERT INTO Battle (ID) VALUES (79)
25.10 17:32:42 STATS: cache [battle], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
25.10 17:32:42 STATS: cache [battle], segments [1 calls, 0 hits, 0 misses]
25.10 17:32:42 STATS: cache [battle], database [300 calls, 0 reads, 0 writes]
25.10 17:32:42 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
25.10 17:32:42 READDB: SELECT * FROM Battle WHERE ID = 79
25.10 17:32:42 DB: SELECT name FROM users WHERE id=94
25.10 17:32:42 DB: SELECT name FROM users WHERE id=95
25.10 17:32:42 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-25-10 17:32, id => 94, enemy.num => 2, battleId => 79, player => 1 }, _isNotify => true, id => 94, _type => tournament.enemyEvent }
25.10 17:32:42 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-25-10 17:32, id => 95, enemy.num => 1, battleId => 79, player => 2 }, _isNotify => true, id => 95, _type => tournament.enemyEvent }
25.10 17:32:42 TIMER: Check tournament: 125ms
25.10 17:32:47 WRITEDB: UPDATE Battle SET secondid = E'95', turnid = E'94', finished = E'false', firstid = E'94', params = E'{}', avaliable = E'false' WHERE ID = 79
25.10 17:32:47 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'active', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-25-10 17:32', roundinterval = E'60', params = E'{"params":{"battleFinished":[78],"usersList":[95,94],"battleActive":[79]}}', rounddate = E'2016-25-10 17:32' WHERE ID = 1
25.10 17:32:51 NET: vdl.0 (thread) request vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 17:32:51 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => active }
25.10 17:32:51 TIME: vdl/cache.tournament.getStatus : 0.1 ms
25.10 17:32:51 NET: vdl.0 (thread) request vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
25.10 17:32:51 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getBattlesTournaments [79]
25.10 17:32:51 TIME: vdl/cache.tournament.getBattlesTournaments : 0.08 ms
25.10 17:32:51 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 17:32:51 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95,94] }
25.10 17:32:51 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.08 ms
25.10 17:32:51 NET: vdl.0 (thread) request vdl/cache.battle.finishRoom { roomId => 79, _type => vdl/cache.battle.finishRoom }
25.10 17:32:51 QUEUE: vdl.0 (thread) response vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
25.10 17:32:51 TIME: vdl/cache.battle.finishRoom : 0.05 ms
25.10 17:32:51 NET: vdl.0 (thread) request vdl/cache.battle.deleteRoom { roomId => 79, _type => vdl/cache.battle.deleteRoom }
25.10 17:32:51 ROOM: deleted room 79
25.10 17:32:51 DB: DELETE FROM Battle WHERE ID = 79
25.10 17:32:51 QUEUE: vdl.0 (thread) response vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
25.10 17:32:51 TIME: vdl/cache.battle.deleteRoom : 27.42 ms
25.10 17:32:51 NET: vdl.0 (thread) request vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [79] }
25.10 17:32:51 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
25.10 17:32:51 TIME: vdl/cache.tournament.setBattlesTournaments : 1.55 ms
25.10 17:32:51 NET: vdl.0 (thread) request vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [95], _type => vdl/cache.tournament.setUsersTournament }
25.10 17:32:51 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
25.10 17:32:51 TIME: vdl/cache.tournament.setUsersTournament : 0.08 ms
25.10 17:32:51 NET: vdl.0 (thread) request vdl/cache.tournament.addRound { dateRound => 2016-25-10 17:32, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
25.10 17:32:51 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
25.10 17:32:51 TIME: vdl/cache.tournament.addRound : 0.07 ms
25.10 17:32:51 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [{ winner => 95, round => 2, player1 => 94, player2 => 95 }], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => active }
25.10 17:32:51 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 95, round => 2, player1 => 94, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 17:32:51 TIME: vdl/cache.tournament.setGrid : 0.05 ms
25.10 17:32:51 NET: vdl.0 (thread) request vdl/cache.tournament.finish { tournamentId => 1, _type => vdl/cache.tournament.finish }
25.10 17:32:51 QUEUE: vdl.0 (thread) response vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
25.10 17:32:51 TIME: vdl/cache.tournament.finish : 0.07 ms
25.10 17:32:52 WRITEDB: UPDATE Battle SET secondid = E'95', turnid = E'94', finished = E'true', firstid = E'94', params = E'{}', avaliable = E'false' WHERE ID = 79
25.10 17:32:52 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'finished', type = E'once', repeatinterval = E'0', round = E'2', startdate = E'2016-25-10 17:32', roundinterval = E'60', params = E'{"params":{"battleFinished":[78,79],"usersList":[95],"battleActive":[]}}', rounddate = E'2016-25-10 17:32' WHERE ID = 1
25.10 17:32:58 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:32:58 DB: SELECT * FROM tournament
25.10 17:32:58 DB: SELECT name FROM users WHERE id = 95
25.10 17:32:58 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78,79], round => 2, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:32:58 TIME: vdl/cache.tournament.getAvailableTournament : 0.87 ms
25.10 17:33:02 BLOCKREMOVE: battle 79 removed
25.10 17:33:03 NET: vdl.0 (thread) request vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 17:33:03 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
25.10 17:33:03 TIME: vdl/cache.tournament.getStatus : 0.09 ms
25.10 17:33:03 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 17:33:03 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 95, round => 2, player1 => 94, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 17:33:03 TIME: vdl/cache.tournament.setGrid : 0.11 ms
25.10 17:33:14 BLOCKREMOVE: tournament 1 removed
25.10 17:33:42 TIMER: Clans cache...
25.10 17:33:42 TIMER: Clans cache: 0ms
25.10 17:33:42 TIMER: Check tournament...
25.10 17:33:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:33' OR rounddate = '2016-25-10 17:33' AND status <> 'finished'
25.10 17:33:42 TIMER: Check tournament: 1ms
25.10 17:33:42 TIMER: Clans cache...
25.10 17:33:42 TIMER: Clans cache: 0ms
25.10 17:33:42 TIMER: Check tournament...
25.10 17:33:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:34' OR rounddate = '2016-25-10 17:34' AND status <> 'finished'
25.10 17:33:42 TIMER: Check tournament: 0ms
25.10 17:33:42 TIMER: Clans cache...
25.10 17:33:42 TIMER: Clans cache: 0ms
25.10 17:33:42 TIMER: Check tournament...
25.10 17:33:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:35' OR rounddate = '2016-25-10 17:35' AND status <> 'finished'
25.10 17:33:42 TIMER: Check tournament: 1ms
25.10 17:36:41 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true, _type => core/server.query }
25.10 17:36:41 DB: SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true
25.10 17:36:41 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 17:36:41 TIME: core/server.query : 1.76 ms
25.10 17:36:41 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 17:36:41 STATS: cache [battle], get [3 calls, 1 cache hits, 1 cache misses, 0 same version, 0 not found]
25.10 17:36:41 STATS: cache [battle], segments [7 calls, 5 hits, 1 misses]
25.10 17:36:41 STATS: cache [battle], database [540 calls, 1 reads, 2 writes]
25.10 17:36:41 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
25.10 17:36:41 READDB: SELECT * FROM Battle WHERE ID = 0
25.10 17:36:41 TRACE: vdl/cache.battle.infoRoom : Invalid field access : get
25.10 17:36:41 TRACE: vdl/cache.battle.infoRoom : 
Called from modules/VDLCache.hx line 149
Called from modules/VDLCache.hx line 142
Called from modules/VDLCache.hx line 97
Called from snipe/cache/CacheServer.hx line 487
25.10 17:36:41 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 17:36:41 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 95, _type => core/cache.update }
25.10 17:36:41 STATS: cache [user], get [2 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
25.10 17:36:41 STATS: cache [user], segments [7 calls, 2 hits, 4 misses]
25.10 17:36:41 STATS: cache [user], database [540 calls, 2 reads, 2 writes]
25.10 17:36:41 STATS: cache [user], lock [2 calls, 2 attempts, 0 failures]
25.10 17:36:41 STATS: cache manager [1], get [4 calls, total 0.01 sec spent, avg 1.3 ms]
25.10 17:36:41 STATS: cache manager [1], update [3 calls, total 0 sec spent, avg 0.13 ms]
25.10 17:36:41 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 17:36:41 TIME: core/cache.update : 0.65 ms
25.10 17:36:41 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 95, _type => core/cache.update }
25.10 17:36:41 STATS: cache [questdata], get [2 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
25.10 17:36:41 STATS: cache [questdata], segments [5 calls, 0 hits, 4 misses]
25.10 17:36:41 STATS: cache [questdata], database [540 calls, 2 reads, 0 writes]
25.10 17:36:41 STATS: cache [questdata], lock [2 calls, 2 attempts, 0 failures]
25.10 17:36:41 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:36:41 TIME: core/cache.update : 0.38 ms
25.10 17:36:41 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 95, _type => core/user.logoutPost }
25.10 17:36:41 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 17:36:41 TIME: core/user.logoutPost : 0.13 ms
25.10 17:36:42 TIMER: Clans cache...
25.10 17:36:42 TIMER: Clans cache: 0ms
25.10 17:36:42 TIMER: Check tournament...
25.10 17:36:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:36' OR rounddate = '2016-25-10 17:36' AND status <> 'finished'
25.10 17:36:42 TIMER: Check tournament: 0ms
25.10 17:36:42 WRITEDB: UPDATE Users SET name = E'uid95', deleted = E'false', email = E'', networktype = E'  ', password = E'uid95', isbanned = E'false', regdate = E'2016-10-25 16:40:34.208622+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477402835,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}' WHERE ID = 95
25.10 17:36:42 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 95
25.10 17:36:52 BLOCKREMOVE: user 95 removed
25.10 17:36:52 BLOCKREMOVE: questdata 95 removed
25.10 17:37:24 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 17:37:24 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 17:37:24 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid95, networkid => , isbanned => false, id => 95 }}, errorCode => ok, _type => core/server.query }
25.10 17:37:24 TIME: core/server.query : 0.91 ms
25.10 17:37:24 NET: vdl.0 (thread) request core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 17:37:24 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 17:37:24 TIME: core/user.isOnlineID : 0.06 ms
25.10 17:37:24 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 17:37:24 READDB: SELECT * FROM Users WHERE ID = 95
25.10 17:37:24 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid95, deleted => false, email => , networktype =>   , password => uid95, isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402835, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 95 } }
25.10 17:37:24 TIME: core/cache.get : 1.19 ms
25.10 17:37:24 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 17:37:24 READDB: SELECT * FROM UserQuests WHERE ID = 95
25.10 17:37:24 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 95 } }
25.10 17:37:24 TIME: core/cache.get : 0.53 ms
25.10 17:37:24 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 17:37:24 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
25.10 17:37:24 TIME: core/user.loginPost : 0.06 ms
25.10 17:37:28 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:37:28 DB: SELECT * FROM tournament
25.10 17:37:28 STATS: cache [tournament], get [17 calls, 13 cache hits, 3 cache misses, 0 same version, 0 not found]
25.10 17:37:28 STATS: cache [tournament], segments [25 calls, 21 hits, 3 misses]
25.10 17:37:28 STATS: cache [tournament], database [587 calls, 3 reads, 4 writes]
25.10 17:37:28 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
25.10 17:37:28 READDB: SELECT * FROM Tournament WHERE ID = 1
25.10 17:37:28 DB: SELECT name FROM users WHERE id = 95
25.10 17:37:28 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78,79], round => 2, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:37:28 TIME: vdl/cache.tournament.getAvailableTournament : 3.56 ms
25.10 17:37:32 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 17:37:32 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:37:32 TIME: core/cache.update : 0.18 ms
25.10 17:37:32 WRITEDB: UPDATE Users SET name = E'uid95', deleted = E'false', email = E'', networktype = E'  ', password = E'uid95', isbanned = E'false', regdate = E'2016-10-25 16:40:34.208622+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477402835,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}' WHERE ID = 95
25.10 17:37:34 NET: vdl.0 (thread) request vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 17:37:34 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
25.10 17:37:34 TIME: vdl/cache.tournament.getStatus : 0.24 ms
25.10 17:37:34 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 17:37:34 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 95, round => 2, player1 => 94, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 17:37:34 TIME: vdl/cache.tournament.setGrid : 0.2 ms
25.10 17:37:42 TIMER: Clans cache...
25.10 17:37:42 TIMER: Clans cache: 0ms
25.10 17:37:42 TIMER: Check tournament...
25.10 17:37:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:37' OR rounddate = '2016-25-10 17:37' AND status <> 'finished'
25.10 17:37:42 TIMER: Check tournament: 0ms
25.10 17:37:44 BLOCKREMOVE: tournament 1 removed
25.10 17:38:42 TIMER: Clans cache...
25.10 17:38:42 TIMER: Clans cache: 0ms
25.10 17:38:42 TIMER: Check tournament...
25.10 17:38:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:38' OR rounddate = '2016-25-10 17:38' AND status <> 'finished'
25.10 17:38:42 TIMER: Check tournament: 1ms
25.10 17:38:42 TIMER: Clans cache...
25.10 17:38:42 TIMER: Clans cache: 0ms
25.10 17:38:42 TIMER: Check tournament...
25.10 17:38:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:39' OR rounddate = '2016-25-10 17:39' AND status <> 'finished'
25.10 17:38:42 TIMER: Check tournament: 1ms
25.10 17:38:42 TIMER: Clans cache...
25.10 17:38:42 TIMER: Clans cache: 0ms
25.10 17:38:42 TIMER: Check tournament...
25.10 17:38:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:40' OR rounddate = '2016-25-10 17:40' AND status <> 'finished'
25.10 17:38:42 TIMER: Check tournament: 1ms
25.10 17:38:42 TIMER: Clans cache...
25.10 17:38:42 TIMER: Clans cache: 0ms
25.10 17:38:42 TIMER: Check tournament...
25.10 17:38:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:41' OR rounddate = '2016-25-10 17:41' AND status <> 'finished'
25.10 17:38:42 TIMER: Check tournament: 4ms
25.10 17:38:42 TIMER: Clans cache...
25.10 17:38:42 TIMER: Clans cache: 0ms
25.10 17:38:42 TIMER: Check tournament...
25.10 17:38:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:42' OR rounddate = '2016-25-10 17:42' AND status <> 'finished'
25.10 17:38:42 TIMER: Check tournament: 1ms
25.10 17:38:42 TIMER: Clans cache...
25.10 17:38:42 TIMER: Clans cache: 0ms
25.10 17:38:42 TIMER: Check tournament...
25.10 17:38:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:43' OR rounddate = '2016-25-10 17:43' AND status <> 'finished'
25.10 17:38:42 TIMER: Check tournament: 0ms
25.10 17:38:42 TIMER: Clans cache...
25.10 17:38:42 TIMER: Clans cache: 0ms
25.10 17:38:42 TIMER: Check tournament...
25.10 17:38:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:44' OR rounddate = '2016-25-10 17:44' AND status <> 'finished'
25.10 17:38:42 TIMER: Check tournament: 0ms
25.10 17:38:42 TIMER: Clans cache...
25.10 17:38:42 TIMER: Clans cache: 0ms
25.10 17:38:42 TIMER: Check tournament...
25.10 17:38:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:45' OR rounddate = '2016-25-10 17:45' AND status <> 'finished'
25.10 17:38:42 TIMER: Check tournament: 0ms
25.10 17:46:41 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true, _type => core/server.query }
25.10 17:46:41 DB: SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true
25.10 17:46:41 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 17:46:41 TIME: core/server.query : 1.08 ms
25.10 17:46:41 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 17:46:41 STATS: cache [battle], get [4 calls, 1 cache hits, 2 cache misses, 0 same version, 1 not found]
25.10 17:46:41 STATS: cache [battle], segments [8 calls, 5 hits, 2 misses]
25.10 17:46:41 STATS: cache [battle], database [1140 calls, 2 reads, 2 writes]
25.10 17:46:41 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
25.10 17:46:41 READDB: SELECT * FROM Battle WHERE ID = 0
25.10 17:46:41 TRACE: vdl/cache.battle.infoRoom : Invalid field access : get
25.10 17:46:41 TRACE: vdl/cache.battle.infoRoom : 
Called from modules/VDLCache.hx line 149
Called from modules/VDLCache.hx line 142
Called from modules/VDLCache.hx line 97
Called from snipe/cache/CacheServer.hx line 487
25.10 17:46:41 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 17:46:41 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 94, _type => core/cache.update }
25.10 17:46:41 STATS: cache [user], get [3 calls, 0 cache hits, 3 cache misses, 0 same version, 0 not found]
25.10 17:46:41 STATS: cache [user], segments [12 calls, 5 hits, 6 misses]
25.10 17:46:41 STATS: cache [user], database [1140 calls, 3 reads, 4 writes]
25.10 17:46:41 STATS: cache [user], lock [3 calls, 3 attempts, 0 failures]
25.10 17:46:41 STATS: cache manager [1], get [6 calls, total 0.01 sec spent, avg 1.11 ms]
25.10 17:46:41 STATS: cache manager [1], update [6 calls, total 0 sec spent, avg 0.2 ms]
25.10 17:46:41 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 17:46:41 TIME: core/cache.update : 0.91 ms
25.10 17:46:41 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 94, _type => core/cache.update }
25.10 17:46:41 STATS: cache [questdata], get [3 calls, 0 cache hits, 3 cache misses, 0 same version, 0 not found]
25.10 17:46:41 STATS: cache [questdata], segments [9 calls, 2 hits, 6 misses]
25.10 17:46:41 STATS: cache [questdata], database [1140 calls, 3 reads, 1 writes]
25.10 17:46:41 STATS: cache [questdata], lock [3 calls, 3 attempts, 0 failures]
25.10 17:46:41 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:46:41 TIME: core/cache.update : 0.45 ms
25.10 17:46:41 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 94, _type => core/user.logoutPost }
25.10 17:46:41 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 17:46:41 TIME: core/user.logoutPost : 0.55 ms
25.10 17:46:42 TIMER: Clans cache...
25.10 17:46:42 TIMER: Clans cache: 0ms
25.10 17:46:42 TIMER: Check tournament...
25.10 17:46:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:46' OR rounddate = '2016-25-10 17:46' AND status <> 'finished'
25.10 17:46:42 TIMER: Check tournament: 0ms
25.10 17:46:42 WRITEDB: UPDATE Users SET name = E'uid94', deleted = E'false', email = E'', networktype = E'  ', password = E'uid94', isbanned = E'false', regdate = E'2016-10-25 16:32:22.177493+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477402348,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}' WHERE ID = 94
25.10 17:46:42 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 94
25.10 17:46:52 BLOCKREMOVE: user 94 removed
25.10 17:46:52 BLOCKREMOVE: questdata 94 removed
25.10 17:47:42 TIMER: Clans cache...
25.10 17:47:42 TIMER: Clans cache: 0ms
25.10 17:47:42 TIMER: Check tournament...
25.10 17:47:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:47' OR rounddate = '2016-25-10 17:47' AND status <> 'finished'
25.10 17:47:42 TIMER: Check tournament: 0ms
25.10 17:47:42 TIMER: Clans cache...
25.10 17:47:42 TIMER: Clans cache: 0ms
25.10 17:47:42 TIMER: Check tournament...
25.10 17:47:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:48' OR rounddate = '2016-25-10 17:48' AND status <> 'finished'
25.10 17:47:42 TIMER: Check tournament: 1ms
25.10 17:47:42 TIMER: Clans cache...
25.10 17:47:42 TIMER: Clans cache: 0ms
25.10 17:47:42 TIMER: Check tournament...
25.10 17:47:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:49' OR rounddate = '2016-25-10 17:49' AND status <> 'finished'
25.10 17:47:42 TIMER: Check tournament: 1ms
25.10 17:47:42 TIMER: Clans cache...
25.10 17:47:42 TIMER: Clans cache: 0ms
25.10 17:47:42 TIMER: Check tournament...
25.10 17:47:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:50' OR rounddate = '2016-25-10 17:50' AND status <> 'finished'
25.10 17:47:42 TIMER: Check tournament: 0ms
25.10 17:47:42 TIMER: Clans cache...
25.10 17:47:42 TIMER: Clans cache: 0ms
25.10 17:47:42 TIMER: Check tournament...
25.10 17:47:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:51' OR rounddate = '2016-25-10 17:51' AND status <> 'finished'
25.10 17:47:42 TIMER: Check tournament: 0ms
25.10 17:47:42 TIMER: Clans cache...
25.10 17:47:42 TIMER: Clans cache: 0ms
25.10 17:47:42 TIMER: Check tournament...
25.10 17:47:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:52' OR rounddate = '2016-25-10 17:52' AND status <> 'finished'
25.10 17:47:42 TIMER: Check tournament: 0ms
25.10 17:47:42 TIMER: Clans cache...
25.10 17:47:42 TIMER: Clans cache: 0ms
25.10 17:47:42 TIMER: Check tournament...
25.10 17:47:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:53' OR rounddate = '2016-25-10 17:53' AND status <> 'finished'
25.10 17:47:42 TIMER: Check tournament: 0ms
25.10 17:47:42 TIMER: Clans cache...
25.10 17:47:42 TIMER: Clans cache: 0ms
25.10 17:47:42 TIMER: Check tournament...
25.10 17:47:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:54' OR rounddate = '2016-25-10 17:54' AND status <> 'finished'
25.10 17:47:42 TIMER: Check tournament: 0ms
25.10 17:47:42 TIMER: Clans cache...
25.10 17:47:42 TIMER: Clans cache: 0ms
25.10 17:47:42 TIMER: Check tournament...
25.10 17:47:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:55' OR rounddate = '2016-25-10 17:55' AND status <> 'finished'
25.10 17:47:42 TIMER: Check tournament: 0ms
25.10 17:47:42 TIMER: Clans cache...
25.10 17:47:42 TIMER: Clans cache: 0ms
25.10 17:47:42 TIMER: Check tournament...
25.10 17:47:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:56' OR rounddate = '2016-25-10 17:56' AND status <> 'finished'
25.10 17:47:42 TIMER: Check tournament: 0ms
25.10 17:47:42 TIMER: Clans cache...
25.10 17:47:42 TIMER: Clans cache: 0ms
25.10 17:47:42 TIMER: Check tournament...
25.10 17:47:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:57' OR rounddate = '2016-25-10 17:57' AND status <> 'finished'
25.10 17:47:42 TIMER: Check tournament: 0ms
25.10 17:47:42 TIMER: Clans cache...
25.10 17:47:42 TIMER: Clans cache: 0ms
25.10 17:47:42 TIMER: Check tournament...
25.10 17:47:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:58' OR rounddate = '2016-25-10 17:58' AND status <> 'finished'
25.10 17:47:42 TIMER: Check tournament: 1ms
25.10 17:47:42 TIMER: Clans cache...
25.10 17:47:42 TIMER: Clans cache: 0ms
25.10 17:47:42 TIMER: Check tournament...
25.10 17:47:42 DB: SELECT * FROM tournament WHERE startdate = '2016-25-10 17:59' OR rounddate = '2016-25-10 17:59' AND status <> 'finished'
25.10 17:47:42 TIMER: Check tournament: 0ms
25.10 17:47:42 PENDING: INSERT INTO LogUserOnlineCount (Date, Min, Max, Avg) VALUES (now(), 0, 2, 1)
25.10 17:47:42 TIMER: Clans cache...
25.10 17:47:42 TIMER: Clans cach