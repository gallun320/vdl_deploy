28.10 17:00:01 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 101, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:00:01 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:00:01 TIME: vdl/cache.tournament.addUsers : 0.21 ms
28.10 17:00:01 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:00:01 DB: SELECT * FROM tournament
28.10 17:00:01 DB: SELECT name FROM users WHERE id = 100
28.10 17:00:01 DB: SELECT name FROM users WHERE id = 101
28.10 17:00:01 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 2, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:00, startdate => 2016-28-10 17:00 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:00:01 TIME: vdl/cache.tournament.getAvailableTournament : 2.73 ms
28.10 17:00:04 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'2', startdate = E'2016-28-10 17:00', roundinterval = E'1', params = E'{"params":{"usersList":[100,101],"usersAll":[100,101]}}', rounddate = E'2016-28-10 17:00' WHERE ID = 1
28.10 17:00:13 TIMER: Clans cache...
28.10 17:00:13 TIMER: Clans cache: 0ms
28.10 17:00:13 TIMER: Check tournament...
28.10 17:00:13 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:00' OR rounddate = '2016-28-10 17:00' AND status <> 'finished'
28.10 17:00:13 PENDING: INSERT INTO LogUserOnlineCount (Date, Min, Max, Avg) VALUES (now(), 0, 0, 0)
28.10 17:00:13 STATS: cache [tournament], get [12 calls, 10 cache hits, 1 cache misses, 0 same version, 0 not found]
28.10 17:00:13 STATS: cache [tournament], segments [15 calls, 13 hits, 1 misses]
28.10 17:00:13 STATS: cache [tournament], database [60 calls, 1 reads, 3 writes]
28.10 17:00:13 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
28.10 17:00:13 TIMER: Check tournament: 3ms
28.10 17:00:13 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'2', startdate = E'2016-28-10 17:00', roundinterval = E'1', params = E'{"params":{"usersList":[100,101],"battleActive":[],"usersAll":[100,101]}}', rounddate = E'2016-28-10 17:00' WHERE ID = 1
28.10 17:00:23 BLOCKREMOVE: tournament 1 removed
28.10 17:00:56 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:00:56 DB: SELECT * FROM tournament
28.10 17:00:56 READDB: SELECT * FROM Tournament WHERE ID = 1
28.10 17:00:56 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:03, startdate => 2016-28-10 17:03 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:00:56 TIME: vdl/cache.tournament.getAvailableTournament : 1.77 ms
28.10 17:01:01 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 100, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:01:01 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:01:01 TIME: vdl/cache.tournament.addUsers : 0.2 ms
28.10 17:01:01 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:01 DB: SELECT * FROM tournament
28.10 17:01:01 DB: SELECT name FROM users WHERE id = 100
28.10 17:01:01 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:03, startdate => 2016-28-10 17:03 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:01 TIME: vdl/cache.tournament.getAvailableTournament : 1.53 ms
28.10 17:01:02 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-28-10 17:03', roundinterval = E'1', params = E'{"params":{"usersList":[100],"usersAll":[100]}}', rounddate = E'2016-28-10 17:03' WHERE ID = 1
28.10 17:01:04 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:04 DB: SELECT * FROM tournament
28.10 17:01:04 DB: SELECT name FROM users WHERE id = 100
28.10 17:01:04 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:03, startdate => 2016-28-10 17:03 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:04 TIME: vdl/cache.tournament.getAvailableTournament : 1.73 ms
28.10 17:01:06 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 101, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:01:06 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:01:06 TIME: vdl/cache.tournament.addUsers : 0.17 ms
28.10 17:01:06 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:06 DB: SELECT * FROM tournament
28.10 17:01:06 DB: SELECT name FROM users WHERE id = 100
28.10 17:01:06 DB: SELECT name FROM users WHERE id = 101
28.10 17:01:06 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:03, startdate => 2016-28-10 17:03 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:06 TIME: vdl/cache.tournament.getAvailableTournament : 2.39 ms
28.10 17:01:07 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-28-10 17:03', roundinterval = E'1', params = E'{"params":{"usersList":[100,101],"usersAll":[100,101]}}', rounddate = E'2016-28-10 17:03' WHERE ID = 1
28.10 17:01:13 TIMER: Clans cache...
28.10 17:01:13 TIMER: Clans cache: 0ms
28.10 17:01:13 TIMER: Check tournament...
28.10 17:01:13 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:01' OR rounddate = '2016-28-10 17:01' AND status <> 'finished'
28.10 17:01:13 TIMER: Check tournament: 1ms
28.10 17:01:17 BLOCKREMOVE: tournament 1 removed
28.10 17:01:34 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:34 DB: SELECT * FROM tournament
28.10 17:01:34 STATS: cache [tournament], get [19 calls, 16 cache hits, 2 cache misses, 0 same version, 0 not found]
28.10 17:01:34 STATS: cache [tournament], segments [25 calls, 22 hits, 2 misses]
28.10 17:01:34 STATS: cache [tournament], database [141 calls, 2 reads, 6 writes]
28.10 17:01:34 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
28.10 17:01:34 READDB: SELECT * FROM Tournament WHERE ID = 1
28.10 17:01:34 DB: SELECT name FROM users WHERE id = 100
28.10 17:01:34 DB: SELECT name FROM users WHERE id = 101
28.10 17:01:34 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:02, startdate => 2016-28-10 17:02 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:34 TIME: vdl/cache.tournament.getAvailableTournament : 3.35 ms
28.10 17:01:40 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:40 DB: SELECT * FROM tournament
28.10 17:01:40 DB: SELECT name FROM users WHERE id = 100
28.10 17:01:40 DB: SELECT name FROM users WHERE id = 101
28.10 17:01:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:02, startdate => 2016-28-10 17:02 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:40 TIME: vdl/cache.tournament.getAvailableTournament : 2.43 ms
28.10 17:01:50 BLOCKREMOVE: tournament 1 removed
28.10 17:02:13 TIMER: Clans cache...
28.10 17:02:13 TIMER: Clans cache: 0ms
28.10 17:02:13 TIMER: Check tournament...
28.10 17:02:13 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:02' OR rounddate = '2016-28-10 17:02' AND status <> 'finished'
28.10 17:02:13 READDB: SELECT * FROM Tournament WHERE ID = 1
28.10 17:02:13 DB: SELECT nextval('Battle_id_seq') AS id
28.10 17:02:13 READDB: SELECT ID FROM Battle WHERE ID = 94
28.10 17:02:13 READDB: INSERT INTO Battle (ID) VALUES (94)
28.10 17:02:13 STATS: cache [battle], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
28.10 17:02:13 STATS: cache [battle], segments [1 calls, 0 hits, 0 misses]
28.10 17:02:13 STATS: cache [battle], database [180 calls, 0 reads, 0 writes]
28.10 17:02:13 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
28.10 17:02:13 READDB: SELECT * FROM Battle WHERE ID = 94
28.10 17:02:13 DB: SELECT name FROM users WHERE id=101
28.10 17:02:13 DB: SELECT name FROM users WHERE id=100
28.10 17:02:13 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => nelli8, tournamentId => 1, enemy.id => 100, enemy.name => test67, round => 1, roundDate => 2016-28-10 17:02, id => 101, enemy.num => 2, battleId => 94, player => 1 }, _isNotify => true, id => 101, _type => tournament.enemyEvent }
28.10 17:02:13 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => test67, tournamentId => 1, enemy.id => 101, enemy.name => nelli8, round => 1, roundDate => 2016-28-10 17:02, id => 100, enemy.num => 1, battleId => 94, player => 2 }, _isNotify => true, id => 100, _type => tournament.enemyEvent }
28.10 17:02:13 TIMER: Check tournament: 67ms
28.10 17:02:18 WRITEDB: UPDATE Battle SET secondid = E'100', turnid = E'101', finished = E'false', firstid = E'101', params = E'{}', avaliable = E'false' WHERE ID = 94
28.10 17:02:18 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'active', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-28-10 17:02', roundinterval = E'1', params = E'{"params":{"usersList":[100,101],"battleActive":[94],"usersAll":[100,101]}}', rounddate = E'2016-28-10 17:02' WHERE ID = 1
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 94, _type => vdl/cache.battle.infoRoom }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:02:22 TIME: vdl/cache.battle.infoRoom : 0.15 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
28.10 17:02:22 DB: SELECT * FROM tournament WHERE id = 1
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[100,101],"battleActive":[94],"usersAll":[100,101]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-28-10 17:02, startdate => 2016-28-10 17:02, roundinterval => 1 }
28.10 17:02:22 TIME: vdl/cache.tournament.getTournament : 1.04 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 94, _type => vdl/cache.battle.infoRoom }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:02:22 TIME: vdl/cache.battle.infoRoom : 0.14 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getBattlesTournaments [94]
28.10 17:02:22 TIME: vdl/cache.tournament.getBattlesTournaments : 0.16 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [100,101] }
28.10 17:02:22 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.18 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.battle.finishRoom { roomId => 94, _type => vdl/cache.battle.finishRoom }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
28.10 17:02:22 TIME: vdl/cache.battle.finishRoom : 0.14 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [94] }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
28.10 17:02:22 TIME: vdl/cache.tournament.setBattlesTournaments : 0.22 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [100], _type => vdl/cache.tournament.setUsersTournament }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
28.10 17:02:22 TIME: vdl/cache.tournament.setUsersTournament : 0.17 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [{ winner => 100, round => 1, player1 => 101, player2 => 100 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:02:22 TIME: vdl/cache.tournament.setGrid : 0.3 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.tournament.addRound { dateRound => 2016-28-10 17:02, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
28.10 17:02:22 TIME: vdl/cache.tournament.addRound : 0.28 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.tournament.finish { winner => 100, tournamentId => 1, _type => vdl/cache.tournament.finish }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
28.10 17:02:22 TIME: vdl/cache.tournament.finish : 0.5 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 94, _type => vdl/cache.battle.infoRoom }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:02:22 TIME: vdl/cache.battle.infoRoom : 0.16 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
28.10 17:02:22 DB: SELECT * FROM tournament WHERE id = 1
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[100,101],"battleActive":[94],"usersAll":[100,101]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-28-10 17:02, startdate => 2016-28-10 17:02, roundinterval => 1 }
28.10 17:02:22 TIME: vdl/cache.tournament.getTournament : 1.09 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 94, _type => vdl/cache.battle.infoRoom }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:02:22 TIME: vdl/cache.battle.infoRoom : 0.22 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getBattlesTournaments []
28.10 17:02:22 TIME: vdl/cache.tournament.getBattlesTournaments : 0.26 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [100] }
28.10 17:02:22 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.34 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.battle.finishRoom { roomId => 94, _type => vdl/cache.battle.finishRoom }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
28.10 17:02:22 TIME: vdl/cache.battle.finishRoom : 0.1 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [94] }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
28.10 17:02:22 TIME: vdl/cache.tournament.setBattlesTournaments : 0.26 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [100], _type => vdl/cache.tournament.setUsersTournament }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
28.10 17:02:22 TIME: vdl/cache.tournament.setUsersTournament : 0.24 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [{ winner => 100, round => 1, player1 => 101, player2 => 100 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => 100 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:02:22 TIME: vdl/cache.tournament.setGrid : 0.29 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.tournament.addRound { dateRound => 2016-28-10 17:02, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
28.10 17:02:22 TIME: vdl/cache.tournament.addRound : 0.21 ms
28.10 17:02:22 NET: vdl.0 (thread) request vdl/cache.tournament.finish { winner => 100, tournamentId => 1, _type => vdl/cache.tournament.finish }
28.10 17:02:22 QUEUE: vdl.0 (thread) response vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
28.10 17:02:22 TIME: vdl/cache.tournament.finish : 0.19 ms
28.10 17:02:23 WRITEDB: UPDATE Battle SET secondid = E'100', turnid = E'101', finished = E'true', firstid = E'101', params = E'{}', avaliable = E'false' WHERE ID = 94
28.10 17:02:23 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'100', status = E'finished', type = E'once', repeatinterval = E'0', round = E'2', startdate = E'2016-28-10 17:02', roundinterval = E'1', params = E'{"params":{"battleFinished":[94,94],"usersList":[100],"battleActive":[],"usersAll":[100,101]}}', rounddate = E'2016-28-10 17:02' WHERE ID = 1
28.10 17:02:28 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:02:28 DB: SELECT * FROM tournament
28.10 17:02:28 DB: SELECT name FROM users WHERE id = 100
28.10 17:02:28 DB: SELECT name FROM users WHERE id = 101
28.10 17:02:28 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 100, battleFinished => [94,94], round => 2, id => 1, status => finished, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => [], rounddate => 2016-28-10 17:02, startdate => 2016-28-10 17:02 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:02:28 TIME: vdl/cache.tournament.getAvailableTournament : 2.64 ms
28.10 17:02:33 BLOCKREMOVE: battle 94 removed
28.10 17:02:35 NET: vdl.0 (thread) request vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
28.10 17:02:35 STATS: cache [tournament], get [35 calls, 30 cache hits, 4 cache misses, 0 same version, 0 not found]
28.10 17:02:35 STATS: cache [tournament], segments [52 calls, 47 hits, 4 misses]
28.10 17:02:35 STATS: cache [tournament], database [202 calls, 4 reads, 8 writes]
28.10 17:02:35 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
28.10 17:02:35 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
28.10 17:02:35 TIME: vdl/cache.tournament.getStatus : 0.29 ms
28.10 17:02:35 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:02:35 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => 100 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:02:35 TIME: vdl/cache.tournament.setGrid : 0.18 ms
28.10 17:02:45 BLOCKREMOVE: tournament 1 removed
28.10 17:03:13 TIMER: Clans cache...
28.10 17:03:13 TIMER: Clans cache: 0ms
28.10 17:03:13 TIMER: Check tournament...
28.10 17:03:13 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:03' OR rounddate = '2016-28-10 17:03' AND status <> 'finished'
28.10 17:03:13 TIMER: Check tournament: 0ms
28.10 17:03:13 TIMER: Clans cache...
28.10 17:03:13 TIMER: Clans cache: 0ms
28.10 17:03:13 TIMER: Check tournament...
28.10 17:03:13 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:04' OR rounddate = '2016-28-10 17:04' AND status <> 'finished'
28.10 17:03:13 TIMER: Check tournament: 1ms
28.10 17:03:13 TIMER: Clans cache...
28.10 17:03:13 TIMER: Clans cache: 0ms
28.10 17:03:13 TIMER: Check tournament...
28.10 17:03:13 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:05' OR rounddate = '2016-28-10 17:05' AND status <> 'finished'
28.10 17:03:13 TIMER: Check tournament: 1ms
28.10 17:05:30 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
28.10 17:05:30 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
28.10 17:05:30 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
28.10 17:05:30 TIME: core/server.query : 1.4 ms
28.10 17:05:30 NET: vdl.0 (thread) request core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
28.10 17:05:30 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
28.10 17:05:30 TIME: core/user.isOnlineID : 0.1 ms
28.10 17:05:30 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
28.10 17:05:30 STATS: cache [user], get [4 calls, 2 cache hits, 2 cache misses, 0 same version, 0 not found]
28.10 17:05:30 STATS: cache [user], segments [9 calls, 2 hits, 4 misses]
28.10 17:05:30 STATS: cache [user], database [377 calls, 2 reads, 2 writes]
28.10 17:05:30 STATS: cache [user], lock [3 calls, 3 attempts, 0 failures]
28.10 17:05:30 READDB: SELECT * FROM Users WHERE ID = 107
28.10 17:05:30 STATS: cache manager [1], get [5 calls, total 0.01 sec spent, avg 1.96 ms]
28.10 17:05:30 STATS: cache manager [1], update [2 calls, total 0 sec spent, avg 0.05 ms]
28.10 17:05:30 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477661839, lastLoginDate => 302, lastLoadDate => 1029 }, effects => { list => [] } }}, version => 0, id => 107 } }
28.10 17:05:30 TIME: core/cache.get : 1.93 ms
28.10 17:05:30 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
28.10 17:05:30 STATS: cache [questdata], get [2 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
28.10 17:05:30 STATS: cache [questdata], segments [5 calls, 0 hits, 4 misses]
28.10 17:05:30 STATS: cache [questdata], database [377 calls, 2 reads, 0 writes]
28.10 17:05:30 STATS: cache [questdata], lock [3 calls, 3 attempts, 0 failures]
28.10 17:05:30 READDB: SELECT * FROM UserQuests WHERE ID = 107
28.10 17:05:30 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
28.10 17:05:30 TIME: core/cache.get : 1.26 ms
28.10 17:05:30 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
28.10 17:05:30 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
28.10 17:05:30 TIME: core/user.loginPost : 0.09 ms
28.10 17:05:38 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
28.10 17:05:38 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:05:38 TIME: core/cache.update : 0.18 ms
28.10 17:05:38 WRITEDB: UPDATE Users SET name = E'uid107', deleted = E'false', email = E'', networktype = E'  ', password = E'uid107', isbanned = E'false', regdate = E'2016-10-28 16:37:18.693533+03', language = E'en', networkid = E'', params = E'{"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477661839,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}' WHERE ID = 107
28.10 17:06:30 TIMER: Starting timer...
28.10 17:06:30 TIMER: Timer running...
28.10 17:06:30 DB: SELECT * FROM GameVars
28.10 17:06:30 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 17:06:30 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 17:06:30 DB: SELECT * FROM Shops WHERE ID = 1
28.10 17:06:30 TEMP: load ./tmp/quest_daily_ids
28.10 17:06:30 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
28.10 17:06:30 TEMP: save ./tmp/quest_daily_ids
28.10 17:06:30 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
28.10 17:06:30 QUEUE: vdl.0 (thread) response server.login
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
28.10 17:06:30 DB: SELECT * FROM LocalizationStrings
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 27.64 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
28.10 17:06:30 DB: SELECT * FROM GameVars
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 3.55 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
28.10 17:06:30 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 2.47 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
28.10 17:06:30 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 1.48 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
28.10 17:06:30 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 1.36 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
28.10 17:06:30 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 2.08 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/quest.getDaily
28.10 17:06:30 TIME: core/quest.getDaily : 0.09 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
28.10 17:06:30 DB: SELECT * FROM UserAttributeTypes
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 1.09 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
28.10 17:06:30 DB: SELECT * FROM UserVariableTypes
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 1.03 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
28.10 17:06:30 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 2.22 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
28.10 17:06:30 DB: SELECT * FROM ItemGroups
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 0.99 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
28.10 17:06:30 DB: SELECT * FROM Bundles ORDER BY ID
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 1.29 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
28.10 17:06:30 DB: SELECT * FROM BundleItems ORDER BY ID
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 1.21 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/shop.getList
28.10 17:06:30 TIME: core/shop.getList : 0.08 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
28.10 17:06:30 DB: SELECT * FROM EffectAttributeTypes
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 1.11 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
28.10 17:06:30 DB: SELECT * FROM Effects
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 1.12 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
28.10 17:06:30 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 3.49 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
28.10 17:06:30 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 3.38 ms
28.10 17:06:30 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
28.10 17:06:30 DB: SELECT * FROM Badges
28.10 17:06:30 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:06:30 TIME: core/server.query : 1.16 ms
28.10 17:07:16 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test67' AND Password = E'test', _type => core/server.query }
28.10 17:07:16 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test67' AND Password = E'test'
28.10 17:07:16 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:07:16 TIME: core/server.query : 2.19 ms
28.10 17:07:16 NET: vdl.0 (thread) request core/user.isOnlineID { id => 100, _type => core/user.isOnlineID }
28.10 17:07:16 QUEUE: vdl.0 (thread) response core/user.isOnlineID
28.10 17:07:16 TIME: core/user.isOnlineID : 0.09 ms
28.10 17:07:16 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 100, _type => core/cache.get }
28.10 17:07:16 READDB: SELECT * FROM Users WHERE ID = 100
28.10 17:07:16 QUEUE: vdl.0 (thread) response core/cache.get
28.10 17:07:16 TIME: core/cache.get : 4.79 ms
28.10 17:07:16 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 100, _type => core/cache.get }
28.10 17:07:16 READDB: SELECT * FROM UserQuests WHERE ID = 100
28.10 17:07:16 QUEUE: vdl.0 (thread) response core/cache.get
28.10 17:07:16 TIME: core/cache.get : 1.48 ms
28.10 17:07:16 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 100, _type => core/user.loginPost, ipAddr => 172.16.20.112 }
28.10 17:07:16 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
28.10 17:07:16 TIME: core/user.loginPost : 0.11 ms
28.10 17:07:17 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'nelli8' AND Password = E'qwerty', _type => core/server.query }
28.10 17:07:17 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'nelli8' AND Password = E'qwerty'
28.10 17:07:17 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => nelli8, networkid => , isbanned => false, id => 101 }}, errorCode => ok, _type => core/server.query }
28.10 17:07:17 TIME: core/server.query : 2.95 ms
28.10 17:07:17 NET: vdl.0 (thread) request core/user.isOnlineID { id => 101, _type => core/user.isOnlineID }
28.10 17:07:17 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
28.10 17:07:17 TIME: core/user.isOnlineID : 0.11 ms
28.10 17:07:17 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 101, _type => core/cache.get }
28.10 17:07:17 READDB: SELECT * FROM Users WHERE ID = 101
28.10 17:07:17 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => nelli8, deleted => false, email => , networktype =>   , password => qwerty, isbanned => false, regdate => 2016-10-28 16:03:03.386319+03, language => en, networkid => , params => { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477659784, lastLoginDate => 302, lastLoadDate => 1029 }, effects => { list => [] } }}, version => 0, id => 101 } }
28.10 17:07:17 TIME: core/cache.get : 2.06 ms
28.10 17:07:17 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 101, _type => core/cache.get }
28.10 17:07:17 READDB: SELECT * FROM UserQuests WHERE ID = 101
28.10 17:07:17 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 101 } }
28.10 17:07:17 TIME: core/cache.get : 1.35 ms
28.10 17:07:17 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 101, _type => core/user.loginPost, ipAddr => 172.16.20.79 }
28.10 17:07:17 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
28.10 17:07:17 TIME: core/user.loginPost : 0.13 ms
28.10 17:07:20 NET: vdl.0 (thread) request vdl/cache.user.getData { userId => 100, _type => vdl/cache.user.getData }
28.10 17:07:20 QUEUE: vdl.0 (thread) response vdl/cache.user.getData { info => { city => , year => , email =>  }, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:07:20 TIME: vdl/cache.user.getData : 0.26 ms
28.10 17:07:22 NET: vdl.0 (thread) request vdl/cache.user.getData { userId => 101, _type => vdl/cache.user.getData }
28.10 17:07:22 QUEUE: vdl.0 (thread) response vdl/cache.user.getData { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:07:22 TIME: vdl/cache.user.getData : 0.17 ms
28.10 17:07:23 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:23 DB: SELECT * FROM tournament
28.10 17:07:23 READDB: SELECT * FROM Tournament WHERE ID = 1
28.10 17:07:23 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:23 TIME: vdl/cache.tournament.getAvailableTournament : 3.53 ms
28.10 17:07:25 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 100, _type => core/cache.update }
28.10 17:07:25 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:07:25 TIME: core/cache.update : 0.19 ms
28.10 17:07:25 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 101, _type => core/cache.update }
28.10 17:07:25 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:07:25 TIME: core/cache.update : 0.16 ms
28.10 17:07:26 WRITEDB: UPDATE Users SET name = E'nelli8', deleted = E'false', email = E'', networktype = E'  ', password = E'qwerty', isbanned = E'false', regdate = E'2016-10-28 16:03:03.386319+03', language = E'en', networkid = E'', params = E'{"info":{"city":"Kazan","year":"","email":"nlqbunskaha@mail.ru"},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477659784,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}' WHERE ID = 101
28.10 17:07:26 WRITEDB: UPDATE Users SET name = E'test67', deleted = E'false', email = E'', networktype = E'  ', password = E'test', isbanned = E'false', regdate = E'2016-10-28 16:02:55.698999+03', language = E'en', networkid = E'', params = E'{"info":{"city":"","year":"","email":""},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477659775,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}' WHERE ID = 100
28.10 17:07:30 TIMER: Clans cache...
28.10 17:07:30 TIMER: Clans cache: 0ms
28.10 17:07:30 TIMER: Check tournament...
28.10 17:07:30 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:07' OR rounddate = '2016-28-10 17:07' AND status <> 'finished'
28.10 17:07:30 TIMER: Check tournament: 1ms
28.10 17:07:30 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:30 DB: SELECT * FROM tournament
28.10 17:07:30 STATS: cache [tournament], get [2 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
28.10 17:07:30 STATS: cache [tournament], segments [2 calls, 0 hits, 1 misses]
28.10 17:07:30 STATS: cache [tournament], database [61 calls, 1 reads, 0 writes]
28.10 17:07:30 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
28.10 17:07:30 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:30 TIME: vdl/cache.tournament.getAvailableTournament : 1.92 ms
28.10 17:07:41 BLOCKREMOVE: tournament 1 removed
28.10 17:07:44 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:44 DB: SELECT * FROM tournament
28.10 17:07:44 READDB: SELECT * FROM Tournament WHERE ID = 1
28.10 17:07:44 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:44 TIME: vdl/cache.tournament.getAvailableTournament : 2.8 ms
28.10 17:07:47 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 100, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:07:47 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:07:47 TIME: vdl/cache.tournament.addUsers : 0.22 ms
28.10 17:07:47 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:47 DB: SELECT * FROM tournament
28.10 17:07:47 DB: SELECT name FROM users WHERE id = 100
28.10 17:07:47 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:47 TIME: vdl/cache.tournament.getAvailableTournament : 3.39 ms
28.10 17:07:50 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-28-10 17:09', roundinterval = E'1', params = E'{"params":{"usersList":[100],"usersAll":[100]}}', rounddate = E'2016-28-10 17:09' WHERE ID = 1
28.10 17:07:51 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:51 DB: SELECT * FROM tournament
28.10 17:07:51 DB: SELECT name FROM users WHERE id = 100
28.10 17:07:51 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:51 TIME: vdl/cache.tournament.getAvailableTournament : 1.8 ms
28.10 17:07:55 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 101, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:07:55 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:07:55 TIME: vdl/cache.tournament.addUsers : 0.23 ms
28.10 17:07:55 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:55 DB: SELECT * FROM tournament
28.10 17:07:55 DB: SELECT name FROM users WHERE id = 100
28.10 17:07:55 DB: SELECT name FROM users WHERE id = 101
28.10 17:07:55 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:55 TIME: vdl/cache.tournament.getAvailableTournament : 3.11 ms
28.10 17:07:56 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-28-10 17:09', roundinterval = E'1', params = E'{"params":{"usersList":[100,101],"usersAll":[100,101]}}', rounddate = E'2016-28-10 17:09' WHERE ID = 1
28.10 17:08:01 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:08:01 DB: SELECT * FROM tournament
28.10 17:08:01 DB: SELECT name FROM users WHERE id = 100
28.10 17:08:01 DB: SELECT name FROM users WHERE id = 101
28.10 17:08:01 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:08:01 TIME: vdl/cache.tournament.getAvailableTournament : 4.18 ms
28.10 17:08:12 BLOCKREMOVE: tournament 1 removed
28.10 17:08:23 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:08:23 DB: SELECT * FROM tournament
28.10 17:08:23 READDB: SELECT * FROM Tournament WHERE ID = 1
28.10 17:08:23 DB: SELECT name FROM users WHERE id = 100
28.10 17:08:23 DB: SELECT name FROM users WHERE id = 101
28.10 17:08:23 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:08:23 TIME: vdl/cache.tournament.getAvailableTournament : 6.93 ms
28.10 17:08:30 TIMER: Clans cache...
28.10 17:08:30 TIMER: Clans cache: 0ms
28.10 17:08:30 TIMER: Check tournament...
28.10 17:08:30 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:08' OR rounddate = '2016-28-10 17:08' AND status <> 'finished'
28.10 17:08:30 TIMER: Check tournament: 1ms
28.10 17:08:33 BLOCKREMOVE: tournament 1 removed
28.10 17:09:30 TIMER: Clans cache...
28.10 17:09:30 TIMER: Clans cache: 0ms
28.10 17:09:30 TIMER: Check tournament...
28.10 17:09:30 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:09' OR rounddate = '2016-28-10 17:09' AND status <> 'finished'
28.10 17:09:30 STATS: cache [tournament], get [11 calls, 7 cache hits, 3 cache misses, 0 same version, 0 not found]
28.10 17:09:30 STATS: cache [tournament], segments [13 calls, 9 hits, 3 misses]
28.10 17:09:30 STATS: cache [tournament], database [180 calls, 3 reads, 2 writes]
28.10 17:09:30 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
28.10 17:09:30 READDB: SELECT * FROM Tournament WHERE ID = 1
28.10 17:09:30 DB: SELECT nextval('Battle_id_seq') AS id
28.10 17:09:30 READDB: SELECT ID FROM Battle WHERE ID = 95
28.10 17:09:30 READDB: INSERT INTO Battle (ID) VALUES (95)
28.10 17:09:30 STATS: cache [battle], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
28.10 17:09:30 STATS: cache [battle], segments [1 calls, 0 hits, 0 misses]
28.10 17:09:30 STATS: cache [battle], database [180 calls, 0 reads, 0 writes]
28.10 17:09:30 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
28.10 17:09:30 READDB: SELECT * FROM Battle WHERE ID = 95
28.10 17:09:30 DB: SELECT name FROM users WHERE id=101
28.10 17:09:30 DB: SELECT name FROM users WHERE id=100
28.10 17:09:30 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => nelli8, tournamentId => 1, enemy.id => 100, enemy.name => test67, round => 1, roundDate => 2016-28-10 17:09, id => 101, enemy.num => 2, battleId => 95, player => 1 }, _isNotify => true, id => 101, _type => tournament.enemyEvent }
28.10 17:09:30 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => test67, tournamentId => 1, enemy.id => 101, enemy.name => nelli8, round => 1, roundDate => 2016-28-10 17:09, id => 100, enemy.num => 1, battleId => 95, player => 2 }, _isNotify => true, id => 100, _type => tournament.enemyEvent }
28.10 17:09:30 TIMER: Check tournament: 61ms
28.10 17:09:35 WRITEDB: UPDATE Battle SET secondid = E'100', turnid = E'101', finished = E'false', firstid = E'101', params = E'{}', avaliable = E'false' WHERE ID = 95
28.10 17:09:35 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'active', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-28-10 17:09', roundinterval = E'1', params = E'{"params":{"usersList":[100,101],"battleActive":[95],"usersAll":[100,101]}}', rounddate = E'2016-28-10 17:09' WHERE ID = 1
28.10 17:09:39 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 95, _type => vdl/cache.battle.infoRoom }
28.10 17:09:39 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:09:39 TIME: vdl/cache.battle.infoRoom : 0.16 ms
28.10 17:09:39 NET: vdl.0 (thread) request vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
28.10 17:09:39 DB: SELECT * FROM tournament WHERE id = 1
28.10 17:09:39 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[100,101],"battleActive":[95],"usersAll":[100,101]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09, roundinterval => 1 }
28.10 17:09:39 TIME: vdl/cache.tournament.getTournament : 1.08 ms
28.10 17:09:39 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 95, _type => vdl/cache.battle.infoRoom }
28.10 17:09:39 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:09:39 TIME: vdl/cache.battle.infoRoom : 0.14 ms
28.10 17:09:39 NET: vdl.0 (thread) request vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
28.10 17:09:39 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getBattlesTournaments [95]
28.10 17:09:39 TIME: vdl/cache.tournament.getBattlesTournaments : 0.52 ms
28.10 17:09:39 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
28.10 17:09:39 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [100,101] }
28.10 17:09:39 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.2 ms
28.10 17:09:39 NET: vdl.0 (thread) request vdl/cache.battle.finishRoom { roomId => 95, _type => vdl/cache.battle.finishRoom }
28.10 17:09:39 QUEUE: vdl.0 (thread) response vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
28.10 17:09:39 TIME: vdl/cache.battle.finishRoom : 0.15 ms
28.10 17:09:39 NET: vdl.0 (thread) request vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [95] }
28.10 17:09:39 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
28.10 17:09:39 TIME: vdl/cache.tournament.setBattlesTournaments : 0.23 ms
28.10 17:09:39 NET: vdl.0 (thread) request vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [100], _type => vdl/cache.tournament.setUsersTournament }
28.10 17:09:39 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
28.10 17:09:39 TIME: vdl/cache.tournament.setUsersTournament : 0.18 ms
28.10 17:09:39 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [{ winner => 100, round => 1, player1 => 101, player2 => 100 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:09:39 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:09:39 TIME: vdl/cache.tournament.setGrid : 0.33 ms
28.10 17:09:39 NET: vdl.0 (thread) request vdl/cache.tournament.addRound { dateRound => 2016-28-10 17:09, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
28.10 17:09:39 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
28.10 17:09:39 TIME: vdl/cache.tournament.addRound : 0.34 ms
28.10 17:09:39 NET: vdl.0 (thread) request vdl/cache.tournament.finish { winner => 100, tournamentId => 1, _type => vdl/cache.tournament.finish }
28.10 17:09:39 QUEUE: vdl.0 (thread) response vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
28.10 17:09:39 TIME: vdl/cache.tournament.finish : 0.4 ms
28.10 17:09:40 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 95, _type => vdl/cache.battle.infoRoom }
28.10 17:09:40 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:09:40 TIME: vdl/cache.battle.infoRoom : 0.11 ms
28.10 17:09:40 NET: vdl.0 (thread) request vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
28.10 17:09:40 DB: SELECT * FROM tournament WHERE id = 1
28.10 17:09:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[100,101],"battleActive":[95],"usersAll":[100,101]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09, roundinterval => 1 }
28.10 17:09:40 TIME: vdl/cache.tournament.getTournament : 1.1 ms
28.10 17:09:40 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 95, _type => vdl/cache.battle.infoRoom }
28.10 17:09:40 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:09:40 TIME: vdl/cache.battle.infoRoom : 0.29 ms
28.10 17:09:40 NET: vdl.0 (thread) request vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
28.10 17:09:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getBattlesTournaments []
28.10 17:09:40 TIME: vdl/cache.tournament.getBattlesTournaments : 0.29 ms
28.10 17:09:40 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
28.10 17:09:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [100] }
28.10 17:09:40 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.35 ms
28.10 17:09:40 NET: vdl.0 (thread) request vdl/cache.battle.finishRoom { roomId => 95, _type => vdl/cache.battle.finishRoom }
28.10 17:09:40 QUEUE: vdl.0 (thread) response vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
28.10 17:09:40 TIME: vdl/cache.battle.finishRoom : 0.32 ms
28.10 17:09:40 NET: vdl.0 (thread) request vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [95] }
28.10 17:09:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
28.10 17:09:40 TIME: vdl/cache.tournament.setBattlesTournaments : 0.39 ms
28.10 17:09:40 NET: vdl.0 (thread) request vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [100], _type => vdl/cache.tournament.setUsersTournament }
28.10 17:09:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
28.10 17:09:40 TIME: vdl/cache.tournament.setUsersTournament : 0.55 ms
28.10 17:09:40 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [{ winner => 100, round => 1, player1 => 101, player2 => 100 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:09:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => 100 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:09:40 TIME: vdl/cache.tournament.setGrid : 0.5 ms
28.10 17:09:40 NET: vdl.0 (thread) request vdl/cache.tournament.addRound { dateRound => 2016-28-10 17:09, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
28.10 17:09:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
28.10 17:09:40 TIME: vdl/cache.tournament.addRound : 0.31 ms
28.10 17:09:40 NET: vdl.0 (thread) request vdl/cache.tournament.finish { winner => 100, tournamentId => 1, _type => vdl/cache.tournament.finish }
28.10 17:09:40 QUEUE: vdl.0 (thread) response vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
28.10 17:09:40 TIME: vdl/cache.tournament.finish : 0.37 ms
28.10 17:09:40 WRITEDB: UPDATE Battle SET secondid = E'100', turnid = E'101', finished = E'true', firstid = E'101', params = E'{}', avaliable = E'false' WHERE ID = 95
28.10 17:09:40 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'100', status = E'finished', type = E'once', repeatinterval = E'0', round = E'2', startdate = E'2016-28-10 17:09', roundinterval = E'1', params = E'{"params":{"battleFinished":[95,95],"usersList":[100],"battleActive":[],"usersAll":[100,101]}}', rounddate = E'2016-28-10 17:09' WHERE ID = 1
28.10 17:09:50 BLOCKREMOVE: battle 95 removed
28.10 17:09:50 BLOCKREMOVE: tournament 1 removed
28.10 17:09:53 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:09:53 DB: SELECT * FROM tournament
28.10 17:09:53 READDB: SELECT * FROM Tournament WHERE ID = 1
28.10 17:09:53 DB: SELECT name FROM users WHERE id = 100
28.10 17:09:53 DB: SELECT name FROM users WHERE id = 101
28.10 17:09:53 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 100, battleFinished => [95,95], round => 2, id => 1, status => finished, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => [], rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:09:53 TIME: vdl/cache.tournament.getAvailableTournament : 3.31 ms
28.10 17:09:57 NET: vdl.0 (thread) request vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
28.10 17:09:57 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
28.10 17:09:57 TIME: vdl/cache.tournament.getStatus : 0.17 ms
28.10 17:09:57 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:09:57 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => 100 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:09:57 TIME: vdl/cache.tournament.setGrid : 0.18 ms
28.10 17:10:08 BLOCKREMOVE: tournament 1 removed
28.10 17:10:30 TIMER: Clans cache...
28.10 17:10:30 TIMER: Clans cache: 0ms
28.10 17:10:30 TIMER: Check tournament...
28.10 17:10:30 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:10' OR rounddate = '2016-28-10 17:10' AND status <> 'finished'
28.10 17:10:30 TIMER: Check tournament: 1ms
28.10 17:10:30 TIMER: Clans cache...
28.10 17:10:30 TIMER: Clans cache: 0ms
28.10 17:10:30 TIMER: Check tournament...
28.10 17:10:30 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:11' OR rounddate = '2016-28-10 17:11' AND status <> 'finished'
28.10 17:10:30 TIMER: Check tournament: 1ms
28.10 17:10:30 TIMER: Clans cache...
28.10 17:10:30 TIMER: Clans cache: 0ms
28.10 17:10:30 TIMER: Check tournament...
28.10 17:10:30 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:12' OR rounddate = '2016-28-10 17:12' AND status <> 'finished'
28.10 17:10:30 TIMER: Check tournament: 0ms
28.10 17:10:30 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=100 OR secondid=100 AND finished <> true, _type => core/server.query }
28.10 17:10:30 DB: SELECT id FROM battle WHERE firstid=100 OR secondid=100 AND finished <> true
28.10 17:10:30 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
28.10 17:10:30 TIME: core/server.query : 1.57 ms
28.10 17:10:30 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 17:10:30 STATS: cache [battle], get [8 calls, 6 cache hits, 1 cache misses, 0 same version, 0 not found]
28.10 17:10:30 STATS: cache [battle], segments [12 calls, 10 hits, 1 misses]
28.10 17:10:30 STATS: cache [battle], database [420 calls, 1 reads, 2 writes]
28.10 17:10:30 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
28.10 17:10:30 READDB: SELECT * FROM Battle WHERE ID = 0
28.10 17:10:30 TRACE: vdl/cache.battle.infoRoom : Invalid field access : get
28.10 17:10:30 TRACE: vdl/cache.battle.infoRoom : 
Called from modules/VDLCache.hx line 156
Called from modules/VDLCache.hx line 149
Called from modules/VDLCache.hx line 99
Called from snipe/cache/CacheServer.hx line 487
28.10 17:10:30 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
28.10 17:10:30 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 100, _type => core/cache.update }
28.10 17:10:30 STATS: cache [user], get [4 calls, 2 cache hits, 2 cache misses, 0 same version, 0 not found]
28.10 17:10:30 STATS: cache [user], segments [9 calls, 2 hits, 4 misses]
28.10 17:10:30 STATS: cache [user], database [420 calls, 2 reads, 2 writes]
28.10 17:10:30 STATS: cache [user], lock [2 calls, 2 attempts, 0 failures]
28.10 17:10:30 STATS: cache manager [1], get [4 calls, total 0.01 sec spent, avg 2.22 ms]
28.10 17:10:30 STATS: cache manager [1], update [3 calls, total 0 sec spent, avg 0.15 ms]
28.10 17:10:30 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
28.10 17:10:30 TIME: core/cache.update : 0.58 ms
28.10 17:10:30 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 100, _type => core/cache.update }
28.10 17:10:30 STATS: cache [questdata], get [2 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
28.10 17:10:30 STATS: cache [questdata], segments [5 calls, 0 hits, 4 misses]
28.10 17:10:30 STATS: cache [questdata], database [420 calls, 2 reads, 0 writes]
28.10 17:10:30 STATS: cache [questdata], lock [2 calls, 2 attempts, 0 failures]
28.10 17:10:30 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:10:30 TIME: core/cache.update : 0.4 ms
28.10 17:10:30 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 100, _type => core/user.logoutPost }
28.10 17:10:30 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
28.10 17:10:30 TIME: core/user.logoutPost : 0.13 ms
28.10 17:10:30 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=101 OR secondid=101 AND finished <> true, _type => core/server.query }
28.10 17:10:30 DB: SELECT id FROM battle WHERE firstid=101 OR secondid=101 AND finished <> true
28.10 17:10:30 QUEUE: vdl.0 (thread) response core/server.query { list => {{ id => 94 }, { id => 95 }}, errorCode => ok, _type => core/server.query }
28.10 17:10:30 TIME: core/server.query : 1.84 ms
28.10 17:10:30 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 95, _type => vdl/cache.battle.infoRoom }
28.10 17:10:30 READDB: SELECT * FROM Battle WHERE ID = 95
28.10 17:10:30 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:10:30 TIME: vdl/cache.battle.infoRoom : 1.68 ms
28.10 17:10:30 NET: vdl.0 (thread) request vdl/cache.battle.deleteRoom { roomId => 95, _type => vdl/cache.battle.deleteRoom }
28.10 17:10:30 ROOM: deleted room 95
28.10 17:10:30 DB: DELETE FROM Battle WHERE ID = 95
28.10 17:10:30 QUEUE: vdl.0 (thread) response vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
28.10 17:10:30 TIME: vdl/cache.battle.deleteRoom : 19.68 ms
28.10 17:10:30 NET: vdl.0 (thread) request core/user.sendTo { id => 100, _type => core/user.sendTo, msg => { _type => battle.end } }
28.10 17:10:30 QUEUE: vdl.0 (thread) response core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
28.10 17:10:30 TIME: core/user.sendTo : 0.12 ms
28.10 17:10:30 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 101, _type => core/cache.update }
28.10 17:10:30 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
28.10 17:10:30 TIME: core/cache.update : 0.17 ms
28.10 17:10:30 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 101, _type => core/cache.update }
28.10 17:10:30 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:10:30 TIME: core/cache.update : 0.12 ms
28.10 17:10:30 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 101, _type => core/user.logoutPost }
28.10 17:10:30 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
28.10 17:10:30 TIME: core/user.logoutPost : 0.19 ms
28.10 17:10:30 TIMER: Clans cache...
28.10 17:10:30 TIMER: Clans cache: 0ms
28.10 17:10:30 TIMER: Check tournament...
28.10 17:10:30 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:13' OR rounddate = '2016-28-10 17:13' AND status <> 'finished'
28.10 17:10:30 TIMER: Check tournament: 0ms
28.10 17:10:30 WRITEDB: UPDATE Users SET name = E'nelli8', deleted = E'false', email = E'', networktype = E'  ', password = E'qwerty', isbanned = E'false', regdate = E'2016-10-28 16:03:03.386319+03', language = E'en', networkid = E'', params = E'{"info":{"city":"Kazan","year":"","email":"nlqbunskaha@mail.ru"},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477659784,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}' WHERE ID = 101
28.10 17:10:30 WRITEDB: UPDATE Users SET name = E'test67', deleted = E'false', email = E'', networktype = E'  ', password = E'test', isbanned = E'false', regdate = E'2016-10-28 16:02:55.698999+03', language = E'en', networkid = E'', params = E'{"info":{"city":"","year":"","email":""},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477659775,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}' WHERE ID = 100
28.10 17:10:30 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 101
28.10 17:10:30 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 100
28.10 17:13:40 BLOCKREMOVE: user 101 removed
28.10 17:13:40 BLOCKREMOVE: user 100 removed
28.10 17:13:40 BLOCKREMOVE: questdata 101 removed
28.10 17:13:40 BLOCKREMOVE: questdata 100 removed
28.10 17:13:40 BLOCKREMOVE: battle 95 removed
28.10 17:16:13 TIMER: Starting timer...
28.10 17:16:13 TIMER: Timer running...
28.10 17:16:13 DB: SELECT * FROM GameVars
28.10 17:16:13 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 17:16:13 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 17:16:13 DB: SELECT * FROM Shops WHERE ID = 1
28.10 17:16:13 TEMP: load ./tmp/quest_daily_ids
28.10 17:16:13 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
28.10 17:16:13 TEMP: save ./tmp/quest_daily_ids
28.10 17:16:13 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
28.10 17:16:13 QUEUE: vdl.0 (thread) response server.login
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
28.10 17:16:13 DB: SELECT * FROM LocalizationStrings
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 14.25 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
28.10 17:16:13 DB: SELECT * FROM GameVars
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 2.06 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
28.10 17:16:13 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 1.47 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
28.10 17:16:13 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 1.09 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
28.10 17:16:13 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 1.22 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
28.10 17:16:13 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 1.82 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/quest.getDaily
28.10 17:16:13 TIME: core/quest.getDaily : 0.04 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
28.10 17:16:13 DB: SELECT * FROM UserAttributeTypes
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 1.69 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
28.10 17:16:13 DB: SELECT * FROM UserVariableTypes
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 0.66 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
28.10 17:16:13 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 2.58 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
28.10 17:16:13 DB: SELECT * FROM ItemGroups
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 1.02 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
28.10 17:16:13 DB: SELECT * FROM Bundles ORDER BY ID
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 1.14 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
28.10 17:16:13 DB: SELECT * FROM BundleItems ORDER BY ID
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 1.75 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/shop.getList
28.10 17:16:13 TIME: core/shop.getList : 0.3 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
28.10 17:16:13 DB: SELECT * FROM EffectAttributeTypes
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 1.6 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
28.10 17:16:13 DB: SELECT * FROM Effects
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 1.15 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
28.10 17:16:13 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 2.34 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
28.10 17:16:13 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 4.11 ms
28.10 17:16:13 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
28.10 17:16:13 DB: SELECT * FROM Badges
28.10 17:16:13 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:16:13 TIME: core/server.query : 1.11 ms
28.10 17:16:13 TIMER: Clans cache...
28.10 17:16:13 TIMER: Clans cache: 0ms
28.10 17:16:13 TIMER: Check tournament...
28.10 17:16:13 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:17' OR rounddate = '2016-28-10 17:17' AND status <> 'finished'
28.10 17:16:13 TIMER: Check tournament: 1ms
28.10 17:17:38 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test67' AND Password = E'test', _type => core/server.query }
28.10 17:17:38 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test67' AND Password = E'test'
28.10 17:17:38 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:17:38 TIME: core/server.query : 3.07 ms
28.10 17:17:38 NET: vdl.0 (thread) request core/user.isOnlineID { id => 100, _type => core/user.isOnlineID }
28.10 17:17:38 QUEUE: vdl.0 (thread) response core/user.isOnlineID
28.10 17:17:38 TIME: core/user.isOnlineID : 0.1 ms
28.10 17:17:38 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 100, _type => core/cache.get }
28.10 17:17:38 STATS: cache [user], get [0 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
28.10 17:17:38 STATS: cache [user], segments [1 calls, 0 hits, 0 misses]
28.10 17:17:38 STATS: cache [user], database [85 calls, 0 reads, 0 writes]
28.10 17:17:38 STATS: cache [user], lock [1 calls, 1 attempts, 0 failures]
28.10 17:17:38 READDB: SELECT * FROM Users WHERE ID = 100
28.10 17:17:38 STATS: cache manager [1], get [1 calls, total 0 sec spent, avg 3.07 ms]
28.10 17:17:38 STATS: cache manager [1], update [0 calls, total 0 sec spent, avg -21474836.48 ms]
28.10 17:17:38 QUEUE: vdl.0 (thread) response core/cache.get
28.10 17:17:38 TIME: core/cache.get : 3.23 ms
28.10 17:17:38 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 100, _type => core/cache.get }
28.10 17:17:38 STATS: cache [questdata], get [0 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
28.10 17:17:38 STATS: cache [questdata], segments [1 calls, 0 hits, 0 misses]
28.10 17:17:38 STATS: cache [questdata], database [85 calls, 0 reads, 0 writes]
28.10 17:17:38 STATS: cache [questdata], lock [1 calls, 1 attempts, 0 failures]
28.10 17:17:38 READDB: SELECT * FROM UserQuests WHERE ID = 100
28.10 17:17:38 QUEUE: vdl.0 (thread) response core/cache.get
28.10 17:17:38 TIME: core/cache.get : 0.86 ms
28.10 17:17:38 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 100, _type => core/user.loginPost, ipAddr => 172.16.20.112 }
28.10 17:17:38 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
28.10 17:17:38 TIME: core/user.loginPost : 0.07 ms
28.10 17:17:38 NET: vdl.0 (thread) request vdl/cache.user.getData { userId => 100, _type => vdl/cache.user.getData }
28.10 17:17:38 QUEUE: vdl.0 (thread) response vdl/cache.user.getData { info => { city => , year => , email =>  }, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:17:38 TIME: vdl/cache.user.getData : 0.23 ms
28.10 17:17:43 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 100, _type => core/cache.update }
28.10 17:17:43 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:17:43 TIME: core/cache.update : 0.2 ms
28.10 17:17:44 WRITEDB: UPDATE Users SET name = E'test67', deleted = E'false', email = E'', networktype = E'  ', password = E'test', isbanned = E'false', regdate = E'2016-10-28 16:02:55.698999+03', language = E'en', networkid = E'', params = E'{"info":{"city":"","year":"","email":""},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477659775,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}' WHERE ID = 100
28.10 17:17:47 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:17:47 DB: SELECT * FROM tournament
28.10 17:17:47 STATS: cache [tournament], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
28.10 17:17:47 STATS: cache [tournament], segments [1 calls, 0 hits, 0 misses]
28.10 17:17:47 STATS: cache [tournament], database [94 calls, 0 reads, 0 writes]
28.10 17:17:47 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
28.10 17:17:47 READDB: SELECT * FROM Tournament WHERE ID = 1
28.10 17:17:47 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:17:47 TIME: vdl/cache.tournament.getAvailableTournament : 3.16 ms
28.10 17:17:52 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:17:52 DB: SELECT * FROM tournament
28.10 17:17:52 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:17:52 TIME: vdl/cache.tournament.getAvailableTournament : 2.25 ms
28.10 17:17:53 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'nelli8' AND Password = E'qwerty', _type => core/server.query }
28.10 17:17:53 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'nelli8' AND Password = E'qwerty'
28.10 17:17:53 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => nelli8, networkid => , isbanned => false, id => 101 }}, errorCode => ok, _type => core/server.query }
28.10 17:17:53 TIME: core/server.query : 2.54 ms
28.10 17:17:53 NET: vdl.0 (thread) request core/user.isOnlineID { id => 101, _type => core/user.isOnlineID }
28.10 17:17:53 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
28.10 17:17:53 TIME: core/user.isOnlineID : 0.11 ms
28.10 17:17:53 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 101, _type => core/cache.get }
28.10 17:17:53 READDB: SELECT * FROM Users WHERE ID = 101
28.10 17:17:53 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => nelli8, deleted => false, email => , networktype =>   , password => qwerty, isbanned => false, regdate => 2016-10-28 16:03:03.386319+03, language => en, networkid => , params => { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477659784, lastLoginDate => 302, lastLoadDate => 1029 }, effects => { list => [] } }}, version => 0, id => 101 } }
28.10 17:17:53 TIME: core/cache.get : 1.81 ms
28.10 17:17:53 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 101, _type => core/cache.get }
28.10 17:17:53 READDB: SELECT * FROM UserQuests WHERE ID = 101
28.10 17:17:53 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 101 } }
28.10 17:17:53 TIME: core/cache.get : 1.01 ms
28.10 17:17:53 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 101, _type => core/user.loginPost, ipAddr => 172.16.20.79 }
28.10 17:17:53 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
28.10 17:17:53 TIME: core/user.loginPost : 0.12 ms
28.10 17:17:56 NET: vdl.0 (thread) request vdl/cache.user.getData { userId => 101, _type => vdl/cache.user.getData }
28.10 17:17:56 QUEUE: vdl.0 (thread) response vdl/cache.user.getData { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:17:56 TIME: vdl/cache.user.getData : 0.21 ms
28.10 17:17:56 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 100, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:17:56 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:17:56 TIME: vdl/cache.tournament.addUsers : 0.26 ms
28.10 17:17:56 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:17:56 DB: SELECT * FROM tournament
28.10 17:17:56 DB: SELECT name FROM users WHERE id = 100
28.10 17:17:56 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:17:56 TIME: vdl/cache.tournament.getAvailableTournament : 3.27 ms
28.10 17:17:57 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-28-10 17:19', roundinterval = E'1', params = E'{"params":{"usersList":[100],"usersAll":[100]}}', rounddate = E'2016-28-10 17:19' WHERE ID = 1
28.10 17:18:02 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:18:02 DB: SELECT * FROM tournament
28.10 17:18:02 DB: SELECT name FROM users WHERE id = 100
28.10 17:18:02 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:18:02 TIME: vdl/cache.tournament.getAvailableTournament : 1.94 ms
28.10 17:18:03 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 101, _type => core/cache.update }
28.10 17:18:03 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:18:03 TIME: core/cache.update : 0.19 ms
28.10 17:18:04 WRITEDB: UPDATE Users SET name = E'nelli8', deleted = E'false', email = E'', networktype = E'  ', password = E'qwerty', isbanned = E'false', regdate = E'2016-10-28 16:03:03.386319+03', language = E'en', networkid = E'', params = E'{"info":{"city":"Kazan","year":"","email":"nlqbunskaha@mail.ru"},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477659784,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}' WHERE ID = 101
28.10 17:18:05 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 101, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:18:05 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:18:05 TIME: vdl/cache.tournament.addUsers : 0.26 ms
28.10 17:18:06 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:18:06 DB: SELECT * FROM tournament
28.10 17:18:06 DB: SELECT name FROM users WHERE id = 100
28.10 17:18:06 DB: SELECT name FROM users WHERE id = 101
28.10 17:18:06 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:18:06 TIME: vdl/cache.tournament.getAvailableTournament : 3.67 ms
28.10 17:18:06 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-28-10 17:19', roundinterval = E'1', params = E'{"params":{"usersList":[100,101],"usersAll":[100,101]}}', rounddate = E'2016-28-10 17:19' WHERE ID = 1
28.10 17:18:09 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:18:09 DB: SELECT * FROM tournament
28.10 17:18:09 DB: SELECT name FROM users WHERE id = 100
28.10 17:18:09 DB: SELECT name FROM users WHERE id = 101
28.10 17:18:09 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:18:09 TIME: vdl/cache.tournament.getAvailableTournament : 2.85 ms
28.10 17:18:13 TIMER: Clans cache...
28.10 17:18:13 TIMER: Clans cache: 0ms
28.10 17:18:13 TIMER: Check tournament...
28.10 17:18:13 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:18' OR rounddate = '2016-28-10 17:18' AND status <> 'finished'
28.10 17:18:13 TIMER: Check tournament: 2ms
28.10 17:18:19 BLOCKREMOVE: tournament 1 removed
28.10 17:19:13 TIMER: Clans cache...
28.10 17:19:13 TIMER: Clans cache: 0ms
28.10 17:19:13 TIMER: Check tournament...
28.10 17:19:13 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:19' OR rounddate = '2016-28-10 17:19' AND status <> 'finished'
28.10 17:19:13 STATS: cache [tournament], get [9 calls, 7 cache hits, 1 cache misses, 0 same version, 0 not found]
28.10 17:19:13 STATS: cache [tournament], segments [11 calls, 9 hits, 1 misses]
28.10 17:19:13 STATS: cache [tournament], database [180 calls, 1 reads, 2 writes]
28.10 17:19:13 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
28.10 17:19:13 READDB: SELECT * FROM Tournament WHERE ID = 1
28.10 17:19:13 DB: SELECT nextval('Battle_id_seq') AS id
28.10 17:19:13 READDB: SELECT ID FROM Battle WHERE ID = 96
28.10 17:19:13 READDB: INSERT INTO Battle (ID) VALUES (96)
28.10 17:19:13 STATS: cache [battle], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
28.10 17:19:13 STATS: cache [battle], segments [1 calls, 0 hits, 0 misses]
28.10 17:19:13 STATS: cache [battle], database [180 calls, 0 reads, 0 writes]
28.10 17:19:13 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
28.10 17:19:13 READDB: SELECT * FROM Battle WHERE ID = 96
28.10 17:19:13 DB: SELECT name FROM users WHERE id=101
28.10 17:19:13 DB: SELECT name FROM users WHERE id=100
28.10 17:19:13 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => nelli8, tournamentId => 1, enemy.id => 100, enemy.name => test67, round => 1, roundDate => 2016-28-10 17:19, id => 101, enemy.num => 2, battleId => 96, player => 1 }, _isNotify => true, id => 101, _type => tournament.enemyEvent }
28.10 17:19:13 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => test67, tournamentId => 1, enemy.id => 101, enemy.name => nelli8, round => 1, roundDate => 2016-28-10 17:19, id => 100, enemy.num => 1, battleId => 96, player => 2 }, _isNotify => true, id => 100, _type => tournament.enemyEvent }
28.10 17:19:13 TIMER: Check tournament: 66ms
28.10 17:19:18 WRITEDB: UPDATE Battle SET secondid = E'100', turnid = E'101', finished = E'false', firstid = E'101', params = E'{}', avaliable = E'false' WHERE ID = 96
28.10 17:19:18 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'active', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-28-10 17:19', roundinterval = E'1', params = E'{"params":{"usersList":[100,101],"battleActive":[96],"usersAll":[100,101]}}', rounddate = E'2016-28-10 17:19' WHERE ID = 1
28.10 17:19:28 BLOCKREMOVE: battle 96 removed
28.10 17:19:28 BLOCKREMOVE: tournament 1 removed
28.10 17:19:46 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 96, _type => vdl/cache.battle.infoRoom }
28.10 17:19:46 READDB: SELECT * FROM Battle WHERE ID = 96
28.10 17:19:46 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:19:46 TIME: vdl/cache.battle.infoRoom : 1.1 ms
28.10 17:19:46 NET: vdl.0 (thread) request vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
28.10 17:19:46 DB: SELECT * FROM tournament WHERE id = 1
28.10 17:19:46 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[100,101],"battleActive":[96],"usersAll":[100,101]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19, roundinterval => 1 }
28.10 17:19:46 TIME: vdl/cache.tournament.getTournament : 0.84 ms
28.10 17:19:46 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 96, _type => vdl/cache.battle.infoRoom }
28.10 17:19:46 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:19:46 TIME: vdl/cache.battle.infoRoom : 0.15 ms
28.10 17:19:46 NET: vdl.0 (thread) request vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
28.10 17:19:46 READDB: SELECT * FROM Tournament WHERE ID = 1
28.10 17:19:46 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getBattlesTournaments [96]
28.10 17:19:46 TIME: vdl/cache.tournament.getBattlesTournaments : 1.16 ms
28.10 17:19:46 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
28.10 17:19:46 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [100,101] }
28.10 17:19:46 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.19 ms
28.10 17:19:46 NET: vdl.0 (thread) request vdl/cache.battle.finishRoom { roomId => 96, _type => vdl/cache.battle.finishRoom }
28.10 17:19:46 QUEUE: vdl.0 (thread) response vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
28.10 17:19:46 TIME: vdl/cache.battle.finishRoom : 0.15 ms
28.10 17:19:46 NET: vdl.0 (thread) request vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [96] }
28.10 17:19:46 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
28.10 17:19:46 TIME: vdl/cache.tournament.setBattlesTournaments : 0.22 ms
28.10 17:19:46 NET: vdl.0 (thread) request vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [100], _type => vdl/cache.tournament.setUsersTournament }
28.10 17:19:46 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
28.10 17:19:46 TIME: vdl/cache.tournament.setUsersTournament : 0.18 ms
28.10 17:19:46 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [{ winner => 100, round => 1, player1 => 101, player2 => 100 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:19:46 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:19:46 TIME: vdl/cache.tournament.setGrid : 0.25 ms
28.10 17:19:46 NET: vdl.0 (thread) request vdl/cache.tournament.addRound { dateRound => 2016-28-10 17:19, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
28.10 17:19:46 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
28.10 17:19:46 TIME: vdl/cache.tournament.addRound : 0.19 ms
28.10 17:19:46 NET: vdl.0 (thread) request vdl/cache.tournament.finish { winner => 100, tournamentId => 1, _type => vdl/cache.tournament.finish }
28.10 17:19:46 QUEUE: vdl.0 (thread) response vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
28.10 17:19:46 TIME: vdl/cache.tournament.finish : 0.19 ms
28.10 17:19:48 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 96, _type => vdl/cache.battle.infoRoom }
28.10 17:19:48 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:19:48 TIME: vdl/cache.battle.infoRoom : 0.16 ms
28.10 17:19:48 NET: vdl.0 (thread) request vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
28.10 17:19:48 DB: SELECT * FROM tournament WHERE id = 1
28.10 17:19:48 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[100,101],"battleActive":[96],"usersAll":[100,101]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19, roundinterval => 1 }
28.10 17:19:48 TIME: vdl/cache.tournament.getTournament : 4.79 ms
28.10 17:19:48 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 96, _type => vdl/cache.battle.infoRoom }
28.10 17:19:48 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:19:48 TIME: vdl/cache.battle.infoRoom : 0.14 ms
28.10 17:19:48 NET: vdl.0 (thread) request vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
28.10 17:19:48 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getBattlesTournaments []
28.10 17:19:48 TIME: vdl/cache.tournament.getBattlesTournaments : 0.16 ms
28.10 17:19:48 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
28.10 17:19:48 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [100] }
28.10 17:19:48 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.18 ms
28.10 17:19:48 NET: vdl.0 (thread) request vdl/cache.battle.finishRoom { roomId => 96, _type => vdl/cache.battle.finishRoom }
28.10 17:19:48 QUEUE: vdl.0 (thread) response vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
28.10 17:19:48 TIME: vdl/cache.battle.finishRoom : 0.15 ms
28.10 17:19:48 NET: vdl.0 (thread) request vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [96] }
28.10 17:19:48 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
28.10 17:19:48 TIME: vdl/cache.tournament.setBattlesTournaments : 0.24 ms
28.10 17:19:48 NET: vdl.0 (thread) request vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [100], _type => vdl/cache.tournament.setUsersTournament }
28.10 17:19:48 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
28.10 17:19:48 TIME: vdl/cache.tournament.setUsersTournament : 0.18 ms
28.10 17:19:48 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [{ winner => 100, round => 1, player1 => 101, player2 => 100 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:19:48 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:19:48 TIME: vdl/cache.tournament.setGrid : 1.22 ms
28.10 17:19:48 NET: vdl.0 (thread) request vdl/cache.tournament.addRound { dateRound => 2016-28-10 17:19, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
28.10 17:19:48 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
28.10 17:19:48 TIME: vdl/cache.tournament.addRound : 0.41 ms
28.10 17:19:48 NET: vdl.0 (thread) request vdl/cache.tournament.finish { winner => 100, tournamentId => 1, _type => vdl/cache.tournament.finish }
28.10 17:19:48 QUEUE: vdl.0 (thread) response vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
28.10 17:19:48 TIME: vdl/cache.tournament.finish : 0.59 ms
28.10 17:19:51 WRITEDB: UPDATE Battle SET secondid = E'100', turnid = E'101', finished = E'true', firstid = E'101', params = E'{}', avaliable = E'false' WHERE ID = 96
28.10 17:19:51 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'100', status = E'finished', type = E'once', repeatinterval = E'0', round = E'2', startdate = E'2016-28-10 17:19', roundinterval = E'1', params = E'{"params":{"battleFinished":[96,96],"usersList":[100],"battleActive":[],"usersAll":[100,101]}}', rounddate = E'2016-28-10 17:19' WHERE ID = 1
28.10 17:19:58 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:19:58 DB: SELECT * FROM tournament
28.10 17:19:58 DB: SELECT name FROM users WHERE id = 100
28.10 17:19:58 DB: SELECT name FROM users WHERE id = 101
28.10 17:19:58 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 100, battleFinished => [96,96], round => 2, id => 1, status => finished, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => [], rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:19:58 TIME: vdl/cache.tournament.getAvailableTournament : 2.64 ms
28.10 17:20:01 BLOCKREMOVE: battle 96 removed
28.10 17:20:04 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=100 OR secondid=100 AND finished <> true, _type => core/server.query }
28.10 17:20:04 DB: SELECT id FROM battle WHERE firstid=100 OR secondid=100 AND finished <> true
28.10 17:20:04 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
28.10 17:20:04 TIME: core/server.query : 1.82 ms
28.10 17:20:04 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 17:20:04 READDB: SELECT * FROM Battle WHERE ID = 0
28.10 17:20:04 TRACE: vdl/cache.battle.infoRoom : Invalid field access : get
28.10 17:20:04 TRACE: vdl/cache.battle.infoRoom : 
Called from modules/VDLCache.hx line 156
Called from modules/VDLCache.hx line 149
Called from modules/VDLCache.hx line 99
Called from snipe/cache/CacheServer.hx line 487
28.10 17:20:04 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
28.10 17:20:04 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 100, _type => core/cache.update }
28.10 17:20:04 STATS: cache [user], get [4 calls, 2 cache hits, 2 cache misses, 0 same version, 0 not found]
28.10 17:20:04 STATS: cache [user], segments [9 calls, 2 hits, 4 misses]
28.10 17:20:04 STATS: cache [user], database [231 calls, 2 reads, 2 writes]
28.10 17:20:04 STATS: cache [user], lock [2 calls, 2 attempts, 0 failures]
28.10 17:20:04 STATS: cache manager [1], get [4 calls, total 0.01 sec spent, avg 1.53 ms]
28.10 17:20:04 STATS: cache manager [1], update [3 calls, total 0 sec spent, avg 0.25 ms]
28.10 17:20:04 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
28.10 17:20:04 TIME: core/cache.update : 0.89 ms
28.10 17:20:04 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 100, _type => core/cache.update }
28.10 17:20:04 STATS: cache [questdata], get [2 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
28.10 17:20:04 STATS: cache [questdata], segments [5 calls, 0 hits, 4 misses]
28.10 17:20:04 STATS: cache [questdata], database [231 calls, 2 reads, 0 writes]
28.10 17:20:04 STATS: cache [questdata], lock [2 calls, 2 attempts, 0 failures]
28.10 17:20:04 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:20:04 TIME: core/cache.update : 0.45 ms
28.10 17:20:04 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 100, _type => core/user.logoutPost }
28.10 17:20:04 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
28.10 17:20:04 TIME: core/user.logoutPost : 0.13 ms
28.10 17:20:04 WRITEDB: UPDATE Users SET name = E'test67', deleted = E'false', email = E'', networktype = E'  ', password = E'test', isbanned = E'false', regdate = E'2016-10-28 16:02:55.698999+03', language = E'en', networkid = E'', params = E'{"info":{"city":"","year":"","email":""},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477659775,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}' WHERE ID = 100
28.10 17:20:04 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 100
28.10 17:20:08 NET: vdl.0 (thread) request vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
28.10 17:20:08 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
28.10 17:20:08 TIME: vdl/cache.tournament.getStatus : 0.13 ms
28.10 17:20:08 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:20:08 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:20:08 TIME: vdl/cache.tournament.setGrid : 0.19 ms
28.10 17:20:13 TIMER: Clans cache...
28.10 17:20:13 TIMER: Clans cache: 0ms
28.10 17:20:13 TIMER: Check tournament...
28.10 17:20:13 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:20' OR rounddate = '2016-28-10 17:20' AND status <> 'finished'
28.10 17:20:13 TIMER: Check tournament: 1ms
28.10 17:20:14 BLOCKREMOVE: user 100 removed
28.10 17:20:14 BLOCKREMOVE: questdata 100 removed
28.10 17:20:30 TIMER: Starting timer...
28.10 17:20:30 TIMER: Timer running...
28.10 17:20:30 DB: SELECT * FROM GameVars
28.10 17:20:30 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 17:20:30 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 17:20:30 DB: SELECT * FROM Shops WHERE ID = 1
28.10 17:20:30 TEMP: load ./tmp/quest_daily_ids
28.10 17:20:30 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
28.10 17:20:30 TEMP: save ./tmp/quest_daily_ids
28.10 17:20:31 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
28.10 17:20:31 QUEUE: vdl.0 (thread) response server.login
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
28.10 17:20:31 DB: SELECT * FROM LocalizationStrings
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 22.14 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
28.10 17:20:31 DB: SELECT * FROM GameVars
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 1.17 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
28.10 17:20:31 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 1.75 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
28.10 17:20:31 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 1.11 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
28.10 17:20:31 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 1.39 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
28.10 17:20:31 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 2.02 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/quest.getDaily
28.10 17:20:31 TIME: core/quest.getDaily : 0.06 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
28.10 17:20:31 DB: SELECT * FROM UserAttributeTypes
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 2.03 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
28.10 17:20:31 DB: SELECT * FROM UserVariableTypes
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 1.17 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
28.10 17:20:31 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 3.4 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
28.10 17:20:31 DB: SELECT * FROM ItemGroups
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 1 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
28.10 17:20:31 DB: SELECT * FROM Bundles ORDER BY ID
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 1.77 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
28.10 17:20:31 DB: SELECT * FROM BundleItems ORDER BY ID
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 1.74 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/shop.getList
28.10 17:20:31 TIME: core/shop.getList : 0.07 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
28.10 17:20:31 DB: SELECT * FROM EffectAttributeTypes
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 1.2 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
28.10 17:20:31 DB: SELECT * FROM Effects
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 1.25 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
28.10 17:20:31 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 1.91 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
28.10 17:20:31 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 1.86 ms
28.10 17:20:31 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
28.10 17:20:31 DB: SELECT * FROM Badges
28.10 17:20:31 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:31 TIME: core/server.query : 1 ms
28.10 17:20:37 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test67' AND Password = E'test', _type => core/server.query }
28.10 17:20:37 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test67' AND Password = E'test'
28.10 17:20:37 QUEUE: vdl.0 (thread) response core/server.query
28.10 17:20:37 TIME: core/server.query : 2.55 ms
28.10 17:20:37 NET: vdl.0 (thread) request core/user.isOnlineID { id => 100, _type => core/user.isOnlineID }
28.10 17:20:37 QUEUE: vdl.0 (thread) response core/user.isOnlineID
28.10 17:20:37 TIME: core/user.isOnlineID : 0.1 ms
28.10 17:20:37 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 100, _type => core/cache.get }
28.10 17:20:37 READDB: SELECT * FROM Users WHERE ID = 100
28.10 17:20:37 QUEUE: vdl.0 (thread) response core/cache.get
28.10 17:20:37 TIME: core/cache.get : 5.73 ms
28.10 17:20:37 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 100, _type => core/cache.get }
28.10 17:20:37 READDB: SELECT * FROM UserQuests WHERE ID = 100
28.10 17:20:37 QUEUE: vdl.0 (thread) response core/cache.get
28.10 17:20:37 TIME: core/cache.get : 1.56 ms
28.10 17:20:37 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 100, _type => core/user.loginPost, ipAddr => 172.16.20.112 }
28.10 17:20:37 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
28.10 17:20:37 TIME: core/user.loginPost : 0.11 ms
28.10 17:20:38 NET: vdl.0 (thread) request vdl/cache.user.getData { userId => 100, _type => vdl/cache.user.getData }
28.10 17:20:38 QUEUE: vdl.0 (thread) response vdl/cache.user.getData { info => { city => , year => , email =>  }, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:20:38 TIME: vdl/cache.user.getData : 0.19 ms
28.10 17:20:45 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'nelli8' AND Password = E'qwerty', _type => core/server.query }
28.10 17:20:45 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'nelli8' AND Password = E'qwerty'
28.10 17:20:45 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => nelli8, networkid => , isbanned => false, id => 101 }}, errorCode => ok, _type => core/server.query }
28.10 17:20:45 TIME: core/server.query : 2.34 ms
28.10 17:20:45 NET: vdl.0 (thread) request core/user.isOnlineID { id => 101, _type => core/user.isOnlineID }
28.10 17:20:45 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
28.10 17:20:45 TIME: core/user.isOnlineID : 0.11 ms
28.10 17:20:45 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 101, _type => core/cache.get }
28.10 17:20:45 READDB: SELECT * FROM Users WHERE ID = 101
28.10 17:20:45 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => nelli8, deleted => false, email => , networktype =>   , password => qwerty, isbanned => false, regdate => 2016-10-28 16:03:03.386319+03, language => en, networkid => , params => { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477659784, lastLoginDate => 302, lastLoadDate => 1029 }, effects => { list => [] } }}, version => 0, id => 101 } }
28.10 17:20:45 TIME: core/cache.get : 2.21 ms
28.10 17:20:45 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 101, _type => core/cache.get }
28.10 17:20:45 READDB: SELECT * FROM UserQuests WHERE ID = 101
28.10 17:20:45 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 101 } }
28.10 17:20:45 TIME: core/cache.get : 0.81 ms
28.10 17:20:45 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 101, _type => core/user.loginPost, ipAddr => 172.16.20.79 }
28.10 17:20:45 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
28.10 17:20:45 TIME: core/user.loginPost : 0.12 ms
28.10 17:20:46 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 100, _type => core/cache.update }
28.10 17:20:46 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:20:46 TIME: core/cache.update : 0.13 ms
28.10 17:20:47 WRITEDB: UPDATE Users SET name = E'test67', deleted = E'false', email = E'', networktype = E'  ', password = E'test', isbanned = E'false', regdate = E'2016-10-28 16:02:55.698999+03', language = E'en', networkid = E'', params = E'{"info":{"city":"","year":"","email":""},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477659775,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}' WHERE ID = 100
28.10 17:20:50 NET: vdl.0 (thread) request vdl/cache.user.getData { userId => 101, _type => vdl/cache.user.getData }
28.10 17:20:50 QUEUE: vdl.0 (thread) response vdl/cache.user.getData { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:20:50 TIME: vdl/cache.user.getData : 0.19 ms
28.10 17:20:51 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 101, _type => core/cache.update }
28.10 17:20:51 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:20:51 TIME: core/cache.update : 0.13 ms
28.10 17:20:52 WRITEDB: UPDATE Users SET name = E'nelli8', deleted = E'false', email = E'', networktype = E'  ', password = E'qwerty', isbanned = E'false', regdate = E'2016-10-28 16:03:03.386319+03', language = E'en', networkid = E'', params = E'{"info":{"city":"Kazan","year":"","email":"nlqbunskaha@mail.ru"},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477659784,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}' WHERE ID = 101
28.10 17:21:31 TIMER: Clans cache...
28.10 17:21:31 TIMER: Clans cache: 0ms
28.10 17:21:31 TIMER: Check tournament...
28.10 17:21:31 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:21' OR rounddate = '2016-28-10 17:21' AND status <> 'finished'
28.10 17:21:31 TIMER: Check tournament: 2ms
28.10 17:21:31 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:31 DB: SELECT * FROM tournament
28.10 17:21:31 STATS: cache [tournament], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
28.10 17:21:31 STATS: cache [tournament], segments [1 calls, 0 hits, 0 misses]
28.10 17:21:31 STATS: cache [tournament], database [61 calls, 0 reads, 0 writes]
28.10 17:21:31 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
28.10 17:21:31 READDB: SELECT * FROM Tournament WHERE ID = 1
28.10 17:21:31 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:31 TIME: vdl/cache.tournament.getAvailableTournament : 3.4 ms
28.10 17:21:34 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 100, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:21:34 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:21:34 TIME: vdl/cache.tournament.addUsers : 0.16 ms
28.10 17:21:34 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:34 DB: SELECT * FROM tournament
28.10 17:21:34 DB: SELECT name FROM users WHERE id = 100
28.10 17:21:34 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:34 TIME: vdl/cache.tournament.getAvailableTournament : 2.44 ms
28.10 17:21:37 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-28-10 17:22', roundinterval = E'1', params = E'{"params":{"usersList":[100],"usersAll":[100]}}', rounddate = E'2016-28-10 17:22' WHERE ID = 1
28.10 17:21:37 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:37 DB: SELECT * FROM tournament
28.10 17:21:37 DB: SELECT name FROM users WHERE id = 100
28.10 17:21:37 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:37 TIME: vdl/cache.tournament.getAvailableTournament : 2.66 ms
28.10 17:21:41 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 101, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:21:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:21:41 TIME: vdl/cache.tournament.addUsers : 0.23 ms
28.10 17:21:41 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:41 DB: SELECT * FROM tournament
28.10 17:21:41 DB: SELECT name FROM users WHERE id = 100
28.10 17:21:41 DB: SELECT name FROM users WHERE id = 101
28.10 17:21:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:41 TIME: vdl/cache.tournament.getAvailableTournament : 3.28 ms
28.10 17:21:42 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'starting', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-28-10 17:22', roundinterval = E'1', params = E'{"params":{"usersList":[100,101],"usersAll":[100,101]}}', rounddate = E'2016-28-10 17:22' WHERE ID = 1
28.10 17:21:52 BLOCKREMOVE: tournament 1 removed
28.10 17:22:31 TIMER: Clans cache...
28.10 17:22:31 TIMER: Clans cache: 0ms
28.10 17:22:31 TIMER: Check tournament...
28.10 17:22:31 DB: SELECT * FROM tournament WHERE startdate = '2016-28-10 17:22' OR rounddate = '2016-28-10 17:22' AND status <> 'finished'
28.10 17:22:31 READDB: SELECT * FROM Tournament WHERE ID = 1
28.10 17:22:31 DB: SELECT nextval('Battle_id_seq') AS id
28.10 17:22:31 READDB: SELECT ID FROM Battle WHERE ID = 97
28.10 17:22:31 READDB: INSERT INTO Battle (ID) VALUES (97)
28.10 17:22:31 STATS: cache [battle], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
28.10 17:22:31 STATS: cache [battle], segments [1 calls, 0 hits, 0 misses]
28.10 17:22:31 STATS: cache [battle], database [121 calls, 0 reads, 0 writes]
28.10 17:22:31 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
28.10 17:22:31 READDB: SELECT * FROM Battle WHERE ID = 97
28.10 17:22:31 DB: SELECT name FROM users WHERE id=101
28.10 17:22:31 DB: SELECT name FROM users WHERE id=100
28.10 17:22:31 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => nelli8, tournamentId => 1, enemy.id => 100, enemy.name => test67, round => 1, roundDate => 2016-28-10 17:22, id => 101, enemy.num => 2, battleId => 97, player => 1 }, _isNotify => true, id => 101, _type => tournament.enemyEvent }
28.10 17:22:31 QUEUE: vdl.0 (thread) response tournament.enemyEvent { data => { name => test67, tournamentId => 1, enemy.id => 101, enemy.name => nelli8, round => 1, roundDate => 2016-28-10 17:22, id => 100, enemy.num => 1, battleId => 97, player => 2 }, _isNotify => true, id => 100, _type => tournament.enemyEvent }
28.10 17:22:31 TIMER: Check tournament: 79ms
28.10 17:22:36 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'-1', status = E'active', type = E'once', repeatinterval = E'0', round = E'1', startdate = E'2016-28-10 17:22', roundinterval = E'1', params = E'{"params":{"usersList":[100,101],"battleActive":[97],"usersAll":[100,101]}}', rounddate = E'2016-28-10 17:22' WHERE ID = 1
28.10 17:22:37 WRITEDB: UPDATE Battle SET secondid = E'100', turnid = E'101', finished = E'false', firstid = E'101', params = E'{}', avaliable = E'false' WHERE ID = 97
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 97, _type => vdl/cache.battle.infoRoom }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:22:41 TIME: vdl/cache.battle.infoRoom : 0.15 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
28.10 17:22:41 DB: SELECT * FROM tournament WHERE id = 1
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[100,101],"battleActive":[97],"usersAll":[100,101]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22, roundinterval => 1 }
28.10 17:22:41 TIME: vdl/cache.tournament.getTournament : 1.17 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 97, _type => vdl/cache.battle.infoRoom }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:22:41 TIME: vdl/cache.battle.infoRoom : 0.14 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
28.10 17:22:41 STATS: cache [tournament], get [8 calls, 5 cache hits, 2 cache misses, 0 same version, 0 not found]
28.10 17:22:41 STATS: cache [tournament], segments [11 calls, 8 hits, 2 misses]
28.10 17:22:41 STATS: cache [tournament], database [131 calls, 2 reads, 3 writes]
28.10 17:22:41 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getBattlesTournaments [97]
28.10 17:22:41 TIME: vdl/cache.tournament.getBattlesTournaments : 0.41 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [100,101] }
28.10 17:22:41 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.2 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.battle.finishRoom { roomId => 97, _type => vdl/cache.battle.finishRoom }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
28.10 17:22:41 TIME: vdl/cache.battle.finishRoom : 0.15 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [97] }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
28.10 17:22:41 TIME: vdl/cache.tournament.setBattlesTournaments : 0.23 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [100], _type => vdl/cache.tournament.setUsersTournament }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
28.10 17:22:41 TIME: vdl/cache.tournament.setUsersTournament : 0.18 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [{ winner => 100, round => 1, player1 => 101, player2 => 100 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:22:41 TIME: vdl/cache.tournament.setGrid : 0.3 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.tournament.addRound { dateRound => 2016-28-10 17:22, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
28.10 17:22:41 TIME: vdl/cache.tournament.addRound : 0.18 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.tournament.finish { winner => 100, tournamentId => 1, _type => vdl/cache.tournament.finish }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
28.10 17:22:41 TIME: vdl/cache.tournament.finish : 0.69 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 97, _type => vdl/cache.battle.infoRoom }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:22:41 TIME: vdl/cache.battle.infoRoom : 0.35 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
28.10 17:22:41 DB: SELECT * FROM tournament WHERE id = 1
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[100,101],"battleActive":[97],"usersAll":[100,101]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22, roundinterval => 1 }
28.10 17:22:41 TIME: vdl/cache.tournament.getTournament : 1.38 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 97, _type => vdl/cache.battle.infoRoom }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:22:41 TIME: vdl/cache.battle.infoRoom : 0.14 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getBattlesTournaments []
28.10 17:22:41 TIME: vdl/cache.tournament.getBattlesTournaments : 0.28 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [100] }
28.10 17:22:41 TIME: vdl/cache.tournament.getAvailableTournamentUsers : 0.35 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.battle.finishRoom { roomId => 97, _type => vdl/cache.battle.finishRoom }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
28.10 17:22:41 TIME: vdl/cache.battle.finishRoom : 0.29 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [97] }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
28.10 17:22:41 TIME: vdl/cache.tournament.setBattlesTournaments : 0.37 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [100], _type => vdl/cache.tournament.setUsersTournament }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
28.10 17:22:41 TIME: vdl/cache.tournament.setUsersTournament : 0.33 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [{ winner => 100, round => 1, player1 => 101, player2 => 100 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:22:41 TIME: vdl/cache.tournament.setGrid : 2.67 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.tournament.addRound { dateRound => 2016-28-10 17:22, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
28.10 17:22:41 TIME: vdl/cache.tournament.addRound : 0.19 ms
28.10 17:22:41 NET: vdl.0 (thread) request vdl/cache.tournament.finish { winner => 100, tournamentId => 1, _type => vdl/cache.tournament.finish }
28.10 17:22:41 QUEUE: vdl.0 (thread) response vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
28.10 17:22:41 TIME: vdl/cache.tournament.finish : 0.19 ms
28.10 17:22:42 WRITEDB: UPDATE Battle SET secondid = E'100', turnid = E'101', finished = E'true', firstid = E'101', params = E'{}', avaliable = E'false' WHERE ID = 97
28.10 17:22:42 WRITEDB: UPDATE Tournament SET name = E'test', winner = E'100', status = E'finished', type = E'once', repeatinterval = E'0', round = E'2', startdate = E'2016-28-10 17:22', roundinterval = E'1', params = E'{"params":{"battleFinished":[97,97],"usersList":[100],"battleActive":[],"usersAll":[100,101]}}', rounddate = E'2016-28-10 17:22' WHERE ID = 1
28.10 17:22:46 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:22:46 DB: SELECT * FROM tournament
28.10 17:22:46 DB: SELECT name FROM users WHERE id = 100
28.10 17:22:46 DB: SELECT name FROM users WHERE id = 101
28.10 17:22:46 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 100, battleFinished => [97,97], round => 2, id => 1, status => finished, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => [], rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:22:46 TIME: vdl/cache.tournament.getAvailableTournament : 2.97 ms
28.10 17:22:52 BLOCKREMOVE: battle 97 removed
28.10 17:22:53 NET: vdl.0 (thread) request vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
28.10 17:22:53 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
28.10 17:22:53 TIME: vdl/cache.tournament.getStatus : 0.17 ms
28.10 17:22:53 NET: vdl.0 (thread) request vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:22:53 QUEUE: vdl.0 (thread) response vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:22:53 TIME: vdl/cache.tournament.setGrid : 0.19 ms
28.10 17:23:04 BLOCKREMOVE: tournament 1 removed
