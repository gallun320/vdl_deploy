12.10 17:01:16 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 17:01:16 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 17:01:16 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 17:01:16 TIME: core/server.query : 0.85 ms
12.10 17:01:16 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 17:01:16 STATS: cache [battle], get [12 calls, 0 cache hits, 11 cache misses, 0 same version, 11 not found]
12.10 17:01:16 STATS: cache [battle], segments [12 calls, 0 hits, 11 misses]
12.10 17:01:16 STATS: cache [battle], database [9478 calls, 11 reads, 0 writes]
12.10 17:01:16 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
12.10 17:01:16 READDB: SELECT * FROM Battle WHERE ID = 0
12.10 17:01:16 TRACE: vdl/cache.battle.infoRoom : Invalid field access : get
12.10 17:01:16 TRACE: vdl/cache.battle.infoRoom : 
Called from modules/VDLCache.hx line 107
Called from modules/VDLCache.hx line 100
Called from modules/VDLCache.hx line 72
Called from snipe/cache/CacheServer.hx line 487
12.10 17:01:16 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 17:01:16 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 17:01:16 STATS: cache [user], get [22 calls, 7 cache hits, 15 cache misses, 0 same version, 0 not found]
12.10 17:01:16 STATS: cache [user], segments [84 calls, 58 hits, 25 misses]
12.10 17:01:16 STATS: cache [user], database [9478 calls, 15 reads, 28 writes]
12.10 17:01:16 STATS: cache [user], lock [17 calls, 17 attempts, 0 failures]
12.10 17:01:16 STATS: cache manager [1], get [29 calls, total 0.03 sec spent, avg 0.99 ms]
12.10 17:01:16 STATS: cache manager [1], update [40 calls, total 0.01 sec spent, avg 0.17 ms]
12.10 17:01:16 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 17:01:16 TIME: core/cache.update : 0.56 ms
12.10 17:01:16 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 17:01:16 STATS: cache [questdata], get [12 calls, 2 cache hits, 10 cache misses, 0 same version, 0 not found]
12.10 17:01:16 STATS: cache [questdata], segments [47 calls, 26 hits, 20 misses]
12.10 17:01:16 STATS: cache [questdata], database [9478 calls, 10 reads, 11 writes]
12.10 17:01:16 STATS: cache [questdata], lock [12 calls, 12 attempts, 0 failures]
12.10 17:01:16 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:01:16 TIME: core/cache.update : 0.4 ms
12.10 17:01:16 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 17:01:16 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 17:01:16 TIME: core/user.logoutPost : 0.12 ms
12.10 17:01:17 WRITEDB: UPDATE Users SET name = E'uid33', deleted = E'false', email = E'', networktype = E'  ', password = E'uid33', isbanned = E'false', regdate = E'2016-10-12 14:35:09.155569+03', language = E'en', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476272110,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 33
12.10 17:01:17 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 33
12.10 17:01:18 TIMER: Clans cache...
12.10 17:01:18 TIMER: Clans cache: 0ms
12.10 17:01:27 BLOCKREMOVE: user 33 removed
12.10 17:01:27 BLOCKREMOVE: questdata 33 removed
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM tournament WHERE startdate = cast( 1476282.19820477 as text) AND winner = -1 AND status = 'starting', _type => core/server.query }
12.10 17:02:18 DB: SELECT * FROM tournament WHERE startdate = cast( 1476282.19820477 as text) AND winner = -1 AND status = 'starting'
12.10 17:02:18 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 17:02:18 TIME: core/server.query : 1.31 ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:02:18 TIMER: Clans cache...
12.10 17:02:18 TIMER: Clans cache: 0ms
12.10 17:30:21 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 17:30:21 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 17:30:21 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid33, networkid => , isbanned => false, id => 33 }}, errorCode => ok, _type => core/server.query }
12.10 17:30:21 TIME: core/server.query : 1.25 ms
12.10 17:30:21 NET: vdl.0 (thread) request core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 17:30:21 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 17:30:21 TIME: core/user.isOnlineID : 0.13 ms
12.10 17:30:21 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 17:30:21 STATS: cache [user], get [22 calls, 7 cache hits, 15 cache misses, 0 same version, 0 not found]
12.10 17:30:21 STATS: cache [user], segments [86 calls, 60 hits, 25 misses]
12.10 17:30:21 STATS: cache [user], database [11222 calls, 15 reads, 29 writes]
12.10 17:30:21 STATS: cache [user], lock [18 calls, 18 attempts, 0 failures]
12.10 17:30:21 READDB: SELECT * FROM Users WHERE ID = 33
12.10 17:30:21 STATS: cache manager [1], get [30 calls, total 0.03 sec spent, avg 1.04 ms]
12.10 17:30:21 STATS: cache manager [1], update [41 calls, total 0.01 sec spent, avg 0.17 ms]
12.10 17:30:21 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid33, deleted => false, email => , networktype =>   , password => uid33, isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476272110, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 0, id => 33 } }
12.10 17:30:21 TIME: core/cache.get : 2.89 ms
12.10 17:30:21 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 17:30:21 STATS: cache [questdata], get [12 calls, 2 cache hits, 10 cache misses, 0 same version, 0 not found]
12.10 17:30:21 STATS: cache [questdata], segments [49 calls, 28 hits, 20 misses]
12.10 17:30:21 STATS: cache [questdata], database [11222 calls, 10 reads, 12 writes]
12.10 17:30:21 STATS: cache [questdata], lock [13 calls, 13 attempts, 0 failures]
12.10 17:30:21 READDB: SELECT * FROM UserQuests WHERE ID = 33
12.10 17:30:21 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 33 } }
12.10 17:30:21 TIME: core/cache.get : 1.32 ms
12.10 17:30:21 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 17:30:21 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
12.10 17:30:21 TIME: core/user.loginPost : 0.12 ms
12.10 17:30:28 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 17:30:28 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:30:28 TIME: core/cache.update : 0.19 ms
12.10 17:30:28 WRITEDB: UPDATE Users SET name = E'uid33', deleted = E'false', email = E'', networktype = E'  ', password = E'uid33', isbanned = E'false', regdate = E'2016-10-12 14:35:09.155569+03', language = E'en', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476272110,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 33
12.10 17:30:38 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:30:38 DB: SELECT * FROM tournament WHERE winner = -1 AND status = 'starting'
12.10 17:30:38 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:30:38 TIME: vdl/cache.tournament.getAvailableTournament : 1.25 ms
12.10 17:31:18 TIMER: Clans cache...
12.10 17:31:18 TIMER: Clans cache: 0ms
12.10 17:31:18 TIMER: Clans cache...
12.10 17:31:18 TIMER: Clans cache: 0ms
12.10 17:31:18 TIMER: Clans cache...
12.10 17:31:18 TIMER: Clans cache: 0ms
12.10 17:34:16 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 17:34:16 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 17:34:16 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 17:34:16 TIME: core/server.query : 1.18 ms
12.10 17:34:16 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 17:34:16 STATS: cache [battle], get [13 calls, 0 cache hits, 12 cache misses, 0 same version, 12 not found]
12.10 17:34:16 STATS: cache [battle], segments [13 calls, 0 hits, 12 misses]
12.10 17:34:16 STATS: cache [battle], database [11457 calls, 12 reads, 0 writes]
12.10 17:34:16 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
12.10 17:34:16 READDB: SELECT * FROM Battle WHERE ID = 0
12.10 17:34:16 TRACE: vdl/cache.battle.infoRoom : Invalid field access : get
12.10 17:34:16 TRACE: vdl/cache.battle.infoRoom : 
Called from modules/VDLCache.hx line 107
Called from modules/VDLCache.hx line 100
Called from modules/VDLCache.hx line 72
Called from snipe/cache/CacheServer.hx line 487
12.10 17:34:16 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 17:34:16 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 17:34:16 STATS: cache [user], get [23 calls, 7 cache hits, 16 cache misses, 0 same version, 0 not found]
12.10 17:34:16 STATS: cache [user], segments [89 calls, 61 hits, 27 misses]
12.10 17:34:16 STATS: cache [user], database [11457 calls, 16 reads, 30 writes]
12.10 17:34:16 STATS: cache [user], lock [18 calls, 18 attempts, 0 failures]
12.10 17:34:16 STATS: cache manager [1], get [31 calls, total 0.03 sec spent, avg 1.05 ms]
12.10 17:34:16 STATS: cache manager [1], update [43 calls, total 0.01 sec spent, avg 0.17 ms]
12.10 17:34:16 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 17:34:16 TIME: core/cache.update : 0.56 ms
12.10 17:34:16 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 17:34:16 STATS: cache [questdata], get [13 calls, 2 cache hits, 11 cache misses, 0 same version, 0 not found]
12.10 17:34:16 STATS: cache [questdata], segments [51 calls, 28 hits, 22 misses]
12.10 17:34:16 STATS: cache [questdata], database [11457 calls, 11 reads, 12 writes]
12.10 17:34:16 STATS: cache [questdata], lock [13 calls, 13 attempts, 0 failures]
12.10 17:34:16 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:34:16 TIME: core/cache.update : 0.46 ms
12.10 17:34:16 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 17:34:16 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 17:34:16 TIME: core/user.logoutPost : 0.13 ms
12.10 17:34:16 WRITEDB: UPDATE Users SET name = E'uid33', deleted = E'false', email = E'', networktype = E'  ', password = E'uid33', isbanned = E'false', regdate = E'2016-10-12 14:35:09.155569+03', language = E'en', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476272110,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 33
12.10 17:34:16 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 33
12.10 17:34:18 TIMER: Clans cache...
12.10 17:34:18 TIMER: Clans cache: 0ms
12.10 17:34:26 BLOCKREMOVE: user 33 removed
12.10 17:34:26 BLOCKREMOVE: questdata 33 removed
12.10 17:39:12 TIMER: Starting timer...
12.10 17:39:12 DB: SELECT * FROM GameVars
12.10 17:39:12 TIMER: Timer running...
12.10 17:39:12 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 17:39:12 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 17:39:12 DB: SELECT * FROM Shops WHERE ID = 1
12.10 17:39:12 TEMP: load ./tmp/quest_daily_ids
12.10 17:39:12 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
12.10 17:39:12 TEMP: save ./tmp/quest_daily_ids
12.10 17:39:12 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 17:39:12 QUEUE: vdl.0 (thread) response server.login
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 17:39:12 DB: SELECT * FROM LocalizationStrings
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 48.77 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 17:39:12 DB: SELECT * FROM GameVars
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 1.25 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 17:39:12 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 1.89 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 17:39:12 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 1.22 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 17:39:12 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 2.07 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 17:39:12 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 2.64 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/quest.getDaily
12.10 17:39:12 TIME: core/quest.getDaily : 0.11 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 17:39:12 DB: SELECT * FROM UserAttributeTypes
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 4.97 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 17:39:12 DB: SELECT * FROM UserVariableTypes
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 0.77 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 17:39:12 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 3.34 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 17:39:12 DB: SELECT * FROM ItemGroups
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 1.15 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 17:39:12 DB: SELECT * FROM Bundles ORDER BY ID
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 1.9 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 17:39:12 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 0.88 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/shop.getList
12.10 17:39:12 TIME: core/shop.getList : 0.03 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 17:39:12 DB: SELECT * FROM EffectAttributeTypes
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 1.37 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 17:39:12 DB: SELECT * FROM Effects
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 1.57 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 17:39:12 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 3.17 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 17:39:12 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 2.3 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 17:39:12 DB: SELECT * FROM Badges
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 1.46 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 17:39:12 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:39:12 TIME: core/server.query : 2.91 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/user.isOnlineID
12.10 17:39:12 TIME: core/user.isOnlineID : 0.09 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 17:39:12 READDB: SELECT * FROM Users WHERE ID = 33
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/cache.get
12.10 17:39:12 TIME: core/cache.get : 5.51 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 17:39:12 READDB: SELECT * FROM UserQuests WHERE ID = 33
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/cache.get
12.10 17:39:12 TIME: core/cache.get : 2.11 ms
12.10 17:39:12 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 17:39:12 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
12.10 17:39:12 TIME: core/user.loginPost : 0.16 ms
12.10 17:39:22 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 17:39:22 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:39:22 TIME: core/cache.update : 0.16 ms
12.10 17:39:23 WRITEDB: UPDATE Users SET name = E'uid33', deleted = E'false', email = E'', networktype = E'  ', password = E'uid33', isbanned = E'false', regdate = E'2016-10-12 14:35:09.155569+03', language = E'en', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476272110,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 33
12.10 17:39:52 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:39:52 DB: SELECT * FROM tournament WHERE winner = -1 AND status = 'starting'
12.10 17:39:52 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:39:52 TIME: vdl/cache.tournament.getAvailableTournament : 3.65 ms
12.10 17:40:12 TIMER: Clans cache...
12.10 17:40:12 TIMER: Clans cache: 0ms
12.10 17:41:05 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 17:41:05 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 17:41:05 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 17:41:05 TIME: core/server.query : 1.99 ms
12.10 17:41:05 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 17:41:05 STATS: cache [battle], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
12.10 17:41:05 STATS: cache [battle], segments [1 calls, 0 hits, 0 misses]
12.10 17:41:05 STATS: cache [battle], database [114 calls, 0 reads, 0 writes]
12.10 17:41:05 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
12.10 17:41:05 READDB: SELECT * FROM Battle WHERE ID = 0
12.10 17:41:05 TRACE: vdl/cache.battle.infoRoom : Invalid field access : get
12.10 17:41:05 TRACE: vdl/cache.battle.infoRoom : 
Called from modules/VDLCache.hx line 110
Called from modules/VDLCache.hx line 103
Called from modules/VDLCache.hx line 72
Called from snipe/cache/CacheServer.hx line 487
12.10 17:41:05 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 17:41:05 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 17:41:05 STATS: cache [user], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
12.10 17:41:05 STATS: cache [user], segments [4 calls, 1 hits, 2 misses]
12.10 17:41:05 STATS: cache [user], database [114 calls, 1 reads, 1 writes]
12.10 17:41:05 STATS: cache [user], lock [1 calls, 1 attempts, 0 failures]
12.10 17:41:05 STATS: cache manager [1], get [2 calls, total 0.01 sec spent, avg 3.7 ms]
12.10 17:41:05 STATS: cache manager [1], update [2 calls, total 0 sec spent, avg 0.18 ms]
12.10 17:41:05 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 17:41:05 TIME: core/cache.update : 0.56 ms
12.10 17:41:05 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 17:41:05 STATS: cache [questdata], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
12.10 17:41:05 STATS: cache [questdata], segments [3 calls, 0 hits, 2 misses]
12.10 17:41:05 STATS: cache [questdata], database [114 calls, 1 reads, 0 writes]
12.10 17:41:05 STATS: cache [questdata], lock [1 calls, 1 attempts, 0 failures]
12.10 17:41:05 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:41:05 TIME: core/cache.update : 0.4 ms
12.10 17:41:05 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 17:41:05 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 17:41:05 TIME: core/user.logoutPost : 0.12 ms
12.10 17:41:06 WRITEDB: UPDATE Users SET name = E'uid33', deleted = E'false', email = E'', networktype = E'  ', password = E'uid33', isbanned = E'false', regdate = E'2016-10-12 14:35:09.155569+03', language = E'en', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476272110,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 33
12.10 17:41:06 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 33
12.10 17:41:12 TIMER: Clans cache...
12.10 17:41:12 TIMER: Clans cache: 0ms
12.10 17:41:14 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 17:41:14 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 17:41:14 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid33, networkid => , isbanned => false, id => 33 }}, errorCode => ok, _type => core/server.query }
12.10 17:41:14 TIME: core/server.query : 3.76 ms
12.10 17:41:14 NET: vdl.0 (thread) request core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 17:41:14 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 17:41:14 TIME: core/user.isOnlineID : 0.13 ms
12.10 17:41:14 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 17:41:14 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid33, deleted => false, email => , networktype =>   , password => uid33, isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476272110, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 2, id => 33 } }
12.10 17:41:14 TIME: core/cache.get : 0.42 ms
12.10 17:41:14 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 17:41:14 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 33 } }
12.10 17:41:14 TIME: core/cache.get : 0.21 ms
12.10 17:41:14 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 17:41:14 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
12.10 17:41:14 TIME: core/user.loginPost : 0.13 ms
12.10 17:41:20 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:41:20 DB: SELECT * FROM tournament WHERE winner = -1 AND status = 'starting'
12.10 17:41:20 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:41:20 TIME: vdl/cache.tournament.getAvailableTournament : 1.56 ms
12.10 17:41:22 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 17:41:22 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
12.10 17:41:22 TIME: core/cache.update : 0.19 ms
12.10 17:41:47 TIMER: Starting timer...
12.10 17:41:47 DB: SELECT * FROM GameVars
12.10 17:41:47 TIMER: Timer running...
12.10 17:41:47 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 17:41:47 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 17:41:47 DB: SELECT * FROM Shops WHERE ID = 1
12.10 17:41:47 TEMP: load ./tmp/quest_daily_ids
12.10 17:41:47 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
12.10 17:41:47 TEMP: save ./tmp/quest_daily_ids
12.10 17:41:48 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 17:41:48 QUEUE: vdl.0 (thread) response server.login
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 17:41:48 DB: SELECT * FROM LocalizationStrings
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 23.59 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 17:41:48 DB: SELECT * FROM GameVars
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 1.14 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 17:41:48 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 1.59 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 17:41:48 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 1.62 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 17:41:48 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 1.69 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 17:41:48 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 2.68 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/quest.getDaily
12.10 17:41:48 TIME: core/quest.getDaily : 0.37 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 17:41:48 DB: SELECT * FROM UserAttributeTypes
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 1.27 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 17:41:48 DB: SELECT * FROM UserVariableTypes
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 2.86 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 17:41:48 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 3.13 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 17:41:48 DB: SELECT * FROM ItemGroups
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 1.07 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 17:41:48 DB: SELECT * FROM Bundles ORDER BY ID
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 1.35 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 17:41:48 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 1.24 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/shop.getList
12.10 17:41:48 TIME: core/shop.getList : 0.08 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 17:41:48 DB: SELECT * FROM EffectAttributeTypes
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 1.29 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 17:41:48 DB: SELECT * FROM Effects
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 1.53 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 17:41:48 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 2.35 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 17:41:48 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 3.49 ms
12.10 17:41:48 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 17:41:48 DB: SELECT * FROM Badges
12.10 17:41:48 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:41:48 TIME: core/server.query : 2.37 ms
12.10 17:41:48 TIMER: Clans cache...
12.10 17:41:48 TIMER: Clans cache: 0ms
12.10 17:41:48 TIMER: Clans cache...
12.10 17:41:48 TIMER: Clans cache: 0ms
12.10 17:44:12 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 17:44:12 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 17:44:12 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:44:12 TIME: core/server.query : 2.21 ms
12.10 17:44:12 NET: vdl.0 (thread) request core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 17:44:12 QUEUE: vdl.0 (thread) response core/user.isOnlineID
12.10 17:44:12 TIME: core/user.isOnlineID : 0.09 ms
12.10 17:44:12 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 17:44:12 STATS: cache [user], get [0 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
12.10 17:44:12 STATS: cache [user], segments [1 calls, 0 hits, 0 misses]
12.10 17:44:12 STATS: cache [user], database [145 calls, 0 reads, 0 writes]
12.10 17:44:12 STATS: cache [user], lock [1 calls, 1 attempts, 0 failures]
12.10 17:44:12 READDB: SELECT * FROM Users WHERE ID = 33
12.10 17:44:12 STATS: cache manager [1], get [1 calls, total 0.01 sec spent, avg 5.93 ms]
12.10 17:44:12 STATS: cache manager [1], update [0 calls, total 0 sec spent, avg -21474836.48 ms]
12.10 17:44:12 QUEUE: vdl.0 (thread) response core/cache.get
12.10 17:44:12 TIME: core/cache.get : 6.15 ms
12.10 17:44:12 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 17:44:12 STATS: cache [questdata], get [0 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
12.10 17:44:12 STATS: cache [questdata], segments [1 calls, 0 hits, 0 misses]
12.10 17:44:12 STATS: cache [questdata], database [145 calls, 0 reads, 0 writes]
12.10 17:44:12 STATS: cache [questdata], lock [1 calls, 1 attempts, 0 failures]
12.10 17:44:12 READDB: SELECT * FROM UserQuests WHERE ID = 33
12.10 17:44:12 QUEUE: vdl.0 (thread) response core/cache.get
12.10 17:44:12 TIME: core/cache.get : 2.24 ms
12.10 17:44:12 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 17:44:12 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
12.10 17:44:12 TIME: core/user.loginPost : 0.13 ms
12.10 17:44:16 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:44:16 DB: SELECT * FROM tournament WHERE winner = -1 AND status = 'starting'
12.10 17:44:16 TRACE: vdl/cache.tournament.getAvailableTournament : manager.get(): no such module - tournament
12.10 17:44:16 TRACE: vdl/cache.tournament.getAvailableTournament : 
Called from snipe/cache/CacheManager.hx line 122
Called from modules/VDLCache.hx line 168
Called from modules/VDLCache.hx line 78
Called from snipe/cache/CacheServer.hx line 487
12.10 17:44:16 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { errorCode => _requestException, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:44:18 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 17:44:18 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:44:18 TIME: core/cache.update : 0.18 ms
12.10 17:44:19 WRITEDB: UPDATE Users SET name = E'uid33', deleted = E'false', email = E'', networktype = E'  ', password = E'uid33', isbanned = E'false', regdate = E'2016-10-12 14:35:09.155569+03', language = E'en', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476272110,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 33
12.10 17:46:45 TIMER: Starting timer...
12.10 17:46:45 DB: SELECT * FROM GameVars
12.10 17:46:45 TIMER: Timer running...
12.10 17:46:45 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 17:46:45 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 17:46:45 DB: SELECT * FROM Shops WHERE ID = 1
12.10 17:46:45 TEMP: load ./tmp/quest_daily_ids
12.10 17:46:45 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
12.10 17:46:45 TEMP: save ./tmp/quest_daily_ids
12.10 17:46:45 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 17:46:45 QUEUE: vdl.0 (thread) response server.login
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 17:46:45 DB: SELECT * FROM LocalizationStrings
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 23.64 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 17:46:45 DB: SELECT * FROM GameVars
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 1.45 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 17:46:45 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 2.14 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 17:46:45 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 1.45 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 17:46:45 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 2.94 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 17:46:45 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 4.38 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/quest.getDaily
12.10 17:46:45 TIME: core/quest.getDaily : 0.12 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 17:46:45 DB: SELECT * FROM UserAttributeTypes
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 1.46 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 17:46:45 DB: SELECT * FROM UserVariableTypes
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 1.06 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 17:46:45 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 3.32 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 17:46:45 DB: SELECT * FROM ItemGroups
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 2.67 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 17:46:45 DB: SELECT * FROM Bundles ORDER BY ID
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 1.67 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 17:46:45 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 1.57 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/shop.getList
12.10 17:46:45 TIME: core/shop.getList : 0.28 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 17:46:45 DB: SELECT * FROM EffectAttributeTypes
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 2.09 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 17:46:45 DB: SELECT * FROM Effects
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 1.7 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 17:46:45 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 2.49 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 17:46:45 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 2.4 ms
12.10 17:46:45 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 17:46:45 DB: SELECT * FROM Badges
12.10 17:46:45 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:46:45 TIME: core/server.query : 1.62 ms
12.10 17:46:45 TIMER: Clans cache...
12.10 17:46:45 TIMER: Clans cache: 0ms
12.10 17:47:50 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 17:47:50 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 17:47:50 QUEUE: vdl.0 (thread) response core/server.query
12.10 17:47:50 TIME: core/server.query : 2.85 ms
12.10 17:47:50 NET: vdl.0 (thread) request core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 17:47:50 QUEUE: vdl.0 (thread) response core/user.isOnlineID
12.10 17:47:50 TIME: core/user.isOnlineID : 0.08 ms
12.10 17:47:50 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 17:47:50 STATS: cache [user], get [0 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
12.10 17:47:50 STATS: cache [user], segments [1 calls, 0 hits, 0 misses]
12.10 17:47:50 STATS: cache [user], database [66 calls, 0 reads, 0 writes]
12.10 17:47:50 STATS: cache [user], lock [1 calls, 1 attempts, 0 failures]
12.10 17:47:50 READDB: SELECT * FROM Users WHERE ID = 33
12.10 17:47:50 STATS: cache manager [1], get [1 calls, total 0 sec spent, avg 4.06 ms]
12.10 17:47:50 STATS: cache manager [1], update [0 calls, total 0 sec spent, avg -21474836.48 ms]
12.10 17:47:50 QUEUE: vdl.0 (thread) response core/cache.get
12.10 17:47:50 TIME: core/cache.get : 4.24 ms
12.10 17:47:50 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 17:47:50 STATS: cache [questdata], get [0 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
12.10 17:47:50 STATS: cache [questdata], segments [1 calls, 0 hits, 0 misses]
12.10 17:47:50 STATS: cache [questdata], database [66 calls, 0 reads, 0 writes]
12.10 17:47:50 STATS: cache [questdata], lock [1 calls, 1 attempts, 0 failures]
12.10 17:47:50 READDB: SELECT * FROM UserQuests WHERE ID = 33
12.10 17:47:50 QUEUE: vdl.0 (thread) response core/cache.get
12.10 17:47:50 TIME: core/cache.get : 1.65 ms
12.10 17:47:50 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 17:47:50 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
12.10 17:47:50 TIME: core/user.loginPost : 0.13 ms
12.10 17:47:55 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 17:47:55 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:47:55 TIME: core/cache.update : 0.14 ms
12.10 17:47:56 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:47:56 DB: SELECT * FROM tournament WHERE winner = -1 AND status = 'starting'
12.10 17:47:56 READDB: SELECT ID FROM Tournament WHERE ID = 1
12.10 17:47:56 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:47:56 TIME: vdl/cache.tournament.getAvailableTournament : 16.49 ms
12.10 17:47:56 WRITEDB: UPDATE Users SET name = E'uid33', deleted = E'false', email = E'', networktype = E'  ', password = E'uid33', isbanned = E'false', regdate = E'2016-10-12 14:35:09.155569+03', language = E'en', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476272110,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 33
12.10 17:48:32 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:48:32 DB: SELECT * FROM tournament WHERE winner = -1 AND status = 'starting'
12.10 17:48:32 READDB: SELECT ID FROM Tournament WHERE ID = 1
12.10 17:48:32 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:48:32 TIME: vdl/cache.tournament.getAvailableTournament : 3.78 ms
12.10 17:48:45 TIMER: Clans cache...
12.10 17:48:45 TIMER: Clans cache: 0ms
12.10 17:48:45 TIMER: Clans cache...
12.10 17:48:45 TIMER: Clans cache: 0ms
12.10 17:48:45 TIMER: Clans cache...
12.10 17:48:45 TIMER: Clans cache: 0ms
12.10 17:48:45 TIMER: Clans cache...
12.10 17:48:45 TIMER: Clans cache: 0ms
12.10 17:48:45 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 17:48:45 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 17:48:45 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 17:48:45 TIME: core/server.query : 1.82 ms
12.10 17:48:45 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 17:48:45 STATS: cache [battle], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
12.10 17:48:45 STATS: cache [battle], segments [1 calls, 0 hits, 0 misses]
12.10 17:48:45 STATS: cache [battle], database [301 calls, 0 reads, 0 writes]
12.10 17:48:45 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
12.10 17:48:45 READDB: SELECT * FROM Battle WHERE ID = 0
12.10 17:48:45 TRACE: vdl/cache.battle.infoRoom : Invalid field access : get
12.10 17:48:45 TRACE: vdl/cache.battle.infoRoom : 
Called from modules/VDLCache.hx line 110
Called from modules/VDLCache.hx line 103
Called from modules/VDLCache.hx line 72
Called from snipe/cache/CacheServer.hx line 487
12.10 17:48:45 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 17:48:45 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 17:48:45 STATS: cache [user], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
12.10 17:48:45 STATS: cache [user], segments [4 calls, 1 hits, 2 misses]
12.10 17:48:45 STATS: cache [user], database [301 calls, 1 reads, 1 writes]
12.10 17:48:45 STATS: cache [user], lock [1 calls, 1 attempts, 0 failures]
12.10 17:48:45 STATS: cache manager [1], get [2 calls, total 0.01 sec spent, avg 2.82 ms]
12.10 17:48:45 STATS: cache manager [1], update [2 calls, total 0 sec spent, avg 0.17 ms]
12.10 17:48:45 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 17:48:45 TIME: core/cache.update : 0.56 ms
12.10 17:48:45 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 17:48:45 STATS: cache [questdata], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
12.10 17:48:45 STATS: cache [questdata], segments [3 calls, 0 hits, 2 misses]
12.10 17:48:45 STATS: cache [questdata], database [301 calls, 1 reads, 0 writes]
12.10 17:48:45 STATS: cache [questdata], lock [1 calls, 1 attempts, 0 failures]
12.10 17:48:45 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:48:45 TIME: core/cache.update : 1.17 ms
12.10 17:48:45 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 17:48:45 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 17:48:45 TIME: core/user.logoutPost : 0.13 ms
12.10 17:51:46 WRITEDB: UPDATE Users SET name = E'uid33', deleted = E'false', email = E'', networktype = E'  ', password = E'uid33', isbanned = E'false', regdate = E'2016-10-12 14:35:09.155569+03', language = E'en', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476272110,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 33
12.10 17:51:46 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 33
12.10 17:51:56 BLOCKREMOVE: user 33 removed
12.10 17:51:56 BLOCKREMOVE: questdata 33 removed
12.10 17:52:45 TIMER: Clans cache...
12.10 17:52:45 TIMER: Clans cache: 0ms
12.10 17:52:45 TIMER: Clans cache...
12.10 17:52:45 TIMER: Clans cache: 0ms
12.10 17:52:45 TIMER: Clans cache...
12.10 17:52:45 TIMER: Clans cache: 0ms
12.10 17:52:45 TIMER: Clans cache...
12.10 17:52:45 TIMER: Clans cache: 0ms
12.10 17:56:02 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 17:56:02 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 17:56:02 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid33, networkid => , isbanned => false, id => 33 }}, errorCode => ok, _type => core/server.query }
12.10 17:56:02 TIME: core/server.query : 1.21 ms
12.10 17:56:02 NET: vdl.0 (thread) request core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 17:56:02 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 17:56:02 TIME: core/user.isOnlineID : 0.08 ms
12.10 17:56:02 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 17:56:02 STATS: cache [user], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
12.10 17:56:02 STATS: cache [user], segments [6 calls, 3 hits, 2 misses]
12.10 17:56:02 STATS: cache [user], database [557 calls, 1 reads, 2 writes]
12.10 17:56:02 STATS: cache [user], lock [2 calls, 2 attempts, 0 failures]
12.10 17:56:02 READDB: SELECT * FROM Users WHERE ID = 33
12.10 17:56:02 STATS: cache manager [1], get [3 calls, total 0.01 sec spent, avg 2.41 ms]
12.10 17:56:02 STATS: cache manager [1], update [3 calls, total 0 sec spent, avg 0.44 ms]
12.10 17:56:02 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid33, deleted => false, email => , networktype =>   , password => uid33, isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476272110, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 0, id => 33 } }
12.10 17:56:02 TIME: core/cache.get : 2.1 ms
12.10 17:56:02 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 17:56:02 STATS: cache [questdata], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
12.10 17:56:02 STATS: cache [questdata], segments [5 calls, 2 hits, 2 misses]
12.10 17:56:02 STATS: cache [questdata], database [557 calls, 1 reads, 1 writes]
12.10 17:56:02 STATS: cache [questdata], lock [2 calls, 2 attempts, 0 failures]
12.10 17:56:02 READDB: SELECT * FROM UserQuests WHERE ID = 33
12.10 17:56:02 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 33 } }
12.10 17:56:02 TIME: core/cache.get : 1.11 ms
12.10 17:56:02 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 17:56:02 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
12.10 17:56:02 TIME: core/user.loginPost : 0.09 ms
12.10 17:56:07 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:56:07 DB: SELECT * FROM tournament WHERE winner = -1 AND status = 'starting'
12.10 17:56:07 READDB: SELECT ID FROM Tournament WHERE ID = 1
12.10 17:56:07 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:56:07 TIME: vdl/cache.tournament.getAvailableTournament : 1.82 ms
12.10 17:56:10 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 17:56:10 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:56:10 TIME: core/cache.update : 0.2 ms
12.10 17:56:11 WRITEDB: UPDATE Users SET name = E'uid33', deleted = E'false', email = E'', networktype = E'  ', password = E'uid33', isbanned = E'false', regdate = E'2016-10-12 14:35:09.155569+03', language = E'en', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476272110,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 33
12.10 17:56:25 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 33, tournament => null, _type => vdl/cache.tournament.addUsers }
12.10 17:56:25 STATS: cache [tournament], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
12.10 17:56:25 STATS: cache [tournament], segments [1 calls, 0 hits, 0 misses]
12.10 17:56:25 STATS: cache [tournament], database [580 calls, 0 reads, 0 writes]
12.10 17:56:25 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
12.10 17:56:25 READDB: SELECT * FROM Tournament WHERE ID = null
12.10 17:56:25 DB: SELECT name FROM users WHERE id = 33
12.10 17:56:25 TRACE: vdl/cache.tournament.addUsers : Invalid field access : get
12.10 17:56:25 TRACE: vdl/cache.tournament.addUsers : 
Called from modules/VDLCache.hx line 244
Called from modules/VDLCache.hx line 136
Called from modules/VDLCache.hx line 76
Called from snipe/cache/CacheServer.hx line 487
12.10 17:56:25 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => _requestException, _type => vdl/cache.tournament.addUsers }
12.10 17:56:45 TIMER: Clans cache...
12.10 17:56:45 TIMER: Clans cache: 0ms
12.10 17:56:45 TIMER: Clans cache...
12.10 17:56:45 TIMER: Clans cache: 0ms
12.10 17:56:45 TIMER: Clans cache...
12.10 17:56:45 TIMER: Clans cache: 0ms
12.10 17:59:38 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 17:59:38 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 17:59:38 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 17:59:38 TIME: core/server.query : 1.01 ms
12.10 17:59:38 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 17:59:38 STATS: cache [battle], get [2 calls, 0 cache hits, 1 cache misses, 0 same version, 1 not found]
12.10 17:59:38 STATS: cache [battle], segments [2 calls, 0 hits, 1 misses]
12.10 17:59:38 STATS: cache [battle], database [773 calls, 1 reads, 0 writes]
12.10 17:59:38 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
12.10 17:59:38 READDB: SELECT * FROM Battle WHERE ID = 0
12.10 17:59:38 TRACE: vdl/cache.battle.infoRoom : Invalid field access : get
12.10 17:59:38 TRACE: vdl/cache.battle.infoRoom : 
Called from modules/VDLCache.hx line 110
Called from modules/VDLCache.hx line 103
Called from modules/VDLCache.hx line 72
Called from snipe/cache/CacheServer.hx line 487
12.10 17:59:38 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 17:59:38 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 17:59:38 STATS: cache [user], get [2 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
12.10 17:59:38 STATS: cache [user], segments [9 calls, 4 hits, 4 misses]
12.10 17:59:38 STATS: cache [user], database [773 calls, 2 reads, 3 writes]
12.10 17:59:38 STATS: cache [user], lock [2 calls, 2 attempts, 0 failures]
12.10 17:59:38 STATS: cache manager [1], get [4 calls, total 0.01 sec spent, avg 2.05 ms]
12.10 17:59:38 STATS: cache manager [1], update [5 calls, total 0 sec spent, avg 0.34 ms]
12.10 17:59:38 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 17:59:38 TIME: core/cache.update : 0.57 ms
12.10 17:59:38 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 17:59:38 STATS: cache [questdata], get [2 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
12.10 17:59:38 STATS: cache [questdata], segments [7 calls, 2 hits, 4 misses]
12.10 17:59:38 STATS: cache [questdata], database [773 calls, 2 reads, 1 writes]
12.10 17:59:38 STATS: cache [questdata], lock [2 calls, 2 attempts, 0 failures]
12.10 17:59:38 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:59:38 TIME: core/cache.update : 0.43 ms
12.10 17:59:38 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 17:59:38 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 17:59:38 TIME: core/user.logoutPost : 0.12 ms
12.10 17:59:38 WRITEDB: UPDATE Users SET name = E'uid33', deleted = E'false', email = E'', networktype = E'  ', password = E'uid33', isbanned = E'false', regdate = E'2016-10-12 14:35:09.155569+03', language = E'en', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476272110,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 33
12.10 17:59:38 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 33
12.10 17:59:45 TIMER: Clans cache...
12.10 17:59:45 TIMER: Clans cache: 0ms
12.10 17:59:47 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 17:59:47 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 17:59:47 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid33, networkid => , isbanned => false, id => 33 }}, errorCode => ok, _type => core/server.query }
12.10 17:59:47 TIME: core/server.query : 1.26 ms
12.10 17:59:47 NET: vdl.0 (thread) request core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 17:59:47 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 17:59:47 TIME: core/user.isOnlineID : 0.13 ms
12.10 17:59:47 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 17:59:47 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid33, deleted => false, email => , networktype =>   , password => uid33, isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476272110, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 2, id => 33 } }
12.10 17:59:47 TIME: core/cache.get : 0.38 ms
12.10 17:59:47 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 17:59:47 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 33 } }
12.10 17:59:47 TIME: core/cache.get : 0.21 ms
12.10 17:59:47 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 17:59:47 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
12.10 17:59:47 TIME: core/user.loginPost : 0.14 ms
12.10 17:59:52 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:59:52 DB: SELECT * FROM tournament WHERE winner = -1 AND status = 'starting'
12.10 17:59:52 READDB: SELECT ID FROM Tournament WHERE ID = 1
12.10 17:59:52 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:59:52 TIME: vdl/cache.tournament.getAvailableTournament : 6.41 ms
12.10 17:59:55 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 17:59:55 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
12.10 17:59:55 TIME: core/cache.update : 0.2 ms
12.10 17:59:56 WRITEDB: UPDATE Users SET name = E'uid33', deleted = E'false', email = E'', networktype = E'  ', password = E'uid33', isbanned = E'false', regdate = E'2016-10-12 14:35:09.155569+03', language = E'en', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476272110,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 33
12.10 17:59:59 NET: vdl.0 (thread) request vdl/cache.tournament.addUsers { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 17:59:59 STATS: cache [tournament], get [2 calls, 0 cache hits, 1 cache misses, 0 same version, 1 not found]
12.10 17:59:59 STATS: cache [tournament], segments [2 calls, 0 hits, 1 misses]
12.10 17:59:59 STATS: cache [tournament], database [794 calls, 1 reads, 0 writes]
12.10 17:59:59 STATS: cache [tournament], lock [0 calls, 0 attempts, 0 failures]
12.10 17:59:59 READDB: SELECT * FROM Tournament WHERE ID = 1
12.10 17:59:59 DB: SELECT name FROM users WHERE id = 33
12.10 17:59:59 TRACE: vdl/cache.tournament.addUsers : Invalid field access : length
12.10 17:59:59 TRACE: vdl/cache.tournament.addUsers : 
Called from modules/VDLCache.hx line 250
Called from modules/VDLCache.hx line 136
Called from modules/VDLCache.hx line 76
Called from snipe/cache/CacheServer.hx line 487
12.10 17:59:59 QUEUE: vdl.0 (thread) response vdl/cache.tournament.addUsers { errorCode => _requestException, _type => vdl/cache.tournament.addUsers }
