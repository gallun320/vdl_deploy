12.10 13:00:14 PENDING: INSERT INTO LogUserOnlineCount (Date, Min, Max, Avg) VALUES (now(), 0, 0, 0)
12.10 13:00:14 TIMER: Clans cache...
12.10 13:00:14 TIMER: Clans cache: 0ms
12.10 13:00:20 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true, _type => core/server.query }
12.10 13:00:20 DB: SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true
12.10 13:00:20 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 13:00:20 TIME: core/server.query : 1.61 ms
12.10 13:00:20 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 13:00:20 STATS: cache [battle], get [1 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
12.10 13:00:20 STATS: cache [battle], segments [1 calls, 0 hits, 0 misses]
12.10 13:00:20 STATS: cache [battle], database [67 calls, 0 reads, 0 writes]
12.10 13:00:20 STATS: cache [battle], lock [0 calls, 0 attempts, 0 failures]
12.10 13:00:20 READDB: SELECT * FROM Battle WHERE ID = 0
12.10 13:00:20 TRACE: vdl/cache.battle.infoRoom : Invalid field access : get
12.10 13:00:20 TRACE: vdl/cache.battle.infoRoom : 
Called from modules/VDLCache.hx line 107
Called from modules/VDLCache.hx line 100
Called from modules/VDLCache.hx line 72
Called from snipe/cache/CacheServer.hx line 487
12.10 13:00:20 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 13:00:20 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
12.10 13:00:20 STATS: cache [user], get [3 calls, 0 cache hits, 3 cache misses, 0 same version, 0 not found]
12.10 13:00:20 STATS: cache [user], segments [9 calls, 3 hits, 5 misses]
12.10 13:00:20 STATS: cache [user], database [67 calls, 3 reads, 2 writes]
12.10 13:00:20 STATS: cache [user], lock [2 calls, 2 attempts, 0 failures]
12.10 13:00:20 STATS: cache manager [1], get [3 calls, total 0 sec spent, avg 1.35 ms]
12.10 13:00:20 STATS: cache manager [1], update [3 calls, total 0 sec spent, avg 0.12 ms]
12.10 13:00:20 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 13:00:20 TIME: core/cache.update : 0.48 ms
12.10 13:00:20 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
12.10 13:00:20 STATS: cache [questdata], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
12.10 13:00:20 STATS: cache [questdata], segments [3 calls, 0 hits, 2 misses]
12.10 13:00:20 STATS: cache [questdata], database [67 calls, 1 reads, 0 writes]
12.10 13:00:20 STATS: cache [questdata], lock [1 calls, 1 attempts, 0 failures]
12.10 13:00:20 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 13:00:20 TIME: core/cache.update : 0.34 ms
12.10 13:00:20 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
12.10 13:00:20 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 13:00:20 TIME: core/user.logoutPost : 0.11 ms
12.10 13:00:21 WRITEDB: UPDATE Users SET name = E'test1', deleted = E'false', email = E'', networktype = E'  ', password = E'test', isbanned = E'false', regdate = E'2016-08-30 15:47:58.935408+03', language = E'en', networkid = E'', params = E'{"attrs":{"_lastTime.24hr":1476204122,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 2
12.10 13:00:21 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 2
12.10 13:00:31 BLOCKREMOVE: user 2 removed
12.10 13:00:31 BLOCKREMOVE: questdata 2 removed
12.10 13:01:14 TIMER: Clans cache...
12.10 13:01:14 TIMER: Clans cache: 0ms
12.10 13:01:18 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
12.10 13:01:18 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
12.10 13:01:18 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
12.10 13:01:18 TIME: core/server.query : 1.42 ms
12.10 13:01:18 NET: vdl.0 (thread) request core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
12.10 13:01:18 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 13:01:18 TIME: core/user.isOnlineID : 0.11 ms
12.10 13:01:18 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
12.10 13:01:18 READDB: SELECT * FROM Users WHERE ID = 2
12.10 13:01:18 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1476204122, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 0, id => 2 } }
12.10 13:01:18 TIME: core/cache.get : 1.62 ms
12.10 13:01:18 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
12.10 13:01:18 READDB: SELECT * FROM UserQuests WHERE ID = 2
12.10 13:01:18 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
12.10 13:01:18 TIME: core/cache.get : 0.95 ms
12.10 13:01:18 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.35.23 }
12.10 13:01:18 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
12.10 13:01:18 TIME: core/user.loginPost : 0.14 ms
12.10 13:01:24 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
12.10 13:01:24 STATS: cache [user], get [4 calls, 0 cache hits, 4 cache misses, 0 same version, 0 not found]
12.10 13:01:24 STATS: cache [user], segments [13 calls, 5 hits, 7 misses]
12.10 13:01:24 STATS: cache [user], database [130 calls, 4 reads, 3 writes]
12.10 13:01:24 STATS: cache [user], lock [3 calls, 3 attempts, 0 failures]
12.10 13:01:24 STATS: cache manager [1], get [5 calls, total 0.01 sec spent, avg 1.22 ms]
12.10 13:01:24 STATS: cache manager [1], update [5 calls, total 0 sec spent, avg 0.19 ms]
12.10 13:01:24 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 13:01:24 TIME: core/cache.update : 0.58 ms
12.10 13:01:24 WRITEDB: UPDATE Users SET name = E'test1', deleted = E'false', email = E'', networktype = E'  ', password = E'test', isbanned = E'false', regdate = E'2016-08-30 15:47:58.935408+03', language = E'en', networkid = E'', params = E'{"attrs":{"_lastTime.24hr":1476204122,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 2
12.10 13:04:29 TIMER: Starting timer...
12.10 13:04:29 DB: SELECT * FROM GameVars
12.10 13:04:29 TIMER: Timer running...
12.10 13:04:29 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:04:29 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:04:29 DB: SELECT * FROM Shops WHERE ID = 1
12.10 13:04:29 TEMP: load ./tmp/quest_daily_ids
12.10 13:04:29 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
12.10 13:04:29 TEMP: save ./tmp/quest_daily_ids
12.10 13:04:29 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:04:29 QUEUE: vdl.0 (thread) response server.login
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:04:29 DB: SELECT * FROM LocalizationStrings
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 29.32 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:04:29 DB: SELECT * FROM GameVars
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 1.99 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:04:29 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 2.29 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:04:29 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 0.98 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:04:29 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 1.48 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:04:29 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 2.92 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/quest.getDaily
12.10 13:04:29 TIME: core/quest.getDaily : 0.09 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:04:29 DB: SELECT * FROM UserAttributeTypes
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 1.12 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:04:29 DB: SELECT * FROM UserVariableTypes
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 1.15 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:04:29 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 4.01 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:04:29 DB: SELECT * FROM ItemGroups
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 1.39 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:04:29 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 1.67 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:04:29 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 1.35 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/shop.getList
12.10 13:04:29 TIME: core/shop.getList : 0.07 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:04:29 DB: SELECT * FROM EffectAttributeTypes
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 1.48 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:04:29 DB: SELECT * FROM Effects
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 1.2 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:04:29 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 2.38 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:04:29 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 1.4 ms
12.10 13:04:29 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:04:29 DB: SELECT * FROM Badges
12.10 13:04:29 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:29 TIME: core/server.query : 0.95 ms
12.10 13:04:39 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
12.10 13:04:39 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
12.10 13:04:39 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:04:39 TIME: core/server.query : 2.8 ms
12.10 13:04:39 NET: vdl.0 (thread) request core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
12.10 13:04:39 QUEUE: vdl.0 (thread) response core/user.isOnlineID
12.10 13:04:39 TIME: core/user.isOnlineID : 0.09 ms
12.10 13:04:39 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
12.10 13:04:39 READDB: SELECT * FROM Users WHERE ID = 2
12.10 13:04:39 QUEUE: vdl.0 (thread) response core/cache.get
12.10 13:04:39 TIME: core/cache.get : 4.66 ms
12.10 13:04:39 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
12.10 13:04:39 READDB: SELECT * FROM UserQuests WHERE ID = 2
12.10 13:04:39 QUEUE: vdl.0 (thread) response core/cache.get
12.10 13:04:39 TIME: core/cache.get : 2.17 ms
12.10 13:04:39 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.35.23 }
12.10 13:04:39 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
12.10 13:04:39 TIME: core/user.loginPost : 3.91 ms
12.10 13:04:44 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
12.10 13:04:44 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 13:04:44 TIME: core/cache.update : 0.08 ms
12.10 13:04:45 WRITEDB: UPDATE Users SET name = E'test1', deleted = E'false', email = E'', networktype = E'  ', password = E'test', isbanned = E'false', regdate = E'2016-08-30 15:47:58.935408+03', language = E'en', networkid = E'', params = E'{"attrs":{"_lastTime.24hr":1476204122,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 2
12.10 13:05:43 TIMER: Starting timer...
12.10 13:05:43 TIMER: Timer running...
12.10 13:05:43 DB: SELECT * FROM GameVars
12.10 13:05:43 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:05:43 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:05:43 DB: SELECT * FROM Shops WHERE ID = 1
12.10 13:05:43 TEMP: load ./tmp/quest_daily_ids
12.10 13:05:43 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
12.10 13:05:43 TEMP: save ./tmp/quest_daily_ids
12.10 13:05:43 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:05:43 QUEUE: vdl.0 (thread) response server.login
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:05:43 DB: SELECT * FROM LocalizationStrings
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 26.59 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:05:43 DB: SELECT * FROM GameVars
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 1.46 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:05:43 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 2.29 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:05:43 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 1.42 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:05:43 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 1.53 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:05:43 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 2.97 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/quest.getDaily
12.10 13:05:43 TIME: core/quest.getDaily : 0.04 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:05:43 DB: SELECT * FROM UserAttributeTypes
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 1.15 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:05:43 DB: SELECT * FROM UserVariableTypes
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 1.3 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:05:43 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 4.27 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:05:43 DB: SELECT * FROM ItemGroups
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 1.97 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:05:43 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 1.75 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:05:43 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 2.46 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/shop.getList
12.10 13:05:43 TIME: core/shop.getList : 0.04 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:05:43 DB: SELECT * FROM EffectAttributeTypes
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 1.76 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:05:43 DB: SELECT * FROM Effects
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 1.14 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:05:43 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 2.11 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:05:43 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 2.25 ms
12.10 13:05:43 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:05:43 DB: SELECT * FROM Badges
12.10 13:05:43 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:43 TIME: core/server.query : 2.91 ms
12.10 13:05:51 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
12.10 13:05:51 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
12.10 13:05:51 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:05:51 TIME: core/server.query : 2.25 ms
12.10 13:05:51 NET: vdl.0 (thread) request core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
12.10 13:05:51 QUEUE: vdl.0 (thread) response core/user.isOnlineID
12.10 13:05:51 TIME: core/user.isOnlineID : 0.12 ms
12.10 13:05:51 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
12.10 13:05:51 READDB: SELECT * FROM Users WHERE ID = 2
12.10 13:05:51 QUEUE: vdl.0 (thread) response core/cache.get
12.10 13:05:51 TIME: core/cache.get : 3.52 ms
12.10 13:05:51 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
12.10 13:05:51 READDB: SELECT * FROM UserQuests WHERE ID = 2
12.10 13:05:51 QUEUE: vdl.0 (thread) response core/cache.get
12.10 13:05:51 TIME: core/cache.get : 2.45 ms
12.10 13:05:51 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.35.23 }
12.10 13:05:51 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
12.10 13:05:51 TIME: core/user.loginPost : 0.15 ms
12.10 13:05:54 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true, _type => core/server.query }
12.10 13:05:54 DB: SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true
12.10 13:05:54 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 13:05:54 TIME: core/server.query : 1.35 ms
12.10 13:05:54 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 13:05:54 READDB: SELECT * FROM Battle WHERE ID = 0
12.10 13:05:54 TRACE: vdl/cache.battle.infoRoom : Invalid field access : get
12.10 13:05:54 TRACE: vdl/cache.battle.infoRoom : 
Called from modules/VDLCache.hx line 107
Called from modules/VDLCache.hx line 100
Called from modules/VDLCache.hx line 72
Called from snipe/cache/CacheServer.hx line 487
12.10 13:05:54 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 13:05:54 NET: vdl.0 (thread) request core/cache.update { diff => {language => en}, type => user, unlock => true, id => 2, _type => core/cache.update }
12.10 13:05:54 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 13:05:54 TIME: core/cache.update : 0.19 ms
12.10 13:05:54 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
12.10 13:05:54 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 13:05:54 TIME: core/cache.update : 0.16 ms
12.10 13:05:54 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
12.10 13:05:54 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 13:05:54 TIME: core/user.logoutPost : 0.09 ms
12.10 13:05:57 WRITEDB: UPDATE Users SET name = E'test1', deleted = E'false', email = E'', networktype = E'  ', password = E'test', isbanned = E'false', regdate = E'2016-08-30 15:47:58.935408+03', language = E'en', networkid = E'', params = E'{"attrs":{"_lastTime.24hr":1476204122,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 2
12.10 13:05:57 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 2
12.10 13:06:38 TIMER: Starting timer...
12.10 13:06:38 TIMER: Timer running...
12.10 13:06:38 DB: SELECT * FROM GameVars
12.10 13:06:38 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:06:38 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:06:38 DB: SELECT * FROM Shops WHERE ID = 1
12.10 13:06:38 TEMP: load ./tmp/quest_daily_ids
12.10 13:06:38 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
12.10 13:06:38 TEMP: save ./tmp/quest_daily_ids
12.10 13:06:38 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:06:38 QUEUE: vdl.0 (thread) response server.login
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:06:38 DB: SELECT * FROM LocalizationStrings
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 20.73 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:06:38 DB: SELECT * FROM GameVars
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 1.2 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:06:38 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 1.84 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:06:38 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 1.33 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:06:38 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 1.95 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:06:38 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 2.4 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/quest.getDaily
12.10 13:06:38 TIME: core/quest.getDaily : 0.05 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:06:38 DB: SELECT * FROM UserAttributeTypes
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 1.13 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:06:38 DB: SELECT * FROM UserVariableTypes
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 1.4 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:06:38 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 2.98 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:06:38 DB: SELECT * FROM ItemGroups
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 1.5 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:06:38 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 1.67 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:06:38 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 1.39 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/shop.getList
12.10 13:06:38 TIME: core/shop.getList : 0.11 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:06:38 DB: SELECT * FROM EffectAttributeTypes
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 1.14 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:06:38 DB: SELECT * FROM Effects
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 1.02 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:06:38 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 2.3 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:06:38 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 1.96 ms
12.10 13:06:38 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:06:38 DB: SELECT * FROM Badges
12.10 13:06:38 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:06:38 TIME: core/server.query : 0.8 ms
12.10 13:07:15 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:07:15 DB: SELECT * FROM users
12.10 13:07:15 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:07:15 TIME: core/server.query : 3.36 ms
12.10 13:07:15 NET: vdl.0 (thread) request core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid17', _type => core/server.query }
12.10 13:07:15 DB: SELECT ID FROM Users WHERE Name = E'uid17'
12.10 13:07:15 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:07:15 TIME: core/server.query : 2.2 ms
12.10 13:07:15 NET: vdl.0 (thread) request core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:07:15 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:07:15 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:07:15 TIME: core/server.query : 39.32 ms
12.10 13:07:15 NET: vdl.0 (thread) request core/user.register { password => uid17, name => uid17, fullParams => { password => uid17, name => uid17, networkid => , networktype => , messageType => user.register, id => 17 }, networkid => , connectionID => 66362313, networktype => , email => , id => 17, _type => core/user.register }
12.10 13:07:15 QUEUE: vdl.0 (thread) response core/user.register
12.10 13:07:15 TIME: core/user.register : 0.07 ms
12.10 13:07:15 ASYNCDB: INSERT INTO Users (ID, Name, NetworkID, NetworkType, Password, Email, RegDate) VALUES (17,E'uid17',E'',E'',E'uid17',E'', now())
12.10 13:07:15 ASYNCDB: INSERT INTO UserRatings (UserID, Points) VALUES (17, 0)
12.10 13:07:15 READDB: SELECT * FROM Users WHERE ID = 17
12.10 13:07:15 READDB: SELECT * FROM Users WHERE ID = 1
12.10 13:07:15 READDB: SELECT ID FROM UserQuests WHERE ID = 17
12.10 13:07:15 READDB: INSERT INTO UserQuests (ID) VALUES (17)
12.10 13:07:15 QUEUE: vdl.0 (thread) response core/user.registerResponse { password => uid17, name => uid17, _isNotify => true, fullParams => { password => uid17, name => uid17, networkid => , networktype => , messageType => user.register, id => 17 }, networkid => , connectionID => 66362313, networktype => , email => , id => 17, _type => core/user.registerResponse }
12.10 13:07:20 WRITEDB: UPDATE Users SET name = E'uid17', deleted = E'false', email = E'', networktype = E'  ', password = E'uid17', isbanned = E'false', regdate = E'2016-10-12 13:07:15.262858+03', language = E'  ', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}' WHERE ID = 17
12.10 13:07:25 BLOCKREMOVE: user 1 removed
12.10 13:07:30 BLOCKREMOVE: user 17 removed
12.10 13:09:25 TIMER: Starting timer...
12.10 13:09:25 DB: SELECT * FROM GameVars
12.10 13:09:25 TIMER: Timer running...
12.10 13:09:25 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:09:25 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:09:25 DB: SELECT * FROM Shops WHERE ID = 1
12.10 13:09:25 TEMP: load ./tmp/quest_daily_ids
12.10 13:09:25 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
12.10 13:09:25 TEMP: save ./tmp/quest_daily_ids
12.10 13:09:25 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:09:25 QUEUE: vdl.0 (thread) response server.login
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:09:25 DB: SELECT * FROM LocalizationStrings
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 12.76 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:09:25 DB: SELECT * FROM GameVars
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 1.83 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:09:25 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 1.64 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:09:25 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 1.11 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:09:25 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 1.18 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:09:25 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 2.03 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/quest.getDaily
12.10 13:09:25 TIME: core/quest.getDaily : 0.12 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:09:25 DB: SELECT * FROM UserAttributeTypes
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 0.89 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:09:25 DB: SELECT * FROM UserVariableTypes
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 1 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:09:25 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 3.21 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:09:25 DB: SELECT * FROM ItemGroups
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 1.3 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:09:25 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 1.28 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:09:25 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 1.33 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/shop.getList
12.10 13:09:25 TIME: core/shop.getList : 0.11 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:09:25 DB: SELECT * FROM EffectAttributeTypes
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 1.19 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:09:25 DB: SELECT * FROM Effects
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 1.01 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:09:25 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 2.58 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:09:25 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 2.01 ms
12.10 13:09:25 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:09:25 DB: SELECT * FROM Badges
12.10 13:09:25 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:09:25 TIME: core/server.query : 1.1 ms
12.10 13:10:03 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:10:03 DB: SELECT * FROM users
12.10 13:10:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:10:03 TIME: core/server.query : 3.11 ms
12.10 13:10:03 NET: vdl.0 (thread) request core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid18', _type => core/server.query }
12.10 13:10:03 DB: SELECT ID FROM Users WHERE Name = E'uid18'
12.10 13:10:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:10:03 TIME: core/server.query : 2.39 ms
12.10 13:10:03 NET: vdl.0 (thread) request core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:10:03 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:10:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:10:03 TIME: core/server.query : 1.03 ms
12.10 13:10:03 NET: vdl.0 (thread) request core/user.register { password => uid18, name => uid18, fullParams => { password => uid18, name => uid18, networkid => , networktype => , messageType => user.register, id => 18 }, networkid => , connectionID => 21895126, networktype => , email => , id => 18, _type => core/user.register }
12.10 13:10:03 QUEUE: vdl.0 (thread) response core/user.register
12.10 13:10:03 TIME: core/user.register : 0.08 ms
12.10 13:10:03 ASYNCDB: INSERT INTO Users (ID, Name, NetworkID, NetworkType, Password, Email, RegDate) VALUES (18,E'uid18',E'',E'',E'uid18',E'', now())
12.10 13:10:03 ASYNCDB: INSERT INTO UserRatings (UserID, Points) VALUES (18, 0)
12.10 13:10:03 READDB: SELECT * FROM Users WHERE ID = 18
12.10 13:10:03 READDB: SELECT * FROM Users WHERE ID = 1
12.10 13:10:03 READDB: SELECT ID FROM UserQuests WHERE ID = 18
12.10 13:10:03 READDB: INSERT INTO UserQuests (ID) VALUES (18)
12.10 13:10:03 QUEUE: vdl.0 (thread) response core/user.registerResponse { password => uid18, name => uid18, _isNotify => true, fullParams => { password => uid18, name => uid18, networkid => , networktype => , messageType => user.register, id => 18 }, networkid => , connectionID => 21895126, networktype => , email => , id => 18, _type => core/user.registerResponse }
12.10 13:10:09 WRITEDB: UPDATE Users SET name = E'uid18', deleted = E'false', email = E'', networktype = E'  ', password = E'uid18', isbanned = E'false', regdate = E'2016-10-12 13:10:03.885555+03', language = E'  ', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}' WHERE ID = 18
12.10 13:10:14 BLOCKREMOVE: user 1 removed
12.10 13:10:19 BLOCKREMOVE: user 18 removed
12.10 13:11:33 TIMER: Starting timer...
12.10 13:11:33 DB: SELECT * FROM GameVars
12.10 13:11:33 TIMER: Timer running...
12.10 13:11:33 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:11:33 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:11:33 DB: SELECT * FROM Shops WHERE ID = 1
12.10 13:11:33 TEMP: load ./tmp/quest_daily_ids
12.10 13:11:33 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
12.10 13:11:33 TEMP: save ./tmp/quest_daily_ids
12.10 13:11:33 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:11:33 QUEUE: vdl.0 (thread) response server.login
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:11:33 DB: SELECT * FROM LocalizationStrings
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 43.48 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:11:33 DB: SELECT * FROM GameVars
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 1.97 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:11:33 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 2.65 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:11:33 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 6.74 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:11:33 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 2.08 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:11:33 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 4.3 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/quest.getDaily
12.10 13:11:33 TIME: core/quest.getDaily : 0.09 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:11:33 DB: SELECT * FROM UserAttributeTypes
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 1.48 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:11:33 DB: SELECT * FROM UserVariableTypes
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 1.74 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:11:33 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 3.77 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:11:33 DB: SELECT * FROM ItemGroups
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 1.85 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:11:33 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 2.09 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:11:33 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 1.81 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/shop.getList
12.10 13:11:33 TIME: core/shop.getList : 0.09 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:11:33 DB: SELECT * FROM EffectAttributeTypes
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 1.72 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:11:33 DB: SELECT * FROM Effects
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 1.86 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:11:33 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 6.88 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:11:33 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 2.86 ms
12.10 13:11:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:11:33 DB: SELECT * FROM Badges
12.10 13:11:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:33 TIME: core/server.query : 2.62 ms
12.10 13:11:41 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:11:41 DB: SELECT * FROM users
12.10 13:11:41 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:41 TIME: core/server.query : 2.73 ms
12.10 13:11:41 NET: vdl.0 (thread) request core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid19', _type => core/server.query }
12.10 13:11:41 DB: SELECT ID FROM Users WHERE Name = E'uid19'
12.10 13:11:41 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:41 TIME: core/server.query : 2.49 ms
12.10 13:11:41 NET: vdl.0 (thread) request core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:11:41 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:11:41 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:11:41 TIME: core/server.query : 29.05 ms
12.10 13:11:41 NET: vdl.0 (thread) request core/user.register { password => uid19, name => uid19, fullParams => { password => uid19, name => uid19, networkid => , networktype => , messageType => user.register, id => 19 }, networkid => , connectionID => 66482704, networktype => , email => , id => 19, _type => core/user.register }
12.10 13:11:41 QUEUE: vdl.0 (thread) response core/user.register
12.10 13:11:41 TIME: core/user.register : 0.08 ms
12.10 13:11:41 ASYNCDB: INSERT INTO Users (ID, Name, NetworkID, NetworkType, Password, Email, RegDate) VALUES (19,E'uid19',E'',E'',E'uid19',E'', now())
12.10 13:11:41 ASYNCDB: INSERT INTO UserRatings (UserID, Points) VALUES (19, 0)
12.10 13:11:41 READDB: SELECT * FROM Users WHERE ID = 19
12.10 13:11:41 READDB: SELECT * FROM Users WHERE ID = 1
12.10 13:11:41 READDB: SELECT ID FROM UserQuests WHERE ID = 19
12.10 13:11:41 READDB: INSERT INTO UserQuests (ID) VALUES (19)
12.10 13:11:41 QUEUE: vdl.0 (thread) response core/user.registerResponse { password => uid19, name => uid19, _isNotify => true, fullParams => { password => uid19, name => uid19, networkid => , networktype => , messageType => user.register, id => 19 }, networkid => , connectionID => 66482704, networktype => , email => , id => 19, _type => core/user.registerResponse }
12.10 13:11:47 WRITEDB: UPDATE Users SET name = E'uid19', deleted = E'false', email = E'', networktype = E'  ', password = E'uid19', isbanned = E'false', regdate = E'2016-10-12 13:11:41.868111+03', language = E'  ', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}' WHERE ID = 19
12.10 13:11:52 BLOCKREMOVE: user 1 removed
12.10 13:11:57 BLOCKREMOVE: user 19 removed
12.10 13:13:51 TIMER: Starting timer...
12.10 13:13:51 DB: SELECT * FROM GameVars
12.10 13:13:51 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:13:51 TIMER: Timer running...
12.10 13:13:51 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:13:51 DB: SELECT * FROM Shops WHERE ID = 1
12.10 13:13:51 TEMP: load ./tmp/quest_daily_ids
12.10 13:13:51 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
12.10 13:13:51 TEMP: save ./tmp/quest_daily_ids
12.10 13:13:51 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:13:51 QUEUE: vdl.0 (thread) response server.login
12.10 13:13:51 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:13:51 DB: SELECT * FROM LocalizationStrings
12.10 13:13:51 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:51 TIME: core/server.query : 24.64 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:13:52 DB: SELECT * FROM GameVars
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:52 TIME: core/server.query : 1.04 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:13:52 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:52 TIME: core/server.query : 1.59 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:13:52 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:52 TIME: core/server.query : 1.46 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:13:52 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:52 TIME: core/server.query : 1.94 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:13:52 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:52 TIME: core/server.query : 2.43 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/quest.getDaily
12.10 13:13:52 TIME: core/quest.getDaily : 0.09 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:13:52 DB: SELECT * FROM UserAttributeTypes
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:52 TIME: core/server.query : 1.59 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:13:52 DB: SELECT * FROM UserVariableTypes
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:52 TIME: core/server.query : 1.25 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:13:52 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:52 TIME: core/server.query : 2.1 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:13:52 DB: SELECT * FROM ItemGroups
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:52 TIME: core/server.query : 0.92 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:13:52 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:52 TIME: core/server.query : 1.2 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:13:52 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:52 TIME: core/server.query : 1.41 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/shop.getList
12.10 13:13:52 TIME: core/shop.getList : 0.24 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:13:52 DB: SELECT * FROM EffectAttributeTypes
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:52 TIME: core/server.query : 1.37 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:13:52 DB: SELECT * FROM Effects
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:52 TIME: core/server.query : 0.97 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:13:52 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:52 TIME: core/server.query : 2.76 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:13:52 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:52 TIME: core/server.query : 1.99 ms
12.10 13:13:52 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:13:52 DB: SELECT * FROM Badges
12.10 13:13:52 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:52 TIME: core/server.query : 1.2 ms
12.10 13:13:57 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:13:57 DB: SELECT * FROM users
12.10 13:13:57 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:57 TIME: core/server.query : 1.66 ms
12.10 13:13:57 NET: vdl.0 (thread) request core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid20', _type => core/server.query }
12.10 13:13:57 DB: SELECT ID FROM Users WHERE Name = E'uid20'
12.10 13:13:57 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:57 TIME: core/server.query : 1.37 ms
12.10 13:13:57 NET: vdl.0 (thread) request core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:13:57 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:13:57 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:13:57 TIME: core/server.query : 0.7 ms
12.10 13:13:57 NET: vdl.0 (thread) request core/user.register { password => uid20, name => uid20, fullParams => { password => uid20, name => uid20, networkid => , networktype => , messageType => user.register, id => 20 }, networkid => , connectionID => 57997747, networktype => , email => , id => 20, _type => core/user.register }
12.10 13:13:57 QUEUE: vdl.0 (thread) response core/user.register
12.10 13:13:57 TIME: core/user.register : 0.05 ms
12.10 13:13:57 ASYNCDB: INSERT INTO Users (ID, Name, NetworkID, NetworkType, Password, Email, RegDate) VALUES (20,E'uid20',E'',E'',E'uid20',E'', now())
12.10 13:13:57 ASYNCDB: INSERT INTO UserRatings (UserID, Points) VALUES (20, 0)
12.10 13:13:57 READDB: SELECT * FROM Users WHERE ID = 20
12.10 13:13:57 READDB: SELECT * FROM Users WHERE ID = 1
12.10 13:13:57 READDB: SELECT ID FROM UserQuests WHERE ID = 20
12.10 13:13:57 READDB: INSERT INTO UserQuests (ID) VALUES (20)
12.10 13:13:57 QUEUE: vdl.0 (thread) response core/user.registerResponse { password => uid20, name => uid20, _isNotify => true, fullParams => { password => uid20, name => uid20, networkid => , networktype => , messageType => user.register, id => 20 }, networkid => , connectionID => 57997747, networktype => , email => , id => 20, _type => core/user.registerResponse }
12.10 13:14:02 WRITEDB: UPDATE Users SET name = E'uid20', deleted = E'false', email = E'', networktype = E'  ', password = E'uid20', isbanned = E'false', regdate = E'2016-10-12 13:13:57.605493+03', language = E'  ', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}' WHERE ID = 20
12.10 13:14:08 BLOCKREMOVE: user 1 removed
12.10 13:14:13 BLOCKREMOVE: user 20 removed
12.10 13:16:14 TIMER: Starting timer...
12.10 13:16:14 TIMER: Timer running...
12.10 13:16:14 DB: SELECT * FROM GameVars
12.10 13:16:14 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:16:14 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:16:14 DB: SELECT * FROM Shops WHERE ID = 1
12.10 13:16:14 TEMP: load ./tmp/quest_daily_ids
12.10 13:16:14 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
12.10 13:16:14 TEMP: save ./tmp/quest_daily_ids
12.10 13:16:14 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:16:14 QUEUE: vdl.0 (thread) response server.login
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:16:14 DB: SELECT * FROM LocalizationStrings
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 12.63 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:16:14 DB: SELECT * FROM GameVars
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 0.79 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:16:14 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 1.18 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:16:14 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 0.82 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:16:14 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 1.3 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:16:14 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 1.59 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/quest.getDaily
12.10 13:16:14 TIME: core/quest.getDaily : 0.07 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:16:14 DB: SELECT * FROM UserAttributeTypes
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 0.79 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:16:14 DB: SELECT * FROM UserVariableTypes
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 0.98 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:16:14 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 1.65 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:16:14 DB: SELECT * FROM ItemGroups
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 0.5 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:16:14 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 1.09 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:16:14 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 1 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/shop.getList
12.10 13:16:14 TIME: core/shop.getList : 0.08 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:16:14 DB: SELECT * FROM EffectAttributeTypes
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 0.72 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:16:14 DB: SELECT * FROM Effects
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 0.66 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:16:14 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 1.3 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:16:14 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 1.54 ms
12.10 13:16:14 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:16:14 DB: SELECT * FROM Badges
12.10 13:16:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:14 TIME: core/server.query : 0.82 ms
12.10 13:16:21 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:16:21 DB: SELECT * FROM users
12.10 13:16:21 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:21 TIME: core/server.query : 2 ms
12.10 13:16:21 NET: vdl.0 (thread) request core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid21', _type => core/server.query }
12.10 13:16:21 DB: SELECT ID FROM Users WHERE Name = E'uid21'
12.10 13:16:21 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:21 TIME: core/server.query : 1.8 ms
12.10 13:16:21 NET: vdl.0 (thread) request core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:16:21 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:16:21 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:16:21 TIME: core/server.query : 0.89 ms
12.10 13:16:21 NET: vdl.0 (thread) request core/user.register { password => uid21, name => uid21, fullParams => { password => uid21, name => uid21, networkid => , networktype => , messageType => user.register, id => 21 }, networkid => , connectionID => 24569015, networktype => , email => , id => 21, _type => core/user.register }
12.10 13:16:21 QUEUE: vdl.0 (thread) response core/user.register
12.10 13:16:21 TIME: core/user.register : 0.13 ms
12.10 13:16:21 ASYNCDB: INSERT INTO Users (ID, Name, NetworkID, NetworkType, Password, Email, RegDate) VALUES (21,E'uid21',E'',E'',E'uid21',E'', now())
12.10 13:16:21 ASYNCDB: INSERT INTO UserRatings (UserID, Points) VALUES (21, 0)
12.10 13:16:21 READDB: SELECT * FROM Users WHERE ID = 21
12.10 13:16:21 READDB: SELECT * FROM Users WHERE ID = 1
12.10 13:16:21 READDB: SELECT ID FROM UserQuests WHERE ID = 21
12.10 13:16:21 READDB: INSERT INTO UserQuests (ID) VALUES (21)
12.10 13:16:21 QUEUE: vdl.0 (thread) response core/user.registerResponse { password => uid21, name => uid21, _isNotify => true, fullParams => { password => uid21, name => uid21, networkid => , networktype => , messageType => user.register, id => 21 }, networkid => , connectionID => 24569015, networktype => , email => , id => 21, _type => core/user.registerResponse }
12.10 13:16:27 WRITEDB: UPDATE Users SET name = E'uid21', deleted = E'false', email = E'', networktype = E'  ', password = E'uid21', isbanned = E'false', regdate = E'2016-10-12 13:16:21.670662+03', language = E'  ', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}' WHERE ID = 21
12.10 13:16:32 BLOCKREMOVE: user 1 removed
12.10 13:16:37 BLOCKREMOVE: user 21 removed
12.10 13:18:03 TIMER: Starting timer...
12.10 13:18:03 TIMER: Timer running...
12.10 13:18:03 DB: SELECT * FROM GameVars
12.10 13:18:03 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:18:03 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:18:03 DB: SELECT * FROM Shops WHERE ID = 1
12.10 13:18:03 TEMP: load ./tmp/quest_daily_ids
12.10 13:18:03 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
12.10 13:18:03 TEMP: save ./tmp/quest_daily_ids
12.10 13:18:03 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:18:03 QUEUE: vdl.0 (thread) response server.login
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:18:03 DB: SELECT * FROM LocalizationStrings
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 53.91 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:18:03 DB: SELECT * FROM GameVars
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 1.85 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:18:03 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 2.5 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:18:03 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 1.2 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:18:03 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 1.48 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:18:03 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 3.08 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/quest.getDaily
12.10 13:18:03 TIME: core/quest.getDaily : 0.33 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:18:03 DB: SELECT * FROM UserAttributeTypes
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 1.58 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:18:03 DB: SELECT * FROM UserVariableTypes
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 1.3 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:18:03 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 3.3 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:18:03 DB: SELECT * FROM ItemGroups
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 1.11 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:18:03 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 4.57 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:18:03 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 1.97 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/shop.getList
12.10 13:18:03 TIME: core/shop.getList : 0.08 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:18:03 DB: SELECT * FROM EffectAttributeTypes
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 0.85 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:18:03 DB: SELECT * FROM Effects
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 1.13 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:18:03 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 1.86 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:18:03 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 1.26 ms
12.10 13:18:03 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:18:03 DB: SELECT * FROM Badges
12.10 13:18:03 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:03 TIME: core/server.query : 0.86 ms
12.10 13:18:13 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:18:13 DB: SELECT * FROM users
12.10 13:18:13 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:13 TIME: core/server.query : 3.02 ms
12.10 13:18:13 NET: vdl.0 (thread) request core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid22', _type => core/server.query }
12.10 13:18:13 DB: SELECT ID FROM Users WHERE Name = E'uid22'
12.10 13:18:13 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:13 TIME: core/server.query : 2.41 ms
12.10 13:18:13 NET: vdl.0 (thread) request core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:18:13 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:18:13 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:18:13 TIME: core/server.query : 25.2 ms
12.10 13:18:13 NET: vdl.0 (thread) request core/user.register { password => uid22, name => uid22, fullParams => { password => uid22, name => uid22, networkid => , networktype => , messageType => user.register, id => 22 }, networkid => , connectionID => 64509725, networktype => , email => , id => 22, _type => core/user.register }
12.10 13:18:13 QUEUE: vdl.0 (thread) response core/user.register
12.10 13:18:13 TIME: core/user.register : 0.07 ms
12.10 13:18:13 ASYNCDB: INSERT INTO Users (ID, Name, NetworkID, NetworkType, Password, Email, RegDate) VALUES (22,E'uid22',E'',E'',E'uid22',E'', now())
12.10 13:18:13 ASYNCDB: INSERT INTO UserRatings (UserID, Points) VALUES (22, 0)
12.10 13:18:13 READDB: SELECT * FROM Users WHERE ID = 22
12.10 13:18:13 READDB: SELECT * FROM Users WHERE ID = 1
12.10 13:18:13 READDB: SELECT ID FROM UserQuests WHERE ID = 22
12.10 13:18:13 READDB: INSERT INTO UserQuests (ID) VALUES (22)
12.10 13:18:13 QUEUE: vdl.0 (thread) response core/user.registerResponse { password => uid22, name => uid22, _isNotify => true, fullParams => { password => uid22, name => uid22, networkid => , networktype => , messageType => user.register, id => 22 }, networkid => , connectionID => 64509725, networktype => , email => , id => 22, _type => core/user.registerResponse }
12.10 13:18:18 WRITEDB: UPDATE Users SET name = E'uid22', deleted = E'false', email = E'', networktype = E'  ', password = E'uid22', isbanned = E'false', regdate = E'2016-10-12 13:18:13.422519+03', language = E'  ', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}' WHERE ID = 22
12.10 13:18:23 BLOCKREMOVE: user 1 removed
12.10 13:18:28 BLOCKREMOVE: user 22 removed
12.10 13:19:03 TIMER: Clans cache...
12.10 13:19:03 TIMER: Clans cache: 0ms
12.10 13:19:03 TIMER: Clans cache...
12.10 13:19:03 TIMER: Clans cache: 0ms
12.10 13:19:03 TIMER: Clans cache...
12.10 13:19:03 TIMER: Clans cache: 0ms
12.10 13:19:03 TIMER: Clans cache...
12.10 13:19:03 TIMER: Clans cache: 0ms
12.10 13:19:03 TIMER: Clans cache...
12.10 13:19:03 TIMER: Clans cache: 0ms
12.10 13:19:03 TIMER: Clans cache...
12.10 13:19:03 TIMER: Clans cache: 0ms
12.10 13:19:03 TIMER: Clans cache...
12.10 13:19:03 TIMER: Clans cache: 0ms
12.10 13:19:03 TIMER: Clans cache...
12.10 13:19:03 TIMER: Clans cache: 0ms
12.10 13:19:03 TIMER: Clans cache...
12.10 13:19:03 TIMER: Clans cache: 0ms
12.10 13:19:03 TIMER: Clans cache...
12.10 13:19:03 TIMER: Clans cache: 0ms
12.10 13:19:03 TIMER: Clans cache...
12.10 13:19:03 TIMER: Clans cache: 0ms
12.10 13:19:03 TIMER: Clans cache...
12.10 13:19:03 TIMER: Clans cache: 0ms
12.10 13:19:03 TIMER: Clans cache...
12.10 13:19:03 TIMER: Clans cache: 0ms
12.10 13:19:03 TIMER: Clans cache...
12.10 13:19:03 TIMER: Clans cache: 0ms
12.10 13:19:03 TIMER: Clans cache...
12.10 13:19:03 TIMER: Clans cache: 0ms
12.10 13:33:08 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:33:08 DB: SELECT * FROM users
12.10 13:33:08 QUEUE: vdl.0 (thread) response core/server.query { list => {{ password => , name => --- DEFAULT ATTRIBUTES ---, networkid => , params => {"attrs":{},"inventory":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:45:16.008574+03, language =>   , id => 1, deleted => false }, { password => test, name => test3, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:08.364133+03, language =>   , id => 4, deleted => false }, { password => test, name => test4, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:11.728197+03, language =>   , id => 5, deleted => false }, { password => test, name => test5, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:15.596579+03, language =>   , id => 6, deleted => false }, { password => test, name => test6, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:19.233499+03, language =>   , id => 7, deleted => false }, { password => test, name => test7, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-09-07 16:46:43.688817+03, language =>   , id => 8, deleted => false }, { password => uid9, name => uid9, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-11 20:36:09.090394+03, language =>   , id => 9, deleted => false }, { password => uid10, name => uid10, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 11:12:48.168059+03, language =>   , id => 10, deleted => false }, { password => uid11, name => uid11, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:33:27.3109+03, language =>   , id => 11, deleted => false }, { password => uid12, name => uid12, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:47:26.670465+03, language =>   , id => 12, deleted => false }, { password => uid13, name => uid13, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:51:08.341292+03, language =>   , id => 13, deleted => false }, { password => uid14, name => uid14, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:53:34.360658+03, language =>   , id => 14, deleted => false }, { password => uid15, name => uid15, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:55:14.160619+03, language =>   , id => 15, deleted => false }, { password => uid16, name => uid16, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:59:18.86185+03, language =>   , id => 16, deleted => false }, { password => test, name => test2, networkid => , params => {"attrs":{"_lastTime.24hr":1472825979,"lastLoginDate":246,"lastLoadDate":903},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, id => 3, deleted => false }, { password => test, name => test1, networkid => , params => {"attrs":{"_lastTime.24hr":1476204122,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, id => 2, deleted => false }, { password => uid17, name => uid17, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:07:15.262858+03, language =>   , id => 17, deleted => false }, { password => uid18, name => uid18, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:10:03.885555+03, language =>   , id => 18, deleted => false }, { password => uid19, name => uid19, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:11:41.868111+03, language =>   , id => 19, deleted => false }, { password => uid20, name => uid20, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:13:57.605493+03, language =>   , id => 20, deleted => false }, { password => uid21, name => uid21, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:16:21.670662+03, language =>   , id => 21, deleted => false }, { password => uid22, name => uid22, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:18:13.422519+03, language =>   , id => 22, deleted => false }}, errorCode => ok, _type => core/server.query }
12.10 13:33:08 TIME: core/server.query : 4.59 ms
12.10 13:33:08 NET: vdl.0 (thread) request core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid23', _type => core/server.query }
12.10 13:33:08 DB: SELECT ID FROM Users WHERE Name = E'uid23'
12.10 13:33:08 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 13:33:08 TIME: core/server.query : 1.17 ms
12.10 13:33:08 NET: vdl.0 (thread) request core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:33:08 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:33:08 QUEUE: vdl.0 (thread) response core/server.query { list => {{ id => 23 }}, errorCode => ok, _type => core/server.query }
12.10 13:33:08 TIME: core/server.query : 21.12 ms
12.10 13:33:08 NET: vdl.0 (thread) request core/user.register { password => uid23, name => uid23, fullParams => { password => uid23, name => uid23, networkid => , networktype => , messageType => user.register, id => 23 }, networkid => , connectionID => 20509004, networktype => , email => , id => 23, _type => core/user.register }
12.10 13:33:08 QUEUE: vdl.0 (thread) response core/user.register { errorCode => ok, _type => core/user.register }
12.10 13:33:08 TIME: core/user.register : 0.15 ms
12.10 13:33:08 ASYNCDB: INSERT INTO Users (ID, Name, NetworkID, NetworkType, Password, Email, RegDate) VALUES (23,E'uid23',E'',E'',E'uid23',E'', now())
12.10 13:33:08 ASYNCDB: INSERT INTO UserRatings (UserID, Points) VALUES (23, 0)
12.10 13:33:08 STATS: cache [user], get [2 calls, 0 cache hits, 2 cache misses, 0 same version, 0 not found]
12.10 13:33:08 STATS: cache [user], segments [6 calls, 2 hits, 3 misses]
12.10 13:33:08 STATS: cache [user], database [905 calls, 2 reads, 1 writes]
12.10 13:33:08 STATS: cache [user], lock [2 calls, 2 attempts, 0 failures]
12.10 13:33:08 READDB: SELECT * FROM Users WHERE ID = 23
12.10 13:33:08 STATS: cache manager [1], get [2 calls, total 0 sec spent, avg 2.2 ms]
12.10 13:33:08 STATS: cache manager [1], update [1 calls, total 0 sec spent, avg 0.05 ms]
12.10 13:33:08 READDB: SELECT * FROM Users WHERE ID = 1
12.10 13:33:08 READDB: SELECT ID FROM UserQuests WHERE ID = 23
12.10 13:33:08 READDB: INSERT INTO UserQuests (ID) VALUES (23)
12.10 13:33:08 QUEUE: vdl.0 (thread) response core/user.registerResponse { password => uid23, name => uid23, _isNotify => true, fullParams => { password => uid23, name => uid23, networkid => , networktype => , messageType => user.register, id => 23 }, networkid => , connectionID => 20509004, networktype => , email => , id => 23, _type => core/user.registerResponse }
12.10 13:33:13 WRITEDB: UPDATE Users SET name = E'uid23', deleted = E'false', email = E'', networktype = E'  ', password = E'uid23', isbanned = E'false', regdate = E'2016-10-12 13:33:08.78413+03', language = E'  ', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}' WHERE ID = 23
12.10 13:33:18 BLOCKREMOVE: user 1 removed
12.10 13:33:23 BLOCKREMOVE: user 23 removed
12.10 13:36:35 TIMER: Starting timer...
12.10 13:36:35 DB: SELECT * FROM GameVars
12.10 13:36:35 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:36:35 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:36:35 TIMER: Timer running...
12.10 13:36:35 DB: SELECT * FROM Shops WHERE ID = 1
12.10 13:36:35 TEMP: load ./tmp/quest_daily_ids
12.10 13:36:35 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
12.10 13:36:35 TEMP: save ./tmp/quest_daily_ids
12.10 13:36:35 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:36:35 QUEUE: vdl.0 (thread) response server.login
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:36:35 DB: SELECT * FROM LocalizationStrings
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 35.46 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:36:35 DB: SELECT * FROM GameVars
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 4.35 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:36:35 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 2.39 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:36:35 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 1.2 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:36:35 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 2.56 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:36:35 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 3.63 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/quest.getDaily
12.10 13:36:35 TIME: core/quest.getDaily : 1.45 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:36:35 DB: SELECT * FROM UserAttributeTypes
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 1.71 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:36:35 DB: SELECT * FROM UserVariableTypes
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 2.64 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:36:35 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 4.51 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:36:35 DB: SELECT * FROM ItemGroups
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 2.04 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:36:35 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 2.87 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:36:35 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 3.42 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/shop.getList
12.10 13:36:35 TIME: core/shop.getList : 0.62 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:36:35 DB: SELECT * FROM EffectAttributeTypes
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 1.27 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:36:35 DB: SELECT * FROM Effects
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 1.25 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:36:35 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 3.78 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:36:35 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 2.11 ms
12.10 13:36:35 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:36:35 DB: SELECT * FROM Badges
12.10 13:36:35 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:35 TIME: core/server.query : 1.85 ms
12.10 13:36:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:36:42 DB: SELECT * FROM users
12.10 13:36:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:42 TIME: core/server.query : 3.37 ms
12.10 13:36:42 NET: vdl.0 (thread) request core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid24', _type => core/server.query }
12.10 13:36:42 DB: SELECT ID FROM Users WHERE Name = E'uid24'
12.10 13:36:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:42 TIME: core/server.query : 2.3 ms
12.10 13:36:42 NET: vdl.0 (thread) request core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:36:42 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:36:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:36:42 TIME: core/server.query : 19.15 ms
12.10 13:36:42 NET: vdl.0 (thread) request core/user.register { password => uid24, name => uid24, fullParams => { password => uid24, name => uid24, networkid => , networktype => , messageType => user.register, id => 24 }, networkid => , connectionID => 64251534, networktype => , email => , id => 24, _type => core/user.register }
12.10 13:36:42 QUEUE: vdl.0 (thread) response core/user.register
12.10 13:36:42 TIME: core/user.register : 0.09 ms
12.10 13:36:42 ASYNCDB: INSERT INTO Users (ID, Name, NetworkID, NetworkType, Password, Email, RegDate) VALUES (24,E'uid24',E'',E'',E'uid24',E'', now())
12.10 13:36:42 ASYNCDB: INSERT INTO UserRatings (UserID, Points) VALUES (24, 0)
12.10 13:36:42 READDB: SELECT * FROM Users WHERE ID = 24
12.10 13:36:42 READDB: SELECT * FROM Users WHERE ID = 1
12.10 13:36:42 READDB: SELECT ID FROM UserQuests WHERE ID = 24
12.10 13:36:42 READDB: INSERT INTO UserQuests (ID) VALUES (24)
12.10 13:36:42 QUEUE: vdl.0 (thread) response core/user.registerResponse { password => uid24, name => uid24, _isNotify => true, fullParams => { password => uid24, name => uid24, networkid => , networktype => , messageType => user.register, id => 24 }, networkid => , connectionID => 64251534, networktype => , email => , id => 24, _type => core/user.registerResponse }
12.10 13:36:48 WRITEDB: UPDATE Users SET name = E'uid24', deleted = E'false', email = E'', networktype = E'  ', password = E'uid24', isbanned = E'false', regdate = E'2016-10-12 13:36:42.292969+03', language = E'  ', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}' WHERE ID = 24
12.10 13:36:52 BLOCKREMOVE: user 1 removed
12.10 13:36:58 BLOCKREMOVE: user 24 removed
12.10 13:40:27 TIMER: Starting timer...
12.10 13:40:27 DB: SELECT * FROM GameVars
12.10 13:40:27 TIMER: Timer running...
12.10 13:40:27 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:40:27 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:40:27 DB: SELECT * FROM Shops WHERE ID = 1
12.10 13:40:27 TEMP: load ./tmp/quest_daily_ids
12.10 13:40:27 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
12.10 13:40:27 TEMP: save ./tmp/quest_daily_ids
12.10 13:40:27 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:40:27 QUEUE: vdl.0 (thread) response server.login
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:40:27 DB: SELECT * FROM LocalizationStrings
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 14.21 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:40:27 DB: SELECT * FROM GameVars
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 1.25 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:40:27 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 2.05 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:40:27 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 1.28 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:40:27 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 1.49 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:40:27 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 2.67 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/quest.getDaily
12.10 13:40:27 TIME: core/quest.getDaily : 0.05 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:40:27 DB: SELECT * FROM UserAttributeTypes
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 3.46 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:40:27 DB: SELECT * FROM UserVariableTypes
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 0.97 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:40:27 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 3.02 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:40:27 DB: SELECT * FROM ItemGroups
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 0.99 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:40:27 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 1.9 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:40:27 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 1.46 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/shop.getList
12.10 13:40:27 TIME: core/shop.getList : 0.05 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:40:27 DB: SELECT * FROM EffectAttributeTypes
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 1.2 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:40:27 DB: SELECT * FROM Effects
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 1.57 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:40:27 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 2.03 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:40:27 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 1.75 ms
12.10 13:40:27 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:40:27 DB: SELECT * FROM Badges
12.10 13:40:27 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:40:27 TIME: core/server.query : 1.37 ms
12.10 13:40:27 TIMER: Clans cache...
12.10 13:40:27 TIMER: Clans cache: 0ms
12.10 13:42:14 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:42:14 DB: SELECT * FROM users
12.10 13:42:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:42:14 TIME: core/server.query : 3.75 ms
12.10 13:42:14 NET: vdl.0 (thread) request core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid25', _type => core/server.query }
12.10 13:42:14 DB: SELECT ID FROM Users WHERE Name = E'uid25'
12.10 13:42:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:42:14 TIME: core/server.query : 1.19 ms
12.10 13:42:14 NET: vdl.0 (thread) request core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:42:14 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:42:14 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:42:14 TIME: core/server.query : 16.56 ms
12.10 13:42:14 NET: vdl.0 (thread) request core/user.register { password => uid25, name => uid25, fullParams => { password => uid25, name => uid25, networkid => , networktype => , messageType => user.register, id => 25 }, networkid => , connectionID => 15241932, networktype => , email => , id => 25, _type => core/user.register }
12.10 13:42:14 QUEUE: vdl.0 (thread) response core/user.register
12.10 13:42:14 TIME: core/user.register : 0.05 ms
12.10 13:42:14 ASYNCDB: INSERT INTO Users (ID, Name, NetworkID, NetworkType, Password, Email, RegDate) VALUES (25,E'uid25',E'',E'',E'uid25',E'', now())
12.10 13:42:14 ASYNCDB: INSERT INTO UserRatings (UserID, Points) VALUES (25, 0)
12.10 13:42:14 STATS: cache [user], get [0 calls, 0 cache hits, 0 cache misses, 0 same version, 0 not found]
12.10 13:42:14 STATS: cache [user], segments [1 calls, 0 hits, 0 misses]
12.10 13:42:14 STATS: cache [user], database [107 calls, 0 reads, 0 writes]
12.10 13:42:14 STATS: cache [user], lock [1 calls, 1 attempts, 0 failures]
12.10 13:42:14 READDB: SELECT * FROM Users WHERE ID = 25
12.10 13:42:14 STATS: cache manager [1], get [1 calls, total 0 sec spent, avg 4.62 ms]
12.10 13:42:14 STATS: cache manager [1], update [0 calls, total 0 sec spent, avg -21474836.48 ms]
12.10 13:42:14 READDB: SELECT * FROM Users WHERE ID = 1
12.10 13:42:14 READDB: SELECT ID FROM UserQuests WHERE ID = 25
12.10 13:42:14 READDB: INSERT INTO UserQuests (ID) VALUES (25)
12.10 13:42:14 QUEUE: vdl.0 (thread) response core/user.registerResponse { password => uid25, name => uid25, _isNotify => true, fullParams => { password => uid25, name => uid25, networkid => , networktype => , messageType => user.register, id => 25 }, networkid => , connectionID => 15241932, networktype => , email => , id => 25, _type => core/user.registerResponse }
12.10 13:42:19 WRITEDB: UPDATE Users SET name = E'uid25', deleted = E'false', email = E'', networktype = E'  ', password = E'uid25', isbanned = E'false', regdate = E'2016-10-12 13:42:14.268266+03', language = E'  ', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}' WHERE ID = 25
12.10 13:42:24 BLOCKREMOVE: user 1 removed
12.10 13:42:27 TIMER: Clans cache...
12.10 13:42:27 TIMER: Clans cache: 0ms
12.10 13:42:29 BLOCKREMOVE: user 25 removed
12.10 13:52:41 TIMER: Starting timer...
12.10 13:52:41 TIMER: Timer running...
12.10 13:52:41 DB: SELECT * FROM GameVars
12.10 13:52:41 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:52:41 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:52:41 DB: SELECT * FROM Shops WHERE ID = 1
12.10 13:52:41 TEMP: load ./tmp/quest_daily_ids
12.10 13:52:41 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
12.10 13:52:41 TEMP: save ./tmp/quest_daily_ids
12.10 13:52:42 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:52:42 QUEUE: vdl.0 (thread) response server.login
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:52:42 DB: SELECT * FROM LocalizationStrings
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 17.5 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:52:42 DB: SELECT * FROM GameVars
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 1.54 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:52:42 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 2.8 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:52:42 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 1.9 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:52:42 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 1.65 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:52:42 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 2.85 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/quest.getDaily
12.10 13:52:42 TIME: core/quest.getDaily : 0.07 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:52:42 DB: SELECT * FROM UserAttributeTypes
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 0.8 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:52:42 DB: SELECT * FROM UserVariableTypes
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 1.42 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:52:42 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 3.67 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:52:42 DB: SELECT * FROM ItemGroups
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 1.46 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:52:42 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 1.41 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:52:42 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 1.93 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/shop.getList
12.10 13:52:42 TIME: core/shop.getList : 0.4 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:52:42 DB: SELECT * FROM EffectAttributeTypes
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 2.11 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:52:42 DB: SELECT * FROM Effects
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 1.55 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:52:42 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 1.67 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:52:42 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 2.21 ms
12.10 13:52:42 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:52:42 DB: SELECT * FROM Badges
12.10 13:52:42 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:42 TIME: core/server.query : 2.49 ms
12.10 13:52:51 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:52:51 DB: SELECT * FROM users
12.10 13:52:51 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:51 TIME: core/server.query : 3.74 ms
12.10 13:52:51 NET: vdl.0 (thread) request core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid26', _type => core/server.query }
12.10 13:52:51 DB: SELECT ID FROM Users WHERE Name = E'uid26'
12.10 13:52:51 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:51 TIME: core/server.query : 3.23 ms
12.10 13:52:51 NET: vdl.0 (thread) request core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:52:51 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:52:51 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:52:51 TIME: core/server.query : 19.92 ms
12.10 13:52:51 NET: vdl.0 (thread) request core/user.register { password => uid26, name => uid26, fullParams => { password => uid26, name => uid26, networkid => , networktype => , messageType => user.register, id => 26 }, networkid => , connectionID => 38927166, networktype => , email => , id => 26, _type => core/user.register }
12.10 13:52:51 QUEUE: vdl.0 (thread) response core/user.register
12.10 13:52:51 TIME: core/user.register : 6.44 ms
12.10 13:52:51 ASYNCDB: INSERT INTO Users (ID, Name, NetworkID, NetworkType, Password, Email, RegDate) VALUES (26,E'uid26',E'',E'',E'uid26',E'', now())
12.10 13:52:51 ASYNCDB: INSERT INTO UserRatings (UserID, Points) VALUES (26, 0)
12.10 13:52:51 READDB: SELECT * FROM Users WHERE ID = 26
12.10 13:52:51 READDB: SELECT * FROM Users WHERE ID = 1
12.10 13:52:51 READDB: SELECT ID FROM UserQuests WHERE ID = 26
12.10 13:52:51 READDB: INSERT INTO UserQuests (ID) VALUES (26)
12.10 13:52:51 QUEUE: vdl.0 (thread) response core/user.registerResponse { password => uid26, name => uid26, _isNotify => true, fullParams => { password => uid26, name => uid26, networkid => , networktype => , messageType => user.register, id => 26 }, networkid => , connectionID => 38927166, networktype => , email => , id => 26, _type => core/user.registerResponse }
12.10 13:52:57 WRITEDB: UPDATE Users SET name = E'uid26', deleted = E'false', email = E'', networktype = E'  ', password = E'uid26', isbanned = E'false', regdate = E'2016-10-12 13:52:51.409771+03', language = E'  ', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}' WHERE ID = 26
12.10 13:53:02 BLOCKREMOVE: user 1 removed
12.10 13:53:33 TIMER: Starting timer...
12.10 13:53:33 TIMER: Timer running...
12.10 13:53:33 DB: SELECT * FROM GameVars
12.10 13:53:33 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:53:33 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:53:33 DB: SELECT * FROM Shops WHERE ID = 1
12.10 13:53:33 TEMP: load ./tmp/quest_daily_ids
12.10 13:53:33 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
12.10 13:53:33 TEMP: save ./tmp/quest_daily_ids
12.10 13:53:33 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:53:33 QUEUE: vdl.0 (thread) response server.login
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:53:33 DB: SELECT * FROM LocalizationStrings
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 21.07 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:53:33 DB: SELECT * FROM GameVars
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 5.36 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:53:33 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 2.04 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:53:33 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 1.27 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:53:33 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 1.55 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:53:33 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 3.09 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/quest.getDaily
12.10 13:53:33 TIME: core/quest.getDaily : 0.07 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:53:33 DB: SELECT * FROM UserAttributeTypes
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 1.07 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:53:33 DB: SELECT * FROM UserVariableTypes
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 1.26 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:53:33 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 2.65 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:53:33 DB: SELECT * FROM ItemGroups
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 1.28 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:53:33 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 1.52 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:53:33 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 1.32 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/shop.getList
12.10 13:53:33 TIME: core/shop.getList : 0.1 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:53:33 DB: SELECT * FROM EffectAttributeTypes
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 0.98 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:53:33 DB: SELECT * FROM Effects
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 2.71 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:53:33 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 2.79 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:53:33 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 2.82 ms
12.10 13:53:33 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:53:33 DB: SELECT * FROM Badges
12.10 13:53:33 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:33 TIME: core/server.query : 1.26 ms
12.10 13:53:40 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:53:40 DB: SELECT * FROM users
12.10 13:53:40 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:40 TIME: core/server.query : 3.6 ms
12.10 13:53:40 NET: vdl.0 (thread) request core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid27', _type => core/server.query }
12.10 13:53:40 DB: SELECT ID FROM Users WHERE Name = E'uid27'
12.10 13:53:40 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:40 TIME: core/server.query : 1.76 ms
12.10 13:53:40 NET: vdl.0 (thread) request core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:53:40 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:53:40 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:53:40 TIME: core/server.query : 1.05 ms
12.10 13:53:40 NET: vdl.0 (thread) request core/user.register { password => uid27, name => uid27, fullParams => { password => uid27, name => uid27, networkid => , networktype => , messageType => user.register, id => 27 }, networkid => , connectionID => 24116044, networktype => , email => , id => 27, _type => core/user.register }
12.10 13:53:40 QUEUE: vdl.0 (thread) response core/user.register
12.10 13:53:40 TIME: core/user.register : 0.07 ms
12.10 13:53:40 ASYNCDB: INSERT INTO Users (ID, Name, NetworkID, NetworkType, Password, Email, RegDate) VALUES (27,E'uid27',E'',E'',E'uid27',E'', now())
12.10 13:53:40 ASYNCDB: INSERT INTO UserRatings (UserID, Points) VALUES (27, 0)
12.10 13:53:40 READDB: SELECT * FROM Users WHERE ID = 27
12.10 13:53:40 READDB: SELECT * FROM Users WHERE ID = 1
12.10 13:53:40 READDB: SELECT ID FROM UserQuests WHERE ID = 27
12.10 13:53:40 READDB: INSERT INTO UserQuests (ID) VALUES (27)
12.10 13:53:40 QUEUE: vdl.0 (thread) response core/user.registerResponse { password => uid27, name => uid27, _isNotify => true, fullParams => { password => uid27, name => uid27, networkid => , networktype => , messageType => user.register, id => 27 }, networkid => , connectionID => 24116044, networktype => , email => , id => 27, _type => core/user.registerResponse }
12.10 13:53:41 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid27' AND Password = E'uid27', _type => core/server.query }
12.10 13:53:41 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid27' AND Password = E'uid27'
12.10 13:53:41 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid27, networkid => , isbanned => false, id => 27 }}, errorCode => ok, _type => core/server.query }
12.10 13:53:41 TIME: core/server.query : 2.66 ms
12.10 13:53:41 NET: vdl.0 (thread) request core/user.isOnlineID { id => 27, _type => core/user.isOnlineID }
12.10 13:53:41 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 13:53:41 TIME: core/user.isOnlineID : 0.15 ms
12.10 13:53:41 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 27, _type => core/cache.get }
12.10 13:53:41 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid27, deleted => false, email => , networktype =>   , password => uid27, isbanned => false, regdate => 2016-10-12 13:53:40.789776+03, language =>   , networkid => , params => { inventory => { list => [] }, vars => {}, attrs => {}, effects => { list => [] } }}, version => 1, id => 27 } }
12.10 13:53:41 TIME: core/cache.get : 0.42 ms
12.10 13:53:41 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 27, _type => core/cache.get }
12.10 13:53:41 READDB: SELECT * FROM UserQuests WHERE ID = 27
12.10 13:53:41 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 27 } }
12.10 13:53:41 TIME: core/cache.get : 0.98 ms
12.10 13:53:41 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 27, _type => core/user.loginPost, ipAddr => 172.16.35.23 }
12.10 13:53:41 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
12.10 13:53:41 TIME: core/user.loginPost : 0.19 ms
12.10 13:53:41 NET: vdl.0 (thread) request core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 27 AND Date = 'today'::timestamp, _type => core/server.query }
12.10 13:53:41 DB: SELECT ID FROM TempUserLogins WHERE UserID = 27 AND Date = 'today'::timestamp
12.10 13:53:41 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 13:53:41 TIME: core/server.query : 1.93 ms
12.10 13:53:41 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (27, 'today'::timestamp)
12.10 13:53:46 WRITEDB: UPDATE Users SET name = E'uid27', deleted = E'false', email = E'', networktype = E'  ', password = E'uid27', isbanned = E'false', regdate = E'2016-10-12 13:53:40.789776+03', language = E'en', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476269621,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 27
12.10 13:53:48 NET: vdl.0 (thread) request core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1476269621, lastLoginDate => 286, lastLoadDate => 1013 } }}, type => user, unlock => false, id => 27, _type => core/cache.update }
12.10 13:53:48 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 13:53:48 TIME: core/cache.update : 0.21 ms
12.10 13:53:51 BLOCKREMOVE: user 1 removed
12.10 13:53:51 WRITEDB: UPDATE Users SET name = E'uid27', deleted = E'false', email = E'', networktype = E'  ', password = E'uid27', isbanned = E'false', regdate = E'2016-10-12 13:53:40.789776+03', language = E'en', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476269621,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 27
12.10 13:53:51 NET: vdl.0 (thread) request core/server.query { q => SELECT id FROM battle WHERE firstid=27 OR secondid=27 AND finished <> true, _type => core/server.query }
12.10 13:53:51 DB: SELECT id FROM battle WHERE firstid=27 OR secondid=27 AND finished <> true
12.10 13:53:51 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 13:53:51 TIME: core/server.query : 1.87 ms
12.10 13:53:51 NET: vdl.0 (thread) request vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 13:53:51 READDB: SELECT * FROM Battle WHERE ID = 0
12.10 13:53:51 TRACE: vdl/cache.battle.infoRoom : Invalid field access : get
12.10 13:53:51 TRACE: vdl/cache.battle.infoRoom : 
Called from modules/VDLCache.hx line 107
Called from modules/VDLCache.hx line 100
Called from modules/VDLCache.hx line 72
Called from snipe/cache/CacheServer.hx line 487
12.10 13:53:51 QUEUE: vdl.0 (thread) response vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 13:53:51 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => user, unlock => true, id => 27, _type => core/cache.update }
12.10 13:53:51 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
12.10 13:53:51 TIME: core/cache.update : 0.18 ms
12.10 13:53:51 NET: vdl.0 (thread) request core/cache.update { diff => {}, type => questdata, unlock => true, id => 27, _type => core/cache.update }
12.10 13:53:51 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 13:53:51 TIME: core/cache.update : 0.16 ms
12.10 13:53:51 NET: vdl.0 (thread) request core/user.logoutPost { networkid => , networktype =>   , id => 27, _type => core/user.logoutPost }
12.10 13:53:51 QUEUE: vdl.0 (thread) response core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 13:53:51 TIME: core/user.logoutPost : 0.14 ms
12.10 13:53:52 WRITEDB: UPDATE UserQuests SET params = E'oy6:questsoy4:listahgg' WHERE ID = 27
12.10 13:53:56 WRITEDB: UPDATE Users SET name = E'uid27', deleted = E'false', email = E'', networktype = E'  ', password = E'uid27', isbanned = E'false', regdate = E'2016-10-12 13:53:40.789776+03', language = E'en', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476269621,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 27
12.10 13:54:02 BLOCKREMOVE: questdata 27 removed
12.10 13:54:06 BLOCKREMOVE: user 27 removed
12.10 13:54:33 TIMER: Clans cache...
12.10 13:54:33 TIMER: Clans cache: 0ms
12.10 13:55:09 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:55:09 DB: SELECT * FROM users
12.10 13:55:09 QUEUE: vdl.0 (thread) response core/server.query { list => {{ password => , name => --- DEFAULT ATTRIBUTES ---, networkid => , params => {"attrs":{},"inventory":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:45:16.008574+03, language =>   , id => 1, deleted => false }, { password => test, name => test3, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:08.364133+03, language =>   , id => 4, deleted => false }, { password => test, name => test4, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:11.728197+03, language =>   , id => 5, deleted => false }, { password => test, name => test5, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:15.596579+03, language =>   , id => 6, deleted => false }, { password => test, name => test6, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:19.233499+03, language =>   , id => 7, deleted => false }, { password => uid24, name => uid24, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:36:42.292969+03, language =>   , id => 24, deleted => false }, { password => uid25, name => uid25, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:42:14.268266+03, language =>   , id => 25, deleted => false }, { password => test, name => test7, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-09-07 16:46:43.688817+03, language =>   , id => 8, deleted => false }, { password => uid26, name => uid26, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:52:51.409771+03, language =>   , id => 26, deleted => false }, { password => uid9, name => uid9, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-11 20:36:09.090394+03, language =>   , id => 9, deleted => false }, { password => uid27, name => uid27, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476269621,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:53:40.789776+03, language => en, id => 27, deleted => false }, { password => uid10, name => uid10, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 11:12:48.168059+03, language =>   , id => 10, deleted => false }, { password => uid11, name => uid11, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:33:27.3109+03, language =>   , id => 11, deleted => false }, { password => uid12, name => uid12, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:47:26.670465+03, language =>   , id => 12, deleted => false }, { password => uid13, name => uid13, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:51:08.341292+03, language =>   , id => 13, deleted => false }, { password => uid14, name => uid14, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:53:34.360658+03, language =>   , id => 14, deleted => false }, { password => uid15, name => uid15, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:55:14.160619+03, language =>   , id => 15, deleted => false }, { password => uid16, name => uid16, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:59:18.86185+03, language =>   , id => 16, deleted => false }, { password => test, name => test2, networkid => , params => {"attrs":{"_lastTime.24hr":1472825979,"lastLoginDate":246,"lastLoadDate":903},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, id => 3, deleted => false }, { password => test, name => test1, networkid => , params => {"attrs":{"_lastTime.24hr":1476204122,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, id => 2, deleted => false }, { password => uid17, name => uid17, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:07:15.262858+03, language =>   , id => 17, deleted => false }, { password => uid18, name => uid18, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:10:03.885555+03, language =>   , id => 18, deleted => false }, { password => uid19, name => uid19, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:11:41.868111+03, language =>   , id => 19, deleted => false }, { password => uid20, name => uid20, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:13:57.605493+03, language =>   , id => 20, deleted => false }, { password => uid21, name => uid21, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:16:21.670662+03, language =>   , id => 21, deleted => false }, { password => uid22, name => uid22, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:18:13.422519+03, language =>   , id => 22, deleted => false }, { password => uid23, name => uid23, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:33:08.78413+03, language =>   , id => 23, deleted => false }}, errorCode => ok, _type => core/server.query }
12.10 13:55:09 TIME: core/server.query : 3.99 ms
12.10 13:55:09 NET: vdl.0 (thread) request core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid28', _type => core/server.query }
12.10 13:55:09 DB: SELECT ID FROM Users WHERE Name = E'uid28'
12.10 13:55:09 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 13:55:09 TIME: core/server.query : 1.45 ms
12.10 13:55:09 NET: vdl.0 (thread) request core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:55:09 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:55:09 QUEUE: vdl.0 (thread) response core/server.query { list => {{ id => 28 }}, errorCode => ok, _type => core/server.query }
12.10 13:55:09 TIME: core/server.query : 1.15 ms
12.10 13:55:09 NET: vdl.0 (thread) request core/user.register { password => uid28, name => uid28, fullParams => { password => uid28, name => uid28, networkid => , networktype => , messageType => user.register, id => 28 }, networkid => , connectionID => 58270493, networktype => , email => , id => 28, _type => core/user.register }
12.10 13:55:09 QUEUE: vdl.0 (thread) response core/user.register { errorCode => ok, _type => core/user.register }
12.10 13:55:09 TIME: core/user.register : 0.1 ms
12.10 13:55:09 ASYNCDB: INSERT INTO Users (ID, Name, NetworkID, NetworkType, Password, Email, RegDate) VALUES (28,E'uid28',E'',E'',E'uid28',E'', now())
12.10 13:55:09 ASYNCDB: INSERT INTO UserRatings (UserID, Points) VALUES (28, 0)
12.10 13:55:09 STATS: cache [user], get [3 calls, 1 cache hits, 2 cache misses, 0 same version, 0 not found]
12.10 13:55:09 STATS: cache [user], segments [11 calls, 7 hits, 3 misses]
12.10 13:55:09 STATS: cache [user], database [96 calls, 2 reads, 3 writes]
12.10 13:55:09 STATS: cache [user], lock [3 calls, 3 attempts, 0 failures]
12.10 13:55:09 READDB: SELECT * FROM Users WHERE ID = 28
12.10 13:55:09 STATS: cache manager [1], get [4 calls, total 0.01 sec spent, avg 1.89 ms]
12.10 13:55:09 STATS: cache manager [1], update [4 calls, total 0 sec spent, avg 0.1 ms]
12.10 13:55:09 READDB: SELECT * FROM Users WHERE ID = 1
12.10 13:55:09 READDB: SELECT ID FROM UserQuests WHERE ID = 28
12.10 13:55:09 READDB: INSERT INTO UserQuests (ID) VALUES (28)
12.10 13:55:09 QUEUE: vdl.0 (thread) response core/user.registerResponse { password => uid28, name => uid28, _isNotify => true, fullParams => { password => uid28, name => uid28, networkid => , networktype => , messageType => user.register, id => 28 }, networkid => , connectionID => 58270493, networktype => , email => , id => 28, _type => core/user.registerResponse }
12.10 13:55:10 NET: vdl.0 (thread) request core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid28' AND Password = E'uid28', _type => core/server.query }
12.10 13:55:10 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid28' AND Password = E'uid28'
12.10 13:55:10 QUEUE: vdl.0 (thread) response core/server.query { list => {{ name => uid28, networkid => , isbanned => false, id => 28 }}, errorCode => ok, _type => core/server.query }
12.10 13:55:10 TIME: core/server.query : 2.61 ms
12.10 13:55:10 NET: vdl.0 (thread) request core/user.isOnlineID { id => 28, _type => core/user.isOnlineID }
12.10 13:55:10 QUEUE: vdl.0 (thread) response core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 13:55:10 TIME: core/user.isOnlineID : 0.12 ms
12.10 13:55:10 NET: vdl.0 (thread) request core/cache.get { type => user, v => -1, id => 28, _type => core/cache.get }
12.10 13:55:10 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid28, deleted => false, email => , networktype =>   , password => uid28, isbanned => false, regdate => 2016-10-12 13:55:09.527211+03, language =>   , networkid => , params => { inventory => { list => [] }, vars => {}, attrs => {}, effects => { list => [] } }}, version => 1, id => 28 } }
12.10 13:55:10 TIME: core/cache.get : 0.37 ms
12.10 13:55:10 NET: vdl.0 (thread) request core/cache.get { type => questdata, v => -1, id => 28, _type => core/cache.get }
12.10 13:55:10 STATS: cache [questdata], get [1 calls, 0 cache hits, 1 cache misses, 0 same version, 0 not found]
12.10 13:55:10 STATS: cache [questdata], segments [5 calls, 2 hits, 2 misses]
12.10 13:55:10 STATS: cache [questdata], database [97 calls, 1 reads, 1 writes]
12.10 13:55:10 STATS: cache [questdata], lock [2 calls, 2 attempts, 0 failures]
12.10 13:55:10 READDB: SELECT * FROM UserQuests WHERE ID = 28
12.10 13:55:10 QUEUE: vdl.0 (thread) response core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 28 } }
12.10 13:55:10 TIME: core/cache.get : 1.28 ms
12.10 13:55:10 NET: vdl.0 (thread) request core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 28, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 13:55:10 QUEUE: vdl.0 (thread) response core/user.loginPost { _type => core/user.loginPost }
12.10 13:55:10 TIME: core/user.loginPost : 0.12 ms
12.10 13:55:10 NET: vdl.0 (thread) request core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 28 AND Date = 'today'::timestamp, _type => core/server.query }
12.10 13:55:10 DB: SELECT ID FROM TempUserLogins WHERE UserID = 28 AND Date = 'today'::timestamp
12.10 13:55:10 QUEUE: vdl.0 (thread) response core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 13:55:10 TIME: core/server.query : 1.8 ms
12.10 13:55:10 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (28, 'today'::timestamp)
12.10 13:55:14 WRITEDB: UPDATE Users SET name = E'uid28', deleted = E'false', email = E'', networktype = E'  ', password = E'uid28', isbanned = E'false', regdate = E'2016-10-12 13:55:09.527211+03', language = E'en', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476269710,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 28
12.10 13:55:18 NET: vdl.0 (thread) request core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1476269710, lastLoginDate => 286, lastLoadDate => 1013 } }}, type => user, unlock => false, id => 28, _type => core/cache.update }
12.10 13:55:18 QUEUE: vdl.0 (thread) response core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 13:55:18 TIME: core/cache.update : 0.31 ms
12.10 13:55:19 BLOCKREMOVE: user 1 removed
12.10 13:55:19 WRITEDB: UPDATE Users SET name = E'uid28', deleted = E'false', email = E'', networktype = E'  ', password = E'uid28', isbanned = E'false', regdate = E'2016-10-12 13:55:09.527211+03', language = E'en', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476269710,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}' WHERE ID = 28
12.10 13:55:27 NET: vdl.0 (thread) request vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 13:55:27 DB: SELECT * FROM tournament WHERE winner = -1 AND status = 'starting'
12.10 13:55:27 QUEUE: vdl.0 (thread) response vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 13:55:27 TIME: vdl/cache.tournament.getAvailableTournament : 19.95 ms
12.10 13:56:36 TIMER: Starting timer...
12.10 13:56:36 TIMER: Timer running...
12.10 13:56:36 DB: SELECT * FROM GameVars
12.10 13:56:36 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:56:36 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:56:36 DB: SELECT * FROM Shops WHERE ID = 1
12.10 13:56:36 TEMP: load ./tmp/quest_daily_ids
12.10 13:56:36 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
12.10 13:56:36 TEMP: save ./tmp/quest_daily_ids
12.10 13:56:36 NET: ??? request core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:56:36 QUEUE: vdl.0 (thread) response server.login
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:56:36 DB: SELECT * FROM LocalizationStrings
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 34.7 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:56:36 DB: SELECT * FROM GameVars
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 1.13 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:56:36 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 1.38 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:56:36 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 1.27 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:56:36 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 1.39 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:56:36 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 1.94 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/quest.getDaily
12.10 13:56:36 TIME: core/quest.getDaily : 0.06 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:56:36 DB: SELECT * FROM UserAttributeTypes
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 1.13 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:56:36 DB: SELECT * FROM UserVariableTypes
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 1.24 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:56:36 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 3.23 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:56:36 DB: SELECT * FROM ItemGroups
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 1.09 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:56:36 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 1.53 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:56:36 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 1.45 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/shop.getList { _type => core/shop.getList }
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/shop.getList
12.10 13:56:36 TIME: core/shop.getList : 0.21 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:56:36 DB: SELECT * FROM EffectAttributeTypes
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 1.16 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:56:36 DB: SELECT * FROM Effects
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 1.13 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:56:36 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 2.33 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:56:36 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 2.21 ms
12.10 13:56:36 NET: vdl.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:56:36 DB: SELECT * FROM Badges
12.10 13:56:36 QUEUE: vdl.0 (thread) response core/server.query
12.10 13:56:36 TIME: core/server.query : 1.25 ms
12.10 13:56:36 TIMER: Clans cache...
12.10 13:56:36 TIMER: Clans cache: 0ms
12.10 13:56:36 TIMER: Clans cache...
12.10 13:56:36 TIMER: Clans cache: 0ms
12.10 13:56:36 TIMER: Clans cache...
12.10 13:56:36 TIMER: Clans cache: 0ms
12.10 13:56:36 PENDING: INSERT INTO LogUserOnlineCount (Date, Min, Max, Avg) VALUES (now(), 0, 0, 0)
12.10 13:56:36 TIMER: Clans cache...
12.10 13:56:36 TIMER: Clans cache: 0ms
12.10 13:56:36 TIMER: Clans cache...
12.10 13:56:36 TIMER: Clans cache: 0ms
12.10 13:56:36 TIMER: Clans cache...
12.10 13:56:36 TIMER: Clans cache: 0ms
12.10 13:56:36 TIMER: Clans cache...
12.10 13:56:36 TIMER: Clans cache: 0ms
12.10 13:56:36 TIMER: Clans cache...
12.10 13:56:36 TIMER: Clans cache: 0ms
12.10 13:56:36 TIMER: Clans cache...
12.10 13:56:36 TIMER: Clans cache: 0ms
12.10 13:56:36 TIMER: Clans cache...
12.10 13:56:36 TIMER: Clans cache: 0ms
12.10 13:56:36 TIMER: Clans cache...
12.10 13:56:36 TIMER: Clans cache: 0ms
12.10 13:56:36 TIMER: Clans cache..