29.10 16:00:18 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
29.10 16:00:18 -<<-: server.login ok
29.10 16:00:18 DB: SELECT * FROM LocalizationStrings
29.10 16:00:18 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
29.10 16:00:19 -<<-: core/server.query ok
29.10 16:00:19 TIMER: Starting timer...
29.10 16:00:19 TIMER: Timer running...
29.10 16:00:19 DB: SELECT * FROM GameVars
29.10 16:00:19 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
29.10 16:00:19 -<<-: core/server.query ok
29.10 16:00:19 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
29.10 16:00:19 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
29.10 16:00:19 -<<-: core/server.query ok
29.10 16:00:19 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
29.10 16:00:19 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
29.10 16:00:19 -<<-: core/server.query ok
29.10 16:00:19 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
29.10 16:00:19 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
29.10 16:00:19 -<<-: core/server.query ok
29.10 16:00:19 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
29.10 16:00:19 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
29.10 16:00:19 -<<-: core/server.query ok
29.10 16:00:19 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
29.10 16:00:19 -<<-: core/quest.getDaily ok
29.10 16:00:19 DB: SELECT * FROM UserAttributeTypes
29.10 16:00:19 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
29.10 16:00:19 -<<-: core/server.query ok
29.10 16:00:19 DB: SELECT * FROM UserVariableTypes
29.10 16:00:19 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
29.10 16:00:19 -<<-: core/server.query ok
29.10 16:00:19 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
29.10 16:00:19 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
29.10 16:00:19 -<<-: core/server.query ok
29.10 16:00:19 DB: SELECT * FROM ItemGroups
29.10 16:00:19 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
29.10 16:00:19 -<<-: core/server.query ok
29.10 16:00:19 DB: SELECT * FROM Bundles ORDER BY ID
29.10 16:00:19 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
29.10 16:00:19 -<<-: core/server.query ok
29.10 16:00:19 DB: SELECT * FROM BundleItems ORDER BY ID
29.10 16:00:19 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
29.10 16:00:19 -<<-: core/server.query ok
29.10 16:00:19 SHOP: loading items...
29.10 16:00:19 ->>-: core/shop.getList { _type => core/shop.getList }
29.10 16:00:19 -<<-: core/shop.getList ok
29.10 16:00:19 SHOP: 0 items loaded (0 sec)
29.10 16:00:19 DB: SELECT * FROM EffectAttributeTypes
29.10 16:00:19 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
29.10 16:00:19 -<<-: core/server.query ok
29.10 16:00:19 DB: SELECT * FROM Effects
29.10 16:00:19 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
29.10 16:00:19 -<<-: core/server.query ok
29.10 16:00:19 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 16:00:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
29.10 16:00:19 -<<-: core/server.query ok
29.10 16:00:19 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEve29.10 16:11:42 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
29.10 16:11:42 -<<-: server.login ok
29.10 16:11:42 DB: SELECT * FROM LocalizationStrings
29.10 16:11:42 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 TIMER: Starting timer...
29.10 16:11:42 TIMER: Timer running...
29.10 16:11:42 DB: SELECT * FROM GameVars
29.10 16:11:42 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
29.10 16:11:42 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
29.10 16:11:42 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
29.10 16:11:42 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
29.10 16:11:42 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
29.10 16:11:42 -<<-: core/quest.getDaily ok
29.10 16:11:42 DB: SELECT * FROM UserAttributeTypes
29.10 16:11:42 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 DB: SELECT * FROM UserVariableTypes
29.10 16:11:42 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
29.10 16:11:42 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 DB: SELECT * FROM ItemGroups
29.10 16:11:42 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 DB: SELECT * FROM Bundles ORDER BY ID
29.10 16:11:42 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 DB: SELECT * FROM BundleItems ORDER BY ID
29.10 16:11:42 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 SHOP: loading items...
29.10 16:11:42 ->>-: core/shop.getList { _type => core/shop.getList }
29.10 16:11:42 -<<-: core/shop.getList ok
29.10 16:11:42 SHOP: 0 items loaded (0 sec)
29.10 16:11:42 DB: SELECT * FROM EffectAttributeTypes
29.10 16:11:42 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 DB: SELECT * FROM Effects
29.10 16:11:42 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 16:11:42 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 16:11:42 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 DB: SELECT * FROM Badges
29.10 16:11:42 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
29.10 16:11:42 -<<-: core/server.query ok
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:11:42 TIMER: Check auto-disconnect...
29.10 16:11:42 STATS: vdl.0 cache, locks:0
29.10 16:28:58 NET: Client (conid:18390204) connected to vdl.0 (clients:1)
29.10 16:29:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:29:03 == NET: null ret: user.check { type => user.check, errorCode => notLogin }
29.10 16:29:03 TIME: user.ping 0.15 ms
29.10 16:29:03 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:29:03 NET: Client (name:null conid:18390204 TCP) disconnected from vdl.0 (clients:0)
29.10 16:29:03 NET: Client (conid:11933677) connected to vdl.0 (clients:1)
29.10 16:29:10 ++ NET: null req: battle.end { type => loseGame, typeBattle => tournament, tournamentId => 1, messageType => battle.end, battleId => 91 }
29.10 16:29:10 TRACE: User not logon yet.
29.10 16:29:10 NET: Client (name:null conid:11933677 TCP) disconnected from vdl.0 (clients:0)
29.10 16:29:42 TIMER: Check auto-disconnect...
29.10 16:29:42 STATS: vdl.0 cache, locks:0
29.10 16:29:42 TIMER: Check auto-disconnect...
29.10 16:29:42 STATS: vdl.0 cache, locks:0
29.10 16:29:42 TIMER: Check auto-disconnect...
29.10 16:29:42 STATS: vdl.0 cache, locks:0
29.10 16:31:54 NET: Client (conid:59624534) connected to vdl.0 (clients:1)
29.10 16:31:59 ++ NET: null req: user.register { messageType => user.register }
29.10 16:31:59 DB: SELECT * FROM users
29.10 16:31:59 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
29.10 16:31:59 -<<-: core/server.query ok
29.10 16:31:59 STATS: vdl.0 cache connection, 21 calls, total 0.140076398849487 sec spent, avg 6.67 ms
29.10 16:31:59 == NET: null ret: user.auth { type => user.auth, token => dWlkMTEy }
29.10 16:31:59 DB: SELECT ID FROM Users WHERE Name = E'uid112'
29.10 16:31:59 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid112', _type => core/server.query }
29.10 16:31:59 -<<-: core/server.query ok
29.10 16:31:59 DB: SELECT nextval('Users_id_seq') AS id
29.10 16:31:59 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
29.10 16:31:59 -<<-: core/server.query ok
29.10 16:31:59 ->>-: core/user.register { password => uid112, name => uid112, fullParams => { password => uid112, name => uid112, networkid => , networktype => , messageType => user.register, id => 112 }, networkid => , connectionID => 59624534, networktype => , email => , id => 112, _type => core/user.register }
29.10 16:31:59 -<<-: core/user.register ok
29.10 16:31:59 -<<-: core/user.registerResponse null
29.10 16:31:59 == NET: null ret: user.register { type => user.register, errorCode => ok }
29.10 16:32:05 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTEy }
29.10 16:32:05 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid112' AND Password = E'uid112'
29.10 16:32:05 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid112' AND Password = E'uid112', _type => core/server.query }
29.10 16:32:05 -<<-: core/server.query ok
29.10 16:32:05 ->>-: core/user.isOnlineID { id => 112, _type => core/user.isOnlineID }
29.10 16:32:05 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.10 16:32:05 ->>-: core/cache.get { type => user, v => -1, id => 112, _type => core/cache.get }
29.10 16:32:05 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid112, deleted => false, email => , networktype =>   , password => uid112, isbanned => false, regdate => 2016-10-29 16:31:59.278542+03, language =>   , networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => {}, effects => { list => [] } }}, version => 1, id => 112 } }
29.10 16:32:05 ->>-: core/cache.get { type => questdata, v => -1, id => 112, _type => core/cache.get }
29.10 16:32:05 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 112 } }
29.10 16:32:05 NET: Client login (conid:59624534, id:112, name:uid112)
29.10 16:32:05 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 112, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
29.10 16:32:05 -<<-: core/user.loginPost { _type => core/user.loginPost }
29.10 16:32:05 DB: SELECT ID FROM TempUserLogins WHERE UserID = 112 AND Date = 'today'::timestamp
29.10 16:32:05 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 112 AND Date = 'today'::timestamp, _type => core/server.query }
29.10 16:32:06 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.10 16:32:06 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (112, 'today'::timestamp)
29.10 16:32:06 ++ NET: uid112 req: user.login { messageType => user.login, token => dWlkMTEy }
29.10 16:32:06 TRACE: User already logon.
29.10 16:32:06 == NET: uid112 ret: user.login { name => uid112, type => user.login, errorCode => ok, id => 112 }
29.10 16:32:06 TRACE: 
Called from snipe/slave/Server.hx line 870
Called from snipe/slave/Server.hx line 1124
29.10 16:32:06 == NET: uid112 ret: user.join { name => uid112, type => user.join }
29.10 16:32:06 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1477747925, lastLoginDate => 303, lastLoadDate => 1030 } }}, type => user, unlock => true, id => 112, _type => core/cache.update, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (112, 'today'::timestamp), _type => core/server.pending }} }
29.10 16:32:06 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.10 16:32:06 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 112, _type => core/cache.update }
29.10 16:32:06 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 16:32:06 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 112, _type => core/user.logoutPost }
29.10 16:32:06 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 16:32:06 TRACE: Could not login.
29.10 16:32:06 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
29.10 16:32:11 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:32:11 == NET: uid112 ret: user.check { type => user.check, errorCode => ok }
29.10 16:32:11 TIME: user.ping 0.27 ms
29.10 16:32:11 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:32:31 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:32:31 == NET: uid112 ret: user.check { type => user.check, errorCode => ok }
29.10 16:32:31 TIME: user.ping 0.3 ms
29.10 16:32:31 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:32:42 TIMER: Check auto-disconnect...
29.10 16:32:42 STATS: vdl.0 cache, locks:0
29.10 16:32:42 TIMER: Check auto-disconnect...
29.10 16:32:42 STATS: vdl.0 cache, locks:0
29.10 16:32:42 TIMER: Check auto-disconnect...
29.10 16:32:42 STATS: vdl.0 cache, locks:0
29.10 16:32:42 TIMER: Check auto-disconnect...
29.10 16:32:42 NET: Client (name:uid112 conid:59624534 TCP) disconnected from vdl.0 (clients:0)
29.10 16:32:42 DB: SELECT id FROM battle WHERE firstid=112 OR secondid=112 AND finished <> true
29.10 16:32:42 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=112 OR secondid=112 AND finished <> true, _type => core/server.query }
29.10 16:32:42 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.10 16:32:42 STATS: vdl.0 cache connection, 34 calls, total 0.35431170463562 sec spent, avg 10.42 ms
29.10 16:32:42 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 16:32:42 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
29.10 16:32:42 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 16:32:42 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 267
Called from modules/VDLBattleModule.hx line 280
Called from snipe/slave/Server.hx line 994
29.10 16:32:42 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 112, _type => core/cache.update }
29.10 16:32:42 -<<-: core/cache.update { errorCode => mustBeLocked, version => 0, _type => core/cache.update }
29.10 16:32:42 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 112, _type => core/cache.update }
29.10 16:32:42 -<<-: core/cache.update { errorCode => mustBeLocked, version => 0, _type => core/cache.update }
29.10 16:32:42 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 112, _type => core/user.logoutPost }
29.10 16:32:42 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 16:32:42 STATS: vdl.0 cache, locks:0
29.10 16:32:42 TIMER: Check auto-disconnect...
29.10 16:32:42 STATS: vdl.0 cache, locks:0
29.10 16:37:00 NET: Client (conid:47238842) connected to vdl.0 (clients:1)
29.10 16:37:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:37:05 == NET: null ret: user.check { type => user.check, errorCode => notLogin }
29.10 16:37:05 TIME: user.ping 0.16 ms
29.10 16:37:05 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:37:05 NET: Client (name:null conid:47238842 TCP) disconnected from vdl.0 (clients:0)
29.10 16:37:05 NET: Client (conid:24269978) connected to vdl.0 (clients:1)
29.10 16:37:25 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:37:25 == NET: null ret: user.check { type => user.check, errorCode => notLogin }
29.10 16:37:25 TIME: user.ping 0.16 ms
29.10 16:37:25 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:37:25 NET: Client (name:null conid:24269978 TCP) disconnected from vdl.0 (clients:0)
29.10 16:37:25 NET: Client (conid:95177233) connected to vdl.0 (clients:1)
29.10 16:37:42 TIMER: Check auto-disconnect...
29.10 16:37:42 STATS: vdl.0 cache, locks:0
29.10 16:37:45 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:37:45 == NET: null ret: user.check { type => user.check, errorCode => notLogin }
29.10 16:37:45 TIME: user.ping 0.16 ms
29.10 16:37:45 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:37:45 NET: Client (name:null conid:95177233 TCP) disconnected from vdl.0 (clients:0)
29.10 16:37:45 NET: Client (conid:65194307) connected to vdl.0 (clients:1)
29.10 16:38:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:38:05 == NET: null ret: user.check { type => user.check, errorCode => notLogin }
29.10 16:38:05 TIME: user.ping 0.14 ms
29.10 16:38:05 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:38:05 NET: Client (name:null conid:65194307 TCP) disconnected from vdl.0 (clients:0)
29.10 16:38:05 NET: Client (conid:91790150) connected to vdl.0 (clients:1)
29.10 16:38:25 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:38:25 == NET: null ret: user.check { type => user.check, errorCode => notLogin }
29.10 16:38:25 TIME: user.ping 0.14 ms
29.10 16:38:25 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:38:25 NET: Client (name:null conid:91790150 TCP) disconnected from vdl.0 (clients:0)
29.10 16:38:25 NET: Client (conid:8566117) connected to vdl.0 (clients:1)
29.10 16:38:42 TIMER: Check auto-disconnect...
29.10 16:38:42 STATS: vdl.0 cache, locks:0
29.10 16:38:45 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:38:45 == NET: null ret: user.check { type => user.check, errorCode => notLogin }
29.10 16:38:45 TIME: user.ping 0.12 ms
29.10 16:38:45 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:38:46 NET: Client (name:null conid:8566117 TCP) disconnected from vdl.0 (clients:0)
29.10 16:38:46 NET: Client (conid:55026085) connected to vdl.0 (clients:1)
29.10 16:39:27 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
29.10 16:39:27 -<<-: server.login ok
29.10 16:39:27 DB: SELECT * FROM LocalizationStrings
29.10 16:39:27 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 TIMER: Starting timer...
29.10 16:39:27 TIMER: Timer running...
29.10 16:39:27 DB: SELECT * FROM GameVars
29.10 16:39:27 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
29.10 16:39:27 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
29.10 16:39:27 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
29.10 16:39:27 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
29.10 16:39:27 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
29.10 16:39:27 -<<-: core/quest.getDaily ok
29.10 16:39:27 DB: SELECT * FROM UserAttributeTypes
29.10 16:39:27 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 DB: SELECT * FROM UserVariableTypes
29.10 16:39:27 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
29.10 16:39:27 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 DB: SELECT * FROM ItemGroups
29.10 16:39:27 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 DB: SELECT * FROM Bundles ORDER BY ID
29.10 16:39:27 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 DB: SELECT * FROM BundleItems ORDER BY ID
29.10 16:39:27 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 SHOP: loading items...
29.10 16:39:27 ->>-: core/shop.getList { _type => core/shop.getList }
29.10 16:39:27 -<<-: core/shop.getList ok
29.10 16:39:27 SHOP: 0 items loaded (0 sec)
29.10 16:39:27 DB: SELECT * FROM EffectAttributeTypes
29.10 16:39:27 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 DB: SELECT * FROM Effects
29.10 16:39:27 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 16:39:27 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 16:39:27 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 DB: SELECT * FROM Badges
29.10 16:39:27 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
29.10 16:39:27 -<<-: core/server.query ok
29.10 16:39:27 TIMER: Check auto-disconnect...
29.10 16:39:27 STATS: vdl.0 cache, locks:0
29.10 16:40:28 NET: Client (conid:34772946) connected to vdl.0 (clients:1)
29.10 16:40:29 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
29.10 16:40:29 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
29.10 16:40:29 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
29.10 16:40:29 -<<-: core/server.query ok
29.10 16:40:29 STATS: vdl.0 cache connection, 21 calls, total 0.0225460529327393 sec spent, avg 1.07 ms
29.10 16:40:29 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
29.10 16:40:29 -<<-: core/user.isOnlineID ok
29.10 16:40:29 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
29.10 16:40:29 -<<-: core/cache.get ok
29.10 16:40:29 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
29.10 16:40:29 -<<-: core/cache.get ok
29.10 16:40:29 NET: Client login (conid:34772946, id:107, name:uid107)
29.10 16:40:29 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
29.10 16:40:29 -<<-: core/user.loginPost null
29.10 16:40:29 DB: SELECT ID FROM TempUserLogins WHERE UserID = 107 AND Date = 'today'::timestamp
29.10 16:40:29 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 107 AND Date = 'today'::timestamp, _type => core/server.query }
29.10 16:40:29 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.10 16:40:29 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (107, 'today'::timestamp)
29.10 16:40:29 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
29.10 16:40:29 == NET: uid107 ret: user.join { name => uid107, type => user.join }
29.10 16:40:29 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (107, 'today'::timestamp), _type => core/server.pending }} }
29.10 16:40:29 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
29.10 16:40:32 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:40:32 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:40:32 TIME: user.ping 0.28 ms
29.10 16:40:32 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:40:37 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1477748429, lastLoginDate => 303, lastLoadDate => 1030 } }}, type => user, unlock => false, id => 107, _type => core/cache.update }
29.10 16:40:37 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 16:40:39 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:40:39 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:40:39 TIME: user.ping 0.23 ms
29.10 16:40:39 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:40:46 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:40:46 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:40:46 TIME: user.ping 0.17 ms
29.10 16:40:46 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:40:53 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:40:53 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:40:53 TIME: user.ping 0.14 ms
29.10 16:40:53 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:41:01 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:41:01 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:41:01 TIME: user.ping 0.34 ms
29.10 16:41:01 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:41:08 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:41:08 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:41:08 TIME: user.ping 0.27 ms
29.10 16:41:08 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:41:15 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:41:15 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:41:15 TIME: user.ping 0.29 ms
29.10 16:41:15 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:41:22 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:41:22 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:41:22 TIME: user.ping 0.25 ms
29.10 16:41:22 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:41:27 TIMER: Check auto-disconnect...
29.10 16:41:27 STATS: vdl.0 cache, locks:2
29.10 16:41:29 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:41:29 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:41:29 TIME: user.ping 0.3 ms
29.10 16:41:29 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:41:36 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:41:36 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:41:36 TIME: user.ping 0.25 ms
29.10 16:41:36 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:41:43 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:41:43 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:41:43 TIME: user.ping 0.25 ms
29.10 16:41:43 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:41:50 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:41:50 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:41:50 TIME: user.ping 0.29 ms
29.10 16:41:50 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:41:57 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:41:57 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:41:57 TIME: user.ping 0.28 ms
29.10 16:41:57 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:42:04 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:42:04 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:42:04 TIME: user.ping 0.25 ms
29.10 16:42:04 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:42:11 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:42:11 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:42:11 TIME: user.ping 0.61 ms
29.10 16:42:11 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:42:18 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:42:18 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:42:18 TIME: user.ping 0.27 ms
29.10 16:42:18 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:42:25 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:42:25 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:42:25 TIME: user.ping 0.55 ms
29.10 16:42:25 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:42:27 TIMER: Check auto-disconnect...
29.10 16:42:27 STATS: vdl.0 cache, locks:2
29.10 16:42:32 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:42:32 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:42:32 TIME: user.ping 0.23 ms
29.10 16:42:32 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:42:39 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:42:39 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:42:39 TIME: user.ping 0.26 ms
29.10 16:42:39 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:42:47 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:42:47 TIME: user.ping 0.27 ms
29.10 16:42:47 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:42:47 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:42:54 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:42:54 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:42:54 TIME: user.ping 0.31 ms
29.10 16:42:54 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:43:01 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:43:01 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:43:01 TIME: user.ping 0.21 ms
29.10 16:43:01 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:43:08 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:43:08 TIME: user.ping 0.2 ms
29.10 16:43:08 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:43:08 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:43:15 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:43:15 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:43:15 TIME: user.ping 0.23 ms
29.10 16:43:15 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:43:22 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:43:22 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:43:22 TIME: user.ping 0.27 ms
29.10 16:43:22 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:43:27 TIMER: Check auto-disconnect...
29.10 16:43:27 STATS: vdl.0 cache, locks:2
29.10 16:43:29 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:43:29 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:43:29 TIME: user.ping 0.14 ms
29.10 16:43:29 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:43:36 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:43:36 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:43:36 TIME: user.ping 0.27 ms
29.10 16:43:36 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:43:43 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:43:43 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:43:43 TIME: user.ping 0.14 ms
29.10 16:43:43 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:43:50 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:43:50 TIME: user.ping 0.22 ms
29.10 16:43:50 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:43:50 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:43:57 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:43:57 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:43:57 TIME: user.ping 0.27 ms
29.10 16:43:57 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:44:03 NET: Client (conid:28076675) connected to vdl.0 (clients:2)
29.10 16:44:04 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:44:04 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:44:04 TIME: user.ping 0.27 ms
29.10 16:44:04 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:44:05 ++ NET: null req: user.login { password => qwerty, name => qwerty, messageType => user.login }
29.10 16:44:05 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'qwerty' AND Password = E'qwerty'
29.10 16:44:05 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'qwerty' AND Password = E'qwerty', _type => core/server.query }
29.10 16:44:05 -<<-: core/server.query { list => {{ name => qwerty, networkid => , isbanned => false, id => 104 }}, errorCode => ok, _type => core/server.query }
29.10 16:44:05 STATS: vdl.0 cache connection, 29 calls, total 0.0384540557861328 sec spent, avg 1.33 ms
29.10 16:44:05 ->>-: core/user.isOnlineID { id => 104, _type => core/user.isOnlineID }
29.10 16:44:05 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.10 16:44:05 ->>-: core/cache.get { type => user, v => -1, id => 104, _type => core/cache.get }
29.10 16:44:05 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => qwerty, deleted => false, email => , networktype =>   , password => qwerty, isbanned => false, regdate => 2016-10-28 16:12:35.945256+03, language => en, networkid => , params => { info => { city => Qwety, year => 123, email => qwrtty }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477660356, lastLoginDate => 302, lastLoadDate => 1029 }, effects => { list => [] } }}, version => 0, id => 104 } }
29.10 16:44:05 ->>-: core/cache.get { type => questdata, v => -1, id => 104, _type => core/cache.get }
29.10 16:44:05 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 104 } }
29.10 16:44:05 NET: Client login (conid:28076675, id:104, name:qwerty)
29.10 16:44:05 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 104, _type => core/user.loginPost, ipAddr => 172.16.20.121 }
29.10 16:44:05 -<<-: core/user.loginPost { _type => core/user.loginPost }
29.10 16:44:05 DB: SELECT ID FROM TempUserLogins WHERE UserID = 104 AND Date = 'today'::timestamp
29.10 16:44:05 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 104 AND Date = 'today'::timestamp, _type => core/server.query }
29.10 16:44:05 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.10 16:44:05 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (104, 'today'::timestamp)
29.10 16:44:05 == NET: qwerty ret: user.login { name => qwerty, type => user.login, errorCode => ok, id => 104 }
29.10 16:44:05 == NET: uid107 ret: user.join { name => qwerty, type => user.join }
29.10 16:44:05 == NET: qwerty ret: user.join { name => uid107, type => user.join }
29.10 16:44:05 == NET: qwerty ret: user.join { name => qwerty, type => user.join }
29.10 16:44:05 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (104, 'today'::timestamp), _type => core/server.pending }} }
29.10 16:44:05 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
29.10 16:44:07 ++ NET: qwerty req: user.data { messageType => user.data }
29.10 16:44:07 == NET: qwerty ret: user.check { type => user.check, errorCode => ok, reqType => user.data }
29.10 16:44:07 ->>-: vdl/cache.user.getData { userId => 104, _type => vdl/cache.user.getData }
29.10 16:44:07 -<<-: vdl/cache.user.getData { info => { city => Qwety, year => 123, email => qwrtty }, errorCode => ok, _type => vdl/cache.user.getData }
29.10 16:44:07 TIME: user.data 0.68 ms
29.10 16:44:07 == NET: qwerty ret: user.data { info => { city => Qwety, year => 123, email => qwrtty }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
29.10 16:44:11 ++ NET: qwerty req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 16:44:11 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 16:44:11 == NET: qwerty ret: user.check { type => user.check, errorCode => ok, reqType => tournament.getAvailableTournament }
29.10 16:44:11 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-29-10 16:50, startdate => 2016-29-10 16:50 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 16:44:11 TIME: tournament.getAvailableTournament 5.99 ms
29.10 16:44:11 == NET: qwerty ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-29-10 16:50, startdate => 2016-29-10 16:50 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 16:44:11 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:44:11 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:44:11 TIME: user.ping 0.28 ms
29.10 16:44:11 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:44:12 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1477748645, lastLoginDate => 303, lastLoadDate => 1030 } }}, type => user, unlock => false, id => 104, _type => core/cache.update }
29.10 16:44:12 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 16:44:13 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 16:44:13 == NET: qwerty ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:44:13 TIME: user.ping 0.23 ms
29.10 16:44:13 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:44:14 ++ NET: qwerty req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
29.10 16:44:14 == NET: qwerty ret: user.check { type => user.check, errorCode => ok, reqType => tournament.addUsers }
29.10 16:44:14 ->>-: vdl/cache.tournament.addUsers { userId => 104, tournament => 1, _type => vdl/cache.tournament.addUsers }
29.10 16:44:14 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 16:44:14 TIME: tournament.addUsers 0.45 ms
29.10 16:44:14 == NET: qwerty ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 16:44:14 ++ NET: qwerty req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 16:44:14 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 16:44:14 == NET: qwerty ret: user.check { type => user.check, errorCode => ok, reqType => tournament.getAvailableTournament }
29.10 16:44:14 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 }], battleActive => null, rounddate => 2016-29-10 16:50, startdate => 2016-29-10 16:50 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 16:44:14 TIME: tournament.getAvailableTournament 1.97 ms
29.10 16:44:14 == NET: qwerty ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 }], battleActive => null, rounddate => 2016-29-10 16:50, startdate => 2016-29-10 16:50 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 16:44:18 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:44:18 TIME: user.ping 0.24 ms
29.10 16:44:18 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:44:18 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:44:25 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:44:25 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:44:25 TIME: user.ping 0.14 ms
29.10 16:44:25 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:44:27 TIMER: Check auto-disconnect...
29.10 16:44:27 STATS: vdl.0 cache, locks:4
29.10 16:44:32 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:44:32 TIME: user.ping 0.1 ms
29.10 16:44:32 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:44:32 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:44:35 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 16:44:35 == NET: qwerty ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:44:35 TIME: user.ping 0.22 ms
29.10 16:44:35 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:44:40 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:44:40 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:44:40 TIME: user.ping 1.13 ms
29.10 16:44:40 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:44:47 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:44:47 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:44:47 TIME: user.ping 0.29 ms
29.10 16:44:47 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:44:54 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:44:54 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:44:54 TIME: user.ping 0.3 ms
29.10 16:44:54 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:45:01 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:45:01 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:45:01 TIME: user.ping 0.31 ms
29.10 16:45:01 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:45:08 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:45:08 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:45:08 TIME: user.ping 0.26 ms
29.10 16:45:08 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:45:15 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:45:15 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:45:15 TIME: user.ping 0.11 ms
29.10 16:45:15 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:45:22 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:45:22 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:45:22 TIME: user.ping 0.29 ms
29.10 16:45:22 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:45:27 TIMER: Check auto-disconnect...
29.10 16:45:27 STATS: vdl.0 cache, locks:4
29.10 16:45:29 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:45:29 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:45:29 TIME: user.ping 0.12 ms
29.10 16:45:29 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:45:36 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:45:36 TIME: user.ping 0.27 ms
29.10 16:45:36 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:45:36 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:45:43 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:45:43 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:45:43 TIME: user.ping 0.26 ms
29.10 16:45:43 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:45:50 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:45:50 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:45:50 TIME: user.ping 0.9 ms
29.10 16:45:50 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:45:57 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:45:57 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:45:57 TIME: user.ping 0.86 ms
29.10 16:45:57 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:46:04 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:46:04 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:46:04 TIME: user.ping 0.21 ms
29.10 16:46:04 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:46:11 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:46:11 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:46:11 TIME: user.ping 0.23 ms
29.10 16:46:11 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:46:18 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:46:18 TIME: user.ping 0.1 ms
29.10 16:46:18 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:46:18 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:46:25 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:46:25 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:46:25 TIME: user.ping 0.28 ms
29.10 16:46:25 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:46:27 TIMER: Check auto-disconnect...
29.10 16:46:27 STATS: vdl.0 cache, locks:4
29.10 16:46:32 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:46:32 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:46:32 TIME: user.ping 0.25 ms
29.10 16:46:32 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:46:40 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:46:40 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:46:40 TIME: user.ping 0.26 ms
29.10 16:46:40 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:46:47 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:46:47 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:46:47 TIME: user.ping 0.24 ms
29.10 16:46:47 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:46:54 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:46:54 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:46:54 TIME: user.ping 0.27 ms
29.10 16:46:54 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:47:01 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:47:01 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:47:01 TIME: user.ping 0.15 ms
29.10 16:47:01 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:47:08 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:47:08 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:47:08 TIME: user.ping 0.26 ms
29.10 16:47:08 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:47:15 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:47:15 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:47:15 TIME: user.ping 0.19 ms
29.10 16:47:15 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:47:22 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:47:22 TIME: user.ping 0.12 ms
29.10 16:47:22 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:47:22 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:47:27 TIMER: Check auto-disconnect...
29.10 16:47:27 STATS: vdl.0 cache, locks:4
29.10 16:47:29 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:47:29 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:47:29 TIME: user.ping 0.12 ms
29.10 16:47:29 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:47:36 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:47:36 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:47:36 TIME: user.ping 0.26 ms
29.10 16:47:36 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:47:43 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:47:43 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:47:43 TIME: user.ping 0.21 ms
29.10 16:47:43 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:47:50 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:47:50 TIME: user.ping 0.28 ms
29.10 16:47:50 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:47:50 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:47:57 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:47:57 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:47:57 TIME: user.ping 0.26 ms
29.10 16:47:57 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:48:04 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:48:04 TIME: user.ping 0.32 ms
29.10 16:48:04 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:48:04 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:48:11 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:48:11 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:48:11 TIME: user.ping 0.17 ms
29.10 16:48:11 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:48:18 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:48:18 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:48:18 TIME: user.ping 0.23 ms
29.10 16:48:18 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:48:25 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:48:25 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:48:25 TIME: user.ping 0.24 ms
29.10 16:48:25 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:48:27 TIMER: Check auto-disconnect...
29.10 16:48:27 NET: Client (name:qwerty conid:28076675 TCP) disconnected from vdl.0 (clients:1)
29.10 16:48:27 DB: SELECT id FROM battle WHERE firstid=104 OR secondid=104 AND finished <> true
29.10 16:48:27 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=104 OR secondid=104 AND finished <> true, _type => core/server.query }
29.10 16:48:27 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.10 16:48:27 STATS: vdl.0 cache connection, 41 calls, total 0.0534591674804688 sec spent, avg 1.3 ms
29.10 16:48:27 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 16:48:27 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
29.10 16:48:27 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 16:48:27 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 267
Called from modules/VDLBattleModule.hx line 280
Called from snipe/slave/Server.hx line 994
29.10 16:48:27 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 104, _type => core/cache.update }
29.10 16:48:27 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.10 16:48:27 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 104, _type => core/cache.update }
29.10 16:48:27 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 16:48:27 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 104, _type => core/user.logoutPost }
29.10 16:48:27 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 16:48:27 STATS: vdl.0 cache, locks:2
29.10 16:48:32 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:48:32 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:48:32 TIME: user.ping 0.28 ms
29.10 16:48:32 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:48:40 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:48:40 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:48:40 TIME: user.ping 0.11 ms
29.10 16:48:40 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:48:47 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:48:47 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:48:47 TIME: user.ping 0.14 ms
29.10 16:48:47 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:48:54 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:48:54 TIME: user.ping 0.3 ms
29.10 16:48:54 == NET: uid107 ret: user.check { type => user.check, errorCode => ok, reqType => user.ping }
29.10 16:48:54 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:49:16 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
29.10 16:49:16 -<<-: server.login ok
29.10 16:49:16 DB: SELECT * FROM LocalizationStrings
29.10 16:49:16 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:16 TIMER: Starting timer...
29.10 16:49:16 TIMER: Timer running...
29.10 16:49:16 DB: SELECT * FROM GameVars
29.10 16:49:16 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:16 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
29.10 16:49:16 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:16 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
29.10 16:49:16 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:16 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
29.10 16:49:16 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:16 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
29.10 16:49:16 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:16 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
29.10 16:49:16 -<<-: core/quest.getDaily ok
29.10 16:49:16 DB: SELECT * FROM UserAttributeTypes
29.10 16:49:16 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:16 DB: SELECT * FROM UserVariableTypes
29.10 16:49:16 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:16 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
29.10 16:49:16 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:16 DB: SELECT * FROM ItemGroups
29.10 16:49:16 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:16 DB: SELECT * FROM Bundles ORDER BY ID
29.10 16:49:16 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:16 DB: SELECT * FROM BundleItems ORDER BY ID
29.10 16:49:16 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:16 SHOP: loading items...
29.10 16:49:16 ->>-: core/shop.getList { _type => core/shop.getList }
29.10 16:49:16 -<<-: core/shop.getList ok
29.10 16:49:16 SHOP: 0 items loaded (0 sec)
29.10 16:49:16 DB: SELECT * FROM EffectAttributeTypes
29.10 16:49:16 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:16 DB: SELECT * FROM Effects
29.10 16:49:16 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:16 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 16:49:16 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:16 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 16:49:16 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:16 DB: SELECT * FROM Badges
29.10 16:49:16 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
29.10 16:49:16 -<<-: core/server.query ok
29.10 16:49:22 NET: Client (conid:92700504) connected to vdl.0 (clients:1)
29.10 16:49:24 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:49:24 TRACE: User not logon yet.
29.10 16:49:31 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:49:31 TRACE: User not logon yet.
29.10 16:49:38 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:49:38 TRACE: User not logon yet.
29.10 16:49:40 NET: Client (conid:24456201) connected to vdl.0 (clients:2)
29.10 16:49:42 ++ NET: null req: user.login { password => qwerty, name => qwerty, messageType => user.login }
29.10 16:49:42 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'qwerty' AND Password = E'qwerty'
29.10 16:49:42 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'qwerty' AND Password = E'qwerty', _type => core/server.query }
29.10 16:49:42 -<<-: core/server.query ok
29.10 16:49:42 ->>-: core/user.isOnlineID { id => 104, _type => core/user.isOnlineID }
29.10 16:49:42 -<<-: core/user.isOnlineID ok
29.10 16:49:42 ->>-: core/cache.get { type => user, v => -1, id => 104, _type => core/cache.get }
29.10 16:49:42 -<<-: core/cache.get ok
29.10 16:49:42 ->>-: core/cache.get { type => questdata, v => -1, id => 104, _type => core/cache.get }
29.10 16:49:42 -<<-: core/cache.get ok
29.10 16:49:42 NET: Client login (conid:24456201, id:104, name:qwerty)
29.10 16:49:42 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 104, _type => core/user.loginPost, ipAddr => 172.16.20.121 }
29.10 16:49:42 -<<-: core/user.loginPost null
29.10 16:49:42 == NET: null ret: user.join { name => qwerty, type => user.join }
29.10 16:49:42 == NET: qwerty ret: user.login { name => qwerty, type => user.login, errorCode => ok, id => 104 }
29.10 16:49:42 == NET: qwerty ret: user.join { name => null, type => user.join }
29.10 16:49:42 == NET: qwerty ret: user.join { name => qwerty, type => user.join }
29.10 16:49:45 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:49:45 TRACE: User not logon yet.
29.10 16:49:45 ++ NET: qwerty req: user.data { messageType => user.data }
29.10 16:49:45 ->>-: vdl/cache.user.getData { userId => 104, _type => vdl/cache.user.getData }
29.10 16:49:45 -<<-: vdl/cache.user.getData { info => { city => Qwety, year => 123, email => qwrtty }, errorCode => ok, _type => vdl/cache.user.getData }
29.10 16:49:45 TIME: user.data 0.43 ms
29.10 16:49:45 == NET: qwerty ret: user.data { info => { city => Qwety, year => 123, email => qwrtty }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
29.10 16:49:48 ++ NET: qwerty req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 16:49:48 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 16:49:48 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:00 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 16:49:48 TIME: tournament.getAvailableTournament 5.9 ms
29.10 16:49:48 == NET: qwerty ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:00 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 16:49:51 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 16:49:51 TIME: user.ping 0.15 ms
29.10 16:49:51 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:49:51 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 104, _type => core/cache.update }
29.10 16:49:51 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 16:49:52 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:49:52 TRACE: User not logon yet.
29.10 16:49:59 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:49:59 TRACE: User not logon yet.
29.10 16:50:06 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:50:06 TRACE: User not logon yet.
29.10 16:50:08 ++ NET: qwerty req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 16:50:08 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 16:50:08 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:00 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 16:50:08 TIME: tournament.getAvailableTournament 3.22 ms
29.10 16:50:08 == NET: qwerty ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:00 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 16:50:13 ++ NET: qwerty req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
29.10 16:50:13 ->>-: vdl/cache.tournament.addUsers { userId => 104, tournament => 1, _type => vdl/cache.tournament.addUsers }
29.10 16:50:13 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 16:50:13 TIME: tournament.addUsers 0.65 ms
29.10 16:50:13 == NET: qwerty ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 16:50:13 ++ NET: qwerty req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 16:50:13 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 16:50:13 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:00 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 16:50:13 TIME: tournament.getAvailableTournament 2.19 ms
29.10 16:50:13 == NET: qwerty ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:00 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 16:50:13 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:50:13 TRACE: User not logon yet.
29.10 16:50:14 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 16:50:14 TIME: user.ping 0.15 ms
29.10 16:50:14 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:50:16 TIMER: Check auto-disconnect...
29.10 16:50:16 STATS: vdl.0 cache, locks:2
29.10 16:50:20 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:50:20 TRACE: User not logon yet.
29.10 16:50:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:50:27 TRACE: User not logon yet.
29.10 16:50:34 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:50:34 TRACE: User not logon yet.
29.10 16:50:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:50:41 TRACE: User not logon yet.
29.10 16:50:48 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 16:50:48 TRACE: User not logon yet.
29.10 16:50:55 NET: Client (name:null conid:92700504 TCP) disconnected from vdl.0 (clients:1)
29.10 16:51:01 NET: Client (conid:85149874) connected to vdl.0 (clients:2)
29.10 16:51:02 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
29.10 16:51:02 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
29.10 16:51:02 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
29.10 16:51:02 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
29.10 16:51:02 STATS: vdl.0 cache connection, 32 calls, total 0.0446269512176514 sec spent, avg 1.39 ms
29.10 16:51:02 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
29.10 16:51:02 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.10 16:51:02 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
29.10 16:51:02 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477748429, lastLoginDate => 303, lastLoadDate => 1030 }, effects => { list => [] } }}, version => 0, id => 107 } }
29.10 16:51:02 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
29.10 16:51:02 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
29.10 16:51:02 NET: Client login (conid:85149874, id:107, name:uid107)
29.10 16:51:02 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
29.10 16:51:02 -<<-: core/user.loginPost { _type => core/user.loginPost }
29.10 16:51:02 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
29.10 16:51:02 == NET: qwerty ret: user.join { name => uid107, type => user.join }
29.10 16:51:02 == NET: uid107 ret: user.join { name => qwerty, type => user.join }
29.10 16:51:02 == NET: uid107 ret: user.join { name => uid107, type => user.join }
29.10 16:51:05 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:51:05 TIME: user.ping 0.18 ms
29.10 16:51:05 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:51:11 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
29.10 16:51:11 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 16:51:16 TIMER: Check auto-disconnect...
29.10 16:51:16 STATS: vdl.0 cache, locks:4
29.10 16:51:16 TIMER: Check auto-disconnect...
29.10 16:51:16 STATS: vdl.0 cache, locks:4
29.10 16:52:50 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:52:50 TIME: user.ping 0.16 ms
29.10 16:52:50 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:52:57 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 16:52:57 TIME: user.ping 0.14 ms
29.10 16:52:57 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 16:53:16 TIMER: Check auto-disconnect...
29.10 16:53:16 NET: Client (name:qwerty conid:24456201 TCP) disconnected from vdl.0 (clients:1)
29.10 16:53:16 DB: SELECT id FROM battle WHERE firstid=104 OR secondid=104 AND finished <> true
29.10 16:53:16 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=104 OR secondid=104 AND finished <> true, _type => core/server.query }
29.10 16:53:16 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.10 16:53:16 STATS: vdl.0 cache connection, 38 calls, total 0.0531637668609619 sec spent, avg 1.4 ms
29.10 16:53:16 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 16:53:16 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
29.10 16:53:16 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 16:53:16 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 267
Called from modules/VDLBattleModule.hx line 280
Called from snipe/slave/Server.hx line 994
29.10 16:53:16 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 104, _type => core/cache.update }
29.10 16:53:16 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.10 16:53:16 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 104, _type => core/cache.update }
29.10 16:53:16 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 16:53:16 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 104, _type => core/user.logoutPost }
29.10 16:53:16 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 16:53:16 STATS: vdl.0 cache, locks:2
29.10 16:53:16 TIMER: Check auto-disconnect...
29.10 16:53:16 STATS: vdl.0 cache, locks:2
29.10 16:53:16 TIMER: Check auto-disconnect...
29.10 16:53:16 STATS: vdl.0 cache, locks:2
29.10 16:53:16 TIMER: Check auto-disconnect...
29.10 16:53:16 NET: Client (name:uid107 conid:85149874 TCP) disconnected from vdl.0 (clients:0)
29.10 16:53:16 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
29.10 16:53:16 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
29.10 16:53:16 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.10 16:53:16 STATS: vdl.0 cache connection, 43 calls, total 0.0586700439453125 sec spent, avg 1.36 ms
29.10 16:53:16 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 16:53:16 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
29.10 16:53:16 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 16:53:16 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 267
Called from modules/VDLBattleModule.hx line 280
Called from snipe/slave/Server.hx line 994
29.10 16:53:16 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
29.10 16:53:16 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.10 16:53:16 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
29.10 16:53:16 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 16:53:16 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
29.10 16:53:16 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 16:53:16 STATS: vdl.0 cache, locks:0
29.10 16:53:16 TIMER: Check auto-disconnect...
29.10 16:53:16 STATS: vdl.0 cache, locks:0
29.10 16:53:16 TIMER: Check auto-disconnect...
29.10 16:53:16 STATS: vdl.0 cache, locks:0
29.10 16:53:16 TIMER: Check auto-disconnect...
29.10 16:53:16 STATS: vdl.0 cache, locks:0
29.10 16:53:16 TIMER: Check auto-disconnect...
29.10 16:53:16 STATS: vdl.0 cache, locks:0
29.10 16:53:16 TIMER: Check auto-disconnect...
29.10 16:53:16 STATS: vdl.0 cache, locks:0
