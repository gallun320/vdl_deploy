31.08 13:55:02 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 13:55:02 -<<-: server.login ok
31.08 13:55:02 DB: SELECT * FROM LocalizationStrings
31.08 13:55:02 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 TIMER: Starting timer...
31.08 13:55:02 TIMER: Timer running...
31.08 13:55:02 DB: SELECT * FROM GameVars
31.08 13:55:02 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 13:55:02 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 13:55:02 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 13:55:02 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 13:55:02 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 13:55:02 -<<-: core/quest.getDaily ok
31.08 13:55:02 DB: SELECT * FROM UserAttributeTypes
31.08 13:55:02 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 DB: SELECT * FROM UserVariableTypes
31.08 13:55:02 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 13:55:02 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 DB: SELECT * FROM ItemGroups
31.08 13:55:02 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 DB: SELECT * FROM Bundles ORDER BY ID
31.08 13:55:02 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 13:55:02 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 SHOP: loading items...
31.08 13:55:02 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 13:55:02 -<<-: core/shop.getList ok
31.08 13:55:02 SHOP: 0 items loaded (0 sec)
31.08 13:55:02 DB: SELECT * FROM EffectAttributeTypes
31.08 13:55:02 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 DB: SELECT * FROM Effects
31.08 13:55:02 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 13:55:02 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 13:55:02 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 DB: SELECT * FROM Badges
31.08 13:55:02 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 13:55:02 -<<-: core/server.query ok
31.08 13:55:02 TIMER: Check auto-disconnect...
31.08 13:55:02 STATS: vdl.0 cache, locks:0
31.08 13:55:02 TIMER: Check auto-disconnect...
31.08 13:55:02 STATS: vdl.0 cache, locks:0
31.08 13:55:02 TIMER: Check auto-disconnect...
31.08 13:55:02 STATS: vdl.0 cache, locks:0
31.08 13:55:02 TIMER: Check auto-disconnect...
31.08 13:55:02 STATS: vdl.0 cache, locks:0
31.08 13:55:02 TIMER: Check auto-disconnect...
31.08 13:55:02 STATS: vdl.0 cache, locks:0
31.08 13:55:02 TIMER: Check auto-disconnect...
31.08 13:55:02 STATS: vdl.0 cache, locks:0
31.08 13:55:02 TIMER: Check auto-disconnect...
31.08 13:55:02 STATS: vdl.0 cache, locks:0
31.08 13:55:02 TIMER: Check auto-disconnect...
31.08 13:55:02 STATS: vdl.0 cache, locks:0
31.08 13:55:02 TIMER: Check auto-disconnect...
