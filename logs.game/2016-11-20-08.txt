20.11 08:00:08 TIMER: Check auto-disconnect...
20.11 08:00:12 STATS: vdl.0 cache, locks:2
20.11 08:00:13 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:00:13 TIME: user.ping 0.14 ms
20.11 08:00:13 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:00:37 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:00:37 TIME: user.ping 0.33 ms
20.11 08:00:37 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:01:00 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:01:00 TIME: user.ping 0.1 ms
20.11 08:01:00 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:01:08 TIMER: Check auto-disconnect...
20.11 08:01:12 STATS: vdl.0 cache, locks:2
20.11 08:01:23 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:01:23 TIME: user.ping 0.14 ms
20.11 08:01:23 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:02:08 TIMER: Check auto-disconnect...
20.11 08:02:12 STATS: vdl.0 cache, locks:2
20.11 08:03:08 TIMER: Check auto-disconnect...
20.11 08:03:12 STATS: vdl.0 cache, locks:2
20.11 08:03:37 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:03:37 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:03:37 TIME: user.ping 0.13 ms
20.11 08:04:01 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:04:01 TIME: user.ping 0.35 ms
20.11 08:04:01 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:04:08 TIMER: Check auto-disconnect...
20.11 08:04:12 STATS: vdl.0 cache, locks:2
20.11 08:05:08 TIMER: Check auto-disconnect...
20.11 08:05:12 STATS: vdl.0 cache, locks:2
20.11 08:06:08 TIMER: Check auto-disconnect...
20.11 08:06:12 STATS: vdl.0 cache, locks:2
20.11 08:07:08 TIMER: Check auto-disconnect...
20.11 08:07:12 STATS: vdl.0 cache, locks:2
20.11 08:07:20 NET: Client (name:uid11 conid:43065749 TCP) disconnected from vdl.0 (clients:0)
20.11 08:07:20 DB: SELECT id FROM battle WHERE firstid=11 OR secondid=11 AND finished <> true
20.11 08:07:20 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=11 OR secondid=11 AND finished <> true, _type => core/server.query }
20.11 08:07:20 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.11 08:07:20 STATS: vdl.0 cache connection, 97 calls, total 0.0592775344848633 sec spent, avg 0.61 ms
20.11 08:07:20 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.11 08:07:20 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
20.11 08:07:20 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.11 08:07:20 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 1009
20.11 08:07:20 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 11, _type => core/cache.update }
20.11 08:07:20 -<<-: core/cache.update { errorCode => ok, version => 4, _type => core/cache.update }
20.11 08:07:20 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 11, _type => core/cache.update }
20.11 08:07:20 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
20.11 08:07:20 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 11, _type => core/user.logoutPost }
20.11 08:07:20 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.11 08:07:29 NET: Client (conid:73048775) connected to vdl.0 (clients:1)
20.11 08:07:29 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE= }
20.11 08:07:29 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid11' AND Password = 'uid11'
20.11 08:07:29 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid11' AND Password = 'uid11', _type => core/server.query }
20.11 08:07:29 -<<-: core/server.query { list => {{ name => uid11, networkid => , isbanned => false, id => 11 }}, errorCode => ok, _type => core/server.query }
20.11 08:07:29 ->>-: core/user.isOnlineID { id => 11, _type => core/user.isOnlineID }
20.11 08:07:29 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.11 08:07:29 ->>-: core/cache.get { type => user, v => -1, id => 11, _type => core/cache.get }
20.11 08:07:29 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid11, deleted => false, year => null, email => null, networktype =>   , password => uid11, isbanned => false, regdate => 2016-11-13 20:03:37.670616+00, city => , language => en, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479627940, lastLoginDate => 325, lastLoadDate => 1121 }, effects => { list => [] } }}, version => 4, id => 11 } }
20.11 08:07:29 ->>-: core/cache.get { type => questdata, v => -1, id => 11, _type => core/cache.get }
20.11 08:07:29 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 2, id => 11 } }
20.11 08:07:29 NET: Client login (conid:73048775, id:11, name:uid11)
20.11 08:07:29 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 11, _type => core/user.loginPost, ipAddr => 178.204.61.159 }
20.11 08:07:29 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.11 08:07:29 DB: SELECT token FROM tokens WHERE userid = 11
20.11 08:07:29 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 11, _type => core/server.query }
20.11 08:07:29 -<<-: core/server.query { list => {{ token => 2bc82f2c4a9116753552e63ed98b0bb2 }, { token => 85b64b23d67db655059a0afccd9e81c7 }}, errorCode => ok, _type => core/server.query }
20.11 08:07:29 == NET: uid11 ret: user.login { name => uid11, type => user.login, errorCode => ok, id => 11, token => 2bc82f2c4a9116753552e63ed98b0bb2 }
20.11 08:07:29 == NET: uid11 ret: user.join { name => uid11, type => user.join }
20.11 08:07:33 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:07:33 TIME: user.ping 0.15 ms
20.11 08:07:33 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:07:37 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 11, _type => core/cache.update }
20.11 08:07:37 -<<-: core/cache.update { errorCode => ok, version => 5, _type => core/cache.update }
20.11 08:07:57 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:07:57 TIME: user.ping 0.12 ms
20.11 08:07:57 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:08:08 TIMER: Check auto-disconnect...
20.11 08:08:12 STATS: vdl.0 cache, locks:2
20.11 08:08:21 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:08:21 TIME: user.ping 0.11 ms
20.11 08:08:21 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:08:29 NET: Client (name:uid11 conid:73048775 TCP) disconnected from vdl.0 (clients:0)
20.11 08:08:29 DB: SELECT id FROM battle WHERE firstid=11 OR secondid=11 AND finished <> true
20.11 08:08:29 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=11 OR secondid=11 AND finished <> true, _type => core/server.query }
20.11 08:08:29 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.11 08:08:29 STATS: vdl.0 cache connection, 109 calls, total 0.0647678375244141 sec spent, avg 0.59 ms
20.11 08:08:29 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.11 08:08:29 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
20.11 08:08:29 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.11 08:08:29 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 1009
20.11 08:08:29 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 11, _type => core/cache.update }
20.11 08:08:29 -<<-: core/cache.update { errorCode => ok, version => 6, _type => core/cache.update }
20.11 08:08:29 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 11, _type => core/cache.update }
20.11 08:08:29 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
20.11 08:08:29 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 11, _type => core/user.logoutPost }
20.11 08:08:29 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.11 08:09:08 TIMER: Check auto-disconnect...
20.11 08:09:12 STATS: vdl.0 cache, locks:0
20.11 08:10:06 NET: Client (conid:20063682) connected to vdl.0 (clients:1)
20.11 08:10:07 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE= }
20.11 08:10:07 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid11' AND Password = 'uid11'
20.11 08:10:07 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid11' AND Password = 'uid11', _type => core/server.query }
20.11 08:10:07 -<<-: core/server.query { list => {{ name => uid11, networkid => , isbanned => false, id => 11 }}, errorCode => ok, _type => core/server.query }
20.11 08:10:07 STATS: vdl.0 cache connection, 114 calls, total 0.068286657333374 sec spent, avg 0.6 ms
20.11 08:10:07 ->>-: core/user.isOnlineID { id => 11, _type => core/user.isOnlineID }
20.11 08:10:07 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.11 08:10:07 ->>-: core/cache.get { type => user, v => -1, id => 11, _type => core/cache.get }
20.11 08:10:07 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid11, deleted => false, year => null, email => null, networktype =>   , password => uid11, isbanned => false, regdate => 2016-11-13 20:03:37.670616+00, city => , language => en, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479627940, lastLoginDate => 325, lastLoadDate => 1121 }, effects => { list => [] } }}, version => 0, id => 11 } }
20.11 08:10:07 ->>-: core/cache.get { type => questdata, v => -1, id => 11, _type => core/cache.get }
20.11 08:10:07 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 11 } }
20.11 08:10:07 NET: Client login (conid:20063682, id:11, name:uid11)
20.11 08:10:07 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 11, _type => core/user.loginPost, ipAddr => 178.204.61.159 }
20.11 08:10:07 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.11 08:10:07 DB: SELECT token FROM tokens WHERE userid = 11
20.11 08:10:07 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 11, _type => core/server.query }
20.11 08:10:07 -<<-: core/server.query { list => {{ token => 2bc82f2c4a9116753552e63ed98b0bb2 }, { token => 85b64b23d67db655059a0afccd9e81c7 }}, errorCode => ok, _type => core/server.query }
20.11 08:10:07 == NET: uid11 ret: user.login { name => uid11, type => user.login, errorCode => ok, id => 11, token => 2bc82f2c4a9116753552e63ed98b0bb2 }
20.11 08:10:07 == NET: uid11 ret: user.join { name => uid11, type => user.join }
20.11 08:10:08 TIMER: Check auto-disconnect...
20.11 08:10:10 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:10:10 TIME: user.ping 0.14 ms
20.11 08:10:10 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:10:12 STATS: vdl.0 cache, locks:2
20.11 08:10:12 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 11, _type => core/cache.update }
20.11 08:10:12 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.11 08:10:33 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:10:33 TIME: user.ping 0.12 ms
20.11 08:10:33 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:10:56 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:10:56 TIME: user.ping 0.2 ms
20.11 08:10:56 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:11:08 TIMER: Check auto-disconnect...
20.11 08:11:12 STATS: vdl.0 cache, locks:2
20.11 08:11:20 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:11:20 TIME: user.ping 0.14 ms
20.11 08:11:20 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:11:43 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:11:43 TIME: user.ping 0.12 ms
20.11 08:11:43 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:12:05 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:12:05 TIME: user.ping 0.14 ms
20.11 08:12:05 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:12:08 TIMER: Check auto-disconnect...
20.11 08:12:12 STATS: vdl.0 cache, locks:2
20.11 08:12:13 NET: Client (name:uid11 conid:20063682 TCP) disconnected from vdl.0 (clients:0)
20.11 08:12:13 DB: SELECT id FROM battle WHERE firstid=11 OR secondid=11 AND finished <> true
20.11 08:12:13 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=11 OR secondid=11 AND finished <> true, _type => core/server.query }
20.11 08:12:13 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.11 08:12:13 STATS: vdl.0 cache connection, 121 calls, total 0.0719687938690186 sec spent, avg 0.59 ms
20.11 08:12:13 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.11 08:12:13 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
20.11 08:12:13 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.11 08:12:13 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 1009
20.11 08:12:13 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 11, _type => core/cache.update }
20.11 08:12:13 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
20.11 08:12:13 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 11, _type => core/cache.update }
20.11 08:12:13 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.11 08:12:13 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 11, _type => core/user.logoutPost }
20.11 08:12:13 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.11 08:12:52 NET: Client (conid:8445731) connected to vdl.0 (clients:1)
20.11 08:12:52 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE= }
20.11 08:12:52 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid11' AND Password = 'uid11'
20.11 08:12:52 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid11' AND Password = 'uid11', _type => core/server.query }
20.11 08:12:52 -<<-: core/server.query { list => {{ name => uid11, networkid => , isbanned => false, id => 11 }}, errorCode => ok, _type => core/server.query }
20.11 08:12:52 ->>-: core/user.isOnlineID { id => 11, _type => core/user.isOnlineID }
20.11 08:12:52 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.11 08:12:52 ->>-: core/cache.get { type => user, v => -1, id => 11, _type => core/cache.get }
20.11 08:12:52 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid11, deleted => false, year => null, email => null, networktype =>   , password => uid11, isbanned => false, regdate => 2016-11-13 20:03:37.670616+00, city => , language => en, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479627940, lastLoginDate => 325, lastLoadDate => 1121 }, effects => { list => [] } }}, version => 0, id => 11 } }
20.11 08:12:52 ->>-: core/cache.get { type => questdata, v => -1, id => 11, _type => core/cache.get }
20.11 08:12:52 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 11 } }
20.11 08:12:52 NET: Client login (conid:8445731, id:11, name:uid11)
20.11 08:12:52 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 11, _type => core/user.loginPost, ipAddr => 178.204.61.159 }
20.11 08:12:52 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.11 08:12:52 DB: SELECT token FROM tokens WHERE userid = 11
20.11 08:12:52 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 11, _type => core/server.query }
20.11 08:12:52 -<<-: core/server.query { list => {{ token => 2bc82f2c4a9116753552e63ed98b0bb2 }, { token => 85b64b23d67db655059a0afccd9e81c7 }}, errorCode => ok, _type => core/server.query }
20.11 08:12:52 == NET: uid11 ret: user.login { name => uid11, type => user.login, errorCode => ok, id => 11, token => 2bc82f2c4a9116753552e63ed98b0bb2 }
20.11 08:12:52 == NET: uid11 ret: user.join { name => uid11, type => user.join }
20.11 08:12:56 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:12:56 TIME: user.ping 0.13 ms
20.11 08:12:56 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:13:02 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 11, _type => core/cache.update }
20.11 08:13:02 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.11 08:13:08 TIMER: Check auto-disconnect...
20.11 08:13:12 STATS: vdl.0 cache, locks:2
20.11 08:13:18 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:13:18 TIME: user.ping 0.13 ms
20.11 08:13:18 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:13:41 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:13:41 TIME: user.ping 0.15 ms
20.11 08:13:41 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:14:04 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:14:04 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:14:04 TIME: user.ping 0.39 ms
20.11 08:14:08 TIMER: Check auto-disconnect...
20.11 08:14:12 STATS: vdl.0 cache, locks:2
20.11 08:14:28 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:14:28 TIME: user.ping 0.13 ms
20.11 08:14:28 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:14:52 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:14:52 TIME: user.ping 0.11 ms
20.11 08:14:52 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:15:08 TIMER: Check auto-disconnect...
20.11 08:15:12 STATS: vdl.0 cache, locks:2
20.11 08:15:16 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:15:16 TIME: user.ping 0.13 ms
20.11 08:15:16 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:15:38 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:15:38 TIME: user.ping 0.14 ms
20.11 08:15:38 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:16:00 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:16:00 TIME: user.ping 0.12 ms
20.11 08:16:00 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:16:08 TIMER: Check auto-disconnect...
20.11 08:16:12 STATS: vdl.0 cache, locks:2
20.11 08:16:23 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:16:23 TIME: user.ping 0.18 ms
20.11 08:16:23 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:16:45 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:16:45 TIME: user.ping 0.17 ms
20.11 08:16:45 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:17:07 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:17:07 TIME: user.ping 0.13 ms
20.11 08:17:07 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:17:08 TIMER: Check auto-disconnect...
20.11 08:17:12 STATS: vdl.0 cache, locks:2
20.11 08:17:30 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:17:30 TIME: user.ping 0.12 ms
20.11 08:17:30 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:17:53 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:17:53 TIME: user.ping 0.13 ms
20.11 08:17:53 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:18:08 TIMER: Check auto-disconnect...
20.11 08:18:12 STATS: vdl.0 cache, locks:2
20.11 08:18:15 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:18:15 TIME: user.ping 0.21 ms
20.11 08:18:15 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:18:37 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:18:37 TIME: user.ping 0.13 ms
20.11 08:18:37 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:18:59 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:18:59 TIME: user.ping 0.12 ms
20.11 08:18:59 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:19:08 TIMER: Check auto-disconnect...
20.11 08:19:11 NET: Client (name:uid11 conid:8445731 TCP) disconnected from vdl.0 (clients:0)
20.11 08:19:11 DB: SELECT id FROM battle WHERE firstid=11 OR secondid=11 AND finished <> true
20.11 08:19:11 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=11 OR secondid=11 AND finished <> true, _type => core/server.query }
20.11 08:19:11 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.11 08:19:11 STATS: vdl.0 cache connection, 133 calls, total 0.0771918296813965 sec spent, avg 0.58 ms
20.11 08:19:11 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.11 08:19:11 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
20.11 08:19:11 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.11 08:19:11 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 1009
20.11 08:19:11 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 11, _type => core/cache.update }
20.11 08:19:11 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
20.11 08:19:11 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 11, _type => core/cache.update }
20.11 08:19:11 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.11 08:19:11 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 11, _type => core/user.logoutPost }
20.11 08:19:11 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.11 08:19:12 STATS: vdl.0 cache, locks:0
20.11 08:20:08 TIMER: Check auto-disconnect...
20.11 08:20:12 STATS: vdl.0 cache, locks:0
20.11 08:21:08 TIMER: Check auto-disconnect...
20.11 08:21:12 STATS: vdl.0 cache, locks:0
20.11 08:22:08 TIMER: Check auto-disconnect...
20.11 08:22:12 STATS: vdl.0 cache, locks:0
20.11 08:23:08 TIMER: Check auto-disconnect...
20.11 08:23:12 STATS: vdl.0 cache, locks:0
20.11 08:24:08 TIMER: Check auto-disconnect...
20.11 08:24:12 STATS: vdl.0 cache, locks:0
20.11 08:25:08 TIMER: Check auto-disconnect...
20.11 08:25:12 STATS: vdl.0 cache, locks:0
20.11 08:26:08 TIMER: Check auto-disconnect...
20.11 08:26:12 STATS: vdl.0 cache, locks:0
20.11 08:27:08 TIMER: Check auto-disconnect...
20.11 08:27:12 STATS: vdl.0 cache, locks:0
20.11 08:28:08 TIMER: Check auto-disconnect...
20.11 08:28:12 STATS: vdl.0 cache, locks:0
20.11 08:29:08 TIMER: Check auto-disconnect...
20.11 08:29:12 STATS: vdl.0 cache, locks:0
20.11 08:30:08 TIMER: Check auto-disconnect...
20.11 08:30:12 STATS: vdl.0 cache, locks:0
20.11 08:31:08 TIMER: Check auto-disconnect...
20.11 08:31:12 STATS: vdl.0 cache, locks:0
20.11 08:32:08 TIMER: Check auto-disconnect...
20.11 08:32:12 STATS: vdl.0 cache, locks:0
20.11 08:33:08 TIMER: Check auto-disconnect...
20.11 08:33:12 STATS: vdl.0 cache, locks:0
20.11 08:34:08 TIMER: Check auto-disconnect...
20.11 08:34:12 STATS: vdl.0 cache, locks:0
20.11 08:35:08 TIMER: Check auto-disconnect...
20.11 08:35:12 STATS: vdl.0 cache, locks:0
20.11 08:36:08 TIMER: Check auto-disconnect...
20.11 08:36:12 STATS: vdl.0 cache, locks:0
20.11 08:37:08 TIMER: Check auto-disconnect...
20.11 08:37:12 STATS: vdl.0 cache, locks:0
20.11 08:38:08 TIMER: Check auto-disconnect...
20.11 08:38:12 STATS: vdl.0 cache, locks:0
20.11 08:38:33 NET: Client (conid:86758627) connected to vdl.0 (clients:1)
20.11 08:38:33 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE= }
20.11 08:38:33 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid11' AND Password = 'uid11'
20.11 08:38:33 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid11' AND Password = 'uid11', _type => core/server.query }
20.11 08:38:33 -<<-: core/server.query { list => {{ name => uid11, networkid => , isbanned => false, id => 11 }}, errorCode => ok, _type => core/server.query }
20.11 08:38:33 STATS: vdl.0 cache connection, 138 calls, total 0.079413890838623 sec spent, avg 0.58 ms
20.11 08:38:33 ->>-: core/user.isOnlineID { id => 11, _type => core/user.isOnlineID }
20.11 08:38:33 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.11 08:38:33 ->>-: core/cache.get { type => user, v => -1, id => 11, _type => core/cache.get }
20.11 08:38:33 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid11, deleted => false, year => null, email => null, networktype =>   , password => uid11, isbanned => false, regdate => 2016-11-13 20:03:37.670616+00, city => , language => en, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479627940, lastLoginDate => 325, lastLoadDate => 1121 }, effects => { list => [] } }}, version => 0, id => 11 } }
20.11 08:38:33 ->>-: core/cache.get { type => questdata, v => -1, id => 11, _type => core/cache.get }
20.11 08:38:33 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 11 } }
20.11 08:38:33 NET: Client login (conid:86758627, id:11, name:uid11)
20.11 08:38:33 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 11, _type => core/user.loginPost, ipAddr => 178.204.61.159 }
20.11 08:38:33 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.11 08:38:33 DB: SELECT token FROM tokens WHERE userid = 11
20.11 08:38:33 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 11, _type => core/server.query }
20.11 08:38:33 -<<-: core/server.query { list => {{ token => 2bc82f2c4a9116753552e63ed98b0bb2 }, { token => 85b64b23d67db655059a0afccd9e81c7 }}, errorCode => ok, _type => core/server.query }
20.11 08:38:33 == NET: uid11 ret: user.login { name => uid11, type => user.login, errorCode => ok, id => 11, token => 2bc82f2c4a9116753552e63ed98b0bb2 }
20.11 08:38:33 == NET: uid11 ret: user.join { name => uid11, type => user.join }
20.11 08:38:37 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:38:37 TIME: user.ping 0.14 ms
20.11 08:38:37 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:38:42 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 11, _type => core/cache.update }
20.11 08:38:42 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.11 08:38:58 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:38:58 TIME: user.ping 0.12 ms
20.11 08:38:58 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:39:08 TIMER: Check auto-disconnect...
20.11 08:39:12 STATS: vdl.0 cache, locks:2
20.11 08:39:21 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:39:21 TIME: user.ping 0.16 ms
20.11 08:39:21 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:39:45 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:39:45 TIME: user.ping 0.12 ms
20.11 08:39:45 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:40:08 TIMER: Check auto-disconnect...
20.11 08:40:09 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:40:09 TIME: user.ping 0.12 ms
20.11 08:40:09 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:40:13 STATS: vdl.0 cache, locks:2
20.11 08:40:33 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:40:33 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:40:33 TIME: user.ping 0.15 ms
20.11 08:40:56 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:40:56 TIME: user.ping 0.1 ms
20.11 08:40:56 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:41:08 TIMER: Check auto-disconnect...
20.11 08:41:13 STATS: vdl.0 cache, locks:2
20.11 08:41:20 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:41:20 TIME: user.ping 0.11 ms
20.11 08:41:20 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:41:44 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:41:44 TIME: user.ping 0.14 ms
20.11 08:41:44 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:42:07 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:42:07 TIME: user.ping 0.1 ms
20.11 08:42:07 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:42:08 TIMER: Check auto-disconnect...
20.11 08:42:13 STATS: vdl.0 cache, locks:2
20.11 08:42:31 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:42:31 TIME: user.ping 0.13 ms
20.11 08:42:31 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:42:55 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:42:55 TIME: user.ping 0.12 ms
20.11 08:42:55 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:43:08 TIMER: Check auto-disconnect...
20.11 08:43:13 STATS: vdl.0 cache, locks:2
20.11 08:43:20 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:43:20 TIME: user.ping 0.11 ms
20.11 08:43:20 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:43:44 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:43:44 TIME: user.ping 0.1 ms
20.11 08:43:44 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:44:07 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:44:07 TIME: user.ping 0.13 ms
20.11 08:44:07 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:44:08 TIMER: Check auto-disconnect...
20.11 08:44:13 STATS: vdl.0 cache, locks:2
20.11 08:44:32 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:44:32 TIME: user.ping 0.13 ms
20.11 08:44:32 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:44:56 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:44:56 TIME: user.ping 0.12 ms
20.11 08:44:56 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:45:08 TIMER: Check auto-disconnect...
20.11 08:45:13 STATS: vdl.0 cache, locks:2
20.11 08:45:20 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:45:20 TIME: user.ping 0.14 ms
20.11 08:45:20 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:45:44 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:45:44 TIME: user.ping 0.13 ms
20.11 08:45:44 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:46:08 TIMER: Check auto-disconnect...
20.11 08:46:08 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:46:08 TIME: user.ping 0.14 ms
20.11 08:46:08 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:46:13 STATS: vdl.0 cache, locks:2
20.11 08:46:33 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:46:33 TIME: user.ping 0.13 ms
20.11 08:46:33 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:46:57 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:46:57 TIME: user.ping 0.14 ms
20.11 08:46:57 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:47:08 TIMER: Check auto-disconnect...
20.11 08:47:13 STATS: vdl.0 cache, locks:2
20.11 08:47:22 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:47:22 TIME: user.ping 0.3 ms
20.11 08:47:22 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:47:45 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:47:45 TIME: user.ping 0.13 ms
20.11 08:47:45 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:48:08 TIMER: Check auto-disconnect...
20.11 08:48:09 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:48:09 TIME: user.ping 0.13 ms
20.11 08:48:09 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:48:13 STATS: vdl.0 cache, locks:2
20.11 08:48:32 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:48:32 TIME: user.ping 0.13 ms
20.11 08:48:32 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:48:54 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:48:54 TIME: user.ping 0.15 ms
20.11 08:48:54 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:49:08 TIMER: Check auto-disconnect...
20.11 08:49:13 STATS: vdl.0 cache, locks:2
20.11 08:49:16 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:49:16 TIME: user.ping 0.14 ms
20.11 08:49:16 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:49:39 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:49:39 TIME: user.ping 0.16 ms
20.11 08:49:39 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:50:02 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:50:02 TIME: user.ping 0.16 ms
20.11 08:50:02 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:50:08 TIMER: Check auto-disconnect...
20.11 08:50:13 STATS: vdl.0 cache, locks:2
20.11 08:50:27 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:50:27 TIME: user.ping 0.19 ms
20.11 08:50:27 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:50:49 ++ NET: uid11 req: user.ping { messageType => user.ping, msg => ok }
20.11 08:50:49 TIME: user.ping 0.12 ms
20.11 08:50:49 == NET: uid11 ret: user.ping { type => user.ping, errorCode => ok }
20.11 08:51:08 TIMER: Check auto-disconnect...
20.11 08:51:13 STATS: vdl.0 cache, locks:2
20.11 08:52:08 TIMER: Check auto-disconnect...
20.11 08:52:13 STATS: vdl.0 cache, locks:2
20.11 08:53:08 TIMER: Check auto-disconnect...
20.11 08:53:13 STATS: vdl.0 cache, locks:2
20.11 08:54:08 TIMER: Check auto-disconnect...
20.11 08:54:13 STATS: vdl.0 cache, locks:2
20.11 08:55:08 TIMER: Check auto-disconnect...
20.11 08:55:13 STATS: vdl.0 cache, locks:2
20.11 08:56:08 TIMER: Check auto-disconnect...
20.11 08:56:13 STATS: vdl.0 cache, locks:2
20.11 08:57:08 TIMER: Check auto-disconnect...
20.11 08:57:13 STATS: vdl.0 cache, locks:2
20.11 08:58:08 TIMER: Check auto-disconnect...
20.11 08:58:13 STATS: vdl.0 cache, locks:2
20.11 08:59:08 TIMER: Check auto-disconnect...
20.11 08:59:13 STATS: vdl.0 cache, locks:2
