24.10 16:00:01 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:00:01 TIME: user.ping 0.15 ms
24.10 16:00:01 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:00:21 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:00:21 TIME: user.ping 0.21 ms
24.10 16:00:21 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:00:31 TIMER: Check auto-disconnect...
24.10 16:00:31 STATS: vdl.0 cache, locks:4
24.10 16:00:41 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:00:41 TIME: user.ping 0.19 ms
24.10 16:00:41 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:01:01 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:01:01 TIME: user.ping 0.43 ms
24.10 16:01:01 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:01:21 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:01:21 TIME: user.ping 0.18 ms
24.10 16:01:21 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:01:31 TIMER: Check auto-disconnect...
24.10 16:01:31 STATS: vdl.0 cache, locks:4
24.10 16:01:41 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:01:41 TIME: user.ping 0.18 ms
24.10 16:01:41 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:02:01 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:02:01 TIME: user.ping 0.14 ms
24.10 16:02:01 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:02:22 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:02:22 TIME: user.ping 0.17 ms
24.10 16:02:22 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:02:31 TIMER: Check auto-disconnect...
24.10 16:02:31 STATS: vdl.0 cache, locks:4
24.10 16:02:42 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:02:42 TIME: user.ping 0.22 ms
24.10 16:02:42 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:03:02 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:03:02 TIME: user.ping 0.14 ms
24.10 16:03:02 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:03:22 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:03:22 TIME: user.ping 0.2 ms
24.10 16:03:22 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:03:31 TIMER: Check auto-disconnect...
24.10 16:03:31 NET: Client (name:Aimer conid:63908586 TCP) disconnected from vdl.0 (clients:1)
24.10 16:03:31 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
24.10 16:03:31 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
24.10 16:03:31 -<<-: core/server.query { list => {{ id => 64 }}, errorCode => ok, _type => core/server.query }
24.10 16:03:31 STATS: vdl.0 cache connection, 35 calls, total 0.0775361061096191 sec spent, avg 2.22 ms
24.10 16:03:31 ->>-: vdl/cache.battle.infoRoom { roomId => 64, _type => vdl/cache.battle.infoRoom }
24.10 16:03:31 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 16:03:31 ->>-: vdl/cache.battle.deleteRoom { roomId => 64, _type => vdl/cache.battle.deleteRoom }
24.10 16:03:31 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
24.10 16:03:31 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
24.10 16:03:31 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
24.10 16:03:31 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
24.10 16:03:31 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 16:03:31 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
24.10 16:03:31 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
24.10 16:03:31 == NET: test1 ret: battle.end { type => battle.end }
24.10 16:03:31 STATS: vdl.0 cache, locks:2
24.10 16:03:32 -<<-: tournament.enemyEvent { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 16:03, id => 2, enemy.num => 2, battleId => 65, player => 1 }, _isNotify => true, id => 2, _type => tournament.enemyEvent }
24.10 16:03:32 == NET: test1 ret: tournament.enemy { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 16:03, id => 2, enemy.num => 2, battleId => 65, player => 1 }, type => tournament.enemy }
24.10 16:03:45 NET: Client (conid:5593600) connected to vdl.0 (clients:2)
24.10 16:03:45 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:03:45 TIME: user.ping 0.18 ms
24.10 16:03:45 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:03:47 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 16:03:47 TIME: user.ping 0.12 ms
24.10 16:03:47 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:03:54 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 16:03:54 TIME: user.ping 0.11 ms
24.10 16:03:54 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:04:01 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 16:04:01 TIME: user.ping 0.12 ms
24.10 16:04:01 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:04:08 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:04:08 TIME: user.ping 0.21 ms
24.10 16:04:08 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:04:08 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 16:04:08 TIME: user.ping 0.18 ms
24.10 16:04:08 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:04:16 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 16:04:16 TIME: user.ping 0.11 ms
24.10 16:04:16 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:04:23 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 16:04:23 TIME: user.ping 0.11 ms
24.10 16:04:23 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:04:30 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 16:04:30 TIME: user.ping 0.15 ms
24.10 16:04:30 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:04:31 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:04:31 TIME: user.ping 0.14 ms
24.10 16:04:31 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:04:31 TIMER: Check auto-disconnect...
24.10 16:04:32 STATS: vdl.0 cache, locks:2
24.10 16:04:38 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 16:04:38 TIME: user.ping 0.11 ms
24.10 16:04:38 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:04:53 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:04:53 TIME: user.ping 0.13 ms
24.10 16:04:53 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:05:16 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:05:16 TIME: user.ping 0.21 ms
24.10 16:05:16 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:05:31 TIMER: Check auto-disconnect...
24.10 16:05:32 STATS: vdl.0 cache, locks:2
24.10 16:05:38 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:05:38 TIME: user.ping 0.13 ms
24.10 16:05:38 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:06:01 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:06:01 TIME: user.ping 0.18 ms
24.10 16:06:01 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:06:24 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:06:24 TIME: user.ping 0.14 ms
24.10 16:06:24 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:06:31 TIMER: Check auto-disconnect...
24.10 16:06:32 STATS: vdl.0 cache, locks:2
24.10 16:06:47 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:06:47 TIME: user.ping 0.15 ms
24.10 16:06:47 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:07:09 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:07:09 TIME: user.ping 0.16 ms
24.10 16:07:09 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:07:31 TIMER: Check auto-disconnect...
24.10 16:07:32 STATS: vdl.0 cache, locks:2
24.10 16:07:32 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:07:32 TIME: user.ping 0.24 ms
24.10 16:07:32 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:07:55 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:07:55 TIME: user.ping 0.17 ms
24.10 16:07:55 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:08:17 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:08:17 TIME: user.ping 0.21 ms
24.10 16:08:17 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:08:31 TIMER: Check auto-disconnect...
24.10 16:08:31 NET: Client (name:null conid:5593600 TCP) disconnected from vdl.0 (clients:1)
24.10 16:08:32 STATS: vdl.0 cache, locks:2
24.10 16:08:40 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:08:40 TIME: user.ping 0.18 ms
24.10 16:08:40 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:09:03 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:09:03 TIME: user.ping 0.15 ms
24.10 16:09:03 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:09:26 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:09:26 TIME: user.ping 0.17 ms
24.10 16:09:26 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:09:31 TIMER: Check auto-disconnect...
24.10 16:09:32 STATS: vdl.0 cache, locks:2
24.10 16:09:48 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:09:48 TIME: user.ping 0.12 ms
24.10 16:09:48 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:10:11 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:10:11 TIME: user.ping 0.2 ms
24.10 16:10:11 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:10:31 TIMER: Check auto-disconnect...
24.10 16:10:32 STATS: vdl.0 cache, locks:2
24.10 16:10:34 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:10:34 TIME: user.ping 0.23 ms
24.10 16:10:34 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:10:57 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:10:57 TIME: user.ping 0.13 ms
24.10 16:10:57 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:11:19 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:11:19 TIME: user.ping 0.15 ms
24.10 16:11:19 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:11:31 TIMER: Check auto-disconnect...
24.10 16:11:32 STATS: vdl.0 cache, locks:2
24.10 16:11:42 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:11:42 TIME: user.ping 0.14 ms
24.10 16:11:42 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:12:05 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:12:05 TIME: user.ping 0.18 ms
24.10 16:12:05 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:12:27 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:12:27 TIME: user.ping 0.18 ms
24.10 16:12:27 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:12:31 TIMER: Check auto-disconnect...
24.10 16:12:32 STATS: vdl.0 cache, locks:2
24.10 16:12:50 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:12:50 TIME: user.ping 0.16 ms
24.10 16:12:50 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:13:13 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:13:13 TIME: user.ping 0.15 ms
24.10 16:13:13 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:13:31 TIMER: Check auto-disconnect...
24.10 16:13:32 STATS: vdl.0 cache, locks:2
24.10 16:14:31 TIMER: Check auto-disconnect...
24.10 16:14:32 STATS: vdl.0 cache, locks:2
24.10 16:15:31 TIMER: Check auto-disconnect...
24.10 16:15:32 STATS: vdl.0 cache, locks:2
24.10 16:15:44 NET: Client (conid:59857900) connected to vdl.0 (clients:2)
24.10 16:15:45 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
24.10 16:15:45 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
24.10 16:15:45 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
24.10 16:15:45 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
24.10 16:15:45 STATS: vdl.0 cache connection, 41 calls, total 0.0968227386474609 sec spent, avg 2.36 ms
24.10 16:15:45 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
24.10 16:15:45 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
24.10 16:15:45 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
24.10 16:15:45 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477308408, lastLoginDate => 298, lastLoadDate => 1025 }, effects => { list => [] } }}, version => 0, id => 76 } }
24.10 16:15:45 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
24.10 16:15:45 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 76 } }
24.10 16:15:45 NET: Client login (conid:59857900, id:76, name:Aimer)
24.10 16:15:45 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
24.10 16:15:45 -<<-: core/user.loginPost { _type => core/user.loginPost }
24.10 16:15:45 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
24.10 16:15:45 == NET: Aimer ret: user.join { name => test1, type => user.join }
24.10 16:15:45 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
24.10 16:15:45 == NET: test1 ret: user.join { name => Aimer, type => user.join }
24.10 16:15:47 ++ NET: Aimer req: user.data { messageType => user.data }
24.10 16:15:47 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
24.10 16:15:47 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:15:47 TIME: user.data 0.6 ms
24.10 16:15:47 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:15:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:15:49 TIME: user.ping 0.15 ms
24.10 16:15:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:15:51 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:15:51 TIME: user.ping 0.15 ms
24.10 16:15:51 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:15:52 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
24.10 16:15:52 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 16:15:52 ++ NET: test1 req: tournament.end { lose => 0, dateRound => 2016-24-10 16:03, winner => 0, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 2, player2 => 76, battleId => 65 }
24.10 16:15:53 NET: Client (name:test1 conid:33137851 TCP) disconnected from vdl.0 (clients:1)
24.10 16:15:53 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
24.10 16:15:53 -<<-: vdl/cache.tournament.getBattlesTournaments []
24.10 16:15:53 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
24.10 16:15:53 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [76,2] }
24.10 16:15:53 ->>-: core/user.sendTo { id => null, _type => core/user.sendTo, msg => { _type => battle.end } }
24.10 16:15:53 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
24.10 16:15:53 ->>-: vdl/cache.battle.finishRoom { roomId => 65, _type => vdl/cache.battle.finishRoom }
24.10 16:15:53 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
24.10 16:15:53 ->>-: vdl/cache.battle.deleteRoom { roomId => 65, _type => vdl/cache.battle.deleteRoom }
24.10 16:15:53 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
24.10 16:15:53 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [65] }
24.10 16:15:53 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
24.10 16:15:53 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [76,2], _type => vdl/cache.tournament.setUsersTournament }
24.10 16:15:53 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
24.10 16:15:53 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => null, round => 1, player1 => 2, player2 => 76 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid }
24.10 16:15:53 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => null, round => 1, player1 => 2, player2 => 76 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
24.10 16:15:53 ->>-: vdl/cache.tournament.addRound { dateRound => 2016-24-10 16:03, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound }
24.10 16:15:53 -<<-: vdl/cache.tournament.addRound { errorCode => _requestException, _type => vdl/cache.tournament.addRound }
24.10 16:15:53 TRACE: tournament.end : cacheRequest exception { dateRound => 2016-24-10 16:03, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound }
24.10 16:15:53 TRACE: tournament.end : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 397
Called from modules/VDLTournamentModule.hx line 370
Called from a C function
Called from modules/VDLTournamentModule.hx line 142
Called from modules/VDLTournamentModule.hx line 67
Called from snipe/slave/Server.hx line 1176
24.10 16:15:53 DB: SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true
24.10 16:15:53 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true, _type => core/server.query }
24.10 16:15:53 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
24.10 16:15:53 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 16:15:53 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
24.10 16:15:53 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 16:15:53 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
24.10 16:15:53 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
24.10 16:15:53 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
24.10 16:15:53 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
24.10 16:15:53 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 16:15:53 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
24.10 16:15:53 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
24.10 16:15:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:15:56 TIME: user.ping 0.14 ms
24.10 16:15:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:16:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:16:03 TIME: user.ping 0.13 ms
24.10 16:16:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:16:07 NET: Client (conid:9349068) connected to vdl.0 (clients:2)
24.10 16:16:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:16:11 TIME: user.ping 0.13 ms
24.10 16:16:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:16:12 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
24.10 16:16:12 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
24.10 16:16:12 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
24.10 16:16:12 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
24.10 16:16:12 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
24.10 16:16:12 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
24.10 16:16:12 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
24.10 16:16:12 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1477308461, lastLoginDate => 298, lastLoadDate => 1025 }, effects => { list => [] } }}, version => 0, id => 2 } }
24.10 16:16:12 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
24.10 16:16:12 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
24.10 16:16:12 NET: Client login (conid:9349068, id:2, name:test1)
24.10 16:16:12 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
24.10 16:16:12 -<<-: core/user.loginPost { _type => core/user.loginPost }
24.10 16:16:12 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
24.10 16:16:12 == NET: Aimer ret: user.join { name => test1, type => user.join }
24.10 16:16:12 == NET: test1 ret: user.join { name => Aimer, type => user.join }
24.10 16:16:12 == NET: test1 ret: user.join { name => test1, type => user.join }
24.10 16:16:18 ++ NET: test1 req: user.data { messageType => user.data }
24.10 16:16:18 ->>-: vdl/cache.user.getData { userId => 2, _type => vdl/cache.user.getData }
24.10 16:16:18 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:16:18 TIME: user.data 0.66 ms
24.10 16:16:18 == NET: test1 ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:16:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:16:18 TIME: user.ping 0.17 ms
24.10 16:16:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:16:22 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
24.10 16:16:22 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 16:16:23 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:16:23 TIME: user.ping 0.15 ms
24.10 16:16:23 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:16:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:16:25 TIME: user.ping 0.15 ms
24.10 16:16:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:16:31 TIMER: Check auto-disconnect...
24.10 16:16:32 STATS: vdl.0 cache, locks:4
24.10 16:16:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:16:33 TIME: user.ping 0.16 ms
24.10 16:16:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:16:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:16:40 TIME: user.ping 0.12 ms
24.10 16:16:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:16:43 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:16:43 TIME: user.ping 0.15 ms
24.10 16:16:43 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:16:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:16:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:16:47 TIME: user.ping 0.15 ms
24.10 16:16:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:16:54 TIME: user.ping 0.15 ms
24.10 16:16:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:17:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:17:02 TIME: user.ping 0.14 ms
24.10 16:17:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:17:03 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:17:03 TIME: user.ping 0.18 ms
24.10 16:17:03 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:17:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:17:09 TIME: user.ping 0.16 ms
24.10 16:17:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:17:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:17:16 TIME: user.ping 0.13 ms
24.10 16:17:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:17:23 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:17:23 TIME: user.ping 0.15 ms
24.10 16:17:23 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:17:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:17:23 TIME: user.ping 0.14 ms
24.10 16:17:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:17:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:17:30 TIME: user.ping 0.15 ms
24.10 16:17:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:17:31 TIMER: Check auto-disconnect...
24.10 16:17:32 STATS: vdl.0 cache, locks:4
24.10 16:17:32 -<<-: tournament.enemyEvent { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 16:17, id => 2, enemy.num => 2, battleId => 66, player => 1 }, _isNotify => true, id => 2, _type => tournament.enemyEvent }
24.10 16:17:32 -<<-: tournament.enemyEvent { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 16:17, id => 76, enemy.num => 1, battleId => 66, player => 2 }, _isNotify => true, id => 76, _type => tournament.enemyEvent }
24.10 16:17:32 == NET: test1 ret: tournament.enemy { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 16:17, id => 2, enemy.num => 2, battleId => 66, player => 1 }, type => tournament.enemy }
24.10 16:17:32 == NET: Aimer ret: tournament.enemy { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 16:17, id => 76, enemy.num => 1, battleId => 66, player => 2 }, type => tournament.enemy }
24.10 16:17:39 ++ NET: test1 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 66, name => throw, side => 2, dices => 434454, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 16:17:39 ->>-: vdl/cache.battle.infoRoom { roomId => 66, _type => vdl/cache.battle.infoRoom }
24.10 16:17:39 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 16:17:39 STATS: vdl.0 cache connection, 69 calls, total 0.131916761398315 sec spent, avg 1.91 ms
24.10 16:17:39 TIME: battle.sendtask 0.54 ms
24.10 16:17:39 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 16:17:39 == NET: Aimer ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 66, name => throw, side => 2, type => battle.task, dices => 434454, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 16:17:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:17:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:17:42 TIME: user.ping 0.16 ms
24.10 16:17:44 ++ NET: test1 req: battle.sendtask { dice => 5, from => (7.0, 3.0), roomId => 66, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (8.0, 3.0), diceID => 0 }
24.10 16:17:44 ->>-: vdl/cache.battle.infoRoom { roomId => 66, _type => vdl/cache.battle.infoRoom }
24.10 16:17:44 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 16:17:44 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 16:17:44 TIME: battle.sendtask 0.48 ms
24.10 16:17:44 == NET: Aimer ret: battle.task { dice => 5, from => (7.0, 3.0), roomId => 66, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (8.0, 3.0), diceID => 0 }
24.10 16:17:48 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:17:48 TIME: user.ping 0.17 ms
24.10 16:17:48 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:17:49 ++ NET: test1 req: tournament.end { lose => 2, dateRound => 2016-24-10 16:17, winner => 76, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 2, player2 => 76, battleId => 66 }
24.10 16:17:49 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
24.10 16:17:49 -<<-: vdl/cache.tournament.getBattlesTournaments [66]
24.10 16:17:49 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
24.10 16:17:49 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [76,2] }
24.10 16:17:49 ->>-: core/user.sendTo { id => null, _type => core/user.sendTo, msg => { _type => battle.end } }
24.10 16:17:49 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
24.10 16:17:49 ->>-: vdl/cache.battle.finishRoom { roomId => 66, _type => vdl/cache.battle.finishRoom }
24.10 16:17:49 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
24.10 16:17:49 ->>-: vdl/cache.battle.deleteRoom { roomId => 66, _type => vdl/cache.battle.deleteRoom }
24.10 16:17:49 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
24.10 16:17:49 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [66] }
24.10 16:17:49 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
24.10 16:17:49 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [76,2], _type => vdl/cache.tournament.setUsersTournament }
24.10 16:17:49 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
24.10 16:17:49 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => null, round => 1, player1 => 2, player2 => 76 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid }
24.10 16:17:49 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => null, round => 1, player1 => 2, player2 => 76 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
24.10 16:17:49 ->>-: vdl/cache.tournament.addRound { dateRound => 2016-24-10 16:17, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound }
24.10 16:17:49 -<<-: vdl/cache.tournament.addRound { errorCode => _requestException, _type => vdl/cache.tournament.addRound }
24.10 16:17:49 TRACE: tournament.end : cacheRequest exception { dateRound => 2016-24-10 16:17, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound }
24.10 16:17:49 TRACE: tournament.end : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 397
Called from modules/VDLTournamentModule.hx line 370
Called from a C function
Called from modules/VDLTournamentModule.hx line 142
Called from modules/VDLTournamentModule.hx line 67
Called from snipe/slave/Server.hx line 1176
24.10 16:17:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:17:53 TIME: user.ping 0.17 ms
24.10 16:17:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:18:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:18:04 TIME: user.ping 0.14 ms
24.10 16:18:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:18:08 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:18:08 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:18:08 TIME: user.ping 0.08 ms
24.10 16:18:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:18:14 TIME: user.ping 0.14 ms
24.10 16:18:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:18:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:18:25 TIME: user.ping 0.08 ms
24.10 16:18:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:18:28 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:18:28 TIME: user.ping 0.1 ms
24.10 16:18:28 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:18:31 TIMER: Check auto-disconnect...
24.10 16:18:32 STATS: vdl.0 cache, locks:4
24.10 16:18:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:18:36 TIME: user.ping 0.08 ms
24.10 16:18:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:18:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:18:47 TIME: user.ping 0.14 ms
24.10 16:18:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:18:48 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:18:48 TIME: user.ping 0.09 ms
24.10 16:18:48 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:18:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:18:58 TIME: user.ping 0.08 ms
24.10 16:18:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:19:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:19:09 TIME: user.ping 0.14 ms
24.10 16:19:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:19:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:19:20 TIME: user.ping 0.09 ms
24.10 16:19:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:19:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:19:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:19:30 TIME: user.ping 0.1 ms
24.10 16:19:31 TIMER: Check auto-disconnect...
24.10 16:19:32 STATS: vdl.0 cache, locks:4
24.10 16:19:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:19:41 TIME: user.ping 0.14 ms
24.10 16:19:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:19:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:19:52 TIME: user.ping 0.1 ms
24.10 16:19:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:20:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:20:03 TIME: user.ping 0.09 ms
24.10 16:20:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:20:22 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
24.10 16:20:22 -<<-: server.login ok
24.10 16:20:22 DB: SELECT * FROM LocalizationStrings
24.10 16:20:22 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:22 TIMER: Starting timer...
24.10 16:20:22 TIMER: Timer running...
24.10 16:20:22 DB: SELECT * FROM GameVars
24.10 16:20:22 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:22 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
24.10 16:20:22 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:22 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
24.10 16:20:22 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:22 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
24.10 16:20:22 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:22 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
24.10 16:20:22 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:22 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
24.10 16:20:22 -<<-: core/quest.getDaily ok
24.10 16:20:22 DB: SELECT * FROM UserAttributeTypes
24.10 16:20:22 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:22 DB: SELECT * FROM UserVariableTypes
24.10 16:20:22 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:22 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
24.10 16:20:22 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:22 DB: SELECT * FROM ItemGroups
24.10 16:20:22 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:22 DB: SELECT * FROM Bundles ORDER BY ID
24.10 16:20:22 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:22 DB: SELECT * FROM BundleItems ORDER BY ID
24.10 16:20:22 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:22 SHOP: loading items...
24.10 16:20:22 ->>-: core/shop.getList { _type => core/shop.getList }
24.10 16:20:22 -<<-: core/shop.getList ok
24.10 16:20:22 SHOP: 0 items loaded (0 sec)
24.10 16:20:22 DB: SELECT * FROM EffectAttributeTypes
24.10 16:20:22 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:22 DB: SELECT * FROM Effects
24.10 16:20:22 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:22 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
24.10 16:20:22 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:22 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
24.10 16:20:22 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:22 DB: SELECT * FROM Badges
24.10 16:20:22 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
24.10 16:20:22 -<<-: core/server.query ok
24.10 16:20:56 NET: Client (conid:73443000) connected to vdl.0 (clients:1)
24.10 16:20:57 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
24.10 16:20:57 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
24.10 16:20:57 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
24.10 16:20:57 -<<-: core/server.query ok
24.10 16:20:57 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
24.10 16:20:57 -<<-: core/user.isOnlineID ok
24.10 16:20:57 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
24.10 16:20:57 -<<-: core/cache.get ok
24.10 16:20:57 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
24.10 16:20:57 -<<-: core/cache.get ok
24.10 16:20:57 NET: Client login (conid:73443000, id:76, name:Aimer)
24.10 16:20:57 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
24.10 16:20:57 -<<-: core/user.loginPost null
24.10 16:20:57 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
24.10 16:20:57 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
24.10 16:20:59 ++ NET: Aimer req: user.data { messageType => user.data }
24.10 16:20:59 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
24.10 16:20:59 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:20:59 TIME: user.data 0.64 ms
24.10 16:20:59 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:21:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:21:01 TIME: user.ping 0.1 ms
24.10 16:21:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:21:03 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
24.10 16:21:03 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 16:21:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:21:09 TIME: user.ping 0.1 ms
24.10 16:21:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:21:14 NET: Client (conid:72240105) connected to vdl.0 (clients:2)
24.10 16:21:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:21:16 TIME: user.ping 0.12 ms
24.10 16:21:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:21:19 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
24.10 16:21:19 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
24.10 16:21:19 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
24.10 16:21:19 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
24.10 16:21:19 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
24.10 16:21:19 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
24.10 16:21:19 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
24.10 16:21:19 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1477308461, lastLoginDate => 298, lastLoadDate => 1025 }, effects => { list => [] } }}, version => 0, id => 2 } }
24.10 16:21:19 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
24.10 16:21:19 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
24.10 16:21:19 NET: Client login (conid:72240105, id:2, name:test1)
24.10 16:21:19 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
24.10 16:21:19 -<<-: core/user.loginPost { _type => core/user.loginPost }
24.10 16:21:19 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
24.10 16:21:19 == NET: Aimer ret: user.join { name => test1, type => user.join }
24.10 16:21:19 == NET: test1 ret: user.join { name => Aimer, type => user.join }
24.10 16:21:19 == NET: test1 ret: user.join { name => test1, type => user.join }
24.10 16:21:22 TIMER: Check auto-disconnect...
24.10 16:21:23 STATS: vdl.0 cache, locks:4
24.10 16:21:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:21:23 TIME: user.ping 0.08 ms
24.10 16:21:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:21:25 ++ NET: test1 req: user.data { messageType => user.data }
24.10 16:21:25 ->>-: vdl/cache.user.getData { userId => 2, _type => vdl/cache.user.getData }
24.10 16:21:25 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:21:25 STATS: vdl.0 cache connection, 33 calls, total 0.0336503982543945 sec spent, avg 1.02 ms
24.10 16:21:25 TIME: user.data 0.63 ms
24.10 16:21:25 == NET: test1 ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:21:28 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
24.10 16:21:28 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 16:21:30 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:21:30 TIME: user.ping 0.1 ms
24.10 16:21:30 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:21:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:21:30 TIME: user.ping 0.09 ms
24.10 16:21:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:21:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:21:38 TIME: user.ping 0.09 ms
24.10 16:21:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:21:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:21:45 TIME: user.ping 0.13 ms
24.10 16:21:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:21:50 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:21:50 TIME: user.ping 0.08 ms
24.10 16:21:50 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:21:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:21:52 TIME: user.ping 0.07 ms
24.10 16:21:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:22:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:22:00 TIME: user.ping 0.11 ms
24.10 16:22:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:22:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:22:07 TIME: user.ping 0.08 ms
24.10 16:22:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:22:10 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:22:10 TIME: user.ping 0.15 ms
24.10 16:22:10 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:22:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:22:14 TIME: user.ping 0.09 ms
24.10 16:22:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:22:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:22:21 TIME: user.ping 0.1 ms
24.10 16:22:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:22:22 TIMER: Check auto-disconnect...
24.10 16:22:23 STATS: vdl.0 cache, locks:4
24.10 16:22:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:22:29 TIME: user.ping 0.15 ms
24.10 16:22:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:22:30 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:22:30 TIME: user.ping 0.12 ms
24.10 16:22:30 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:22:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:22:36 TIME: user.ping 0.1 ms
24.10 16:22:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:22:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:22:43 TIME: user.ping 0.18 ms
24.10 16:22:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:22:50 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:22:50 TIME: user.ping 0.12 ms
24.10 16:22:50 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:22:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:22:50 TIME: user.ping 0.08 ms
24.10 16:22:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:22:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:22:58 TIME: user.ping 0.16 ms
24.10 16:22:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:23:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:23:05 TIME: user.ping 0.12 ms
24.10 16:23:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:23:10 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:23:10 TIME: user.ping 0.11 ms
24.10 16:23:10 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:23:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:23:12 TIME: user.ping 0.07 ms
24.10 16:23:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:23:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:23:20 TIME: user.ping 0.08 ms
24.10 16:23:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:23:22 TIMER: Check auto-disconnect...
24.10 16:23:23 -<<-: tournament.enemyEvent { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 16:23, id => 2, enemy.num => 2, battleId => 67, player => 1 }, _isNotify => true, id => 2, _type => tournament.enemyEvent }
24.10 16:23:23 -<<-: tournament.enemyEvent { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 16:23, id => 76, enemy.num => 1, battleId => 67, player => 2 }, _isNotify => true, id => 76, _type => tournament.enemyEvent }
24.10 16:23:23 == NET: test1 ret: tournament.enemy { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 16:23, id => 2, enemy.num => 2, battleId => 67, player => 1 }, type => tournament.enemy }
24.10 16:23:23 == NET: Aimer ret: tournament.enemy { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 16:23, id => 76, enemy.num => 1, battleId => 67, player => 2 }, type => tournament.enemy }
24.10 16:23:23 STATS: vdl.0 cache, locks:4
24.10 16:23:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:23:29 TIME: user.ping 0.1 ms
24.10 16:23:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:23:33 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:23:33 TIME: user.ping 0.13 ms
24.10 16:23:33 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:23:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:23:40 TIME: user.ping 0.13 ms
24.10 16:23:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:23:46 ++ NET: Aimer req: tournament.end { lose => 76, dateRound => 2016-24-10 16:23, winner => 2, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 2, player2 => 76, battleId => 67 }
24.10 16:23:46 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
24.10 16:23:46 -<<-: vdl/cache.tournament.getBattlesTournaments [67]
24.10 16:23:46 STATS: vdl.0 cache connection, 35 calls, total 0.0351872444152832 sec spent, avg 1.01 ms
24.10 16:23:46 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
24.10 16:23:46 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [76,2] }
24.10 16:23:46 ->>-: core/user.sendTo { id => null, _type => core/user.sendTo, msg => { _type => battle.end } }
24.10 16:23:46 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
24.10 16:23:46 ->>-: vdl/cache.battle.finishRoom { roomId => 67, _type => vdl/cache.battle.finishRoom }
24.10 16:23:46 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
24.10 16:23:46 ->>-: vdl/cache.battle.deleteRoom { roomId => 67, _type => vdl/cache.battle.deleteRoom }
24.10 16:23:46 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
24.10 16:23:46 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [67] }
24.10 16:23:46 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
24.10 16:23:46 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [76,2], _type => vdl/cache.tournament.setUsersTournament }
24.10 16:23:46 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
24.10 16:23:46 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => null, round => 1, player1 => 2, player2 => 76 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid }
24.10 16:23:46 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => null, round => 1, player1 => 2, player2 => 76 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
24.10 16:23:46 ->>-: vdl/cache.tournament.addRound { dateRound => 2016-24-10 16:23, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound }
24.10 16:23:46 -<<-: vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
24.10 16:23:46 TIME: tournament.end 36.46 ms
24.10 16:23:46 == NET: Aimer ret: tournament.end { type => tournament.end, errorCode => ok }
24.10 16:23:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:23:50 TIME: user.ping 0.09 ms
24.10 16:23:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:23:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:23:57 TIME: user.ping 0.1 ms
24.10 16:23:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:23:58 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:23:58 TIME: user.ping 0.15 ms
24.10 16:23:58 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:24:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:24:04 TIME: user.ping 0.11 ms
24.10 16:24:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:24:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:24:12 TIME: user.ping 0.13 ms
24.10 16:24:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:24:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:24:19 TIME: user.ping 0.11 ms
24.10 16:24:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:24:20 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:24:20 TIME: user.ping 0.2 ms
24.10 16:24:20 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:24:22 TIMER: Check auto-disconnect...
24.10 16:24:23 STATS: vdl.0 cache, locks:4
24.10 16:24:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:24:26 TIME: user.ping 0.12 ms
24.10 16:24:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:24:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:24:34 TIME: user.ping 0.11 ms
24.10 16:24:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:24:57 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
24.10 16:24:57 -<<-: server.login ok
24.10 16:24:57 DB: SELECT * FROM LocalizationStrings
24.10 16:24:57 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:24:57 TIMER: Starting timer...
24.10 16:24:57 TIMER: Timer running...
24.10 16:24:57 DB: SELECT * FROM GameVars
24.10 16:24:57 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:24:57 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
24.10 16:24:57 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:24:57 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
24.10 16:24:57 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:24:57 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
24.10 16:24:57 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:24:57 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
24.10 16:24:57 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:24:57 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
24.10 16:24:57 -<<-: core/quest.getDaily ok
24.10 16:24:57 DB: SELECT * FROM UserAttributeTypes
24.10 16:24:57 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:24:57 DB: SELECT * FROM UserVariableTypes
24.10 16:24:57 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:24:57 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
24.10 16:24:57 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:24:57 DB: SELECT * FROM ItemGroups
24.10 16:24:57 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:24:57 DB: SELECT * FROM Bundles ORDER BY ID
24.10 16:24:57 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:24:57 DB: SELECT * FROM BundleItems ORDER BY ID
24.10 16:24:57 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:24:57 SHOP: loading items...
24.10 16:24:57 ->>-: core/shop.getList { _type => core/shop.getList }
24.10 16:24:57 -<<-: core/shop.getList ok
24.10 16:24:57 SHOP: 0 items loaded (0 sec)
24.10 16:24:57 DB: SELECT * FROM EffectAttributeTypes
24.10 16:24:57 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:24:57 DB: SELECT * FROM Effects
24.10 16:24:57 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:24:57 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
24.10 16:24:57 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:24:57 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
24.10 16:24:57 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:24:57 DB: SELECT * FROM Badges
24.10 16:24:57 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
24.10 16:24:57 -<<-: core/server.query ok
24.10 16:25:52 NET: Client (conid:97176581) connected to vdl.0 (clients:1)
24.10 16:25:57 TIMER: Check auto-disconnect...
24.10 16:25:57 STATS: vdl.0 cache, locks:0
24.10 16:25:58 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 16:25:58 TIME: user.ping 0.05 ms
24.10 16:25:58 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:26:20 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 16:26:20 TIME: user.ping 0.08 ms
24.10 16:26:20 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:26:43 NET: Client (conid:98838356) connected to vdl.0 (clients:2)
24.10 16:26:43 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 16:26:43 TIME: user.ping 0.07 ms
24.10 16:26:43 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:26:44 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
24.10 16:26:44 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
24.10 16:26:44 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
24.10 16:26:44 -<<-: core/server.query ok
24.10 16:26:44 STATS: vdl.0 cache connection, 21 calls, total 0.0236618518829346 sec spent, avg 1.13 ms
24.10 16:26:44 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
24.10 16:26:44 -<<-: core/user.isOnlineID ok
24.10 16:26:44 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
24.10 16:26:44 -<<-: core/cache.get ok
24.10 16:26:44 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
24.10 16:26:44 -<<-: core/cache.get ok
24.10 16:26:44 NET: Client login (conid:98838356, id:76, name:Aimer)
24.10 16:26:44 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
24.10 16:26:44 -<<-: core/user.loginPost null
24.10 16:26:44 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
24.10 16:26:44 == NET: Aimer ret: user.join { name => null, type => user.join }
24.10 16:26:44 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
24.10 16:26:44 == NET: null ret: user.join { name => Aimer, type => user.join }
24.10 16:26:45 ++ NET: Aimer req: user.data { messageType => user.data }
24.10 16:26:45 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
24.10 16:26:45 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:26:45 TIME: user.data 0.41 ms
24.10 16:26:45 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:26:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:26:48 TIME: user.ping 0.1 ms
24.10 16:26:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:26:50 ++ NET: null req: tournament.end { lose => 0, dateRound => 2016-24-10 16:23, winner => 0, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 2, player2 => 76, battleId => 67 }
24.10 16:26:50 TRACE: User not logon yet.
24.10 16:26:50 NET: Client (name:null conid:97176581 TCP) disconnected from vdl.0 (clients:1)
24.10 16:26:52 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
24.10 16:26:52 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 16:26:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:26:55 TIME: user.ping 0.08 ms
24.10 16:26:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:26:57 TIMER: Check auto-disconnect...
24.10 16:26:57 STATS: vdl.0 cache, locks:2
24.10 16:27:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:27:02 TIME: user.ping 0.1 ms
24.10 16:27:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:27:06 NET: Client (conid:72457711) connected to vdl.0 (clients:2)
24.10 16:27:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:27:09 TIME: user.ping 0.1 ms
24.10 16:27:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:27:10 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
24.10 16:27:10 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
24.10 16:27:10 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
24.10 16:27:10 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
24.10 16:27:10 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
24.10 16:27:10 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
24.10 16:27:10 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
24.10 16:27:10 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1477308461, lastLoginDate => 298, lastLoadDate => 1025 }, effects => { list => [] } }}, version => 0, id => 2 } }
24.10 16:27:10 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
24.10 16:27:10 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
24.10 16:27:10 NET: Client login (conid:72457711, id:2, name:test1)
24.10 16:27:10 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
24.10 16:27:10 -<<-: core/user.loginPost { _type => core/user.loginPost }
24.10 16:27:10 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
24.10 16:27:10 == NET: Aimer ret: user.join { name => test1, type => user.join }
24.10 16:27:10 == NET: test1 ret: user.join { name => Aimer, type => user.join }
24.10 16:27:10 == NET: test1 ret: user.join { name => test1, type => user.join }
24.10 16:27:16 ++ NET: test1 req: user.data { messageType => user.data }
24.10 16:27:16 ->>-: vdl/cache.user.getData { userId => 2, _type => vdl/cache.user.getData }
24.10 16:27:16 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:27:16 TIME: user.data 0.34 ms
24.10 16:27:16 == NET: test1 ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:27:17 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:27:17 TIME: user.ping 0.09 ms
24.10 16:27:17 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:27:17 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
24.10 16:27:17 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 16:27:21 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:27:21 TIME: user.ping 1.88 ms
24.10 16:27:21 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:27:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:27:24 TIME: user.ping 0.1 ms
24.10 16:27:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:27:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:27:31 TIME: user.ping 0.09 ms
24.10 16:27:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:27:39 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:27:39 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:27:39 TIME: user.ping 0.07 ms
24.10 16:27:41 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:27:41 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:27:41 TIME: user.ping 0.09 ms
24.10 16:27:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:27:46 TIME: user.ping 0.17 ms
24.10 16:27:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:27:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:27:53 TIME: user.ping 0.09 ms
24.10 16:27:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:27:57 TIMER: Check auto-disconnect...
24.10 16:27:57 STATS: vdl.0 cache, locks:4
24.10 16:28:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:28:00 TIME: user.ping 0.1 ms
24.10 16:28:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:28:02 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:28:02 TIME: user.ping 0.09 ms
24.10 16:28:02 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:28:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:28:08 TIME: user.ping 0.07 ms
24.10 16:28:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:28:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:28:15 TIME: user.ping 0.09 ms
24.10 16:28:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:28:22 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:28:22 TIME: user.ping 0.09 ms
24.10 16:28:22 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:28:22 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:28:22 TIME: user.ping 0.08 ms
24.10 16:28:22 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:28:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:28:29 TIME: user.ping 0.1 ms
24.10 16:28:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:28:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:28:37 TIME: user.ping 0.1 ms
24.10 16:28:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:28:42 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:28:42 TIME: user.ping 0.09 ms
24.10 16:28:42 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:28:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:28:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:28:44 TIME: user.ping 0.08 ms
24.10 16:28:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:28:51 TIME: user.ping 0.09 ms
24.10 16:28:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:28:57 TIMER: Check auto-disconnect...
24.10 16:28:57 -<<-: tournament.enemyEvent { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 2, roundDate => 2016-25-10 16:28, id => 2, enemy.num => 2, battleId => 68, player => 1 }, _isNotify => true, id => 2, _type => tournament.enemyEvent }
24.10 16:28:57 -<<-: tournament.enemyEvent { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 2, roundDate => 2016-25-10 16:28, id => 76, enemy.num => 1, battleId => 68, player => 2 }, _isNotify => true, id => 76, _type => tournament.enemyEvent }
24.10 16:28:57 == NET: Aimer ret: tournament.enemy { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 2, roundDate => 2016-25-10 16:28, id => 76, enemy.num => 1, battleId => 68, player => 2 }, type => tournament.enemy }
24.10 16:28:57 == NET: test1 ret: tournament.enemy { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 2, roundDate => 2016-25-10 16:28, id => 2, enemy.num => 2, battleId => 68, player => 1 }, type => tournament.enemy }
24.10 16:28:57 STATS: vdl.0 cache, locks:4
24.10 16:29:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:29:00 TIME: user.ping 0.09 ms
24.10 16:29:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:29:04 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:29:04 TIME: user.ping 0.12 ms
24.10 16:29:04 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:29:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:29:11 TIME: user.ping 0.08 ms
24.10 16:29:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:29:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:29:21 TIME: user.ping 0.21 ms
24.10 16:29:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:29:21 ++ NET: test1 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 68, name => throw, side => 2, dices => 550531, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 16:29:21 ->>-: vdl/cache.battle.infoRoom { roomId => 68, _type => vdl/cache.battle.infoRoom }
24.10 16:29:21 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 16:29:21 STATS: vdl.0 cache connection, 35 calls, total 0.0329561233520508 sec spent, avg 0.94 ms
24.10 16:29:21 TIME: battle.sendtask 1.11 ms
24.10 16:29:21 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 16:29:21 == NET: Aimer ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 68, name => throw, side => 2, type => battle.task, dices => 550531, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 16:29:27 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:29:27 TIME: user.ping 0.13 ms
24.10 16:29:27 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:29:31 ++ NET: Aimer req: tournament.end { lose => 76, dateRound => 2016-25-10 16:28, winner => 2, tournamentId => 1, round => 2, messageType => tournament.end, player1 => 2, player2 => 76, battleId => 68 }
24.10 16:29:31 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
24.10 16:29:31 -<<-: vdl/cache.tournament.getBattlesTournaments [68]
24.10 16:29:31 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
24.10 16:29:31 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [76,2] }
24.10 16:29:31 ->>-: vdl/cache.battle.finishRoom { roomId => 68, _type => vdl/cache.battle.finishRoom }
24.10 16:29:31 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
24.10 16:29:31 ->>-: vdl/cache.battle.deleteRoom { roomId => 68, _type => vdl/cache.battle.deleteRoom }
24.10 16:29:31 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
24.10 16:29:31 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [68] }
24.10 16:29:31 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
24.10 16:29:31 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [2], _type => vdl/cache.tournament.setUsersTournament }
24.10 16:29:31 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
24.10 16:29:31 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 2, round => 2, player1 => 2, player2 => 76 }], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid }
24.10 16:29:31 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 2, round => 2, player1 => 2, player2 => 76 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
24.10 16:29:31 ->>-: vdl/cache.tournament.deleteTournament { tournamentId => 1, _type => vdl/cache.tournament.deleteTournament }
24.10 16:29:31 -<<-: vdl/cache.tournament.deleteTournament { errorCode => ok, _type => vdl/cache.tournament.deleteTournament }
24.10 16:29:31 TIME: tournament.end 37.14 ms
24.10 16:29:31 == NET: Aimer ret: tournament.end { type => tournament.end, errorCode => TournamentEnd }
24.10 16:29:31 == NET: Aimer ret: battle.end { type => battle.end }
24.10 16:29:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:29:32 TIME: user.ping 0.07 ms
24.10 16:29:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:29:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:29:40 TIME: user.ping 0.07 ms
24.10 16:29:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:29:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:29:47 TIME: user.ping 0.2 ms
24.10 16:29:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:29:51 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:29:51 TIME: user.ping 0.16 ms
24.10 16:29:51 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:29:57 TIMER: Check auto-disconnect...
24.10 16:29:57 STATS: vdl.0 cache, locks:4
24.10 16:30:16 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:30:16 TIME: user.ping 0.17 ms
24.10 16:30:16 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:30:40 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:30:40 TIME: user.ping 0.11 ms
24.10 16:30:40 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:30:57 TIMER: Check auto-disconnect...
24.10 16:30:57 STATS: vdl.0 cache, locks:4
24.10 16:31:04 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:31:04 TIME: user.ping 0.19 ms
24.10 16:31:04 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:31:28 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:31:28 TIME: user.ping 0.07 ms
24.10 16:31:28 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:31:53 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:31:53 TIME: user.ping 0.08 ms
24.10 16:31:53 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:31:57 TIMER: Check auto-disconnect...
24.10 16:31:57 STATS: vdl.0 cache, locks:4
24.10 16:32:17 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:32:17 TIME: user.ping 0.08 ms
24.10 16:32:17 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:32:41 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:32:41 TIME: user.ping 0.09 ms
24.10 16:32:41 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:32:57 TIMER: Check auto-disconnect...
24.10 16:32:57 NET: Client (name:Aimer conid:98838356 TCP) disconnected from vdl.0 (clients:1)
24.10 16:32:57 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
24.10 16:32:57 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
24.10 16:32:57 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
24.10 16:32:57 STATS: vdl.0 cache connection, 44 calls, total 0.0710525512695312 sec spent, avg 1.61 ms
24.10 16:32:57 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 16:32:57 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
24.10 16:32:57 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 16:32:57 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
24.10 16:32:57 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
24.10 16:32:57 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
24.10 16:32:57 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
24.10 16:32:57 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 16:32:57 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
24.10 16:32:57 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
24.10 16:32:57 STATS: vdl.0 cache, locks:2
24.10 16:33:05 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:33:05 TIME: user.ping 0.09 ms
24.10 16:33:05 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:33:29 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:33:29 TIME: user.ping 0.1 ms
24.10 16:33:29 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:33:53 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:33:53 TIME: user.ping 0.07 ms
24.10 16:33:53 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:33:57 TIMER: Check auto-disconnect...
24.10 16:33:57 STATS: vdl.0 cache, locks:2
24.10 16:34:18 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:34:18 TIME: user.ping 0.1 ms
24.10 16:34:18 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:34:42 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:34:42 TIME: user.ping 0.08 ms
24.10 16:34:42 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:34:57 TIMER: Check auto-disconnect...
24.10 16:34:57 STATS: vdl.0 cache, locks:2
24.10 16:35:06 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:35:06 TIME: user.ping 0.19 ms
24.10 16:35:06 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:35:30 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:35:30 TIME: user.ping 0.1 ms
24.10 16:35:30 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:35:54 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:35:54 TIME: user.ping 0.2 ms
24.10 16:35:54 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:35:57 TIMER: Check auto-disconnect...
24.10 16:35:57 STATS: vdl.0 cache, locks:2
24.10 16:36:18 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:36:18 TIME: user.ping 0.08 ms
24.10 16:36:18 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:36:23 ++ NET: test1 req: tournament.end { lose => 0, dateRound => 2016-25-10 16:28, winner => 0, tournamentId => 1, round => 2, messageType => tournament.end, player1 => 2, player2 => 76, battleId => 68 }
24.10 16:36:23 NET: Client (name:test1 conid:72457711 TCP) disconnected from vdl.0 (clients:0)
24.10 16:36:23 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
24.10 16:36:23 -<<-: vdl/cache.tournament.getBattlesTournaments { errorCode => _requestException, _type => vdl/cache.tournament.getBattlesTournaments }
24.10 16:36:23 STATS: vdl.0 cache connection, 49 calls, total 0.0744373798370361 sec spent, avg 1.52 ms
24.10 16:36:23 TRACE: tournament.end : cacheRequest exception { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
24.10 16:36:23 TRACE: tournament.end : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 422
Called from modules/VDLTournamentModule.hx line 139
Called from modules/VDLTournamentModule.hx line 67
Called from snipe/slave/Server.hx line 1176
24.10 16:36:23 DB: SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true
24.10 16:36:23 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true, _type => core/server.query }
24.10 16:36:23 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
24.10 16:36:23 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 16:36:23 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
24.10 16:36:23 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 16:36:23 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
24.10 16:36:23 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
24.10 16:36:23 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
24.10 16:36:23 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
24.10 16:36:23 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 16:36:23 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
24.10 16:36:23 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
24.10 16:36:57 TIMER: Check auto-disconnect...
24.10 16:36:57 STATS: vdl.0 cache, locks:0
24.10 16:36:57 TIMER: Check auto-disconnect...
24.10 16:36:57 STATS: vdl.0 cache, locks:0
24.10 16:36:57 TIMER: Check auto-disconnect...
24.10 16:36:57 STATS: vdl.0 cache, locks:0
24.10 16:36:57 TIMER: Check auto-disconnect...
24.10 16:36:57 STATS: vdl.0 cache, locks:0
24.10 16:36:57 TIMER: Check auto-disconnect...
24.10 16:36:57 STATS: vdl.0 cache, locks:0
24.10 16:36:57 TIMER: Check auto-disconnect...
24.10 16:36:57 STATS: vdl.0 cache, locks:0
24.10 16:36:57 TIMER: Check auto-disconnect...
24.10 16:36:57 STATS: vdl.0 cache, locks:0
24.10 16:43:32 NET: Client (conid:26000643) connected to vdl.0 (clients:1)
24.10 16:43:33 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
24.10 16:43:33 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
24.10 16:43:33 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
24.10 16:43:33 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
24.10 16:43:33 STATS: vdl.0 cache connection, 55 calls, total 0.0790722370147705 sec spent, avg 1.44 ms
24.10 16:43:33 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
24.10 16:43:33 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
24.10 16:43:33 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
24.10 16:43:33 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477308408, lastLoginDate => 298, lastLoadDate => 1025 }, effects => { list => [] } }}, version => 0, id => 76 } }
24.10 16:43:33 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
24.10 16:43:33 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 76 } }
24.10 16:43:33 NET: Client login (conid:26000643, id:76, name:Aimer)
24.10 16:43:33 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
24.10 16:43:33 -<<-: core/user.loginPost { _type => core/user.loginPost }
24.10 16:43:33 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
24.10 16:43:33 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
24.10 16:43:34 ++ NET: Aimer req: user.data { messageType => user.data }
24.10 16:43:34 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
24.10 16:43:34 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:43:34 TIME: user.data 0.44 ms
24.10 16:43:34 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:43:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:43:37 TIME: user.ping 0.13 ms
24.10 16:43:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:43:42 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
24.10 16:43:42 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 16:43:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:43:50 TIME: user.ping 0.13 ms
24.10 16:43:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:43:57 TIMER: Check auto-disconnect...
24.10 16:43:57 STATS: vdl.0 cache, locks:2
24.10 16:44:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:44:03 TIME: user.ping 0.11 ms
24.10 16:44:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:44:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:44:16 TIME: user.ping 0.11 ms
24.10 16:44:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:44:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:44:29 TIME: user.ping 0.11 ms
24.10 16:44:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:46:13 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
24.10 16:46:13 -<<-: server.login ok
24.10 16:46:13 DB: SELECT * FROM LocalizationStrings
24.10 16:46:13 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
24.10 16:46:13 -<<-: core/server.query ok
24.10 16:46:13 TIMER: Starting timer...
24.10 16:46:13 TIMER: Timer running...
24.10 16:46:13 DB: SELECT * FROM GameVars
24.10 16:46:13 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
24.10 16:46:13 -<<-: core/server.query ok
24.10 16:46:13 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
24.10 16:46:13 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
24.10 16:46:13 -<<-: core/server.query ok
24.10 16:46:13 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
24.10 16:46:13 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
24.10 16:46:13 -<<-: core/server.query ok
24.10 16:46:13 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
24.10 16:46:13 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
24.10 16:46:13 -<<-: core/server.query ok
24.10 16:46:13 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
24.10 16:46:13 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
24.10 16:46:13 -<<-: core/server.query ok
24.10 16:46:13 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
24.10 16:46:13 -<<-: core/quest.getDaily ok
24.10 16:46:13 DB: SELECT * FROM UserAttributeTypes
24.10 16:46:13 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
24.10 16:46:13 -<<-: core/server.query ok
24.10 16:46:13 DB: SELECT * FROM UserVariableTypes
24.10 16:46:13 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
24.10 16:46:13 -<<-: core/server.query ok
24.10 16:46:13 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
24.10 16:46:13 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
24.10 16:46:13 -<<-: core/server.query ok
24.10 16:46:13 DB: SELECT * FROM ItemGroups
24.10 16:46:13 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
24.10 16:46:13 -<<-: core/server.query ok
24.10 16:46:13 DB: SELECT * FROM Bundles ORDER BY ID
24.10 16:46:13 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
24.10 16:46:13 -<<-: core/server.query ok
24.10 16:46:13 DB: SELECT * FROM BundleItems ORDER BY ID
24.10 16:46:13 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
24.10 16:46:13 -<<-: core/server.query ok
24.10 16:46:13 SHOP: loading items...
24.10 16:46:13 ->>-: core/shop.getList { _type => core/shop.getList }
24.10 16:46:13 -<<-: core/shop.getList ok
24.10 16:46:13 SHOP: 0 items loaded (0 sec)
24.10 16:46:13 DB: SELECT * FROM EffectAttributeTypes
24.10 16:46:13 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
24.10 16:46:13 -<<-: core/server.query ok
24.10 16:46:13 DB: SELECT * FROM Effects
24.10 16:46:13 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
24.10 16:46:13 -<<-: core/server.query ok
24.10 16:46:13 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(24.10 16:46:18 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
24.10 16:46:18 -<<-: server.login ok
24.10 16:46:18 DB: SELECT * FROM LocalizationStrings
24.10 16:46:18 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:46:18 TIMER: Starting timer...
24.10 16:46:18 TIMER: Timer running...
24.10 16:46:18 DB: SELECT * FROM GameVars
24.10 16:46:18 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:46:18 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
24.10 16:46:18 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:46:18 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
24.10 16:46:18 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:46:18 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
24.10 16:46:18 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:46:18 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
24.10 16:46:18 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:46:18 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
24.10 16:46:18 -<<-: core/quest.getDaily ok
24.10 16:46:18 DB: SELECT * FROM UserAttributeTypes
24.10 16:46:18 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:46:18 DB: SELECT * FROM UserVariableTypes
24.10 16:46:18 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:46:18 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
24.10 16:46:18 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:46:18 DB: SELECT * FROM ItemGroups
24.10 16:46:18 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:46:18 DB: SELECT * FROM Bundles ORDER BY ID
24.10 16:46:18 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:46:18 DB: SELECT * FROM BundleItems ORDER BY ID
24.10 16:46:18 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:46:18 SHOP: loading items...
24.10 16:46:18 ->>-: core/shop.getList { _type => core/shop.getList }
24.10 16:46:18 -<<-: core/shop.getList ok
24.10 16:46:18 SHOP: 0 items loaded (0 sec)
24.10 16:46:18 DB: SELECT * FROM EffectAttributeTypes
24.10 16:46:18 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:46:18 DB: SELECT * FROM Effects
24.10 16:46:18 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:46:18 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
24.10 16:46:18 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:46:18 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
24.10 16:46:18 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:46:18 DB: SELECT * FROM Badges
24.10 16:46:18 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
24.10 16:46:18 -<<-: core/server.query ok
24.10 16:47:05 NET: Client (conid:14140554) connected to vdl.0 (clients:1)
24.10 16:47:06 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
24.10 16:47:06 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
24.10 16:47:06 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
24.10 16:47:06 -<<-: core/server.query ok
24.10 16:47:06 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
24.10 16:47:06 -<<-: core/user.isOnlineID ok
24.10 16:47:06 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
24.10 16:47:06 -<<-: core/cache.get ok
24.10 16:47:06 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
24.10 16:47:06 -<<-: core/cache.get ok
24.10 16:47:06 NET: Client login (conid:14140554, id:76, name:Aimer)
24.10 16:47:06 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
24.10 16:47:06 -<<-: core/user.loginPost null
24.10 16:47:06 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
24.10 16:47:06 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
24.10 16:47:08 ++ NET: Aimer req: user.data { messageType => user.data }
24.10 16:47:08 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
24.10 16:47:08 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:47:08 TIME: user.data 0.55 ms
24.10 16:47:08 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:47:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:47:11 TIME: user.ping 0.11 ms
24.10 16:47:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:47:13 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
24.10 16:47:13 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 16:47:17 ++ NET: Aimer req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
24.10 16:47:17 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
24.10 16:47:17 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => null, battleActive => null, rounddate => 2016-24-10 16:50, startdate => 2016-24-10 16:50 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 16:47:17 TIME: tournament.getAvailableTournament 2.72 ms
24.10 16:47:17 == NET: Aimer ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => null, battleActive => null, rounddate => 2016-24-10 16:50, startdate => 2016-24-10 16:50 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 16:47:18 TIMER: Check auto-disconnect...
24.10 16:47:18 STATS: vdl.0 cache, locks:2
24.10 16:47:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:47:21 TIME: user.ping 0.12 ms
24.10 16:47:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:47:21 NET: Client (conid:51453147) connected to vdl.0 (clients:2)
24.10 16:47:25 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
24.10 16:47:25 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
24.10 16:47:25 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
24.10 16:47:25 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
24.10 16:47:25 STATS: vdl.0 cache connection, 29 calls, total 0.0529885292053223 sec spent, avg 1.83 ms
24.10 16:47:25 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
24.10 16:47:25 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
24.10 16:47:25 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
24.10 16:47:25 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1477308461, lastLoginDate => 298, lastLoadDate => 1025 }, effects => { list => [] } }}, version => 0, id => 2 } }
24.10 16:47:25 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
24.10 16:47:25 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
24.10 16:47:25 NET: Client login (conid:51453147, id:2, name:test1)
24.10 16:47:25 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
24.10 16:47:25 -<<-: core/user.loginPost { _type => core/user.loginPost }
24.10 16:47:25 == NET: Aimer ret: user.join { name => test1, type => user.join }
24.10 16:47:25 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
24.10 16:47:25 == NET: test1 ret: user.join { name => Aimer, type => user.join }
24.10 16:47:25 == NET: test1 ret: user.join { name => test1, type => user.join }
24.10 16:47:26 ++ NET: Aimer req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
24.10 16:47:26 ->>-: vdl/cache.tournament.addUsers { userId => 76, tournament => 1, _type => vdl/cache.tournament.addUsers }
24.10 16:47:26 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
24.10 16:47:26 TIME: tournament.addUsers 0.63 ms
24.10 16:47:26 == NET: Aimer ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
24.10 16:47:26 ++ NET: Aimer req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
24.10 16:47:26 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
24.10 16:47:26 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => Aimer, id => 76 }], battleActive => null, rounddate => 2016-24-10 16:50, startdate => 2016-24-10 16:50 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 16:47:26 TIME: tournament.getAvailableTournament 2.3 ms
24.10 16:47:26 == NET: Aimer ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => Aimer, id => 76 }], battleActive => null, rounddate => 2016-24-10 16:50, startdate => 2016-24-10 16:50 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 16:47:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:47:31 TIME: user.ping 0.19 ms
24.10 16:47:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:47:31 ++ NET: Aimer req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
24.10 16:47:31 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
24.10 16:47:31 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [76] }
24.10 16:47:31 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => null, player2 => 76 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid }
24.10 16:47:31 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => null, player2 => 76 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
24.10 16:47:31 TIME: tournament.grid 0.96 ms
24.10 16:47:31 == NET: Aimer ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => null, player2 => 76 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
24.10 16:47:31 ++ NET: test1 req: user.data { messageType => user.data }
24.10 16:47:31 ->>-: vdl/cache.user.getData { userId => 2, _type => vdl/cache.user.getData }
24.10 16:47:31 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:47:31 TIME: user.data 0.49 ms
24.10 16:47:31 == NET: test1 ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 16:47:33 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
24.10 16:47:33 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 16:47:36 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:47:36 TIME: user.ping 0.09 ms
24.10 16:47:36 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:47:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:47:41 TIME: user.ping 0.14 ms
24.10 16:47:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:47:43 ++ NET: test1 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
24.10 16:47:43 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
24.10 16:47:43 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => Aimer, id => 76 }], battleActive => null, rounddate => 2016-24-10 16:50, startdate => 2016-24-10 16:50 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 16:47:43 TIME: tournament.getAvailableTournament 2.24 ms
24.10 16:47:43 == NET: test1 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => Aimer, id => 76 }], battleActive => null, rounddate => 2016-24-10 16:50, startdate => 2016-24-10 16:50 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 16:47:47 ++ NET: test1 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
24.10 16:47:47 ->>-: vdl/cache.tournament.addUsers { userId => 2, tournament => 1, _type => vdl/cache.tournament.addUsers }
24.10 16:47:47 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
24.10 16:47:47 TIME: tournament.addUsers 0.37 ms
24.10 16:47:47 == NET: test1 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
24.10 16:47:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:47:50 TIME: user.ping 0.09 ms
24.10 16:47:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:47:57 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:47:57 TIME: user.ping 0.12 ms
24.10 16:47:57 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:47:59 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:47:59 TIME: user.ping 0.14 ms
24.10 16:47:59 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:48:08 ++ NET: test1 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
24.10 16:48:08 ->>-: vdl/cache.tournament.addUsers { userId => 2, tournament => 1, _type => vdl/cache.tournament.addUsers }
24.10 16:48:08 -<<-: vdl/cache.tournament.addUsers { errorCode => userExist, _type => vdl/cache.tournament.addUsers }
24.10 16:48:08 TIME: tournament.addUsers 1.41 ms
24.10 16:48:08 == NET: test1 ret: tournament.addUsers { type => tournament.addUsers, errorCode => userExist, _type => vdl/cache.tournament.addUsers }
24.10 16:48:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:48:09 TIME: user.ping 0.11 ms
24.10 16:48:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:48:13 ++ NET: test1 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
24.10 16:48:13 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
24.10 16:48:13 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => Aimer, id => 76 },{ name => test1, id => 2 }], battleActive => null, rounddate => 2016-24-10 16:50, startdate => 2016-24-10 16:50 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 16:48:13 TIME: tournament.getAvailableTournament 3.41 ms
24.10 16:48:13 == NET: test1 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => Aimer, id => 76 },{ name => test1, id => 2 }], battleActive => null, rounddate => 2016-24-10 16:50, startdate => 2016-24-10 16:50 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 16:48:17 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:48:17 TIME: user.ping 0.09 ms
24.10 16:48:17 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:48:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:48:18 TIME: user.ping 0.1 ms
24.10 16:48:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:48:18 TIMER: Check auto-disconnect...
24.10 16:48:18 STATS: vdl.0 cache, locks:4
24.10 16:48:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:48:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:48:27 TIME: user.ping 0.11 ms
24.10 16:48:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:48:37 TIME: user.ping 0.11 ms
24.10 16:48:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:48:37 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:48:37 TIME: user.ping 0.13 ms
24.10 16:48:37 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:48:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:48:46 TIME: user.ping 0.12 ms
24.10 16:48:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:48:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:48:55 TIME: user.ping 0.1 ms
24.10 16:48:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:48:57 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:48:57 TIME: user.ping 0.12 ms
24.10 16:48:57 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:49:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:49:05 TIME: user.ping 0.1 ms
24.10 16:49:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:49:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:49:14 TIME: user.ping 0.11 ms
24.10 16:49:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:49:17 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:49:17 TIME: user.ping 0.1 ms
24.10 16:49:17 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:49:18 TIMER: Check auto-disconnect...
24.10 16:49:18 STATS: vdl.0 cache, locks:4
24.10 16:49:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:49:23 TIME: user.ping 0.17 ms
24.10 16:49:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:49:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:49:33 TIME: user.ping 0.1 ms
24.10 16:49:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:49:37 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:49:37 TIME: user.ping 0.11 ms
24.10 16:49:37 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:49:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:49:42 TIME: user.ping 0.11 ms
24.10 16:49:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:49:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:49:51 TIME: user.ping 0.17 ms
24.10 16:49:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:49:57 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:49:57 TIME: user.ping 0.11 ms
24.10 16:49:57 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:50:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:50:01 TIME: user.ping 0.11 ms
24.10 16:50:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:50:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:50:10 TIME: user.ping 0.1 ms
24.10 16:50:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:50:17 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:50:17 TIME: user.ping 0.14 ms
24.10 16:50:17 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:50:18 TIMER: Check auto-disconnect...
24.10 16:50:18 -<<-: tournament.enemyEvent { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 16:50, id => 2, enemy.num => 2, battleId => 69, player => 1 }, _isNotify => true, id => 2, _type => tournament.enemyEvent }
24.10 16:50:18 -<<-: tournament.enemyEvent { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 16:50, id => 76, enemy.num => 1, battleId => 69, player => 2 }, _isNotify => true, id => 76, _type => tournament.enemyEvent }
24.10 16:50:18 == NET: test1 ret: tournament.enemy { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 16:50, id => 2, enemy.num => 2, battleId => 69, player => 1 }, type => tournament.enemy }
24.10 16:50:18 == NET: Aimer ret: tournament.enemy { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 16:50, id => 76, enemy.num => 1, battleId => 69, player => 2 }, type => tournament.enemy }
24.10 16:50:18 STATS: vdl.0 cache, locks:4
24.10 16:50:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:50:20 TIME: user.ping 0.13 ms
24.10 16:50:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:50:30 ++ NET: test1 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 69, name => throw, side => 2, dices => 134115, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 16:50:30 ->>-: vdl/cache.battle.infoRoom { roomId => 69, _type => vdl/cache.battle.infoRoom }
24.10 16:50:30 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 16:50:30 STATS: vdl.0 cache connection, 44 calls, total 0.0679948329925537 sec spent, avg 1.55 ms
24.10 16:50:30 TIME: battle.sendtask 0.48 ms
24.10 16:50:30 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 16:50:30 == NET: Aimer ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 69, name => throw, side => 2, type => battle.task, dices => 134115, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 16:50:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:50:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:50:34 TIME: user.ping 0.12 ms
24.10 16:50:35 ++ NET: test1 req: battle.sendtask { dice => 5, from => (7.0, 6.0), roomId => 69, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (8.0, 6.0), diceID => 0 }
24.10 16:50:35 ->>-: vdl/cache.battle.infoRoom { roomId => 69, _type => vdl/cache.battle.infoRoom }
24.10 16:50:35 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 16:50:35 TIME: battle.sendtask 0.3 ms
24.10 16:50:35 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 16:50:35 == NET: Aimer ret: battle.task { dice => 5, from => (7.0, 6.0), roomId => 69, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (8.0, 6.0), diceID => 0 }
24.10 16:50:42 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:50:42 TIME: user.ping 0.11 ms
24.10 16:50:42 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:50:44 ++ NET: Aimer req: tournament.end { lose => 76, dateRound => 2016-24-10 16:50, winner => 2, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 2, player2 => 76, battleId => 69 }
24.10 16:50:44 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
24.10 16:50:44 -<<-: vdl/cache.tournament.getBattlesTournaments [69]
24.10 16:50:44 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
24.10 16:50:44 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [76,2] }
24.10 16:50:44 ->>-: vdl/cache.battle.finishRoom { roomId => 69, _type => vdl/cache.battle.finishRoom }
24.10 16:50:44 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
24.10 16:50:44 ->>-: vdl/cache.battle.deleteRoom { roomId => 69, _type => vdl/cache.battle.deleteRoom }
24.10 16:50:44 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
24.10 16:50:44 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [69] }
24.10 16:50:44 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
24.10 16:50:44 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [2], _type => vdl/cache.tournament.setUsersTournament }
24.10 16:50:44 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
24.10 16:50:44 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 2, round => 1, player1 => 2, player2 => 76 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid }
24.10 16:50:44 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 2, round => 1, player1 => 2, player2 => 76 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
24.10 16:50:44 ->>-: vdl/cache.tournament.finish { tournamentId => 1, _type => vdl/cache.tournament.finish }
24.10 16:50:44 -<<-: vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
24.10 16:50:44 TIME: tournament.end 31.34 ms
24.10 16:50:44 == NET: Aimer ret: tournament.end { type => tournament.end, errorCode => TournamentEnd }
24.10 16:50:44 == NET: test1 ret: battle.end { type => battle.end }
24.10 16:50:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:50:47 TIME: user.ping 0.2 ms
24.10 16:50:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:50:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:50:56 TIME: user.ping 0.12 ms
24.10 16:50:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:51:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:51:06 TIME: user.ping 0.09 ms
24.10 16:51:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:51:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:51:15 TIME: user.ping 0.1 ms
24.10 16:51:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:51:18 TIMER: Check auto-disconnect...
24.10 16:51:18 STATS: vdl.0 cache, locks:4
24.10 16:51:19 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:51:19 TIME: user.ping 0.09 ms
24.10 16:51:19 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:51:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:51:25 TIME: user.ping 0.08 ms
24.10 16:51:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:51:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:51:34 TIME: user.ping 0.1 ms
24.10 16:51:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:51:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 16:51:43 TIME: user.ping 0.1 ms
24.10 16:51:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:51:56 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:51:56 TIME: user.ping 0.12 ms
24.10 16:51:56 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:52:18 TIMER: Check auto-disconnect...
24.10 16:52:18 STATS: vdl.0 cache, locks:4
24.10 16:52:34 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:52:34 TIME: user.ping 0.12 ms
24.10 16:52:34 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:53:11 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:53:11 TIME: user.ping 0.11 ms
24.10 16:53:11 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:53:18 TIMER: Check auto-disconnect...
24.10 16:53:18 STATS: vdl.0 cache, locks:4
24.10 16:53:49 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:53:49 TIME: user.ping 0.1 ms
24.10 16:53:49 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:54:18 TIMER: Check auto-disconnect...
24.10 16:54:18 STATS: vdl.0 cache, locks:4
24.10 16:54:26 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:54:26 TIME: user.ping 0.1 ms
24.10 16:54:26 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:55:03 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:55:03 TIME: user.ping 0.13 ms
24.10 16:55:03 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:55:18 TIMER: Check auto-disconnect...
24.10 16:55:18 NET: Client (name:Aimer conid:14140554 TCP) disconnected from vdl.0 (clients:1)
24.10 16:55:18 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
24.10 16:55:18 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
24.10 16:55:18 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
24.10 16:55:18 STATS: vdl.0 cache connection, 54 calls, total 0.100635766983032 sec spent, avg 1.86 ms
24.10 16:55:18 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 16:55:18 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
24.10 16:55:18 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 16:55:18 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
24.10 16:55:18 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
24.10 16:55:18 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
24.10 16:55:18 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
24.10 16:55:18 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 16:55:18 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
24.10 16:55:18 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
24.10 16:55:18 STATS: vdl.0 cache, locks:2
24.10 16:55:41 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:55:41 TIME: user.ping 0.12 ms
24.10 16:55:41 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:56:18 TIMER: Check auto-disconnect...
24.10 16:56:18 STATS: vdl.0 cache, locks:2
24.10 16:56:19 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:56:19 TIME: user.ping 0.11 ms
24.10 16:56:19 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:56:56 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 16:56:56 TIME: user.ping 0.11 ms
24.10 16:56:56 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:57:40 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
24.10 16:57:40 -<<-: server.login ok
24.10 16:57:40 DB: SELECT * FROM LocalizationStrings
24.10 16:57:40 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 TIMER: Starting timer...
24.10 16:57:40 TIMER: Timer running...
24.10 16:57:40 DB: SELECT * FROM GameVars
24.10 16:57:40 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
24.10 16:57:40 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
24.10 16:57:40 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
24.10 16:57:40 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
24.10 16:57:40 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
24.10 16:57:40 -<<-: core/quest.getDaily ok
24.10 16:57:40 DB: SELECT * FROM UserAttributeTypes
24.10 16:57:40 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 DB: SELECT * FROM UserVariableTypes
24.10 16:57:40 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
24.10 16:57:40 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 DB: SELECT * FROM ItemGroups
24.10 16:57:40 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 DB: SELECT * FROM Bundles ORDER BY ID
24.10 16:57:40 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 DB: SELECT * FROM BundleItems ORDER BY ID
24.10 16:57:40 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 SHOP: loading items...
24.10 16:57:40 ->>-: core/shop.getList { _type => core/shop.getList }
24.10 16:57:40 -<<-: core/shop.getList ok
24.10 16:57:40 SHOP: 0 items loaded (0 sec)
24.10 16:57:40 DB: SELECT * FROM EffectAttributeTypes
24.10 16:57:40 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 DB: SELECT * FROM Effects
24.10 16:57:40 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
24.10 16:57:40 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
24.10 16:57:40 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 DB: SELECT * FROM Badges
24.10 16:57:40 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
24.10 16:57:40 -<<-: core/server.query ok
24.10 16:57:40 TIMER: Check auto-disconnect...
24.10 16:57:40 STATS: vdl.0 cache, locks:0
24.10 16:58:50 NET: Client (conid:19027756) connected to vdl.0 (clients:1)
24.10 16:58:59 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 16:58:59 TIME: user.ping 0.11 ms
24.10 16:58:59 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:59:37 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 16:59:37 TIME: user.ping 0.1 ms
24.10 16:59:37 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 16:59:40 TIMER: Check auto-disconnect...
24.10 16:59:40 STATS: vdl.0 cache, locks:0
