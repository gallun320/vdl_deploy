17.10 14:00:49 TIMER: Check auto-disconnect...
17.10 14:00:50 STATS: vdl.0 cache, locks:0
17.10 14:01:49 TIMER: Check auto-disconnect...
17.10 14:01:50 STATS: vdl.0 cache, locks:0
17.10 14:02:49 TIMER: Check auto-disconnect...
17.10 14:02:50 STATS: vdl.0 cache, locks:0
17.10 14:03:49 TIMER: Check auto-disconnect...
17.10 14:03:50 STATS: vdl.0 cache, locks:0
17.10 14:04:49 TIMER: Check auto-disconnect...
17.10 14:04:50 STATS: vdl.0 cache, locks:0
17.10 14:05:49 TIMER: Check auto-disconnect...
17.10 14:05:50 STATS: vdl.0 cache, locks:0
17.10 14:06:49 TIMER: Check auto-disconnect...
17.10 14:06:50 STATS: vdl.0 cache, locks:0
17.10 14:07:49 TIMER: Check auto-disconnect...
17.10 14:07:50 STATS: vdl.0 cache, locks:0
17.10 14:08:49 TIMER: Check auto-disconnect...
17.10 14:08:50 STATS: vdl.0 cache, locks:0
17.10 14:09:49 TIMER: Check auto-disconnect...
17.10 14:09:50 STATS: vdl.0 cache, locks:0
17.10 14:10:49 TIMER: Check auto-disconnect...
17.10 14:10:50 STATS: vdl.0 cache, locks:0
17.10 14:11:49 TIMER: Check auto-disconnect...
17.10 14:11:50 STATS: vdl.0 cache, locks:0
17.10 14:12:49 TIMER: Check auto-disconnect...
17.10 14:12:50 STATS: vdl.0 cache, locks:0
17.10 14:13:49 TIMER: Check auto-disconnect...
17.10 14:13:50 STATS: vdl.0 cache, locks:0
17.10 14:14:49 TIMER: Check auto-disconnect...
17.10 14:14:50 STATS: vdl.0 cache, locks:0
17.10 14:15:19 NET: Client (conid:26307577) connected to vdl.0 (clients:1)
17.10 14:15:19 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
17.10 14:15:19 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
17.10 14:15:19 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
17.10 14:15:20 -<<-: core/server.query ok
17.10 14:15:20 STATS: vdl.0 cache connection, 21 calls, total 0.316774606704712 sec spent, avg 15.08 ms
17.10 14:15:20 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
17.10 14:15:20 -<<-: core/user.isOnlineID ok
17.10 14:15:20 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
17.10 14:15:20 -<<-: core/cache.get ok
17.10 14:15:20 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
17.10 14:15:20 -<<-: core/cache.get ok
17.10 14:15:20 NET: Client login (conid:26307577, id:36, name:uid36)
17.10 14:15:20 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
17.10 14:15:20 -<<-: core/user.loginPost null
17.10 14:15:20 DB: SELECT ID FROM TempUserLogins WHERE UserID = 36 AND Date = 'today'::timestamp
17.10 14:15:20 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 36 AND Date = 'today'::timestamp, _type => core/server.query }
17.10 14:15:20 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
17.10 14:15:20 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (36, 'today'::timestamp)
17.10 14:15:20 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
17.10 14:15:20 == NET: uid36 ret: user.join { name => uid36, type => user.join }
17.10 14:15:20 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (36, 'today'::timestamp), _type => core/server.pending }} }
17.10 14:15:20 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
17.10 14:15:26 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
17.10 14:15:26 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:15:26 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:15:26 TIME: tournament.getAvailableTournament 4.58 ms
17.10 14:15:26 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:15:30 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1476702920, lastLoginDate => 291, lastLoadDate => 1018 } }}, type => user, unlock => false, id => 36, _type => core/cache.update }
17.10 14:15:30 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
17.10 14:15:30 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
17.10 14:15:30 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
17.10 14:15:30 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [36,37] }
17.10 14:15:30 ->>-: vdl/cache.tournament.setGrid { battles => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], _type => vdl/cache.tournament.setGrid }
17.10 14:15:30 -<<-: vdl/cache.tournament.setGrid { errorCode => _requestException, _type => vdl/cache.tournament.setGrid }
17.10 14:15:30 TRACE: tournament.grid : cacheRequest exception { battles => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], _type => vdl/cache.tournament.setGrid }
17.10 14:15:30 TRACE: tournament.grid : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 206
Called from modules/VDLTournamentModule.hx line 164
Called from modules/VDLTournamentModule.hx line 68
Called from snipe/slave/Server.hx line 1176
17.10 14:15:49 TIMER: Check auto-disconnect...
17.10 14:15:50 STATS: vdl.0 cache, locks:2
17.10 14:16:49 TIMER: Check auto-disconnect...
17.10 14:16:50 STATS: vdl.0 cache, locks:2
17.10 14:17:49 TIMER: Check auto-disconnect...
17.10 14:17:50 STATS: vdl.0 cache, locks:2
17.10 14:18:49 TIMER: Check auto-disconnect...
17.10 14:18:49 NET: Client (name:uid36 conid:26307577 TCP) disconnected from vdl.0 (clients:0)
17.10 14:18:49 DB: SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true
17.10 14:18:49 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true, _type => core/server.query }
17.10 14:18:49 -<<-: core/server.query { list => {{ id => 48 }, { id => 49 }}, errorCode => ok, _type => core/server.query }
17.10 14:18:49 STATS: vdl.0 cache connection, 32 calls, total 0.595874547958374 sec spent, avg 18.62 ms
17.10 14:18:49 ->>-: vdl/cache.battle.infoRoom { roomId => 49, _type => vdl/cache.battle.infoRoom }
17.10 14:18:49 -<<-: vdl/cache.battle.infoRoom { secondId => 37, firstId => 36, _type => vdl/cache.battle.infoRoom, turnId => 36 }
17.10 14:18:49 ->>-: vdl/cache.battle.deleteRoom { roomId => 49, _type => vdl/cache.battle.deleteRoom }
17.10 14:18:49 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
17.10 14:18:49 ->>-: core/user.sendTo { id => 37, _type => core/user.sendTo, msg => { _type => battle.end } }
17.10 14:18:49 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
17.10 14:18:49 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 36, _type => core/cache.update }
17.10 14:18:49 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
17.10 14:18:49 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 36, _type => core/cache.update }
17.10 14:18:49 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
17.10 14:18:49 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 36, _type => core/user.logoutPost }
17.10 14:18:49 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
17.10 14:19:52 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
17.10 14:19:52 -<<-: server.login ok
17.10 14:19:52 DB: SELECT * FROM LocalizationStrings
17.10 14:19:52 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:19:52 TIMER: Starting timer...
17.10 14:19:52 TIMER: Timer running...
17.10 14:19:52 DB: SELECT * FROM GameVars
17.10 14:19:52 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:19:52 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
17.10 14:19:52 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:19:52 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
17.10 14:19:52 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:19:52 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
17.10 14:19:52 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:19:52 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
17.10 14:19:52 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:19:52 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
17.10 14:19:52 -<<-: core/quest.getDaily ok
17.10 14:19:52 DB: SELECT * FROM UserAttributeTypes
17.10 14:19:52 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:19:52 DB: SELECT * FROM UserVariableTypes
17.10 14:19:52 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:19:52 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
17.10 14:19:52 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:19:52 DB: SELECT * FROM ItemGroups
17.10 14:19:52 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:19:52 DB: SELECT * FROM Bundles ORDER BY ID
17.10 14:19:52 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:19:52 DB: SELECT * FROM BundleItems ORDER BY ID
17.10 14:19:52 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:19:52 SHOP: loading items...
17.10 14:19:52 ->>-: core/shop.getList { _type => core/shop.getList }
17.10 14:19:52 -<<-: core/shop.getList ok
17.10 14:19:52 SHOP: 0 items loaded (0 sec)
17.10 14:19:52 DB: SELECT * FROM EffectAttributeTypes
17.10 14:19:52 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:19:52 DB: SELECT * FROM Effects
17.10 14:19:52 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:19:52 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
17.10 14:19:52 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:19:52 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
17.10 14:19:52 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:19:52 DB: SELECT * FROM Badges
17.10 14:19:52 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
17.10 14:19:52 -<<-: core/server.query ok
17.10 14:20:51 NET: Client (conid:75658536) connected to vdl.0 (clients:1)
17.10 14:20:52 TIMER: Check auto-disconnect...
17.10 14:20:52 STATS: vdl.0 cache, locks:0
17.10 14:20:52 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
17.10 14:20:52 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
17.10 14:20:52 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
17.10 14:20:52 -<<-: core/server.query ok
17.10 14:20:52 STATS: vdl.0 cache connection, 21 calls, total 0.0285735130310059 sec spent, avg 1.36 ms
17.10 14:20:52 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
17.10 14:20:52 -<<-: core/user.isOnlineID ok
17.10 14:20:52 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
17.10 14:20:52 -<<-: core/cache.get ok
17.10 14:20:52 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
17.10 14:20:52 -<<-: core/cache.get ok
17.10 14:20:52 NET: Client login (conid:75658536, id:36, name:uid36)
17.10 14:20:52 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
17.10 14:20:52 -<<-: core/user.loginPost null
17.10 14:20:52 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
17.10 14:20:52 == NET: uid36 ret: user.join { name => uid36, type => user.join }
17.10 14:21:01 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
17.10 14:21:01 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:21:01 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:21:01 TIME: tournament.getAvailableTournament 7.5 ms
17.10 14:21:01 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:21:02 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
17.10 14:21:02 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
17.10 14:21:03 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
17.10 14:21:03 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
17.10 14:21:03 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [36,37] }
17.10 14:21:03 ->>-: vdl/cache.tournament.setGrid { battles => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], _type => vdl/cache.tournament.setGrid }
17.10 14:21:03 -<<-: vdl/cache.tournament.setGrid { errorCode => _requestException, _type => vdl/cache.tournament.setGrid }
17.10 14:21:03 TRACE: tournament.grid : cacheRequest exception { battles => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], _type => vdl/cache.tournament.setGrid }
17.10 14:21:03 TRACE: tournament.grid : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 209
Called from modules/VDLTournamentModule.hx line 167
Called from modules/VDLTournamentModule.hx line 68
Called from snipe/slave/Server.hx line 1176
17.10 14:22:18 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
17.10 14:22:18 -<<-: server.login ok
17.10 14:22:18 DB: SELECT * FROM LocalizationStrings
17.10 14:22:18 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:18 TIMER: Starting timer...
17.10 14:22:18 TIMER: Timer running...
17.10 14:22:18 DB: SELECT * FROM GameVars
17.10 14:22:18 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:18 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
17.10 14:22:18 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:18 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
17.10 14:22:18 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:18 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
17.10 14:22:18 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:18 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
17.10 14:22:18 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:18 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
17.10 14:22:18 -<<-: core/quest.getDaily ok
17.10 14:22:18 DB: SELECT * FROM UserAttributeTypes
17.10 14:22:18 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:18 DB: SELECT * FROM UserVariableTypes
17.10 14:22:18 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:18 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
17.10 14:22:18 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:18 DB: SELECT * FROM ItemGroups
17.10 14:22:18 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:18 DB: SELECT * FROM Bundles ORDER BY ID
17.10 14:22:18 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:18 DB: SELECT * FROM BundleItems ORDER BY ID
17.10 14:22:18 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:18 SHOP: loading items...
17.10 14:22:18 ->>-: core/shop.getList { _type => core/shop.getList }
17.10 14:22:18 -<<-: core/shop.getList ok
17.10 14:22:18 SHOP: 0 items loaded (0 sec)
17.10 14:22:18 DB: SELECT * FROM EffectAttributeTypes
17.10 14:22:18 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:18 DB: SELECT * FROM Effects
17.10 14:22:18 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:18 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
17.10 14:22:18 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:18 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
17.10 14:22:18 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:18 DB: SELECT * FROM Badges
17.10 14:22:18 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
17.10 14:22:18 -<<-: core/server.query ok
17.10 14:22:34 NET: Client (conid:50497540) connected to vdl.0 (clients:1)
17.10 14:22:35 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
17.10 14:22:35 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
17.10 14:22:35 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
17.10 14:22:35 -<<-: core/server.query ok
17.10 14:22:35 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
17.10 14:22:35 -<<-: core/user.isOnlineID ok
17.10 14:22:35 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
17.10 14:22:35 -<<-: core/cache.get ok
17.10 14:22:35 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
17.10 14:22:35 -<<-: core/cache.get ok
17.10 14:22:35 NET: Client login (conid:50497540, id:36, name:uid36)
17.10 14:22:35 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
17.10 14:22:35 -<<-: core/user.loginPost null
17.10 14:22:35 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
17.10 14:22:35 == NET: uid36 ret: user.join { name => uid36, type => user.join }
17.10 14:22:39 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
17.10 14:22:39 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:22:39 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:22:39 TIME: tournament.getAvailableTournament 7.46 ms
17.10 14:22:39 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:22:42 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
17.10 14:22:42 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
17.10 14:22:42 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [36,37] }
17.10 14:22:42 ->>-: vdl/cache.tournament.setGrid { battles => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], _type => vdl/cache.tournament.setGrid }
17.10 14:22:42 -<<-: vdl/cache.tournament.setGrid { errorCode => _requestException, _type => vdl/cache.tournament.setGrid }
17.10 14:22:42 TRACE: tournament.grid : cacheRequest exception { battles => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], _type => vdl/cache.tournament.setGrid }
17.10 14:22:42 TRACE: tournament.grid : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 209
Called from modules/VDLTournamentModule.hx line 167
Called from modules/VDLTournamentModule.hx line 68
Called from snipe/slave/Server.hx line 1176
17.10 14:22:43 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
17.10 14:22:43 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
17.10 14:24:15 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
17.10 14:24:15 -<<-: server.login ok
17.10 14:24:15 DB: SELECT * FROM LocalizationStrings
17.10 14:24:15 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:15 TIMER: Starting timer...
17.10 14:24:15 TIMER: Timer running...
17.10 14:24:15 DB: SELECT * FROM GameVars
17.10 14:24:15 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:15 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
17.10 14:24:15 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:15 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
17.10 14:24:15 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:15 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
17.10 14:24:15 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:15 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
17.10 14:24:15 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:15 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
17.10 14:24:15 -<<-: core/quest.getDaily ok
17.10 14:24:15 DB: SELECT * FROM UserAttributeTypes
17.10 14:24:15 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:15 DB: SELECT * FROM UserVariableTypes
17.10 14:24:15 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:15 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
17.10 14:24:15 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:15 DB: SELECT * FROM ItemGroups
17.10 14:24:15 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:15 DB: SELECT * FROM Bundles ORDER BY ID
17.10 14:24:15 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:15 DB: SELECT * FROM BundleItems ORDER BY ID
17.10 14:24:15 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:15 SHOP: loading items...
17.10 14:24:15 ->>-: core/shop.getList { _type => core/shop.getList }
17.10 14:24:15 -<<-: core/shop.getList ok
17.10 14:24:15 SHOP: 0 items loaded (0 sec)
17.10 14:24:15 DB: SELECT * FROM EffectAttributeTypes
17.10 14:24:15 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:15 DB: SELECT * FROM Effects
17.10 14:24:15 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:15 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
17.10 14:24:15 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:15 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
17.10 14:24:15 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:15 DB: SELECT * FROM Badges
17.10 14:24:15 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
17.10 14:24:15 -<<-: core/server.query ok
17.10 14:24:29 NET: Client (conid:84718951) connected to vdl.0 (clients:1)
17.10 14:24:30 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
17.10 14:24:30 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
17.10 14:24:30 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
17.10 14:24:30 -<<-: core/server.query ok
17.10 14:24:30 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
17.10 14:24:30 -<<-: core/user.isOnlineID ok
17.10 14:24:30 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
17.10 14:24:30 -<<-: core/cache.get ok
17.10 14:24:30 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
17.10 14:24:30 -<<-: core/cache.get ok
17.10 14:24:30 NET: Client login (conid:84718951, id:36, name:uid36)
17.10 14:24:30 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
17.10 14:24:30 -<<-: core/user.loginPost null
17.10 14:24:30 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
17.10 14:24:30 == NET: uid36 ret: user.join { name => uid36, type => user.join }
17.10 14:24:35 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
17.10 14:24:35 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
17.10 14:24:49 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
17.10 14:24:49 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:24:49 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:24:49 TIME: tournament.getAvailableTournament 8.03 ms
17.10 14:24:49 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:25:00 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
17.10 14:25:00 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
17.10 14:25:00 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [36,37] }
17.10 14:25:00 ->>-: vdl/cache.tournament.setGrid { battles => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], _type => vdl/cache.tournament.setGrid }
17.10 14:25:00 -<<-: vdl/cache.tournament.setGrid { errorCode => _requestException, _type => vdl/cache.tournament.setGrid }
17.10 14:25:00 TRACE: tournament.grid : cacheRequest exception { battles => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], _type => vdl/cache.tournament.setGrid }
17.10 14:25:00 TRACE: tournament.grid : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 209
Called from modules/VDLTournamentModule.hx line 167
Called from modules/VDLTournamentModule.hx line 68
Called from snipe/slave/Server.hx line 1176
17.10 14:26:26 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
17.10 14:26:26 -<<-: server.login ok
17.10 14:26:26 DB: SELECT * FROM LocalizationStrings
17.10 14:26:26 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:26 TIMER: Starting timer...
17.10 14:26:26 TIMER: Timer running...
17.10 14:26:26 DB: SELECT * FROM GameVars
17.10 14:26:26 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:26 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
17.10 14:26:26 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:26 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
17.10 14:26:26 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:26 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
17.10 14:26:26 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:26 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
17.10 14:26:26 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:26 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
17.10 14:26:26 -<<-: core/quest.getDaily ok
17.10 14:26:26 DB: SELECT * FROM UserAttributeTypes
17.10 14:26:26 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:26 DB: SELECT * FROM UserVariableTypes
17.10 14:26:26 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:26 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
17.10 14:26:26 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:26 DB: SELECT * FROM ItemGroups
17.10 14:26:26 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:26 DB: SELECT * FROM Bundles ORDER BY ID
17.10 14:26:26 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:26 DB: SELECT * FROM BundleItems ORDER BY ID
17.10 14:26:26 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:26 SHOP: loading items...
17.10 14:26:26 ->>-: core/shop.getList { _type => core/shop.getList }
17.10 14:26:26 -<<-: core/shop.getList ok
17.10 14:26:26 SHOP: 0 items loaded (0 sec)
17.10 14:26:26 DB: SELECT * FROM EffectAttributeTypes
17.10 14:26:26 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:26 DB: SELECT * FROM Effects
17.10 14:26:26 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:26 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
17.10 14:26:26 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:26 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
17.10 14:26:26 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:26 DB: SELECT * FROM Badges
17.10 14:26:26 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
17.10 14:26:26 -<<-: core/server.query ok
17.10 14:26:39 NET: Client (conid:83307105) connected to vdl.0 (clients:1)
17.10 14:26:40 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
17.10 14:26:40 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
17.10 14:26:40 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
17.10 14:26:40 -<<-: core/server.query ok
17.10 14:26:40 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
17.10 14:26:40 -<<-: core/user.isOnlineID ok
17.10 14:26:40 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
17.10 14:26:40 -<<-: core/cache.get ok
17.10 14:26:40 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
17.10 14:26:40 -<<-: core/cache.get ok
17.10 14:26:40 NET: Client login (conid:83307105, id:36, name:uid36)
17.10 14:26:40 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
17.10 14:26:40 -<<-: core/user.loginPost null
17.10 14:26:40 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
17.10 14:26:40 == NET: uid36 ret: user.join { name => uid36, type => user.join }
17.10 14:26:47 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
17.10 14:26:47 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:26:47 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:26:47 TIME: tournament.getAvailableTournament 4.06 ms
17.10 14:26:47 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:26:47 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
17.10 14:26:47 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
17.10 14:26:50 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
17.10 14:26:50 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
17.10 14:26:50 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [36,37] }
17.10 14:26:50 ->>-: vdl/cache.tournament.setGrid { battles => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], _type => vdl/cache.tournament.setGrid }
17.10 14:26:50 -<<-: vdl/cache.tournament.setGrid { list => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], errorCode => ok, _type => vdl/cache.tournament.setGrid }
17.10 14:26:50 TIME: tournament.grid 1 ms
17.10 14:26:50 == NET: uid36 ret: tournament.grid { list => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], type => tournament.grid, errorCode => ok, _type => vdl/cache.tournament.setGrid }
17.10 14:27:26 TIMER: Check auto-disconnect...
17.10 14:27:27 STATS: vdl.0 cache, locks:2
17.10 14:28:26 TIMER: Check auto-disconnect...
17.10 14:28:27 STATS: vdl.0 cache, locks:2
17.10 14:29:26 TIMER: Check auto-disconnect...
17.10 14:29:27 STATS: vdl.0 cache, locks:2
17.10 14:30:26 TIMER: Check auto-disconnect...
17.10 14:30:26 NET: Client (name:uid36 conid:83307105 TCP) disconnected from vdl.0 (clients:0)
17.10 14:30:26 DB: SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true
17.10 14:30:26 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true, _type => core/server.query }
17.10 14:30:26 -<<-: core/server.query { list => {{ id => 48 }}, errorCode => ok, _type => core/server.query }
17.10 14:30:26 STATS: vdl.0 cache connection, 30 calls, total 0.0354092121124268 sec spent, avg 1.18 ms
17.10 14:30:26 ->>-: vdl/cache.battle.infoRoom { roomId => 48, _type => vdl/cache.battle.infoRoom }
17.10 14:30:26 -<<-: vdl/cache.battle.infoRoom { secondId => 37, firstId => 36, _type => vdl/cache.battle.infoRoom, turnId => 36 }
17.10 14:30:26 ->>-: vdl/cache.battle.deleteRoom { roomId => 48, _type => vdl/cache.battle.deleteRoom }
17.10 14:30:26 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
17.10 14:30:26 ->>-: core/user.sendTo { id => 37, _type => core/user.sendTo, msg => { _type => battle.end } }
17.10 14:30:26 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
17.10 14:30:26 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 36, _type => core/cache.update }
17.10 14:30:26 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
17.10 14:30:26 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 36, _type => core/cache.update }
17.10 14:30:26 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
17.10 14:30:26 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 36, _type => core/user.logoutPost }
17.10 14:30:26 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
17.10 14:30:27 STATS: vdl.0 cache, locks:0
17.10 14:31:26 TIMER: Check auto-disconnect...
17.10 14:31:27 STATS: vdl.0 cache, locks:0
17.10 14:32:26 TIMER: Check auto-disconnect...
17.10 14:32:27 STATS: vdl.0 cache, locks:0
17.10 14:33:26 TIMER: Check auto-disconnect...
17.10 14:33:27 STATS: vdl.0 cache, locks:0
17.10 14:34:26 TIMER: Check auto-disconnect...
17.10 14:34:27 STATS: vdl.0 cache, locks:0
17.10 14:35:26 TIMER: Check auto-disconnect...
17.10 14:35:27 STATS: vdl.0 cache, locks:0
17.10 14:36:26 TIMER: Check auto-disconnect...
17.10 14:36:27 STATS: vdl.0 cache, locks:0
17.10 14:37:26 TIMER: Check auto-disconnect...
17.10 14:37:27 STATS: vdl.0 cache, locks:0
17.10 14:38:26 TIMER: Check auto-disconnect...
17.10 14:38:27 STATS: vdl.0 cache, locks:0
17.10 14:39:26 TIMER: Check auto-disconnect...
17.10 14:39:27 STATS: vdl.0 cache, locks:0
17.10 14:40:26 TIMER: Check auto-disconnect...
17.10 14:41:55 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
17.10 14:41:55 -<<-: server.login ok
17.10 14:41:55 DB: SELECT * FROM LocalizationStrings
17.10 14:41:55 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:41:55 TIMER: Starting timer...
17.10 14:41:55 TIMER: Timer running...
17.10 14:41:55 DB: SELECT * FROM GameVars
17.10 14:41:55 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:41:55 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
17.10 14:41:55 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:41:55 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
17.10 14:41:55 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:41:55 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
17.10 14:41:55 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:41:55 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
17.10 14:41:55 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:41:55 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
17.10 14:41:55 -<<-: core/quest.getDaily ok
17.10 14:41:55 DB: SELECT * FROM UserAttributeTypes
17.10 14:41:55 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:41:55 DB: SELECT * FROM UserVariableTypes
17.10 14:41:55 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:41:55 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
17.10 14:41:55 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:41:55 DB: SELECT * FROM ItemGroups
17.10 14:41:55 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:41:55 DB: SELECT * FROM Bundles ORDER BY ID
17.10 14:41:55 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:41:55 DB: SELECT * FROM BundleItems ORDER BY ID
17.10 14:41:55 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:41:55 SHOP: loading items...
17.10 14:41:55 ->>-: core/shop.getList { _type => core/shop.getList }
17.10 14:41:55 -<<-: core/shop.getList ok
17.10 14:41:55 SHOP: 0 items loaded (0 sec)
17.10 14:41:55 DB: SELECT * FROM EffectAttributeTypes
17.10 14:41:55 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:41:55 DB: SELECT * FROM Effects
17.10 14:41:55 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:41:55 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
17.10 14:41:55 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:41:55 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
17.10 14:41:55 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:41:55 DB: SELECT * FROM Badges
17.10 14:41:55 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
17.10 14:41:55 -<<-: core/server.query ok
17.10 14:42:20 NET: Client (conid:22403525) connected to vdl.0 (clients:1)
17.10 14:42:20 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
17.10 14:42:20 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
17.10 14:42:20 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
17.10 14:42:20 -<<-: core/server.query ok
17.10 14:42:20 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
17.10 14:42:20 -<<-: core/user.isOnlineID ok
17.10 14:42:20 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
17.10 14:42:20 -<<-: core/cache.get ok
17.10 14:42:20 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
17.10 14:42:20 -<<-: core/cache.get ok
17.10 14:42:20 NET: Client login (conid:22403525, id:36, name:uid36)
17.10 14:42:20 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
17.10 14:42:20 -<<-: core/user.loginPost null
17.10 14:42:20 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
17.10 14:42:20 == NET: uid36 ret: user.join { name => uid36, type => user.join }
17.10 14:42:29 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
17.10 14:42:29 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:42:29 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:42:29 TIME: tournament.getAvailableTournament 3.36 ms
17.10 14:42:29 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:42:30 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
17.10 14:42:30 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
17.10 14:42:32 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
17.10 14:42:32 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
17.10 14:42:32 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [36,37] }
17.10 14:42:32 ->>-: vdl/cache.tournament.setGrid { battles => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], _type => vdl/cache.tournament.setGrid }
17.10 14:42:32 -<<-: vdl/cache.tournament.setGrid { list => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], tournamentId => null, errorCode => ok, _type => vdl/cache.tournament.setGrid }
17.10 14:42:32 TIME: tournament.grid 0.67 ms
17.10 14:42:32 == NET: uid36 ret: tournament.grid { list => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], type => tournament.grid, tournamentId => null, errorCode => ok, _type => vdl/cache.tournament.setGrid }
17.10 14:50:27 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
17.10 14:50:27 -<<-: server.login ok
17.10 14:50:27 DB: SELECT * FROM LocalizationStrings
17.10 14:50:27 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:27 TIMER: Starting timer...
17.10 14:50:27 TIMER: Timer running...
17.10 14:50:27 DB: SELECT * FROM GameVars
17.10 14:50:27 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:27 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
17.10 14:50:27 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:27 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
17.10 14:50:27 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:27 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
17.10 14:50:27 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:27 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
17.10 14:50:27 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:27 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
17.10 14:50:27 -<<-: core/quest.getDaily ok
17.10 14:50:27 DB: SELECT * FROM UserAttributeTypes
17.10 14:50:27 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:27 DB: SELECT * FROM UserVariableTypes
17.10 14:50:27 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:27 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
17.10 14:50:27 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:27 DB: SELECT * FROM ItemGroups
17.10 14:50:27 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:27 DB: SELECT * FROM Bundles ORDER BY ID
17.10 14:50:27 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:27 DB: SELECT * FROM BundleItems ORDER BY ID
17.10 14:50:27 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:27 SHOP: loading items...
17.10 14:50:27 ->>-: core/shop.getList { _type => core/shop.getList }
17.10 14:50:27 -<<-: core/shop.getList ok
17.10 14:50:27 SHOP: 0 items loaded (0 sec)
17.10 14:50:27 DB: SELECT * FROM EffectAttributeTypes
17.10 14:50:27 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:27 DB: SELECT * FROM Effects
17.10 14:50:27 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:27 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
17.10 14:50:27 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:27 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
17.10 14:50:27 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:27 DB: SELECT * FROM Badges
17.10 14:50:27 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
17.10 14:50:27 -<<-: core/server.query ok
17.10 14:50:47 NET: Client (conid:86526513) connected to vdl.0 (clients:1)
17.10 14:50:48 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
17.10 14:50:48 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
17.10 14:50:48 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
17.10 14:50:48 -<<-: core/server.query ok
17.10 14:50:48 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
17.10 14:50:48 -<<-: core/user.isOnlineID ok
17.10 14:50:48 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
17.10 14:50:48 -<<-: core/cache.get ok
17.10 14:50:48 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
17.10 14:50:48 -<<-: core/cache.get ok
17.10 14:50:48 NET: Client login (conid:86526513, id:36, name:uid36)
17.10 14:50:48 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
17.10 14:50:48 -<<-: core/user.loginPost null
17.10 14:50:48 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
17.10 14:50:48 == NET: uid36 ret: user.join { name => uid36, type => user.join }
17.10 14:50:53 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
17.10 14:50:53 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:50:53 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:50:53 TIME: tournament.getAvailableTournament 5.42 ms
17.10 14:50:53 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:50:56 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
17.10 14:50:56 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
17.10 14:50:56 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [36,37] }
17.10 14:50:56 ->>-: vdl/cache.tournament.setGrid { battles => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], _type => vdl/cache.tournament.setGrid }
17.10 14:50:56 -<<-: vdl/cache.tournament.setGrid { list => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], tournamentId => null, errorCode => ok, _type => vdl/cache.tournament.setGrid }
17.10 14:50:56 TIME: tournament.grid 1.36 ms
17.10 14:50:56 == NET: uid36 ret: tournament.grid { list => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], type => tournament.grid, tournamentId => null, errorCode => ok, _type => vdl/cache.tournament.setGrid }
17.10 14:50:57 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
17.10 14:50:57 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
17.10 14:53:02 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
17.10 14:53:02 -<<-: server.login ok
17.10 14:53:02 DB: SELECT * FROM LocalizationStrings
17.10 14:53:02 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 TIMER: Starting timer...
17.10 14:53:02 TIMER: Timer running...
17.10 14:53:02 DB: SELECT * FROM GameVars
17.10 14:53:02 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
17.10 14:53:02 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
17.10 14:53:02 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
17.10 14:53:02 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
17.10 14:53:02 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
17.10 14:53:02 -<<-: core/quest.getDaily ok
17.10 14:53:02 DB: SELECT * FROM UserAttributeTypes
17.10 14:53:02 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 DB: SELECT * FROM UserVariableTypes
17.10 14:53:02 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
17.10 14:53:02 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 DB: SELECT * FROM ItemGroups
17.10 14:53:02 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 DB: SELECT * FROM Bundles ORDER BY ID
17.10 14:53:02 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 DB: SELECT * FROM BundleItems ORDER BY ID
17.10 14:53:02 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 SHOP: loading items...
17.10 14:53:02 ->>-: core/shop.getList { _type => core/shop.getList }
17.10 14:53:02 -<<-: core/shop.getList ok
17.10 14:53:02 SHOP: 0 items loaded (0 sec)
17.10 14:53:02 DB: SELECT * FROM EffectAttributeTypes
17.10 14:53:02 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 DB: SELECT * FROM Effects
17.10 14:53:02 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
17.10 14:53:02 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
17.10 14:53:02 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 DB: SELECT * FROM Badges
17.10 14:53:02 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
17.10 14:53:02 -<<-: core/server.query ok
17.10 14:53:02 TIMER: Check auto-disconnect...
17.10 14:53:02 STATS: vdl.0 cache, locks:0
17.10 14:53:02 NET: Client (conid:66341392) connected to vdl.0 (clients:1)
17.10 14:54:03 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
17.10 14:54:03 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
17.10 14:54:03 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
17.10 14:54:03 -<<-: core/server.query ok
17.10 14:54:03 STATS: vdl.0 cache connection, 21 calls, total 0.0229575634002686 sec spent, avg 1.09 ms
17.10 14:54:03 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
17.10 14:54:03 -<<-: core/user.isOnlineID ok
17.10 14:54:03 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
17.10 14:54:03 -<<-: core/cache.get ok
17.10 14:54:03 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
17.10 14:54:03 -<<-: core/cache.get ok
17.10 14:54:03 NET: Client login (conid:66341392, id:36, name:uid36)
17.10 14:54:03 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
17.10 14:54:03 -<<-: core/user.loginPost null
17.10 14:54:03 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
17.10 14:54:03 == NET: uid36 ret: user.join { name => uid36, type => user.join }
17.10 14:54:12 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
17.10 14:54:12 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
17.10 14:54:29 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
17.10 14:54:29 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:54:29 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:54:29 TIME: tournament.getAvailableTournament 7.64 ms
17.10 14:54:29 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:55:02 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
17.10 14:55:02 -<<-: server.login ok
17.10 14:55:02 DB: SELECT * FROM LocalizationStrings
17.10 14:55:02 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:02 TIMER: Starting timer...
17.10 14:55:02 TIMER: Timer running...
17.10 14:55:02 DB: SELECT * FROM GameVars
17.10 14:55:02 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:02 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
17.10 14:55:02 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:02 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
17.10 14:55:02 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:02 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
17.10 14:55:02 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:02 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
17.10 14:55:02 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:02 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
17.10 14:55:02 -<<-: core/quest.getDaily ok
17.10 14:55:02 DB: SELECT * FROM UserAttributeTypes
17.10 14:55:02 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:02 DB: SELECT * FROM UserVariableTypes
17.10 14:55:02 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:02 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
17.10 14:55:02 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:02 DB: SELECT * FROM ItemGroups
17.10 14:55:02 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:02 DB: SELECT * FROM Bundles ORDER BY ID
17.10 14:55:02 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:02 DB: SELECT * FROM BundleItems ORDER BY ID
17.10 14:55:02 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:02 SHOP: loading items...
17.10 14:55:02 ->>-: core/shop.getList { _type => core/shop.getList }
17.10 14:55:02 -<<-: core/shop.getList ok
17.10 14:55:02 SHOP: 0 items loaded (0 sec)
17.10 14:55:02 DB: SELECT * FROM EffectAttributeTypes
17.10 14:55:02 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:02 DB: SELECT * FROM Effects
17.10 14:55:02 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:02 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
17.10 14:55:02 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:02 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
17.10 14:55:02 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:02 DB: SELECT * FROM Badges
17.10 14:55:02 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
17.10 14:55:02 -<<-: core/server.query ok
17.10 14:55:18 NET: Client (conid:61319350) connected to vdl.0 (clients:1)
17.10 14:55:19 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
17.10 14:55:19 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
17.10 14:55:19 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
17.10 14:55:19 -<<-: core/server.query ok
17.10 14:55:19 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
17.10 14:55:19 -<<-: core/user.isOnlineID ok
17.10 14:55:19 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
17.10 14:55:19 -<<-: core/cache.get ok
17.10 14:55:19 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
17.10 14:55:19 -<<-: core/cache.get ok
17.10 14:55:19 NET: Client login (conid:61319350, id:36, name:uid36)
17.10 14:55:19 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
17.10 14:55:19 -<<-: core/user.loginPost null
17.10 14:55:19 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
17.10 14:55:19 == NET: uid36 ret: user.join { name => uid36, type => user.join }
17.10 14:55:24 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
17.10 14:55:24 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:55:24 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:55:24 TIME: tournament.getAvailableTournament 4.7 ms
17.10 14:55:24 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
17.10 14:55:27 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
17.10 14:55:27 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
17.10 14:55:27 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [36,37] }
17.10 14:55:27 ->>-: vdl/cache.tournament.setGrid { battles => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid }
17.10 14:55:27 -<<-: vdl/cache.tournament.setGrid { list => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
17.10 14:55:27 TIME: tournament.grid 1.38 ms
17.10 14:55:27 == NET: uid36 ret: tournament.grid { list => [{ tournamentId => 1, round => 1, player1 => 36, player2 => 37 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
17.10 14:55:27 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
17.10 14:55:27 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
17.10 14:56:18 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
17.10 14:56:18 -<<-: server.login ok
17.10 14:56:18 DB: SELECT * FROM LocalizationStrings
17.10 14:56:18 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 TIMER: Starting timer...
17.10 14:56:18 TIMER: Timer running...
17.10 14:56:18 DB: SELECT * FROM GameVars
17.10 14:56:18 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
17.10 14:56:18 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
17.10 14:56:18 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
17.10 14:56:18 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
17.10 14:56:18 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
17.10 14:56:18 -<<-: core/quest.getDaily ok
17.10 14:56:18 DB: SELECT * FROM UserAttributeTypes
17.10 14:56:18 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 DB: SELECT * FROM UserVariableTypes
17.10 14:56:18 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
17.10 14:56:18 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 DB: SELECT * FROM ItemGroups
17.10 14:56:18 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 DB: SELECT * FROM Bundles ORDER BY ID
17.10 14:56:18 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 DB: SELECT * FROM BundleItems ORDER BY ID
17.10 14:56:18 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 SHOP: loading items...
17.10 14:56:18 ->>-: core/shop.getList { _type => core/shop.getList }
17.10 14:56:18 -<<-: core/shop.getList ok
17.10 14:56:18 SHOP: 0 items loaded (0 sec)
17.10 14:56:18 DB: SELECT * FROM EffectAttributeTypes
17.10 14:56:18 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 DB: SELECT * FROM Effects
17.10 14:56:18 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
17.10 14:56:18 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
17.10 14:56:18 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 DB: SELECT * FROM Badges
17.10 14:56:18 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
17.10 14:56:18 -<<-: core/server.query ok
17.10 14:56:18 TIMER: Check auto-disconnect...
17.10 14:56:18 STATS: vdl.0 cache, locks:0
17.10 14:56:18 TIMER: Check auto-disconnect...
17.10 14:56:18 STATS: vdl.0 cache, locks:0
17.10 14:56:18 TIMER: Check auto-disconnect...
17.10 14:56:18 STATS: vdl.0 cache, locks:0
17.10 14:56:18 TIMER: Check auto-disconnect...
17.10 14:56:18 STATS: vdl.0 cache, locks:0
17.10 14:56:18 TIMER: Check auto-disconnect...
17.10 14:56:18 STATS: vdl.0 cache, locks:0
