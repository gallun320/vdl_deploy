12.10 19:00:52 NET: Client (conid:38399496) connected to vdl.0 (clients:1)
12.10 19:00:53 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 19:00:53 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 19:00:53 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 19:00:53 -<<-: core/server.query { list => {{ name => uid33, networkid => , isbanned => false, id => 33 }}, errorCode => ok, _type => core/server.query }
12.10 19:00:53 STATS: vdl.0 cache connection, 33 calls, total 0.105924129486084 sec spent, avg 3.21 ms
12.10 19:00:53 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 19:00:53 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 19:00:53 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 19:00:53 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid33, deleted => false, email => , networktype =>   , password => uid33, isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476272110, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 0, id => 33 } }
12.10 19:00:53 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 19:00:53 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 33 } }
12.10 19:00:53 NET: Client login (conid:38399496, id:33, name:uid33)
12.10 19:00:53 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 19:00:53 -<<-: core/user.loginPost { _type => core/user.loginPost }
12.10 19:00:53 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 19:00:53 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 19:01:00 TIMER: Check auto-disconnect...
12.10 19:01:00 STATS: vdl.0 cache, locks:2
12.10 19:01:00 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 19:01:00 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 19:01:01 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 19:01:01 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:01:01 -<<-: vdl/cache.tournament.getAvailableTournament { errorCode => _requestException, _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:01:01 TRACE: tournament.getAvailableTournament : cacheRequest exception { _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:01:01 TRACE: tournament.getAvailableTournament : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 143
Called from modules/VDLTournamentModule.hx line 59
Called from snipe/slave/Server.hx line 1176
12.10 19:02:37 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 19:02:37 -<<-: server.login ok
12.10 19:02:37 DB: SELECT * FROM LocalizationStrings
12.10 19:02:37 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:02:37 TIMER: Starting timer...
12.10 19:02:37 TIMER: Timer running...
12.10 19:02:37 DB: SELECT * FROM GameVars
12.10 19:02:37 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:02:37 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 19:02:37 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:02:37 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 19:02:37 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:02:37 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 19:02:37 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:02:37 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 19:02:37 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:02:37 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 19:02:37 -<<-: core/quest.getDaily ok
12.10 19:02:37 DB: SELECT * FROM UserAttributeTypes
12.10 19:02:37 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:02:37 DB: SELECT * FROM UserVariableTypes
12.10 19:02:37 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:02:37 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 19:02:37 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:02:37 DB: SELECT * FROM ItemGroups
12.10 19:02:37 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:02:37 DB: SELECT * FROM Bundles ORDER BY ID
12.10 19:02:37 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:02:37 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 19:02:37 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:02:37 SHOP: loading items...
12.10 19:02:37 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 19:02:37 -<<-: core/shop.getList ok
12.10 19:02:37 SHOP: 0 items loaded (0 sec)
12.10 19:02:37 DB: SELECT * FROM EffectAttributeTypes
12.10 19:02:37 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:02:37 DB: SELECT * FROM Effects
12.10 19:02:37 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:02:37 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 19:02:37 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:02:37 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 19:02:37 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:02:37 DB: SELECT * FROM Badges
12.10 19:02:37 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 19:02:37 -<<-: core/server.query ok
12.10 19:03:22 NET: Client (conid:54681070) connected to vdl.0 (clients:1)
12.10 19:03:23 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 19:03:23 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 19:03:23 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 19:03:23 -<<-: core/server.query ok
12.10 19:03:23 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 19:03:23 -<<-: core/user.isOnlineID ok
12.10 19:03:23 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 19:03:23 -<<-: core/cache.get ok
12.10 19:03:23 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 19:03:23 -<<-: core/cache.get ok
12.10 19:03:23 NET: Client login (conid:54681070, id:33, name:uid33)
12.10 19:03:23 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 19:03:23 -<<-: core/user.loginPost null
12.10 19:03:23 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 19:03:23 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 19:03:32 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 19:03:32 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 19:03:37 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 19:03:37 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:03:37 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid33, id => 33 }], battleActive => null, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:03:37 TIME: tournament.getAvailableTournament 2.22 ms
12.10 19:03:37 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid33, id => 33 }], battleActive => null, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:03:37 TIMER: Check auto-disconnect...
12.10 19:03:37 STATS: vdl.0 cache, locks:2
12.10 19:03:37 TIMER: Check auto-disconnect...
12.10 19:03:37 STATS: vdl.0 cache, locks:2
12.10 19:03:37 TIMER: Check auto-disconnect...
12.10 19:03:37 STATS: vdl.0 cache, locks:2
12.10 19:05:44 NET: Client (name:uid33 conid:54681070 TCP) disconnected from vdl.0 (clients:0)
12.10 19:05:44 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 19:05:44 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 19:05:44 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 19:05:44 STATS: vdl.0 cache connection, 28 calls, total 0.0742223262786865 sec spent, avg 2.65 ms
12.10 19:05:44 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 19:05:44 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 19:05:44 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 19:05:44 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
12.10 19:05:44 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 19:05:44 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 19:05:44 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 19:05:44 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 19:05:44 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 19:05:44 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 19:05:53 NET: Client (conid:10907583) connected to vdl.0 (clients:1)
12.10 19:05:53 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 19:05:53 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 19:05:53 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 19:05:53 -<<-: core/server.query { list => {{ name => uid33, networkid => , isbanned => false, id => 33 }}, errorCode => ok, _type => core/server.query }
12.10 19:05:53 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 19:05:53 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 19:05:53 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 19:05:53 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid33, deleted => false, email => , networktype =>   , password => uid33, isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476272110, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 2, id => 33 } }
12.10 19:05:53 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 19:05:53 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 33 } }
12.10 19:05:53 NET: Client login (conid:10907583, id:33, name:uid33)
12.10 19:05:53 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 19:05:53 -<<-: core/user.loginPost { _type => core/user.loginPost }
12.10 19:05:53 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 19:05:53 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 19:05:59 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 19:05:59 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:05:59 -<<-: vdl/cache.tournament.getAvailableTournament { errorCode => _requestException, _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:05:59 TRACE: tournament.getAvailableTournament : cacheRequest exception { _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:05:59 TRACE: tournament.getAvailableTournament : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 143
Called from modules/VDLTournamentModule.hx line 59
Called from snipe/slave/Server.hx line 1176
12.10 19:06:02 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 19:06:02 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
12.10 19:07:33 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 19:07:33 -<<-: server.login ok
12.10 19:07:33 DB: SELECT * FROM LocalizationStrings
12.10 19:07:33 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:07:33 TIMER: Starting timer...
12.10 19:07:33 TIMER: Timer running...
12.10 19:07:33 DB: SELECT * FROM GameVars
12.10 19:07:33 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:07:33 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 19:07:33 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:07:33 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 19:07:33 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:07:33 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 19:07:33 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:07:33 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 19:07:33 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:07:33 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 19:07:33 -<<-: core/quest.getDaily ok
12.10 19:07:33 DB: SELECT * FROM UserAttributeTypes
12.10 19:07:33 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:07:33 DB: SELECT * FROM UserVariableTypes
12.10 19:07:33 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:07:33 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 19:07:33 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:07:33 DB: SELECT * FROM ItemGroups
12.10 19:07:33 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:07:33 DB: SELECT * FROM Bundles ORDER BY ID
12.10 19:07:33 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:07:33 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 19:07:33 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:07:33 SHOP: loading items...
12.10 19:07:33 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 19:07:33 -<<-: core/shop.getList ok
12.10 19:07:33 SHOP: 0 items loaded (0.001 sec)
12.10 19:07:33 DB: SELECT * FROM EffectAttributeTypes
12.10 19:07:33 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:07:33 DB: SELECT * FROM Effects
12.10 19:07:33 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:07:33 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 19:07:33 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:07:33 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 19:07:33 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:07:33 DB: SELECT * FROM Badges
12.10 19:07:33 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 19:07:33 -<<-: core/server.query ok
12.10 19:08:09 NET: Client (conid:24479298) connected to vdl.0 (clients:1)
12.10 19:08:10 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 19:08:10 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 19:08:10 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 19:08:10 -<<-: core/server.query ok
12.10 19:08:10 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 19:08:10 -<<-: core/user.isOnlineID ok
12.10 19:08:10 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 19:08:10 -<<-: core/cache.get ok
12.10 19:08:10 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 19:08:10 -<<-: core/cache.get ok
12.10 19:08:10 NET: Client login (conid:24479298, id:33, name:uid33)
12.10 19:08:10 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 19:08:10 -<<-: core/user.loginPost null
12.10 19:08:10 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 19:08:10 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 19:08:17 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 19:08:17 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:08:17 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid33, id => 33 }], battleActive => null, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:08:17 TIME: tournament.getAvailableTournament 2.37 ms
12.10 19:08:17 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid33, id => 33 }], battleActive => null, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:08:19 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 19:08:19 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 19:08:28 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 19:08:28 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:08:28 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid33, id => 33 }], battleActive => null, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:08:28 TIME: tournament.getAvailableTournament 1.78 ms
12.10 19:08:28 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid33, id => 33 }], battleActive => null, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:08:33 TIMER: Check auto-disconnect...
12.10 19:08:34 STATS: vdl.0 cache, locks:2
12.10 19:08:35 ++ NET: uid33 req: user.logout { messageType => user.logout }
12.10 19:08:35 TRACE: user.logout : No such module: user
12.10 19:08:35 TRACE: user.logout : 
Called from snipe/slave/Server.hx line 1159
12.10 19:08:35 NET: Client (name:uid33 conid:24479298 TCP) disconnected from vdl.0 (clients:0)
12.10 19:08:35 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 19:08:35 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 19:08:35 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 19:08:35 STATS: vdl.0 cache connection, 29 calls, total 0.0582954883575439 sec spent, avg 2.01 ms
12.10 19:08:35 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 19:08:35 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 19:08:35 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 19:08:35 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
12.10 19:08:35 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 19:08:35 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 19:08:35 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 19:08:35 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 19:08:35 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 19:08:35 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 19:08:40 NET: Client (conid:58447379) connected to vdl.0 (clients:1)
12.10 19:08:41 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 19:08:41 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 19:08:41 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 19:08:41 -<<-: core/server.query { list => {{ name => uid33, networkid => , isbanned => false, id => 33 }}, errorCode => ok, _type => core/server.query }
12.10 19:08:41 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 19:08:41 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 19:08:41 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 19:08:41 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid33, deleted => false, email => , networktype =>   , password => uid33, isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476272110, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 2, id => 33 } }
12.10 19:08:41 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 19:08:41 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 33 } }
12.10 19:08:41 NET: Client login (conid:58447379, id:33, name:uid33)
12.10 19:08:41 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 19:08:41 -<<-: core/user.loginPost { _type => core/user.loginPost }
12.10 19:08:41 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 19:08:41 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 19:08:46 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 19:08:46 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:08:46 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid33, id => 33 }], battleActive => null, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:08:46 TIME: tournament.getAvailableTournament 1.62 ms
12.10 19:08:46 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid33, id => 33 }], battleActive => null, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:08:49 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 19:08:49 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
12.10 19:09:33 TIMER: Check auto-disconnect...
12.10 19:09:34 STATS: vdl.0 cache, locks:2
12.10 19:10:33 TIMER: Check auto-disconnect...
12.10 19:10:34 STATS: vdl.0 cache, locks:2
12.10 19:11:03 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 19:11:03 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:11:03 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid33, id => 33 }], battleActive => null, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:11:03 STATS: vdl.0 cache connection, 41 calls, total 0.0662162303924561 sec spent, avg 1.62 ms
12.10 19:11:03 TIME: tournament.getAvailableTournament 1.64 ms
12.10 19:11:03 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid33, id => 33 }], battleActive => null, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:11:33 TIMER: Check auto-disconnect...
12.10 19:11:34 STATS: vdl.0 cache, locks:2
12.10 19:12:33 TIMER: Check auto-disconnect...
12.10 19:12:34 STATS: vdl.0 cache, locks:2
12.10 19:12:42 ++ NET: uid33 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
12.10 19:12:42 ->>-: vdl/cache.tournament.addUsers { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 19:12:42 -<<-: vdl/cache.tournament.addUsers { errorCode => userExist, _type => vdl/cache.tournament.addUsers }
12.10 19:12:42 STATS: vdl.0 cache connection, 42 calls, total 0.0683584213256836 sec spent, avg 1.63 ms
12.10 19:12:42 TIME: tournament.addUsers 2.24 ms
12.10 19:12:42 == NET: uid33 ret: tournament.addUsers { type => tournament.addUsers, errorCode => userExist, _type => vdl/cache.tournament.addUsers }
12.10 19:13:33 TIMER: Check auto-disconnect...
12.10 19:13:34 STATS: vdl.0 cache, locks:2
12.10 19:14:33 TIMER: Check auto-disconnect...
12.10 19:14:34 STATS: vdl.0 cache, locks:2
12.10 19:15:33 TIMER: Check auto-disconnect...
12.10 19:15:34 STATS: vdl.0 cache, locks:2
12.10 19:16:33 TIMER: Check auto-disconnect...
12.10 19:16:33 NET: Client (name:uid33 conid:58447379 TCP) disconnected from vdl.0 (clients:0)
12.10 19:16:33 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 19:16:33 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 19:16:33 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 19:16:33 STATS: vdl.0 cache connection, 43 calls, total 0.069575309753418 sec spent, avg 1.62 ms
12.10 19:16:33 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 19:16:33 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 19:16:33 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 19:16:33 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
12.10 19:16:33 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 19:16:33 -<<-: core/cache.update { errorCode => ok, version => 4, _type => core/cache.update }
12.10 19:16:33 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 19:16:33 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 19:16:33 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 19:16:33 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 19:16:34 STATS: vdl.0 cache, locks:0
12.10 19:17:33 TIMER: Check auto-disconnect...
12.10 19:17:34 STATS: vdl.0 cache, locks:0
12.10 19:18:33 TIMER: Check auto-disconnect...
12.10 19:18:34 STATS: vdl.0 cache, locks:0
12.10 19:19:33 TIMER: Check auto-disconnect...
12.10 19:19:34 STATS: vdl.0 cache, locks:0
12.10 19:20:20 NET: Client (conid:53502120) connected to vdl.0 (clients:1)
12.10 19:20:21 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 19:20:21 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 19:20:21 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 19:20:21 -<<-: core/server.query { list => {{ name => uid33, networkid => , isbanned => false, id => 33 }}, errorCode => ok, _type => core/server.query }
12.10 19:20:21 STATS: vdl.0 cache connection, 48 calls, total 0.0739707946777344 sec spent, avg 1.54 ms
12.10 19:20:21 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 19:20:21 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 19:20:21 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 19:20:21 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid33, deleted => false, email => , networktype =>   , password => uid33, isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476272110, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 0, id => 33 } }
12.10 19:20:21 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 19:20:21 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 33 } }
12.10 19:20:21 NET: Client login (conid:53502120, id:33, name:uid33)
12.10 19:20:21 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 19:20:21 -<<-: core/user.loginPost { _type => core/user.loginPost }
12.10 19:20:21 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 19:20:21 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 19:20:28 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 19:20:28 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:20:28 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid33, id => 33 }], battleActive => null, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:20:28 TIME: tournament.getAvailableTournament 1.94 ms
12.10 19:20:28 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid33, id => 33 }], battleActive => null, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:20:29 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 19:20:29 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 19:20:33 TIMER: Check auto-disconnect...
12.10 19:20:34 STATS: vdl.0 cache, locks:2
12.10 19:20:36 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 19:20:36 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:20:36 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid33, id => 33 }], battleActive => null, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:20:36 TIME: tournament.getAvailableTournament 1.76 ms
12.10 19:20:36 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid33, id => 33 }], battleActive => null, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 19:21:33 TIMER: Check auto-disconnect...
12.10 19:21:34 STATS: vdl.0 cache, locks:2
12.10 19:22:33 TIMER: Check auto-disconnect...
12.10 19:22:34 STATS: vdl.0 cache, locks:2
12.10 19:23:33 TIMER: Check auto-disconnect...
12.10 19:23:34 STATS: vdl.0 cache, locks:2
12.10 19:24:33 TIMER: Check auto-disconnect...
12.10 19:24:33 NET: Client (name:uid33 conid:53502120 TCP) disconnected from vdl.0 (clients:0)
12.10 19:24:33 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 19:24:33 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 19:24:33 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 19:24:33 STATS: vdl.0 cache connection, 56 calls, total 0.0819747447967529 sec spent, avg 1.46 ms
12.10 19:24:33 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 19:24:33 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 19:24:33 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 19:24:33 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
12.10 19:24:33 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 19:24:33 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 19:24:33 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 19:24:33 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 19:24:33 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 19:24:33 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 19:24:34 STATS: vdl.0 cache, locks:0
12.10 19:25:33 TIMER: Check auto-disconnect...
12.10 19:25:34 STATS: vdl.0 cache, locks:0
12.10 19:26:33 TIMER: Check auto-disconnect...
12.10 19:26:34 STATS: vdl.0 cache, locks:0
12.10 19:27:33 TIMER: Check auto-disconnect...
12.10 19:27:34 STATS: vdl.0 cache, locks:0
12.10 19:28:33 TIMER: Check auto-disconnect...
12.10 19:28:34 STATS: vdl.0 cache, locks:0
12.10 19:29:33 TIMER: Check auto-disconnect...
12.10 19:29:34 STATS: vdl.0 cache, locks:0
12.10 19:30:33 TIMER: Check auto-disconnect...
12.10 19:30:34 STATS: vdl.0 cache, locks:0
12.10 19:31:33 TIMER: Check auto-disconnect...
12.10 19:31:34 STATS: vdl.0 cache, locks:0
12.10 19:32:33 TIMER: Check auto-disconnect...
