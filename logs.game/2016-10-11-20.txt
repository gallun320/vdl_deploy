11.10 20:00:19 TIMER: Check auto-disconnect...
11.10 20:00:20 STATS: vdl.0 cache, locks:0
11.10 20:01:19 TIMER: Check auto-disconnect...
11.10 20:01:20 STATS: vdl.0 cache, locks:0
11.10 20:02:19 TIMER: Check auto-disconnect...
11.10 20:02:20 STATS: vdl.0 cache, locks:0
11.10 20:03:19 TIMER: Check auto-disconnect...
11.10 20:03:20 STATS: vdl.0 cache, locks:0
11.10 20:04:19 TIMER: Check auto-disconnect...
11.10 20:04:20 STATS: vdl.0 cache, locks:0
11.10 20:05:19 TIMER: Check auto-disconnect...
11.10 20:05:20 STATS: vdl.0 cache, locks:0
11.10 20:06:19 TIMER: Check auto-disconnect...
11.10 20:06:20 STATS: vdl.0 cache, locks:0
11.10 20:07:19 TIMER: Check auto-disconnect...
11.10 20:07:20 STATS: vdl.0 cache, locks:0
11.10 20:08:19 TIMER: Check auto-disconnect...
11.10 20:08:20 STATS: vdl.0 cache, locks:0
11.10 20:09:19 TIMER: Check auto-disconnect...
11.10 20:09:20 STATS: vdl.0 cache, locks:0
11.10 20:10:19 TIMER: Check auto-disconnect...
11.10 20:10:20 STATS: vdl.0 cache, locks:0
11.10 20:11:19 TIMER: Check auto-disconnect...
11.10 20:11:20 STATS: vdl.0 cache, locks:0
11.10 20:12:19 TIMER: Check auto-disconnect...
11.10 20:12:20 STATS: vdl.0 cache, locks:0
11.10 20:13:19 TIMER: Check auto-disconnect...
11.10 20:13:20 STATS: vdl.0 cache, locks:0
11.10 20:14:19 TIMER: Check auto-disconnect...
11.10 20:14:20 STATS: vdl.0 cache, locks:0
11.10 20:15:19 TIMER: Check auto-disconnect...
11.10 20:15:20 STATS: vdl.0 cache, locks:0
11.10 20:16:19 TIMER: Check auto-disconnect...
11.10 20:16:20 STATS: vdl.0 cache, locks:0
11.10 20:17:19 TIMER: Check auto-disconnect...
11.10 20:17:20 STATS: vdl.0 cache, locks:0
11.10 20:17:20 TIMER: vdl:0 Check tournament...
11.10 20:17:20 DB: SELECT * FROM tournament WHERE startdate = 1476206.24014825AND winner = -1 AND status = 'starting'
11.10 20:17:20 ->>-: core/server.query { q => SELECT * FROM tournament WHERE startdate = 1476206.24014825AND winner = -1 AND status = 'starting', _type => core/server.query }
11.10 20:17:20 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
11.10 20:17:20 STATS: vdl.0 cache connection, 33 calls, total 0.0494763851165771 sec spent, avg 1.5 ms
11.10 20:18:19 TIMER: Check auto-disconnect...
11.10 20:18:20 STATS: vdl.0 cache, locks:0
11.10 20:19:19 TIMER: Check auto-disconnect...
11.10 20:20:32 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
11.10 20:20:32 -<<-: server.login ok
11.10 20:20:32 DB: SELECT * FROM LocalizationStrings
11.10 20:20:32 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
11.10 20:20:32 -<<-: core/server.query ok
11.10 20:20:32 TIMER: Starting timer...
11.10 20:20:32 TIMER: Timer running...
11.10 20:20:32 DB: SELECT * FROM GameVars
11.10 20:20:32 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
11.10 20:20:32 -<<-: core/server.query ok
11.10 20:20:32 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
11.10 20:20:32 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
11.10 20:20:32 -<<-: core/server.query ok
11.10 20:20:32 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
11.10 20:20:32 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
11.10 20:20:32 -<<-: core/server.query ok
11.10 20:20:32 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
11.10 20:20:32 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
11.10 20:20:32 -<<-: core/server.query ok
11.10 20:20:32 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
11.10 20:20:32 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
11.10 20:20:32 -<<-: core/server.query ok
11.10 20:20:32 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
11.10 20:20:32 -<<-: core/quest.getDaily ok
11.10 20:20:32 DB: SELECT * FROM UserAttributeTypes
11.10 20:20:32 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
11.10 20:20:32 -<<-: core/server.query ok
11.10 20:20:32 DB: SELECT * FROM UserVariableTypes
11.10 20:20:32 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
11.10 20:20:32 -<<-: core/server.query ok
11.10 20:20:32 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
11.10 20:20:32 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
11.10 20:20:32 -<<-: core/server.query ok
11.10 20:20:32 DB: SELECT * FROM ItemGroups
11.10 20:20:32 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
11.10 20:20:32 -<<-: core/server.query ok
11.10 20:20:32 DB: SELECT * FROM Bundles ORDER BY ID
11.10 20:20:32 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
11.10 20:20:32 -<<-: core/server.query ok
11.10 20:20:32 DB: SELECT * FROM BundleItems ORDER BY ID
11.10 20:20:32 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
11.10 20:20:32 -<<-: core/server.query ok
11.10 20:20:32 SHOP: loading items...
11.10 20:20:32 ->>-: core/shop.getList { _type => core/shop.getList }
11.10 20:20:32 -<<-: core/shop.getList ok
11.10 20:20:32 SHOP: 0 items loaded (0 sec)
11.10 20:20:32 DB: SELECT * FROM EffectAttributeTypes
11.10 20:20:32 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
11.10 20:20:32 -<<-: core/server.query ok
11.10 20:20:32 DB: SELECT * FROM Effects
11.10 20:20:32 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
11.10 20:20:32 -<<-: core/server.query ok
11.10 20:20:32 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(11.10 20:31:25 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
11.10 20:31:25 -<<-: server.login ok
11.10 20:31:25 DB: SELECT * FROM LocalizationStrings
11.10 20:31:25 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 TIMER: Starting timer...
11.10 20:31:25 TIMER: Timer running...
11.10 20:31:25 DB: SELECT * FROM GameVars
11.10 20:31:25 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
11.10 20:31:25 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
11.10 20:31:25 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
11.10 20:31:25 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
11.10 20:31:25 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
11.10 20:31:25 -<<-: core/quest.getDaily ok
11.10 20:31:25 DB: SELECT * FROM UserAttributeTypes
11.10 20:31:25 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 DB: SELECT * FROM UserVariableTypes
11.10 20:31:25 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
11.10 20:31:25 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 DB: SELECT * FROM ItemGroups
11.10 20:31:25 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 DB: SELECT * FROM Bundles ORDER BY ID
11.10 20:31:25 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 DB: SELECT * FROM BundleItems ORDER BY ID
11.10 20:31:25 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 SHOP: loading items...
11.10 20:31:25 ->>-: core/shop.getList { _type => core/shop.getList }
11.10 20:31:25 -<<-: core/shop.getList ok
11.10 20:31:25 SHOP: 0 items loaded (0 sec)
11.10 20:31:25 DB: SELECT * FROM EffectAttributeTypes
11.10 20:31:25 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 DB: SELECT * FROM Effects
11.10 20:31:25 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
11.10 20:31:25 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
11.10 20:31:25 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 DB: SELECT * FROM Badges
11.10 20:31:25 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
11.10 20:31:25 -<<-: core/server.query ok
11.10 20:31:25 TIMER: Check auto-disconnect...
11.10 20:31:25 STATS: vdl.0 cache, locks:0
11.10 20:31:25 TIMER: Check auto-disconnect...
11.10 20:31:25 STATS: vdl.0 cache, locks:0
11.10 20:33:58 NET: Client (conid:42640364) connected to vdl.0 (clients:1)
11.10 20:33:59 ++ NET: null req: user.login { type => token, messageType => user.login, token =>  }
11.10 20:33:59 TRACE: Invalid field access : length
11.10 20:33:59 TRACE: 
Called from /usr/share/haxe/std/StringTools.hx line 229
Called from /usr/share/haxe/std/StringTools.hx line 253
Called from snipe/slave/modules/UserModuleCore.hx line 334
Called from snipe/slave/Server.hx line 887
Called from snipe/slave/Server.hx line 1124
11.10 20:33:59 TRACE: Could not login.
11.10 20:33:59 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
11.10 20:34:25 TIMER: Check auto-disconnect...
11.10 20:34:25 STATS: vdl.0 cache, locks:0
11.10 20:34:25 TIMER: Check auto-disconnect...
11.10 20:34:25 STATS: vdl.0 cache, locks:0
11.10 20:36:01 NET: Client (name:null conid:42640364 TCP) disconnected from vdl.0 (clients:0)
11.10 20:36:08 NET: Client (conid:3030461) connected to vdl.0 (clients:1)
11.10 20:36:09 ++ NET: null req: user.register { game => vdl, password => random36, name => player, messageType => user.register }
11.10 20:36:09 DB: SELECT * FROM users
11.10 20:36:09 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
11.10 20:36:09 -<<-: core/server.query ok
11.10 20:36:09 STATS: vdl.0 cache connection, 21 calls, total 0.0463399887084961 sec spent, avg 2.21 ms
11.10 20:36:09 == NET: null ret: user.auth { type => user.auth, token => dWlkOQ== }
11.10 20:36:09 DB: SELECT ID FROM Users WHERE Name = E'uid9'
11.10 20:36:09 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid9', _type => core/server.query }
11.10 20:36:09 -<<-: core/server.query ok
11.10 20:36:09 DB: SELECT nextval('Users_id_seq') AS id
11.10 20:36:09 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
11.10 20:36:09 -<<-: core/server.query ok
11.10 20:36:09 ->>-: core/user.register { password => uid9, name => uid9, fullParams => { game => vdl, password => uid9, name => uid9, networkid => , networktype => , messageType => user.register, id => 9 }, networkid => , connectionID => 3030461, networktype => , email => , id => 9, _type => core/user.register }
11.10 20:36:09 -<<-: core/user.register ok
11.10 20:36:09 -<<-: core/user.registerResponse null
11.10 20:36:09 == NET: null ret: user.register { type => user.register, errorCode => ok }
11.10 20:36:10 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkOQ== }
11.10 20:36:10 TRACE: Invalid field access : length
11.10 20:36:10 TRACE: 
Called from /usr/share/haxe/std/StringTools.hx line 229
Called from /usr/share/haxe/std/StringTools.hx line 253
Called from snipe/slave/modules/UserModuleCore.hx line 334
Called from snipe/slave/Server.hx line 887
Called from snipe/slave/Server.hx line 1124
11.10 20:36:10 TRACE: Could not login.
11.10 20:36:10 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
11.10 20:36:25 TIMER: Check auto-disconnect...
11.10 20:36:25 STATS: vdl.0 cache, locks:0
11.10 20:36:25 TIMER: Check auto-disconnect...
11.10 20:36:25 STATS: vdl.0 cache, locks:0
11.10 20:36:25 TIMER: Check auto-disconnect...
11.10 20:36:25 STATS: vdl.0 cache, locks:0
11.10 20:36:25 TIMER: Check auto-disconnect...
11.10 20:36:25 NET: Client (name:null conid:3030461 TCP) disconnected from vdl.0 (clients:0)
11.10 20:36:25 STATS: vdl.0 cache, locks:0
11.10 20:36:25 TIMER: Check auto-disconnect...
11.10 20:36:25 STATS: vdl.0 cache, locks:0
11.10 20:36:25 TIMER: Check auto-disconnect...
11.10 20:36:25 STATS: vdl.0 cache, locks:0
11.10 20:36:25 TIMER: Check auto-disconnect...
11.10 20:36:25 STATS: vdl.0 cache, locks:0
11.10 20:36:25 TIMER: Check auto-disconnect...
11.10 20:36:25 STATS: vdl.0 cache, locks:0
11.10 20:36:25 TIMER: Check auto-disconnect...
11.10 20:36:25 STATS: vdl.0 cache, locks:0
11.10 20:36:25 TIMER: Check auto-disconnect...
11.10 20:36:25 STATS: vdl.0 cache, locks:0
11.10 20:36:25 TIMER: Check auto-disconnect...
11.10 20:36:25 STATS: vdl.0 cache, locks:0
11.10 20:36:25 TIMER: Check auto-disconnect...
11.10 20:36:25 STATS: vdl.0 cache, locks:0
11.10 20:36:25 TIMER: Check auto-disconnect...
11.10 20:36:25 STATS: vdl.0 cache, locks:0
11.10 20:49:24 NET: Client (conid:35373830) connected to vdl.0 (clients:1)
11.10 20:49:25 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
11.10 20:49:25 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
11.10 20:49:25 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
11.10 20:49:25 -<<-: core/server.query ok
11.10 20:49:25 STATS: vdl.0 cache connection, 25 calls, total 0.0802969932556152 sec spent, avg 3.21 ms
11.10 20:49:25 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
11.10 20:49:25 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
11.10 20:49:25 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
11.10 20:49:25 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1476204122, lastLoginDate => 285, lastLoadDate => 1012 }, effects => { list => [] } }}, version => 0, id => 2 } }
11.10 20:49:25 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
11.10 20:49:25 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
11.10 20:49:25 NET: Client login (conid:35373830, id:2, name:test1)
11.10 20:49:25 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
11.10 20:49:25 -<<-: core/user.loginPost { _type => core/user.loginPost }
11.10 20:49:25 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
11.10 20:49:25 == NET: test1 ret: user.join { name => test1, type => user.join }
11.10 20:49:25 TIMER: Check auto-disconnect...
11.10 20:49:25 STATS: vdl.0 cache, locks:2
11.10 20:49:30 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
11.10 20:49:30 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
11.10 20:49:32 ++ NET: test1 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
11.10 20:49:32 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
11.10 20:49:32 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
11.10 20:49:32 TIME: tournament.getAvailableTournament 1.45 ms
11.10 20:49:32 == NET: test1 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
11.10 20:50:25 TIMER: Check auto-disconnect...
11.10 20:50:25 STATS: vdl.0 cache, locks:2
11.10 20:50:25 TIMER: Check auto-disconnect...
11.10 20:50:25 STATS: vdl.0 cache, locks:2
11.10 20:52:00 NET: Client (name:test1 conid:35373830 TCP) disconnected from vdl.0 (clients:0)
11.10 20:52:00 DB: SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true
11.10 20:52:00 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true, _type => core/server.query }
11.10 20:52:00 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
11.10 20:52:00 STATS: vdl.0 cache connection, 32 calls, total 0.0850000381469727 sec spent, avg 2.66 ms
11.10 20:52:00 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
11.10 20:52:00 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
11.10 20:52:00 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
11.10 20:52:00 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
11.10 20:52:00 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
11.10 20:52:00 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
11.10 20:52:00 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
11.10 20:52:00 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
11.10 20:52:00 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
11.10 20:52:00 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
11.10 20:52:07 NET: Client (conid:55375082) connected to vdl.0 (clients:1)
11.10 20:52:08 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
11.10 20:52:08 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
11.10 20:52:08 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
11.10 20:52:08 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
11.10 20:52:08 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
11.10 20:52:08 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
11.10 20:52:08 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
11.10 20:52:08 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1476204122, lastLoginDate => 285, lastLoadDate => 1012 }, effects => { list => [] } }}, version => 2, id => 2 } }
11.10 20:52:08 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
11.10 20:52:08 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 2 } }
11.10 20:52:08 NET: Client login (conid:55375082, id:2, name:test1)
11.10 20:52:08 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
11.10 20:52:08 -<<-: core/user.loginPost { _type => core/user.loginPost }
11.10 20:52:08 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
11.10 20:52:08 == NET: test1 ret: user.join { name => test1, type => user.join }
11.10 20:52:15 ++ NET: test1 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
11.10 20:52:15 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
11.10 20:52:15 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
11.10 20:52:15 TIME: tournament.getAvailableTournament 0.78 ms
11.10 20:52:15 == NET: test1 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
11.10 20:52:15 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
11.10 20:52:15 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
11.10 20:52:25 TIMER: Check auto-disconnect...
11.10 20:52:25 STATS: vdl.0 cache, locks:2
11.10 20:52:53 NET: Client (name:test1 conid:55375082 TCP) disconnected from vdl.0 (clients:0)
11.10 20:52:53 DB: SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true
11.10 20:52:53 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true, _type => core/server.query }
11.10 20:52:53 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
11.10 20:52:53 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
11.10 20:52:53 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
11.10 20:52:53 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
11.10 20:52:53 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
11.10 20:52:53 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
11.10 20:52:53 -<<-: core/cache.update { errorCode => ok, version => 4, _type => core/cache.update }
11.10 20:52:53 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
11.10 20:52:53 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
11.10 20:52:53 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
11.10 20:52:53 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 TIMER: vdl:0 Check tournament...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 DB: SELECT * FROM tournament WHERE startdate = 1476208.88587932AND winner = -1 AND status = 'starting'
11.10 20:53:25 ->>-: core/server.query { q => SELECT * FROM tournament WHERE startdate = 1476208.88587932AND winner = -1 AND status = 'starting', _type => core/server.query }
11.10 20:53:25 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
11.10 20:53:25 STATS: vdl.0 cache connection, 49 calls, total 0.124550580978394 sec spent, avg 2.54 ms
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
11.10 20:53:25 STATS: vdl.0 cache, locks:0
11.10 20:53:25 TIMER: Check auto-disconnect...
