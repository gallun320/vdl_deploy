20.11 14:00:08 TIMER: Check auto-disconnect...
20.11 14:00:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:00:10 TIME: user.ping 0.12 ms
20.11 14:00:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:00:15 STATS: vdl.0 cache, locks:2
20.11 14:00:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:00:32 TIME: user.ping 0.11 ms
20.11 14:00:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:00:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:00:54 TIME: user.ping 0.17 ms
20.11 14:00:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:01:08 TIMER: Check auto-disconnect...
20.11 14:01:15 STATS: vdl.0 cache, locks:2
20.11 14:01:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:01:16 TIME: user.ping 0.15 ms
20.11 14:01:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:01:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:01:37 TIME: user.ping 0.11 ms
20.11 14:01:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:01:59 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:01:59 TIME: user.ping 0.13 ms
20.11 14:01:59 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:02:08 TIMER: Check auto-disconnect...
20.11 14:02:15 STATS: vdl.0 cache, locks:2
20.11 14:02:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:02:21 TIME: user.ping 0.1 ms
20.11 14:02:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:02:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:02:42 TIME: user.ping 0.13 ms
20.11 14:02:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:03:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:03:04 TIME: user.ping 0.12 ms
20.11 14:03:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:03:08 TIMER: Check auto-disconnect...
20.11 14:03:15 STATS: vdl.0 cache, locks:2
20.11 14:03:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:03:26 TIME: user.ping 0.15 ms
20.11 14:03:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:03:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:03:48 TIME: user.ping 0.14 ms
20.11 14:03:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:04:08 TIMER: Check auto-disconnect...
20.11 14:04:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:04:09 TIME: user.ping 0.12 ms
20.11 14:04:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:04:15 STATS: vdl.0 cache, locks:2
20.11 14:04:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:04:31 TIME: user.ping 0.12 ms
20.11 14:04:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:04:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:04:53 TIME: user.ping 0.12 ms
20.11 14:04:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:05:08 TIMER: Check auto-disconnect...
20.11 14:05:15 STATS: vdl.0 cache, locks:2
20.11 14:05:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:05:15 TIME: user.ping 0.12 ms
20.11 14:05:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:05:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:05:36 TIME: user.ping 0.22 ms
20.11 14:05:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:05:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:05:58 TIME: user.ping 0.13 ms
20.11 14:05:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:06:08 TIMER: Check auto-disconnect...
20.11 14:06:15 STATS: vdl.0 cache, locks:2
20.11 14:06:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:06:20 TIME: user.ping 0.1 ms
20.11 14:06:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:06:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:06:42 TIME: user.ping 0.13 ms
20.11 14:06:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:07:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:07:03 TIME: user.ping 0.13 ms
20.11 14:07:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:07:08 TIMER: Check auto-disconnect...
20.11 14:07:15 STATS: vdl.0 cache, locks:2
20.11 14:07:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:07:25 TIME: user.ping 0.12 ms
20.11 14:07:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:07:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:07:47 TIME: user.ping 0.14 ms
20.11 14:07:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:08:08 TIMER: Check auto-disconnect...
20.11 14:08:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:08:09 TIME: user.ping 0.1 ms
20.11 14:08:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:08:15 STATS: vdl.0 cache, locks:2
20.11 14:08:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:08:30 TIME: user.ping 0.1 ms
20.11 14:08:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:08:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:08:52 TIME: user.ping 0.12 ms
20.11 14:08:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:09:08 TIMER: Check auto-disconnect...
20.11 14:09:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:09:14 TIME: user.ping 0.11 ms
20.11 14:09:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:09:15 STATS: vdl.0 cache, locks:2
20.11 14:09:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:09:36 TIME: user.ping 0.14 ms
20.11 14:09:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:09:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.11 14:09:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.11 14:09:57 TIME: user.ping 0.13 ms
20.11 14:10:08 TIMER: Check auto-disconnect...
20.11 14:10:15 STATS: vdl.0 cache, locks:2
20.11 14:11:08 TIMER: Check auto-disconnect...
20.11 14:11:15 STATS: vdl.0 cache, locks:2
20.11 14:12:08 TIMER: Check auto-disconnect...
20.11 14:12:15 STATS: vdl.0 cache, locks:2
20.11 14:13:08 TIMER: Check auto-disconnect...
20.11 14:13:15 STATS: vdl.0 cache, locks:2
20.11 14:14:08 TIMER: Check auto-disconnect...
20.11 14:14:15 STATS: vdl.0 cache, locks:2
20.11 14:15:08 TIMER: Check auto-disconnect...
20.11 14:15:15 STATS: vdl.0 cache, locks:2
20.11 14:16:08 TIMER: Check auto-disconnect...
20.11 14:16:15 STATS: vdl.0 cache, locks:2
20.11 14:17:08 TIMER: Check auto-disconnect...
20.11 14:17:15 STATS: vdl.0 cache, locks:2
20.11 14:18:08 TIMER: Check auto-disconnect...
20.11 14:18:15 STATS: vdl.0 cache, locks:2
20.11 14:19:08 TIMER: Check auto-disconnect...
20.11 14:19:15 STATS: vdl.0 cache, locks:2
20.11 14:20:08 TIMER: Check auto-disconnect...
20.11 14:20:15 STATS: vdl.0 cache, locks:2
20.11 14:21:08 TIMER: Check auto-disconnect...
20.11 14:21:15 STATS: vdl.0 cache, locks:2
20.11 14:22:08 TIMER: Check auto-disconnect...
20.11 14:22:15 STATS: vdl.0 cache, locks:2
20.11 14:23:08 TIMER: Check auto-disconnect...
20.11 14:23:15 STATS: vdl.0 cache, locks:2
20.11 14:24:08 TIMER: Check auto-disconnect...
20.11 14:24:15 STATS: vdl.0 cache, locks:2
20.11 14:24:58 NET: Client (name:Aimer conid:14523211 WS) disconnected from vdl.0 (clients:0)
20.11 14:24:58 DB: SELECT id FROM battle WHERE firstid=28 OR secondid=28 AND finished <> true
20.11 14:24:58 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=28 OR secondid=28 AND finished <> true, _type => core/server.query }
20.11 14:24:58 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.11 14:24:58 STATS: vdl.0 cache connection, 482 calls, total 0.31045389175415 sec spent, avg 0.64 ms
20.11 14:24:58 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.11 14:24:58 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
20.11 14:24:58 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.11 14:24:58 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 1009
20.11 14:24:58 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 28, _type => core/cache.update }
20.11 14:24:58 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
20.11 14:24:58 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 28, _type => core/cache.update }
20.11 14:24:58 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.11 14:24:58 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 28, _type => core/user.logoutPost }
20.11 14:24:58 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.11 14:25:08 TIMER: Check auto-disconnect...
20.11 14:25:15 STATS: vdl.0 cache, locks:0
20.11 14:26:08 TIMER: Check auto-disconnect...
20.11 14:26:15 STATS: vdl.0 cache, locks:0
20.11 14:27:08 TIMER: Check auto-disconnect...
20.11 14:27:15 STATS: vdl.0 cache, locks:0
20.11 14:28:08 TIMER: Check auto-disconnect...
20.11 14:28:15 STATS: vdl.0 cache, locks:0
20.11 14:29:08 TIMER: Check auto-disconnect...
20.11 14:29:15 STATS: vdl.0 cache, locks:0
20.11 14:30:08 TIMER: Check auto-disconnect...
20.11 14:30:15 STATS: vdl.0 cache, locks:0
20.11 14:31:08 TIMER: Check auto-disconnect...
20.11 14:31:15 STATS: vdl.0 cache, locks:0
20.11 14:32:08 TIMER: Check auto-disconnect...
20.11 14:32:15 STATS: vdl.0 cache, locks:0
20.11 14:33:08 TIMER: Check auto-disconnect...
20.11 14:33:15 STATS: vdl.0 cache, locks:0
20.11 14:34:08 TIMER: Check auto-disconnect...
20.11 14:34:15 STATS: vdl.0 cache, locks:0
20.11 14:35:08 TIMER: Check auto-disconnect...
20.11 14:35:15 STATS: vdl.0 cache, locks:0
20.11 14:36:08 TIMER: Check auto-disconnect...
20.11 14:36:15 STATS: vdl.0 cache, locks:0
20.11 14:37:08 TIMER: Check auto-disconnect...
20.11 14:37:15 STATS: vdl.0 cache, locks:0
20.11 14:38:08 TIMER: Check auto-disconnect...
20.11 14:38:15 STATS: vdl.0 cache, locks:0
20.11 14:39:08 TIMER: Check auto-disconnect...
20.11 14:39:15 STATS: vdl.0 cache, locks:0
20.11 14:40:08 TIMER: Check auto-disconnect...
20.11 14:40:15 STATS: vdl.0 cache, locks:0
20.11 14:41:08 TIMER: Check auto-disconnect...
20.11 14:41:15 STATS: vdl.0 cache, locks:0
20.11 14:42:08 TIMER: Check auto-disconnect...
20.11 14:42:15 STATS: vdl.0 cache, locks:0
20.11 14:43:08 TIMER: Check auto-disconnect...
20.11 14:43:15 STATS: vdl.0 cache, locks:0
20.11 14:44:08 TIMER: Check auto-disconnect...
20.11 14:44:15 STATS: vdl.0 cache, locks:0
20.11 14:45:08 TIMER: Check auto-disconnect...
20.11 14:45:13 NET: Client (conid:90742080) connected to vdl.0 (clients:1)
20.11 14:45:15 STATS: vdl.0 cache, locks:0
20.11 14:45:16 ++ NET: null req: user.register { messageType => user.register }
20.11 14:45:16 DB: SELECT * FROM users
20.11 14:45:16 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
20.11 14:45:16 -<<-: core/server.query { list => {{ city => , password => , name => --- DEFAULT ATTRIBUTES ---, year => , networkid => , params => {"attrs":{},"inventory":{"list":[]}}, "info": {"city":"", "year": "", "email": ""}, networktype =>   , email => , isbanned => false, regdate => 2016-11-10 11:48:59.9391+00, language =>   , id => 1, deleted => false }, { city => , password => uid16, name => uid16, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1479544800,"lastLoginDate":324,"lastLoadDate":1120},"effects":{"list":[]}}, networktype =>   , email => mail, isbanned => false, regdate => 2016-11-19 08:37:10.286209+00, language => en, id => 16, deleted => false }, { city => , password => uid2, name => uid2, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1478779175,"lastLoginDate":315,"lastLoadDate":1111},"effects":{"list":[]}}, networktype =>   , email => mail, isbanned => false, regdate => 2016-11-10 11:56:09.590311+00, language => en, id => 2, deleted => false }, { city => , password => uid3, name => uid3, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-10 12:08:05.144895+00, language =>   , id => 3, deleted => false }, { city => , password => uid4, name => uid4, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-10 12:24:23.638304+00, language =>   , id => 4, deleted => false }, { city => , password => uid5, name => uid5, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-10 12:28:38.741567+00, language =>   , id => 5, deleted => false }, { city => , password => uid11, name => uid11, year => null, networkid => , params => {"info":{"city":"","year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1479627940,"lastLoginDate":325,"lastLoadDate":1121},"effects":{"list":[]}}, networktype =>   , email => null, isbanned => false, regdate => 2016-11-13 20:03:37.670616+00, language => en, id => 11, deleted => false }, { city => , password => uid23, name => uid23, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-20 13:36:20.841503+00, language =>   , id => 23, deleted => false }, { city => , password => uid24, name => uid24, year => null, networkid => , params => {"info":{"city":"","year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1479649035,"lastLoginDate":325,"lastLoadDate":1121},"effects":{"list":[]}}, networktype =>   , email => null, isbanned => false, regdate => 2016-11-20 13:37:15.462999+00, language => en, id => 24, deleted => false }, { city => , password => uid6, name => uid6, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1479119901,"lastLoginDate":319,"lastLoadDate":1115},"effects":{"list":[]}}, networktype =>   , email => mail, isbanned => false, regdate => 2016-11-10 12:31:41.286497+00, language => en, id => 6, deleted => false }, { city => , password => uid25, name => uid25, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-20 13:37:30.330265+00, language =>   , id => 25, deleted => false }, { city => , password => uid13, name => uid13, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-16 11:16:26.870358+00, language =>   , id => 13, deleted => false }, { city => , password => uid14, name => uid14, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-16 11:17:20.119377+00, language =>   , id => 14, deleted => false }, { city => , password => uid7, name => uid7, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-10 13:32:51.765479+00, language =>   , id => 7, deleted => false }, { city => , password => uid22, name => uid22, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1479649069,"lastLoginDate":325,"lastLoadDate":1121},"effects":{"list":[]}}, networktype =>   , email => mail, isbanned => false, regdate => 2016-11-19 19:28:32.319424+00, language => en, id => 22, deleted => false }, { city => , password => uid26, name => uid26, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-20 13:38:40.17819+00, language =>   , id => 26, deleted => false }, { city => , password => uid27, name => uid27, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1479649902,"lastLoginDate":325,"lastLoadDate":1121},"effects":{"list":[]}}, networktype =>   , email => mail, isbanned => false, regdate => 2016-11-20 13:39:00.818006+00, language => en, id => 27, deleted => false }, { city => , password => uid17, name => uid17, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1479557423,"lastLoginDate":324,"lastLoadDate":1120},"effects":{"list":[]}}, networktype =>   , email => mail, isbanned => false, regdate => 2016-11-19 12:06:11.008729+00, language => en, id => 17, deleted => false }, { city => , password => uid19, name => uid19, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-19 12:43:31.432703+00, language =>   , id => 19, deleted => false }, { city => , password => uid18, name => uid18, year => null, networkid => , params => {"info":{"city":"","year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1479558241,"lastLoginDate":324,"lastLoadDate":1120},"effects":{"list":[]}}, networktype =>   , email => null, isbanned => false, regdate => 2016-11-19 12:24:01.448243+00, language => en, id => 18, deleted => false }, { city => , password => uid20, name => uid20, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-19 15:34:13.927466+00, language =>   , id => 20, deleted => false }, { city => , password => uid21, name => uid21, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-19 16:38:50.046266+00, language =>   , id => 21, deleted => false }, { city => , password => uid12, name => uid12, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1479299358,"lastLoginDate":321,"lastLoadDate":1117},"effects":{"list":[]}}, networktype =>   , email => mail, isbanned => false, regdate => 2016-11-14 12:05:08.368578+00, language => en, id => 12, deleted => false }, { city => , password => uid8, name => uid8, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1479405440,"lastLoginDate":322,"lastLoadDate":1118},"effects":{"list":[]}}, networktype =>   , email => mail, isbanned => false, regdate => 2016-11-10 15:37:47.142701+00, language => en, id => 8, deleted => false }, { city => , password => uid10, name => uid10, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1478975056,"lastLoginDate":318,"lastLoadDate":1114},"effects":{"list":[]}}, networktype =>   , email => mail, isbanned => false, regdate => 2016-11-11 16:44:40.114978+00, language => en, id => 10, deleted => false }, { city => , password => uid29, name => uid29, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-20 13:54:32.445211+00, language =>   , id => 29, deleted => false }, { city => , password => uid9, name => uid9, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1479481494,"lastLoginDate":323,"lastLoadDate":1119},"effects":{"list":[]}}, networktype =>   , email => mail, isbanned => false, regdate => 2016-11-11 07:57:55.30687+00, language => en, id => 9, deleted => false }, { city => , password => uid15, name => uid15, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-18 15:18:55.183965+00, language =>   , id => 15, deleted => false }, { city => , password => kO2YJdf, name => Aimer, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1479649963,"lastLoginDate":325,"lastLoadDate":1121},"effects":{"list":[]}}, networktype =>   , email => raBpoLL1@ya.ru, isbanned => false, regdate => 2016-11-20 13:52:24.495988+00, language => en, id => 28, deleted => false }}, errorCode => ok, _type => core/server.query }
20.11 14:45:16 STATS: vdl.0 cache connection, 487 calls, total 0.313140153884888 sec spent, avg 0.64 ms
20.11 14:45:16 == NET: null ret: user.auth { type => user.auth, token => dWlkMzA= }
20.11 14:45:16 DB: SELECT ID FROM Users WHERE Name = 'uid30'
20.11 14:45:16 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = 'uid30', _type => core/server.query }
20.11 14:45:16 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.11 14:45:16 DB: SELECT nextval('Users_id_seq') AS id
20.11 14:45:16 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
20.11 14:45:16 -<<-: core/server.query { list => {{ id => 30 }}, errorCode => ok, _type => core/server.query }
20.11 14:45:16 ->>-: core/user.register { password => uid30, name => uid30, fullParams => { password => uid30, name => uid30, networkid => , networktype => , messageType => user.register, id => 30 }, networkid => , connectionID => 90742080, networktype => , email => , id => 30, _type => core/user.register }
20.11 14:45:16 -<<-: core/user.register { errorCode => ok, _type => core/user.register }
20.11 14:45:16 -<<-: core/user.registerResponse { password => uid30, name => uid30, _isNotify => true, fullParams => { password => uid30, name => uid30, networkid => , networktype => , messageType => user.register, id => 30 }, networkid => , connectionID => 90742080, networktype => , email => , id => 30, _type => core/user.registerResponse }
20.11 14:45:16 DB: SELECT token FROM tokens WHERE userid = 30
20.11 14:45:16 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 30, _type => core/server.query }
20.11 14:45:16 -<<-: core/server.query { list => {{ token => bc13ef95649e4dbc3c12d2d7031bcd6c }, { token => 9a9c3a6ae0927a73de9a4ee653fda4e1 }}, errorCode => ok, _type => core/server.query }
20.11 14:45:16 == NET: null ret: user.register { type => user.register, errorCode => ok, token => bc13ef95649e4dbc3c12d2d7031bcd6c }
20.11 14:45:23 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzA= }
20.11 14:45:23 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid30' AND Password = 'uid30'
20.11 14:45:23 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid30' AND Password = 'uid30', _type => core/server.query }
20.11 14:45:23 -<<-: core/server.query { list => {{ name => uid30, networkid => , isbanned => false, id => 30 }}, errorCode => ok, _type => core/server.query }
20.11 14:45:23 ->>-: core/user.isOnlineID { id => 30, _type => core/user.isOnlineID }
20.11 14:45:23 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.11 14:45:23 ->>-: core/cache.get { type => user, v => -1, id => 30, _type => core/cache.get }
20.11 14:45:23 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid30, deleted => false, school => 1, year => null, email => null, networktype =>   , password => uid30, isbanned => false, regdate => 2016-11-20 14:45:16.909472+00, city => 1, language =>   , region => 1, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => { addAccess => , regionName => null, addDress => , cityName => null, schoolName => null, friendList => [], addWeapon => , addHeader =>  }, attrs => { level => 1, hints => 15 }, effects => { list => [] } }}, version => 19, id => 30 } }
20.11 14:45:23 ->>-: core/cache.get { type => questdata, v => -1, id => 30, _type => core/cache.get }
20.11 14:45:23 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 30 } }
20.11 14:45:23 NET: Client login (conid:90742080, id:30, name:uid30)
20.11 14:45:23 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 30, _type => core/user.loginPost, ipAddr => 178.205.167.200 }
20.11 14:45:23 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.11 14:45:23 DB: SELECT token FROM tokens WHERE userid = 30
20.11 14:45:23 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 30, _type => core/server.query }
20.11 14:45:23 -<<-: core/server.query { list => {{ token => bc13ef95649e4dbc3c12d2d7031bcd6c }, { token => 9a9c3a6ae0927a73de9a4ee653fda4e1 }}, errorCode => ok, _type => core/server.query }
20.11 14:45:23 DB: SELECT ID FROM TempUserLogins WHERE UserID = 30 AND Date = 'today'::timestamp
20.11 14:45:23 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 30 AND Date = 'today'::timestamp, _type => core/server.query }
20.11 14:45:23 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.11 14:45:23 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (30, 'today'::timestamp)
20.11 14:45:23 ++ NET: uid30 req: user.login { messageType => user.login, token => dWlkMzA= }
20.11 14:45:23 == NET: uid30 ret: user.login { name => uid30, type => user.login, errorCode => ok, id => 30, token => bc13ef95649e4dbc3c12d2d7031bcd6c }
20.11 14:45:23 DB: SELECT id FROM battle WHERE firstid=30 OR secondid=30 AND finished <> true
20.11 14:45:23 == NET: uid30 ret: user.join { name => uid30, type => user.join }
20.11 14:45:23 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=30 OR secondid=30 AND finished <> true, _type => core/server.query, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (30, 'today'::timestamp), _type => core/server.pending }} }
20.11 14:45:23 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.11 14:45:23 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.11 14:45:23 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
20.11 14:45:23 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.11 14:45:23 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 1009
20.11 14:45:23 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1479653123, lastLoginDate => 325, lastLoadDate => 1121 } }}, type => user, unlock => true, id => 30, _type => core/cache.update }
20.11 14:45:23 -<<-: core/cache.update { errorCode => ok, version => 20, _type => core/cache.update }
20.11 14:45:23 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 30, _type => core/cache.update }
20.11 14:45:23 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.11 14:45:23 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 30, _type => core/user.logoutPost }
20.11 14:45:23 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.11 14:45:23 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid30' AND Password = 'uid30'
20.11 14:45:23 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid30' AND Password = 'uid30', _type => core/server.query }
20.11 14:45:23 -<<-: core/server.query { list => {{ name => uid30, networkid => , isbanned => false, id => 30 }}, errorCode => ok, _type => core/server.query }
20.11 14:45:23 ->>-: core/user.isOnlineID { id => 30, _type => core/user.isOnlineID }
20.11 14:45:23 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.11 14:45:23 ->>-: core/cache.get { type => user, v => -1, id => 30, _type => core/cache.get }
20.11 14:45:23 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid30, deleted => false, school => 1, year => null, email => null, networktype =>   , password => uid30, isbanned => false, regdate => 2016-11-20 14:45:16.909472+00, city => 1, language => en, region => 1, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => { addAccess => , regionName => null, addDress => , cityName => null, schoolName => null, friendList => [], addWeapon => , addHeader =>  }, attrs => { level => 1, _lastTime.24hr => 1479653123, lastLoginDate => 325, lastLoadDate => 1121, hints => 15 }, effects => { list => [] } }}, version => 20, id => 30 } }
20.11 14:45:23 ->>-: core/cache.get { type => questdata, v => -1, id => 30, _type => core/cache.get }
20.11 14:45:23 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 30 } }
20.11 14:45:23 NET: Client login (conid:90742080, id:30, name:uid30)
20.11 14:45:23 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 30, _type => core/user.loginPost, ipAddr => 178.205.167.200 }
20.11 14:45:23 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.11 14:45:23 DB: SELECT token FROM tokens WHERE userid = 30
20.11 14:45:23 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 30, _type => core/server.query }
20.11 14:45:23 -<<-: core/server.query { list => {{ token => bc13ef95649e4dbc3c12d2d7031bcd6c }, { token => 9a9c3a6ae0927a73de9a4ee653fda4e1 }}, errorCode => ok, _type => core/server.query }
20.11 14:45:30 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 30, _type => core/cache.update }
20.11 14:45:30 -<<-: core/cache.update { errorCode => ok, version => 21, _type => core/cache.update }
20.11 14:45:37 ++ NET: uid30 req: user.ping { messageType => user.ping, msg => ok }
20.11 14:45:37 TIME: user.ping 0.13 ms
20.11 14:46:08 TIMER: Check auto-disconnect...
20.11 14:46:15 STATS: vdl.0 cache, locks:2
20.11 14:46:53 ++ NET: uid30 req: user.ping { messageType => user.ping, msg => ok }
20.11 14:46:53 TIME: user.ping 0.33 ms
20.11 14:47:08 TIMER: Check auto-disconnect...
20.11 14:47:15 STATS: vdl.0 cache, locks:2
20.11 14:48:03 ++ NET: uid30 req: user.ping { messageType => user.ping, msg => ok }
20.11 14:48:03 TIME: user.ping 0.12 ms
20.11 14:48:08 TIMER: Check auto-disconnect...
20.11 14:48:15 STATS: vdl.0 cache, locks:2
20.11 14:49:08 TIMER: Check auto-disconnect...
20.11 14:49:15 STATS: vdl.0 cache, locks:2
20.11 14:49:24 ++ NET: uid30 req: user.ping { messageType => user.ping, msg => ok }
20.11 14:49:24 TIME: user.ping 0.25 ms
20.11 14:50:08 TIMER: Check auto-disconnect...
20.11 14:50:15 STATS: vdl.0 cache, locks:2
20.11 14:50:36 ++ NET: uid30 req: user.ping { messageType => user.ping, msg => ok }
20.11 14:50:36 TIME: user.ping 0.29 ms
20.11 14:51:08 TIMER: Check auto-disconnect...
20.11 14:51:15 STATS: vdl.0 cache, locks:2
20.11 14:51:50 ++ NET: uid30 req: user.ping { messageType => user.ping, msg => ok }
20.11 14:51:50 TIME: user.ping 0.12 ms
20.11 14:52:08 TIMER: Check auto-disconnect...
20.11 14:52:15 STATS: vdl.0 cache, locks:2
20.11 14:53:08 TIMER: Check auto-disconnect...
20.11 14:53:09 ++ NET: uid30 req: user.ping { messageType => user.ping, msg => ok }
20.11 14:53:09 TIME: user.ping 0.13 ms
20.11 14:53:15 STATS: vdl.0 cache, locks:2
20.11 14:54:08 TIMER: Check auto-disconnect...
20.11 14:54:15 STATS: vdl.0 cache, locks:2
20.11 14:55:08 TIMER: Check auto-disconnect...
20.11 14:55:15 STATS: vdl.0 cache, locks:2
20.11 14:56:08 TIMER: Check auto-disconnect...
20.11 14:56:15 STATS: vdl.0 cache, locks:2
20.11 14:57:08 TIMER: Check auto-disconnect...
20.11 14:57:15 STATS: vdl.0 cache, locks:2
20.11 14:58:08 TIMER: Check auto-disconnect...
20.11 14:58:15 STATS: vdl.0 cache, locks:2
20.11 14:59:08 TIMER: Check auto-disconnect...
20.11 14:59:15 STATS: vdl.0 cache, locks:2
