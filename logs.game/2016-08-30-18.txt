30.08 18:22:37 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
30.08 18:22:37 -<<-: server.login ok
30.08 18:22:37 DB: SELECT * FROM LocalizationStrings
30.08 18:22:37 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:22:37 TIMER: Starting timer...
30.08 18:22:37 TIMER: Timer running...
30.08 18:22:37 DB: SELECT * FROM GameVars
30.08 18:22:37 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:22:37 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
30.08 18:22:37 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:22:37 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
30.08 18:22:37 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:22:37 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
30.08 18:22:37 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:22:37 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
30.08 18:22:37 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:22:37 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
30.08 18:22:37 -<<-: core/quest.getDaily ok
30.08 18:22:37 DB: SELECT * FROM UserAttributeTypes
30.08 18:22:37 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:22:37 DB: SELECT * FROM UserVariableTypes
30.08 18:22:37 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:22:37 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
30.08 18:22:37 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:22:37 DB: SELECT * FROM ItemGroups
30.08 18:22:37 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:22:37 DB: SELECT * FROM Bundles ORDER BY ID
30.08 18:22:37 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:22:37 DB: SELECT * FROM BundleItems ORDER BY ID
30.08 18:22:37 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:22:37 SHOP: loading items...
30.08 18:22:37 ->>-: core/shop.getList { _type => core/shop.getList }
30.08 18:22:37 -<<-: core/shop.getList ok
30.08 18:22:37 SHOP: 0 items loaded (0 sec)
30.08 18:22:37 DB: SELECT * FROM EffectAttributeTypes
30.08 18:22:37 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:22:37 DB: SELECT * FROM Effects
30.08 18:22:37 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:22:37 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
30.08 18:22:37 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:22:37 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
30.08 18:22:37 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:22:37 DB: SELECT * FROM Badges
30.08 18:22:37 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
30.08 18:22:37 -<<-: core/server.query ok
30.08 18:23:14 NET: Client (conid:81614499) connected to vdl.0 (clients:1)
30.08 18:23:28 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
30.08 18:23:28 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
30.08 18:23:28 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
30.08 18:23:28 -<<-: core/server.query ok
30.08 18:23:28 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
30.08 18:23:28 -<<-: core/user.isOnlineID ok
30.08 18:23:28 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
30.08 18:23:28 -<<-: core/cache.get ok
30.08 18:23:28 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
30.08 18:23:28 -<<-: core/cache.get ok
30.08 18:23:28 NET: Client login (conid:81614499, id:2, name:test1)
30.08 18:23:28 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
30.08 18:23:28 -<<-: core/user.loginPost null
30.08 18:23:28 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
30.08 18:23:28 -<<-: vdl/cache.battle.find { r => #abstract, _type => vdl/cache.battle.find }
30.08 18:23:28 == NET: test1 ret: user.login { type => user.login, errorCode => You're not first }
30.08 18:23:28 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
30.08 18:23:28 == NET: test1 ret: user.join { name => test1, type => user.join }
30.08 18:23:37 TIMER: Check auto-disconnect...
30.08 18:23:38 STATS: vdl.0 cache, locks:2
30.08 18:23:38 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
30.08 18:23:38 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
30.08 18:23:38 STATS: vdl.0 cache connection, 27 calls, total 0.047767162322998 sec spent, avg 1.77 ms
30.08 18:24:18 NET: Client (name:test1 conid:81614499 TCP) disconnected from vdl.0 (clients:0)
30.08 18:24:18 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
30.08 18:24:18 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
30.08 18:24:18 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
30.08 18:24:18 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
30.08 18:24:18 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
30.08 18:24:18 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
30.08 18:24:37 TIMER: Check auto-disconnect...
30.08 18:24:38 STATS: vdl.0 cache, locks:0
30.08 18:25:37 TIMER: Check auto-disconnect...
30.08 18:25:38 STATS: vdl.0 cache, locks:0
30.08 18:26:37 TIMER: Check auto-disconnect...
30.08 18:27:52 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
30.08 18:27:52 -<<-: server.login ok
30.08 18:27:52 DB: SELECT * FROM LocalizationStrings
30.08 18:27:52 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:27:52 TIMER: Starting timer...
30.08 18:27:52 TIMER: Timer running...
30.08 18:27:52 DB: SELECT * FROM GameVars
30.08 18:27:52 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:27:52 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
30.08 18:27:52 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:27:52 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
30.08 18:27:52 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:27:52 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
30.08 18:27:52 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:27:52 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
30.08 18:27:52 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:27:52 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
30.08 18:27:52 -<<-: core/quest.getDaily ok
30.08 18:27:52 DB: SELECT * FROM UserAttributeTypes
30.08 18:27:52 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:27:52 DB: SELECT * FROM UserVariableTypes
30.08 18:27:52 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:27:52 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
30.08 18:27:52 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:27:52 DB: SELECT * FROM ItemGroups
30.08 18:27:52 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:27:52 DB: SELECT * FROM Bundles ORDER BY ID
30.08 18:27:52 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:27:52 DB: SELECT * FROM BundleItems ORDER BY ID
30.08 18:27:52 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:27:52 SHOP: loading items...
30.08 18:27:52 ->>-: core/shop.getList { _type => core/shop.getList }
30.08 18:27:52 -<<-: core/shop.getList ok
30.08 18:27:52 SHOP: 0 items loaded (0 sec)
30.08 18:27:52 DB: SELECT * FROM EffectAttributeTypes
30.08 18:27:52 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:27:52 DB: SELECT * FROM Effects
30.08 18:27:52 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:27:52 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
30.08 18:27:52 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:27:52 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
30.08 18:27:52 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:27:52 DB: SELECT * FROM Badges
30.08 18:27:52 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
30.08 18:27:52 -<<-: core/server.query ok
30.08 18:28:24 NET: Client (conid:11326576) connected to vdl.0 (clients:1)
30.08 18:28:40 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
30.08 18:28:40 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
30.08 18:28:40 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
30.08 18:28:40 -<<-: core/server.query ok
30.08 18:28:40 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
30.08 18:28:40 -<<-: core/user.isOnlineID ok
30.08 18:28:40 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
30.08 18:28:40 -<<-: core/cache.get ok
30.08 18:28:40 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
30.08 18:28:40 -<<-: core/cache.get ok
30.08 18:28:40 NET: Client login (conid:11326576, id:2, name:test1)
30.08 18:28:40 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
30.08 18:28:40 -<<-: core/user.loginPost null
30.08 18:28:40 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
30.08 18:28:40 -<<-: vdl/cache.battle.find { r => #abstract, _type => vdl/cache.battle.find }
30.08 18:28:40 == NET: test1 ret: user.login { type => user.login, errorCode => You're not first }
30.08 18:28:40 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
30.08 18:28:40 == NET: test1 ret: user.join { name => test1, type => user.join }
30.08 18:28:48 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
30.08 18:28:48 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
30.08 18:28:52 TIMER: Check auto-disconnect...
30.08 18:29:52 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
30.08 18:29:52 -<<-: server.login ok
30.08 18:29:52 DB: SELECT * FROM LocalizationStrings
30.08 18:29:52 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:29:52 TIMER: Starting timer...
30.08 18:29:52 TIMER: Timer running...
30.08 18:29:52 DB: SELECT * FROM GameVars
30.08 18:29:52 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:29:52 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
30.08 18:29:52 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:29:52 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
30.08 18:29:52 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:29:52 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
30.08 18:29:52 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:29:52 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
30.08 18:29:52 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:29:52 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
30.08 18:29:52 -<<-: core/quest.getDaily ok
30.08 18:29:52 DB: SELECT * FROM UserAttributeTypes
30.08 18:29:52 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:29:52 DB: SELECT * FROM UserVariableTypes
30.08 18:29:52 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:29:52 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
30.08 18:29:52 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:29:52 DB: SELECT * FROM ItemGroups
30.08 18:29:52 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:29:52 DB: SELECT * FROM Bundles ORDER BY ID
30.08 18:29:52 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:29:52 DB: SELECT * FROM BundleItems ORDER BY ID
30.08 18:29:52 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:29:52 SHOP: loading items...
30.08 18:29:52 ->>-: core/shop.getList { _type => core/shop.getList }
30.08 18:29:52 -<<-: core/shop.getList ok
30.08 18:29:52 SHOP: 0 items loaded (0 sec)
30.08 18:29:52 DB: SELECT * FROM EffectAttributeTypes
30.08 18:29:52 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:29:52 DB: SELECT * FROM Effects
30.08 18:29:52 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:29:52 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
30.08 18:29:52 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:29:52 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
30.08 18:29:52 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:29:52 DB: SELECT * FROM Badges
30.08 18:29:52 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
30.08 18:29:52 -<<-: core/server.query ok
30.08 18:30:11 NET: Client (conid:39173705) connected to vdl.0 (clients:1)
30.08 18:30:22 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
30.08 18:30:22 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
30.08 18:30:22 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
30.08 18:30:22 -<<-: core/server.query ok
30.08 18:30:22 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
30.08 18:30:22 -<<-: core/user.isOnlineID ok
30.08 18:30:22 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
30.08 18:30:22 -<<-: core/cache.get ok
30.08 18:30:22 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
30.08 18:30:22 -<<-: core/cache.get ok
30.08 18:30:22 NET: Client login (conid:39173705, id:2, name:test1)
30.08 18:30:22 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
30.08 18:30:22 -<<-: core/user.loginPost null
30.08 18:30:22 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
30.08 18:30:22 -<<-: vdl/cache.battle.find { r => #abstract, _type => vdl/cache.battle.find }
30.08 18:30:22 == NET: test1 ret: user.login { type => user.login, errorCode => You're not first }
30.08 18:30:22 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
30.08 18:30:22 == NET: test1 ret: user.join { name => test1, type => user.join }
30.08 18:30:27 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
30.08 18:30:27 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
30.08 18:30:52 TIMER: Check auto-disconnect...
30.08 18:30:52 STATS: vdl.0 cache, locks:2
30.08 18:30:52 TIMER: Check auto-disconnect...
30.08 18:30:52 STATS: vdl.0 cache, locks:2
30.08 18:30:52 TIMER: Check auto-disconnect...
30.08 18:30:52 STATS: vdl.0 cache, locks:2
30.08 18:33:03 NET: Client (name:test1 conid:39173705 TCP) disconnected from vdl.0 (clients:0)
30.08 18:33:03 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
30.08 18:33:03 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
30.08 18:33:03 STATS: vdl.0 cache connection, 28 calls, total 0.0316925048828125 sec spent, avg 1.13 ms
30.08 18:33:03 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
30.08 18:33:03 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
30.08 18:33:03 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
30.08 18:33:03 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
30.08 18:41:11 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
30.08 18:41:11 -<<-: server.login ok
30.08 18:41:11 DB: SELECT * FROM LocalizationStrings
30.08 18:41:11 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:11 TIMER: Starting timer...
30.08 18:41:11 TIMER: Timer running...
30.08 18:41:11 DB: SELECT * FROM GameVars
30.08 18:41:11 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:11 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
30.08 18:41:11 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:11 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
30.08 18:41:11 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:11 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
30.08 18:41:11 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:11 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
30.08 18:41:11 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:11 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
30.08 18:41:11 -<<-: core/quest.getDaily ok
30.08 18:41:11 DB: SELECT * FROM UserAttributeTypes
30.08 18:41:11 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:11 DB: SELECT * FROM UserVariableTypes
30.08 18:41:11 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:11 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
30.08 18:41:11 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:11 DB: SELECT * FROM ItemGroups
30.08 18:41:11 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:11 DB: SELECT * FROM Bundles ORDER BY ID
30.08 18:41:11 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:11 DB: SELECT * FROM BundleItems ORDER BY ID
30.08 18:41:11 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:11 SHOP: loading items...
30.08 18:41:11 ->>-: core/shop.getList { _type => core/shop.getList }
30.08 18:41:11 -<<-: core/shop.getList ok
30.08 18:41:11 SHOP: 0 items loaded (0 sec)
30.08 18:41:11 DB: SELECT * FROM EffectAttributeTypes
30.08 18:41:11 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:11 DB: SELECT * FROM Effects
30.08 18:41:11 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:11 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
30.08 18:41:11 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:11 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
30.08 18:41:11 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:11 DB: SELECT * FROM Badges
30.08 18:41:11 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
30.08 18:41:11 -<<-: core/server.query ok
30.08 18:41:59 NET: Client (conid:56203964) connected to vdl.0 (clients:1)
30.08 18:42:11 TIMER: Check auto-disconnect...
30.08 18:42:11 STATS: vdl.0 cache, locks:0
30.08 18:42:17 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
30.08 18:42:17 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
30.08 18:42:17 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
30.08 18:42:17 -<<-: core/server.query ok
30.08 18:42:17 STATS: vdl.0 cache connection, 21 calls, total 0.0318760871887207 sec spent, avg 1.52 ms
30.08 18:42:17 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
30.08 18:42:17 -<<-: core/user.isOnlineID ok
30.08 18:42:17 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
30.08 18:42:17 -<<-: core/cache.get ok
30.08 18:42:17 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
30.08 18:42:17 -<<-: core/cache.get ok
30.08 18:42:17 NET: Client login (conid:56203964, id:2, name:test1)
30.08 18:42:17 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
30.08 18:42:17 -<<-: core/user.loginPost null
30.08 18:42:17 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
30.08 18:42:17 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
30.08 18:42:17 == NET: test1 ret: user.login { type => user.login, errorCode => You're first }
30.08 18:42:17 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
30.08 18:42:17 == NET: test1 ret: user.join { name => test1, type => user.join }
30.08 18:42:26 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
30.08 18:42:26 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
30.08 18:42:58 NET: Client (name:test1 conid:56203964 TCP) disconnected from vdl.0 (clients:0)
30.08 18:42:58 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
30.08 18:42:58 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
30.08 18:42:58 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
30.08 18:42:58 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
30.08 18:42:58 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
30.08 18:42:58 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
30.08 18:49:08 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
30.08 18:49:08 -<<-: server.login ok
30.08 18:49:08 DB: SELECT * FROM LocalizationStrings
30.08 18:49:08 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 TIMER: Starting timer...
30.08 18:49:08 TIMER: Timer running...
30.08 18:49:08 DB: SELECT * FROM GameVars
30.08 18:49:08 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
30.08 18:49:08 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
30.08 18:49:08 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
30.08 18:49:08 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
30.08 18:49:08 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
30.08 18:49:08 -<<-: core/quest.getDaily ok
30.08 18:49:08 DB: SELECT * FROM UserAttributeTypes
30.08 18:49:08 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 DB: SELECT * FROM UserVariableTypes
30.08 18:49:08 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
30.08 18:49:08 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 DB: SELECT * FROM ItemGroups
30.08 18:49:08 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 DB: SELECT * FROM Bundles ORDER BY ID
30.08 18:49:08 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 DB: SELECT * FROM BundleItems ORDER BY ID
30.08 18:49:08 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 SHOP: loading items...
30.08 18:49:08 ->>-: core/shop.getList { _type => core/shop.getList }
30.08 18:49:08 -<<-: core/shop.getList ok
30.08 18:49:08 SHOP: 0 items loaded (0 sec)
30.08 18:49:08 DB: SELECT * FROM EffectAttributeTypes
30.08 18:49:08 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 DB: SELECT * FROM Effects
30.08 18:49:08 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
30.08 18:49:08 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
30.08 18:49:08 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 DB: SELECT * FROM Badges
30.08 18:49:08 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
30.08 18:49:08 -<<-: core/server.query ok
30.08 18:49:08 TIMER: Check auto-disconnect...
30.08 18:49:08 STATS: vdl.0 cache, locks:0
30.08 18:49:08 TIMER: Check auto-disconnect...
30.08 18:49:08 STATS: vdl.0 cache, locks:0
30.08 18:49:08 TIMER: Check auto-disconnect...
30.08 18:49:08 STATS: vdl.0 cache, locks:0
30.08 18:52:49 NET: Client (conid:66013316) connected to vdl.0 (clients:1)
30.08 18:52:57 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
30.08 18:52:57 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
30.08 18:52:57 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
30.08 18:52:57 -<<-: core/server.query ok
30.08 18:52:57 STATS: vdl.0 cache connection, 21 calls, total 0.0248537063598633 sec spent, avg 1.18 ms
30.08 18:52:57 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
30.08 18:52:57 -<<-: core/user.isOnlineID ok
30.08 18:52:57 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
30.08 18:52:57 -<<-: core/cache.get ok
30.08 18:52:57 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
30.08 18:52:57 -<<-: core/cache.get ok
30.08 18:52:57 NET: Client login (conid:66013316, id:2, name:test1)
30.08 18:52:57 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
30.08 18:52:57 -<<-: core/user.loginPost null
30.08 18:52:57 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
30.08 18:52:57 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
30.08 18:52:57 == NET: test1 ret: user.login { type => user.login, errorCode => You're first }
30.08 18:52:57 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
30.08 18:52:57 == NET: test1 ret: user.join { name => test1, type => user.join }
30.08 18:52:57 ++ NET: test1 req: battle.find { messageType => battle.find }
30.08 18:52:57 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
30.08 18:52:57 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
30.08 18:52:57 TIME: battle.find 1.21 ms
30.08 18:52:57 == NET: test1 ret: battle.find { type => battle.find, errorCode => You're first }
30.08 18:53:03 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
30.08 18:53:03 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
30.08 18:53:08 TIMER: Check auto-disconnect...
30.08 18:53:08 STATS: vdl.0 cache, locks:2
30.08 18:53:52 NET: Client (name:test1 conid:66013316 TCP) disconnected from vdl.0 (clients:0)
30.08 18:53:52 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
30.08 18:53:52 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
30.08 18:53:52 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
30.08 18:53:52 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
30.08 18:53:52 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
30.08 18:53:52 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
