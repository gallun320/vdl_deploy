28.10 09:03:01 NET: Client (conid:5656920) connected to vdl.0 (clients:1)
28.10 09:03:33 TIMER: Check auto-disconnect...
28.10 09:03:55 NET: Client (name:null conid:5656920 TCP) disconnected from vdl.0 (clients:0)
28.10 09:03:55 NET: Client (conid:31306505) connected to vdl.0 (clients:1)
28.10 09:04:33 TIMER: Check auto-disconnect...
28.10 09:04:33 TIMER: Check auto-disconnect...
28.10 09:04:33 TIMER: Check auto-disconnect...
28.10 09:04:33 TIMER: Check auto-disconnect...
28.10 09:04:33 TIMER: Check auto-disconnect...
28.10 09:09:32 NET: Client (name:null conid:31306505 TCP) disconnected from vdl.0 (clients:0)
28.10 09:09:33 TIMER: Check auto-disconnect...
28.10 09:09:42 NET: Client (conid:79859838) connected to vdl.0 (clients:1)
28.10 09:10:09 NET: Client (conid:40729763) connected to vdl.0 (clients:2)
28.10 09:10:09 NET: Client (conid:57735958) connected to vdl.0 (clients:3)
28.10 09:10:33 TIMER: Check auto-disconnect...
28.10 09:10:33 TIMER: Check auto-disconnect...
28.10 09:10:33 TIMER: Check auto-disconnect...
28.10 09:10:33 TIMER: Check auto-disconnect...
28.10 09:10:33 TIMER: Check auto-disconnect...
28.10 09:14:47 NET: Client (conid:24665479) connected to vdl.0 (clients:4)
28.10 09:14:59 NET: Client (name:null conid:24665479 TCP) disconnected from vdl.0 (clients:3)
28.10 09:15:33 TIMER: Check auto-disconnect...
28.10 09:15:33 NET: Client (name:null conid:40729763 TCP) disconnected from vdl.0 (clients:2)
28.10 09:15:33 NET: Client (name:null conid:79859838 TCP) disconnected from vdl.0 (clients:1)
28.10 09:15:33 NET: Client (name:null conid:57735958 TCP) disconnected from vdl.0 (clients:0)
28.10 09:15:33 TIMER: Check auto-disconnect...
28.10 09:15:33 TIMER: Check auto-disconnect...
28.10 09:15:33 TIMER: Check auto-disconnect...
28.10 09:18:43 NET: Client (conid:16923480) connected to vdl.0 (clients:1)
28.10 09:18:48 NET: Client (name:null conid:16923480 TCP) disconnected from vdl.0 (clients:0)
28.10 09:18:48 NET: Client (conid:50534296) connected to vdl.0 (clients:1)
28.10 09:19:33 TIMER: Check auto-disconnect...
28.10 09:19:59 NET: Client (name:null conid:50534296 TCP) disconnected from vdl.0 (clients:0)
28.10 09:19:59 NET: Client (conid:67254632) connected to vdl.0 (clients:1)
28.10 09:20:33 TIMER: Check auto-disconnect...
28.10 09:20:33 TIMER: Check auto-disconnect...
28.10 09:20:33 TIMER: Check auto-disconnect...
28.10 09:20:33 TIMER: Check auto-disconnect...
28.10 09:20:33 NET: Client (name:null conid:67254632 TCP) disconnected from vdl.0 (clients:0)
28.10 09:20:33 TIMER: Check auto-disconnect...
28.10 09:20:33 TIMER: Check auto-disconnect...
28.10 09:20:33 TIMER: Check auto-disconnect...
28.10 09:27:28 NET: Client (conid:49198246) connected to vdl.0 (clients:1)
28.10 09:28:38 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3020, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3020 }
28.10 09:28:38 -<<-: server.login ok
28.10 09:28:38 DB: SELECT * FROM LocalizationStrings
28.10 09:28:38 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:38 TIMER: Starting timer...
28.10 09:28:38 TIMER: Timer running...
28.10 09:28:38 DB: SELECT * FROM GameVars
28.10 09:28:38 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:38 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
28.10 09:28:38 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:38 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
28.10 09:28:38 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:38 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
28.10 09:28:38 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:38 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
28.10 09:28:38 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:38 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
28.10 09:28:38 -<<-: core/quest.getDaily ok
28.10 09:28:38 DB: SELECT * FROM UserAttributeTypes
28.10 09:28:38 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:38 DB: SELECT * FROM UserVariableTypes
28.10 09:28:38 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:38 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
28.10 09:28:38 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:38 DB: SELECT * FROM ItemGroups
28.10 09:28:38 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:38 DB: SELECT * FROM Bundles ORDER BY ID
28.10 09:28:38 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:38 DB: SELECT * FROM BundleItems ORDER BY ID
28.10 09:28:38 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:38 SHOP: loading items...
28.10 09:28:38 ->>-: core/shop.getList { _type => core/shop.getList }
28.10 09:28:38 -<<-: core/shop.getList ok
28.10 09:28:38 SHOP: 0 items loaded (0.001 sec)
28.10 09:28:38 DB: SELECT * FROM EffectAttributeTypes
28.10 09:28:38 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:38 DB: SELECT * FROM Effects
28.10 09:28:38 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:38 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 09:28:38 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:38 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 09:28:38 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:38 DB: SELECT * FROM Badges
28.10 09:28:38 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
28.10 09:28:38 -<<-: core/server.query ok
28.10 09:28:42 NET: Client (conid:88353320) connected to vdl.0 (clients:1)
28.10 09:28:43 ++ NET: null req: user.register { password => kO2YJdf, name => Aimer, messageType => user.register }
28.10 09:28:43 DB: SELECT ID FROM Users WHERE Name = 'Aimer'
28.10 09:28:43 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = 'Aimer', _type => core/server.query }
28.10 09:28:43 -<<-: core/server.query ok
28.10 09:28:43 == NET: null ret: user.register { type => user.register, errorCode => nameExists }
28.10 09:29:12 NET: Client (name:null conid:88353320 TCP) disconnected from vdl.0 (clients:0)
28.10 09:29:43 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3020, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3020 }
28.10 09:29:43 -<<-: server.login ok
28.10 09:29:43 DB: SELECT * FROM LocalizationStrings
28.10 09:29:43 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:43 TIMER: Starting timer...
28.10 09:29:43 TIMER: Timer running...
28.10 09:29:43 DB: SELECT * FROM GameVars
28.10 09:29:43 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:43 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
28.10 09:29:43 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:43 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
28.10 09:29:43 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:43 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
28.10 09:29:43 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:43 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
28.10 09:29:43 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:43 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
28.10 09:29:43 -<<-: core/quest.getDaily ok
28.10 09:29:43 DB: SELECT * FROM UserAttributeTypes
28.10 09:29:43 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:43 DB: SELECT * FROM UserVariableTypes
28.10 09:29:43 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:43 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
28.10 09:29:43 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:43 DB: SELECT * FROM ItemGroups
28.10 09:29:43 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:43 DB: SELECT * FROM Bundles ORDER BY ID
28.10 09:29:43 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:43 DB: SELECT * FROM BundleItems ORDER BY ID
28.10 09:29:43 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:43 SHOP: loading items...
28.10 09:29:43 ->>-: core/shop.getList { _type => core/shop.getList }
28.10 09:29:43 -<<-: core/shop.getList ok
28.10 09:29:43 SHOP: 0 items loaded (0 sec)
28.10 09:29:43 DB: SELECT * FROM EffectAttributeTypes
28.10 09:29:43 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:43 DB: SELECT * FROM Effects
28.10 09:29:43 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:43 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 09:29:43 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:43 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 09:29:43 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:43 DB: SELECT * FROM Badges
28.10 09:29:43 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
28.10 09:29:43 -<<-: core/server.query ok
28.10 09:29:48 NET: Client (conid:68076625) connected to vdl.0 (clients:1)
28.10 09:29:48 ++ NET: null req: user.register { password => kO2YJdf, name => Aimer, messageType => user.register }
28.10 09:29:48 DB: SELECT ID FROM Users WHERE Name = 'Aimer'
28.10 09:29:48 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = 'Aimer', _type => core/server.query }
28.10 09:29:48 -<<-: core/server.query ok
28.10 09:29:48 == NET: null ret: user.register { type => user.register, errorCode => nameExists }
28.10 09:30:19 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3020, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3020 }
28.10 09:30:19 -<<-: server.login ok
28.10 09:30:19 DB: SELECT * FROM LocalizationStrings
28.10 09:30:19 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:19 TIMER: Starting timer...
28.10 09:30:19 TIMER: Timer running...
28.10 09:30:19 DB: SELECT * FROM GameVars
28.10 09:30:19 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:19 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
28.10 09:30:19 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:19 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
28.10 09:30:19 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:19 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
28.10 09:30:19 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:19 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
28.10 09:30:19 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:19 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
28.10 09:30:19 -<<-: core/quest.getDaily ok
28.10 09:30:19 DB: SELECT * FROM UserAttributeTypes
28.10 09:30:19 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:19 DB: SELECT * FROM UserVariableTypes
28.10 09:30:19 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:19 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
28.10 09:30:19 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:19 DB: SELECT * FROM ItemGroups
28.10 09:30:19 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:19 DB: SELECT * FROM Bundles ORDER BY ID
28.10 09:30:19 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:19 DB: SELECT * FROM BundleItems ORDER BY ID
28.10 09:30:19 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:19 SHOP: loading items...
28.10 09:30:19 ->>-: core/shop.getList { _type => core/shop.getList }
28.10 09:30:19 -<<-: core/shop.getList ok
28.10 09:30:19 SHOP: 0 items loaded (0 sec)
28.10 09:30:19 DB: SELECT * FROM EffectAttributeTypes
28.10 09:30:19 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:19 DB: SELECT * FROM Effects
28.10 09:30:19 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:19 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 09:30:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:19 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 09:30:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:19 DB: SELECT * FROM Badges
28.10 09:30:19 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
28.10 09:30:19 -<<-: core/server.query ok
28.10 09:30:31 NET: Client (conid:20520916) connected to vdl.0 (clients:1)
28.10 09:30:31 ++ NET: null req: user.register { password => test, name => test45, messageType => user.register }
28.10 09:30:31 DB: SELECT ID FROM Users WHERE Name = 'test45'
28.10 09:30:31 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = 'test45', _type => core/server.query }
28.10 09:30:31 -<<-: core/server.query ok
28.10 09:30:31 DB: SELECT nextval('Users_id_seq') AS id
28.10 09:30:31 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
28.10 09:30:31 -<<-: core/server.query ok
28.10 09:30:31 ->>-: core/user.register { password => test, name => test45, fullParams => { password => test, name => test45, networkid => , networktype => , messageType => user.register, id => 91 }, networkid => , connectionID => 20520916, networktype => , email => , id => 91, _type => core/user.register }
28.10 09:30:31 -<<-: core/user.register ok
28.10 09:30:31 -<<-: core/user.registerResponse null
28.10 09:30:31 DB: SELECT token FROM tokens WHERE userid = 91
28.10 09:30:31 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 91, _type => core/server.query }
28.10 09:30:31 -<<-: core/server.query ok
28.10 09:30:31 == NET: null ret: user.register { type => user.register, errorCode => ok, token => b27656ee27b7bf6aa669bd53a7c3386b }
28.10 09:31:19 TIMER: Check auto-disconnect...
28.10 09:31:19 STATS: vdl.0 cache, locks:0
28.10 09:31:40 NET: Client (conid:9802373) connected to vdl.0 (clients:2)
28.10 09:31:41 ++ NET: null req: user.login { password => ukfveh, name => nelli, messageType => user.login }
28.10 09:31:41 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'nelli' AND Password = 'ukfveh'
28.10 09:31:41 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'nelli' AND Password = 'ukfveh', _type => core/server.query }
28.10 09:31:41 -<<-: core/server.query ok
28.10 09:31:41 STATS: vdl.0 cache connection, 25 calls, total 0.03005051612854 sec spent, avg 1.2 ms
28.10 09:31:41 == NET: null ret: user.login { type => user.login, errorCode => userNotFound }
28.10 09:31:41 NET: Client (name:null conid:9802373 TCP) disconnected from vdl.0 (clients:1)
28.10 09:31:41 NET: Client (conid:57362238) connected to vdl.0 (clients:2)
28.10 09:31:46 NET: Client (name:null conid:57362238 TCP) disconnected from vdl.0 (clients:1)
28.10 09:31:46 NET: Client (conid:45173202) connected to vdl.0 (clients:2)
28.10 09:31:46 ++ NET: null req: user.login { password => ukfveh, name => nelli, messageType => user.login }
28.10 09:31:46 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'nelli' AND Password = 'ukfveh'
28.10 09:31:46 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'nelli' AND Password = 'ukfveh', _type => core/server.query }
28.10 09:31:46 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
28.10 09:31:46 == NET: null ret: user.login { type => user.login, errorCode => userNotFound }
28.10 09:31:46 NET: Client (name:null conid:45173202 TCP) disconnected from vdl.0 (clients:1)
28.10 09:31:46 NET: Client (conid:21944306) connected to vdl.0 (clients:2)
28.10 09:31:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:31:49 TRACE: User not logon yet.
28.10 09:32:09 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:32:09 TRACE: User not logon yet.
28.10 09:32:19 TIMER: Check auto-disconnect...
28.10 09:32:19 STATS: vdl.0 cache, locks:0
28.10 09:32:29 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:32:29 TRACE: User not logon yet.
28.10 09:32:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:32:49 TRACE: User not logon yet.
28.10 09:33:19 TIMER: Check auto-disconnect...
28.10 09:33:19 STATS: vdl.0 cache, locks:0
28.10 09:34:08 NET: Client (conid:93048185) connected to vdl.0 (clients:3)
28.10 09:34:10 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:34:10 TRACE: User not logon yet.
28.10 09:34:13 NET: Client (name:null conid:20520916 TCP) disconnected from vdl.0 (clients:2)
28.10 09:34:19 TIMER: Check auto-disconnect...
28.10 09:34:19 STATS: vdl.0 cache, locks:0
28.10 09:34:30 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:34:30 TRACE: User not logon yet.
28.10 09:34:33 NET: Client (conid:62999595) connected to vdl.0 (clients:3)
28.10 09:34:33 ++ NET: null req: user.register { password => test, name => nelli, messageType => user.register }
28.10 09:34:33 DB: SELECT ID FROM Users WHERE Name = 'nelli'
28.10 09:34:33 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = 'nelli', _type => core/server.query }
28.10 09:34:33 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
28.10 09:34:33 STATS: vdl.0 cache connection, 27 calls, total 0.0338637828826904 sec spent, avg 1.25 ms
28.10 09:34:33 DB: SELECT nextval('Users_id_seq') AS id
28.10 09:34:33 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
28.10 09:34:33 -<<-: core/server.query { list => {{ id => 92 }}, errorCode => ok, _type => core/server.query }
28.10 09:34:33 ->>-: core/user.register { password => test, name => nelli, fullParams => { password => test, name => nelli, networkid => , networktype => , messageType => user.register, id => 92 }, networkid => , connectionID => 62999595, networktype => , email => , id => 92, _type => core/user.register }
28.10 09:34:33 -<<-: core/user.register { errorCode => ok, _type => core/user.register }
28.10 09:34:33 -<<-: core/user.registerResponse { password => test, name => nelli, _isNotify => true, fullParams => { password => test, name => nelli, networkid => , networktype => , messageType => user.register, id => 92 }, networkid => , connectionID => 62999595, networktype => , email => , id => 92, _type => core/user.registerResponse }
28.10 09:34:33 DB: SELECT token FROM tokens WHERE userid = 92
28.10 09:34:33 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 92, _type => core/server.query }
28.10 09:34:33 -<<-: core/server.query { list => {{ token => 5d0536a0271e3219f0ce7d268ab87768 }}, errorCode => ok, _type => core/server.query }
28.10 09:34:33 == NET: null ret: user.register { type => user.register, errorCode => ok, token => 5d0536a0271e3219f0ce7d268ab87768 }
28.10 09:34:50 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:34:50 TRACE: User not logon yet.
28.10 09:34:59 NET: Client (name:null conid:62999595 TCP) disconnected from vdl.0 (clients:2)
28.10 09:35:10 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:35:10 TRACE: User not logon yet.
28.10 09:37:19 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3020, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3020 }
28.10 09:37:19 -<<-: server.login ok
28.10 09:37:19 DB: SELECT * FROM LocalizationStrings
28.10 09:37:19 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:37:19 TIMER: Starting timer...
28.10 09:37:19 DB: SELECT * FROM GameVars
28.10 09:37:19 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
28.10 09:37:19 TIMER: Timer running...
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:37:19 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
28.10 09:37:19 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:37:19 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
28.10 09:37:19 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:37:19 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
28.10 09:37:19 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:37:19 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
28.10 09:37:19 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:37:19 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
28.10 09:37:19 -<<-: core/quest.getDaily ok
28.10 09:37:19 DB: SELECT * FROM UserAttributeTypes
28.10 09:37:19 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:37:19 DB: SELECT * FROM UserVariableTypes
28.10 09:37:19 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:37:19 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
28.10 09:37:19 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:37:19 DB: SELECT * FROM ItemGroups
28.10 09:37:19 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:37:19 DB: SELECT * FROM Bundles ORDER BY ID
28.10 09:37:19 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:37:19 DB: SELECT * FROM BundleItems ORDER BY ID
28.10 09:37:19 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:37:19 SHOP: loading items...
28.10 09:37:19 ->>-: core/shop.getList { _type => core/shop.getList }
28.10 09:37:19 -<<-: core/shop.getList ok
28.10 09:37:19 SHOP: 0 items loaded (0 sec)
28.10 09:37:19 DB: SELECT * FROM EffectAttributeTypes
28.10 09:37:19 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:37:19 DB: SELECT * FROM Effects
28.10 09:37:19 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:37:19 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 09:37:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:37:19 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 09:37:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:37:19 DB: SELECT * FROM Badges
28.10 09:37:19 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
28.10 09:37:19 -<<-: core/server.query ok
28.10 09:38:07 NET: Client (conid:23316136) connected to vdl.0 (clients:1)
28.10 09:38:10 ++ NET: null req: user.register { messageType => user.register }
28.10 09:38:10 DB: SELECT * FROM users
28.10 09:38:10 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
28.10 09:38:10 -<<-: core/server.query ok
28.10 09:38:10 DB: SELECT ID FROM Users WHERE Name = 'uid77'
28.10 09:38:10 == NET: null ret: user.auth { type => user.auth, token => dWlkNzc= }
28.10 09:38:10 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = 'uid77', _type => core/server.query }
28.10 09:38:10 -<<-: core/server.query ok
28.10 09:38:10 DB: SELECT nextval('Users_id_seq') AS id
28.10 09:38:10 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
28.10 09:38:10 -<<-: core/server.query ok
28.10 09:38:10 ->>-: core/user.register { password => uid77, name => uid77, fullParams => { password => uid77, name => uid77, networkid => , networktype => , messageType => user.register, id => 93 }, networkid => , connectionID => 23316136, networktype => , email => , id => 93, _type => core/user.register }
28.10 09:38:10 -<<-: core/user.register ok
28.10 09:38:10 -<<-: core/user.registerResponse null
28.10 09:38:10 DB: SELECT token FROM tokens WHERE userid = 93
28.10 09:38:10 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 93, _type => core/server.query }
28.10 09:38:10 -<<-: core/server.query ok
28.10 09:38:10 == NET: null ret: user.register { type => user.register, errorCode => ok, token => 04cdaede88a6c4ecd1e6b23e4f1db6d8 }
28.10 09:38:13 ++ NET: null req: user.login { messageType => user.login, token => dWlkNzc= }
28.10 09:38:13 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid77' AND Password = 'uid77'
28.10 09:38:13 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid77' AND Password = 'uid77', _type => core/server.query }
28.10 09:38:13 -<<-: core/server.query { list => {{ name => uid77, networkid => , isbanned => false, id => 93 }}, errorCode => ok, _type => core/server.query }
28.10 09:38:13 ->>-: core/user.isOnlineID { id => 93, _type => core/user.isOnlineID }
28.10 09:38:13 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
28.10 09:38:13 ->>-: core/cache.get { type => user, v => -1, id => 93, _type => core/cache.get }
28.10 09:38:13 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {chemrating => 0, biorating => 0, networktype =>   , level => 0, sex => male, networkid => , skinbase => {"body_skin": 1, "head_skin": 1, "hair": 1, "eyes": 1, "mouth": 1}, informaticrating => 0, isbanned => false, params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => { addAccess => , regionName => null, addDress => , cityName => null, schoolName => null, friendList => [], addWeapon => , addHeader =>  }, attrs => { level => 1, hints => 15 }, effects => { list => [] } }, name => uid77, skinaddavaliable => {"head : null; dress : null; weapon : null; acess : null"}, deleted => false, historyrating => 0, school => 1, rang => 0, georating => 0, password => uid77, language =>   , region => 1, skinadditional => {"head": 0, "dress": 0, "acces": 0, "weapon": 0}, rangname => новичок                       , rusrating => 0, email => null, mathrating => 0, regdate => 2016-10-28 09:38:10.584074+00, expirience => 0, city => 1, physrating => 0}, version => 16, id => 93 } }
28.10 09:38:13 ->>-: core/cache.get { type => questdata, v => -1, id => 93, _type => core/cache.get }
28.10 09:38:13 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 93 } }
28.10 09:38:13 NET: Client login (conid:23316136, id:93, name:uid77)
28.10 09:38:13 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 93, _type => core/user.loginPost, ipAddr => 217.118.93.167 }
28.10 09:38:13 -<<-: core/user.loginPost { _type => core/user.loginPost }
28.10 09:38:13 DB: SELECT token FROM tokens WHERE userid = 93
28.10 09:38:13 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 93, _type => core/server.query }
28.10 09:38:13 -<<-: core/server.query { list => {{ token => 04cdaede88a6c4ecd1e6b23e4f1db6d8 }}, errorCode => ok, _type => core/server.query }
28.10 09:38:13 DB: SELECT ID FROM TempUserLogins WHERE UserID = 93 AND Date = 'today'::timestamp
28.10 09:38:13 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 93 AND Date = 'today'::timestamp, _type => core/server.query }
28.10 09:38:13 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
28.10 09:38:13 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (93, 'today'::timestamp)
28.10 09:38:13 == NET: uid77 ret: user.login { name => uid77, type => user.login, errorCode => ok, id => 93, token => 04cdaede88a6c4ecd1e6b23e4f1db6d8 }
28.10 09:38:13 ++ NET: uid77 req: user.login { messageType => user.login, token => dWlkNzc= }
28.10 09:38:13 DB: SELECT id FROM battle WHERE firstid=93 OR secondid=93 AND finished <> true
28.10 09:38:13 == NET: uid77 ret: user.join { name => uid77, type => user.join }
28.10 09:38:13 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=93 OR secondid=93 AND finished <> true, _type => core/server.query, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (93, 'today'::timestamp), _type => core/server.pending }} }
28.10 09:38:13 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
28.10 09:38:13 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 09:38:13 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
28.10 09:38:13 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 09:38:13 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 265
Called from modules/VDLBattleModule.hx line 278
Called from snipe/slave/Server.hx line 1009
28.10 09:38:13 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1477647493, lastLoginDate => 302, lastLoadDate => 1029 } }}, type => user, unlock => true, id => 93, _type => core/cache.update }
28.10 09:38:13 -<<-: core/cache.update { errorCode => ok, version => 17, _type => core/cache.update }
28.10 09:38:13 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 93, _type => core/cache.update }
28.10 09:38:13 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 09:38:13 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 93, _type => core/user.logoutPost }
28.10 09:38:13 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
28.10 09:38:13 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid77' AND Password = 'uid77'
28.10 09:38:13 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid77' AND Password = 'uid77', _type => core/server.query }
28.10 09:38:13 -<<-: core/server.query { list => {{ name => uid77, networkid => , isbanned => false, id => 93 }}, errorCode => ok, _type => core/server.query }
28.10 09:38:13 ->>-: core/user.isOnlineID { id => 93, _type => core/user.isOnlineID }
28.10 09:38:13 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
28.10 09:38:13 ->>-: core/cache.get { type => user, v => -1, id => 93, _type => core/cache.get }
28.10 09:38:13 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {chemrating => 0, biorating => 0, networktype =>   , level => 0, sex => male, networkid => , skinbase => {"body_skin": 1, "head_skin": 1, "hair": 1, "eyes": 1, "mouth": 1}, informaticrating => 0, isbanned => false, params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => { addAccess => , regionName => null, addDress => , cityName => null, schoolName => null, friendList => [], addWeapon => , addHeader =>  }, attrs => { level => 1, _lastTime.24hr => 1477647493, lastLoginDate => 302, lastLoadDate => 1029, hints => 15 }, effects => { list => [] } }, name => uid77, skinaddavaliable => {"head : null; dress : null; weapon : null; acess : null"}, deleted => false, historyrating => 0, school => 1, rang => 0, georating => 0, password => uid77, language => en, region => 1, skinadditional => {"head": 0, "dress": 0, "acces": 0, "weapon": 0}, rangname => новичок                       , rusrating => 0, email => null, mathrating => 0, regdate => 2016-10-28 09:38:10.584074+00, expirience => 0, city => 1, physrating => 0}, version => 17, id => 93 } }
28.10 09:38:13 ->>-: core/cache.get { type => questdata, v => -1, id => 93, _type => core/cache.get }
28.10 09:38:13 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 93 } }
28.10 09:38:13 NET: Client login (conid:23316136, id:93, name:uid77)
28.10 09:38:13 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 93, _type => core/user.loginPost, ipAddr => 217.118.93.167 }
28.10 09:38:13 -<<-: core/user.loginPost { _type => core/user.loginPost }
28.10 09:38:13 DB: SELECT token FROM tokens WHERE userid = 93
28.10 09:38:13 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 93, _type => core/server.query }
28.10 09:38:13 -<<-: core/server.query { list => {{ token => 04cdaede88a6c4ecd1e6b23e4f1db6d8 }}, errorCode => ok, _type => core/server.query }
28.10 09:38:18 ++ NET: uid77 req: user.ping { messageType => user.ping, msg => ok }
28.10 09:38:18 TIME: user.ping 0.11 ms
28.10 09:38:19 TIMER: Check auto-disconnect...
28.10 09:38:19 STATS: vdl.0 cache, locks:2
28.10 09:38:19 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 93, _type => core/cache.update }
28.10 09:38:19 -<<-: core/cache.update { errorCode => ok, version => 18, _type => core/cache.update }
28.10 09:38:19 STATS: vdl.0 cache connection, 44 calls, total 0.0436532497406006 sec spent, avg 0.99 ms
28.10 09:38:38 ++ NET: uid77 req: user.ping { messageType => user.ping, msg => ok }
28.10 09:38:38 TIME: user.ping 0.15 ms
28.10 09:38:58 ++ NET: uid77 req: user.ping { messageType => user.ping, msg => ok }
28.10 09:38:58 TIME: user.ping 0.12 ms
28.10 09:39:08 NET: Client (name:uid77 conid:23316136 TCP) disconnected from vdl.0 (clients:0)
28.10 09:39:08 DB: SELECT id FROM battle WHERE firstid=93 OR secondid=93 AND finished <> true
28.10 09:39:08 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=93 OR secondid=93 AND finished <> true, _type => core/server.query }
28.10 09:39:08 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
28.10 09:39:08 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 09:39:08 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
28.10 09:39:08 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 09:39:08 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 265
Called from modules/VDLBattleModule.hx line 278
Called from snipe/slave/Server.hx line 1009
28.10 09:39:08 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 93, _type => core/cache.update }
28.10 09:39:08 -<<-: core/cache.update { errorCode => ok, version => 19, _type => core/cache.update }
28.10 09:39:08 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 93, _type => core/cache.update }
28.10 09:39:08 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
28.10 09:39:08 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 93, _type => core/user.logoutPost }
28.10 09:39:08 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
28.10 09:39:08 NET: Client (conid:94894073) connected to vdl.0 (clients:1)
28.10 09:39:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:39:19 TRACE: User not logon yet.
28.10 09:39:19 TIMER: Check auto-disconnect...
28.10 09:39:19 STATS: vdl.0 cache, locks:0
28.10 09:39:39 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:39:39 TRACE: User not logon yet.
28.10 09:39:59 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:39:59 TRACE: User not logon yet.
28.10 09:40:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:40:19 TRACE: User not logon yet.
28.10 09:40:19 TIMER: Check auto-disconnect...
28.10 09:40:19 STATS: vdl.0 cache, locks:0
28.10 09:40:39 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:40:39 TRACE: User not logon yet.
28.10 09:40:59 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:40:59 TRACE: User not logon yet.
28.10 09:41:16 NET: Client (name:null conid:94894073 TCP) disconnected from vdl.0 (clients:0)
28.10 09:41:17 NET: Client (conid:46277186) connected to vdl.0 (clients:1)
28.10 09:41:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:41:19 TRACE: User not logon yet.
28.10 09:41:19 TIMER: Check auto-disconnect...
28.10 09:41:19 STATS: vdl.0 cache, locks:0
28.10 09:41:28 NET: Client (name:null conid:46277186 TCP) disconnected from vdl.0 (clients:0)
28.10 09:41:28 NET: Client (conid:27893166) connected to vdl.0 (clients:1)
28.10 09:41:28 ++ NET: null req: user.login { password => test, name => nelli, messageType => user.login }
28.10 09:41:28 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'nelli' AND Password = 'test'
28.10 09:41:28 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'nelli' AND Password = 'test', _type => core/server.query }
28.10 09:41:28 -<<-: core/server.query { list => {{ name => nelli, networkid => , isbanned => false, id => 92 }}, errorCode => ok, _type => core/server.query }
28.10 09:41:28 STATS: vdl.0 cache connection, 50 calls, total 0.0487411022186279 sec spent, avg 0.97 ms
28.10 09:41:28 ->>-: core/user.isOnlineID { id => 92, _type => core/user.isOnlineID }
28.10 09:41:28 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
28.10 09:41:28 ->>-: core/cache.get { type => user, v => -1, id => 92, _type => core/cache.get }
28.10 09:41:28 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {chemrating => 0, biorating => 0, networktype =>   , level => 0, sex => male, networkid => , skinbase => {"body_skin": 1, "head_skin": 1, "hair": 1, "eyes": 1, "mouth": 1}, informaticrating => 0, isbanned => false, params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => { addAccess => , regionName => null, addDress => , cityName => null, schoolName => null, friendList => [], addWeapon => , addHeader =>  }, attrs => { level => 1, hints => 15 }, effects => { list => [] } }, name => nelli, skinaddavaliable => {"head : null; dress : null; weapon : null; acess : null"}, deleted => false, historyrating => 0, school => 1, rang => 0, georating => 0, password => test, language =>   , region => 1, skinadditional => {"head": 0, "dress": 0, "acces": 0, "weapon": 0}, rangname => новичок                       , rusrating => 0, email => null, mathrating => 0, regdate => 2016-10-28 09:34:33.889102+00, expirience => 0, city => 1, physrating => 0}, version => 0, id => 92 } }
28.10 09:41:28 ->>-: core/cache.get { type => questdata, v => -1, id => 92, _type => core/cache.get }
28.10 09:41:28 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 92 } }
28.10 09:41:28 NET: Client login (conid:27893166, id:92, name:nelli)
28.10 09:41:28 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 92, _type => core/user.loginPost, ipAddr => 217.118.93.167 }
28.10 09:41:28 -<<-: core/user.loginPost { _type => core/user.loginPost }
28.10 09:41:28 DB: SELECT token FROM tokens WHERE userid = 92
28.10 09:41:28 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 92, _type => core/server.query }
28.10 09:41:28 -<<-: core/server.query { list => {{ token => 5d0536a0271e3219f0ce7d268ab87768 }}, errorCode => ok, _type => core/server.query }
28.10 09:41:28 DB: SELECT ID FROM TempUserLogins WHERE UserID = 92 AND Date = 'today'::timestamp
28.10 09:41:28 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 92 AND Date = 'today'::timestamp, _type => core/server.query }
28.10 09:41:28 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
28.10 09:41:28 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (92, 'today'::timestamp)
28.10 09:41:28 == NET: nelli ret: user.login { name => nelli, type => user.login, errorCode => ok, id => 92, token => 5d0536a0271e3219f0ce7d268ab87768 }
28.10 09:41:28 == NET: nelli ret: user.join { name => nelli, type => user.join }
28.10 09:41:28 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (92, 'today'::timestamp), _type => core/server.pending }} }
28.10 09:41:28 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
28.10 09:41:29 ++ NET: nelli req: user.data { messageType => user.data }
28.10 09:41:29 ->>-: vdl/cache.user.getData { userId => 92, _type => vdl/cache.user.getData }
28.10 09:41:29 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData }
28.10 09:41:29 TIME: user.data 0.35 ms
28.10 09:41:29 == NET: nelli ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
28.10 09:41:34 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1477647688, lastLoginDate => 302, lastLoadDate => 1029 } }}, type => user, unlock => false, id => 92, _type => core/cache.update }
28.10 09:41:34 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 09:41:39 ++ NET: nelli req: user.ping { messageType => user.ping, msg => ok }
28.10 09:41:39 TIME: user.ping 0.12 ms
28.10 09:41:39 == NET: nelli ret: user.ping { type => user.ping, errorCode => ok }
28.10 09:41:39 NET: Client (name:nelli conid:27893166 TCP) disconnected from vdl.0 (clients:0)
28.10 09:41:39 DB: SELECT id FROM battle WHERE firstid=92 OR secondid=92 AND finished <> true
28.10 09:41:39 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=92 OR secondid=92 AND finished <> true, _type => core/server.query }
28.10 09:41:39 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
28.10 09:41:39 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 09:41:39 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
28.10 09:41:39 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 09:41:39 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 265
Called from modules/VDLBattleModule.hx line 278
Called from snipe/slave/Server.hx line 1009
28.10 09:41:39 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 92, _type => core/cache.update }
28.10 09:41:39 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
28.10 09:41:39 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 92, _type => core/cache.update }
28.10 09:41:39 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 09:41:39 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 92, _type => core/user.logoutPost }
28.10 09:41:39 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
28.10 09:41:40 NET: Client (conid:19278478) connected to vdl.0 (clients:1)
28.10 09:41:51 NET: Client (name:null conid:19278478 TCP) disconnected from vdl.0 (clients:0)
28.10 09:41:51 NET: Client (conid:44562693) connected to vdl.0 (clients:1)
28.10 09:41:51 ++ NET: null req: user.login { password => qwerty, name => nellinelli, messageType => user.login }
28.10 09:41:51 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'nellinelli' AND Password = 'qwerty'
28.10 09:41:51 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'nellinelli' AND Password = 'qwerty', _type => core/server.query }
28.10 09:41:51 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
28.10 09:41:51 == NET: null ret: user.login { type => user.login, errorCode => userNotFound }
28.10 09:41:51 NET: Client (name:null conid:44562693 TCP) disconnected from vdl.0 (clients:0)
28.10 09:41:51 NET: Client (conid:6109271) connected to vdl.0 (clients:1)
28.10 09:41:59 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:41:59 TRACE: User not logon yet.
28.10 09:42:02 NET: Client (name:null conid:6109271 TCP) disconnected from vdl.0 (clients:0)
28.10 09:42:02 NET: Client (conid:49915474) connected to vdl.0 (clients:1)
28.10 09:42:02 ++ NET: null req: user.login { password => test, name => nelli, messageType => user.login }
28.10 09:42:02 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'nelli' AND Password = 'test'
28.10 09:42:02 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'nelli' AND Password = 'test', _type => core/server.query }
28.10 09:42:02 -<<-: core/server.query { list => {{ name => nelli, networkid => , isbanned => false, id => 92 }}, errorCode => ok, _type => core/server.query }
28.10 09:42:02 ->>-: core/user.isOnlineID { id => 92, _type => core/user.isOnlineID }
28.10 09:42:02 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
28.10 09:42:02 ->>-: core/cache.get { type => user, v => -1, id => 92, _type => core/cache.get }
28.10 09:42:02 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {chemrating => 0, biorating => 0, networktype =>   , level => 0, sex => male, networkid => , skinbase => {"body_skin": 1, "head_skin": 1, "hair": 1, "eyes": 1, "mouth": 1}, informaticrating => 0, isbanned => false, params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => { addAccess => , regionName => null, addDress => , cityName => null, schoolName => null, friendList => [], addWeapon => , addHeader =>  }, attrs => { level => 1, _lastTime.24hr => 1477647688, lastLoginDate => 302, lastLoadDate => 1029, hints => 15 }, effects => { list => [] } }, name => nelli, skinaddavaliable => {"head : null; dress : null; weapon : null; acess : null"}, deleted => false, historyrating => 0, school => 1, rang => 0, georating => 0, password => test, language => en, region => 1, skinadditional => {"head": 0, "dress": 0, "acces": 0, "weapon": 0}, rangname => новичок                       , rusrating => 0, email => null, mathrating => 0, regdate => 2016-10-28 09:34:33.889102+00, expirience => 0, city => 1, physrating => 0}, version => 0, id => 92 } }
28.10 09:42:02 ->>-: core/cache.get { type => questdata, v => -1, id => 92, _type => core/cache.get }
28.10 09:42:02 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 92 } }
28.10 09:42:02 NET: Client login (conid:49915474, id:92, name:nelli)
28.10 09:42:02 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 92, _type => core/user.loginPost, ipAddr => 217.118.93.167 }
28.10 09:42:02 -<<-: core/user.loginPost { _type => core/user.loginPost }
28.10 09:42:02 DB: SELECT token FROM tokens WHERE userid = 92
28.10 09:42:02 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 92, _type => core/server.query }
28.10 09:42:02 -<<-: core/server.query { list => {{ token => 5d0536a0271e3219f0ce7d268ab87768 }}, errorCode => ok, _type => core/server.query }
28.10 09:42:02 == NET: nelli ret: user.login { name => nelli, type => user.login, errorCode => ok, id => 92, token => 5d0536a0271e3219f0ce7d268ab87768 }
28.10 09:42:02 == NET: nelli ret: user.join { name => nelli, type => user.join }
28.10 09:42:03 ++ NET: nelli req: user.data { messageType => user.data }
28.10 09:42:03 ->>-: vdl/cache.user.getData { userId => 92, _type => vdl/cache.user.getData }
28.10 09:42:03 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData }
28.10 09:42:03 TIME: user.data 0.3 ms
28.10 09:42:03 == NET: nelli ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
28.10 09:42:09 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 92, _type => core/cache.update }
28.10 09:42:09 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 09:42:19 TIMER: Check auto-disconnect...
28.10 09:42:19 STATS: vdl.0 cache, locks:2
28.10 09:42:19 ++ NET: nelli req: user.ping { messageType => user.ping, msg => ok }
28.10 09:42:19 TIME: user.ping 0.17 ms
28.10 09:42:19 == NET: nelli ret: user.ping { type => user.ping, errorCode => ok }
28.10 09:42:39 ++ NET: nelli req: user.ping { messageType => user.ping, msg => ok }
28.10 09:42:39 TIME: user.ping 0.15 ms
28.10 09:42:39 == NET: nelli ret: user.ping { type => user.ping, errorCode => ok }
28.10 09:42:59 ++ NET: nelli req: user.ping { messageType => user.ping, msg => ok }
28.10 09:42:59 TIME: user.ping 0.12 ms
28.10 09:42:59 == NET: nelli ret: user.ping { type => user.ping, errorCode => ok }
28.10 09:43:19 TIMER: Check auto-disconnect...
28.10 09:43:19 STATS: vdl.0 cache, locks:2
28.10 09:43:20 ++ NET: nelli req: user.ping { messageType => user.ping, msg => ok }
28.10 09:43:20 == NET: nelli ret: user.ping { type => user.ping, errorCode => ok }
28.10 09:43:20 TIME: user.ping 0.19 ms
28.10 09:43:40 ++ NET: nelli req: user.ping { messageType => user.ping, msg => ok }
28.10 09:43:40 TIME: user.ping 0.17 ms
28.10 09:43:40 == NET: nelli ret: user.ping { type => user.ping, errorCode => ok }
28.10 09:43:56 NET: Client (name:nelli conid:49915474 TCP) disconnected from vdl.0 (clients:0)
28.10 09:43:56 DB: SELECT id FROM battle WHERE firstid=92 OR secondid=92 AND finished <> true
28.10 09:43:56 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=92 OR secondid=92 AND finished <> true, _type => core/server.query }
28.10 09:43:56 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
28.10 09:43:56 STATS: vdl.0 cache connection, 74 calls, total 0.0656435489654541 sec spent, avg 0.89 ms
28.10 09:43:56 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 09:43:56 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
28.10 09:43:56 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 09:43:56 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 265
Called from modules/VDLBattleModule.hx line 278
Called from snipe/slave/Server.hx line 1009
28.10 09:43:56 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 92, _type => core/cache.update }
28.10 09:43:56 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
28.10 09:43:56 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 92, _type => core/cache.update }
28.10 09:43:56 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 09:43:56 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 92, _type => core/user.logoutPost }
28.10 09:43:56 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
28.10 09:43:56 NET: Client (conid:71855745) connected to vdl.0 (clients:1)
28.10 09:44:00 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 09:44:00 TRACE: User not logon yet.
28.10 09:44:02 NET: Client (name:null conid:71855745 TCP) disconnected from vdl.0 (clients:0)
28.10 09:44:02 NET: Client (conid:22633025) connected to vdl.0 (clients:1)
28.10 09:44:03 ++ NET: null req: user.login { password => test, name => nelli, messageType => user.login }
28.10 09:44:03 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'nelli' AND Password = 'test'
28.10 09:44:03 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'nelli' AND Password = 'test', _type => core/server.query }
28.10 09:44:03 -<<-: core/server.query { list => {{ name => nelli, networkid => , isbanned => false, id => 92 }}, errorCode => ok, _type => core/server.query }
28.10 09:44:03 ->>-: core/user.isOnlineID { id => 92, _type => core/user.isOnlineID }
28.10 09:44:03 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
28.10 09:44:03 ->>-: core/cache.get { type => user, v => -1, id => 92, _type => core/cache.get }
28.10 09:44:03 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {chemrating => 0, biorating => 0, networktype =>   , level => 0, sex => male, networkid => , skinbase => {"body_skin": 1, "head_skin": 1, "hair": 1, "eyes": 1, "mouth": 1}, informaticrating => 0, isbanned => false, params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => { addAccess => , regionName => null, addDress => , cityName => null, schoolName => null, friendList => [], addWeapon => , addHeader =>  }, attrs => { level => 1, _lastTime.24hr => 1477647688, lastLoginDate => 302, lastLoadDate => 1029, hints => 15 }, effects => { list => [] } }, name => nelli, skinaddavaliable => {"head : null; dress : null; weapon : null; acess : null"}, deleted => false, historyrating => 0, school => 1, rang => 0, georating => 0, password => test, language => en, region => 1, skinadditional => {"head": 0, "dress": 0, "acces": 0, "weapon": 0}, rangname => новичок                       , rusrating => 0, email => null, mathrating => 0, regdate => 2016-10-28 09:34:33.889102+00, expirience => 0, city => 1, physrating => 0}, version => 2, id => 92 } }
28.10 09:44:03 ->>-: core/cache.get { type => questdata, v => -1, id => 92, _type => core/cache.get }
28.10 09:44:03 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 92 } }
28.10 09:44:03 NET: Client login (conid:22633025, id:92, name:nelli)
28.10 09:44:03 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 92, _type => core/user.loginPost, ipAddr => 217.118.93.167 }
28.10 09:44:03 -<<-: core/user.loginPost { _type => core/user.loginPost }
28.10 09:44:03 DB: SELECT token FROM tokens WHERE userid = 92
28.10 09:44:03 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 92, _type => core/server.query }
28.10 09:44:03 -<<-: core/server.query { list => {{ token => 5d0536a0271e3219f0ce7d268ab87768 }}, errorCode => ok, _type => core/server.query }
28.10 09:44:03 == NET: nelli ret: user.login { name => nelli, type => user.login, errorCode => ok, id => 92, token => 5d0536a0271e3219f0ce7d268ab87768 }
28.10 09:44:03 == NET: nelli ret: user.join { name => nelli, type => user.join }
28.10 09:44:03 ++ NET: nelli req: user.data { messageType => user.data }
28.10 09:44:03 ->>-: vdl/cache.user.getData { userId => 92, _type => vdl/cache.user.getData }
28.10 09:44:03 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData }
28.10 09:44:03 TIME: user.data 0.33 ms
28.10 09:44:03 == NET: nelli ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
28.10 09:44:09 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 92, _type => core/cache.update }
28.10 09:44:09 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
28.10 09:44:19 TIMER: Check auto-disconnect...
28.10 09:44:19 STATS: vdl.0 cache, locks:2
28.10 09:44:20 ++ NET: nelli req: user.ping { messageType => user.ping, msg => ok }
28.10 09:44:20 TIME: user.ping 0.17 ms
28.10 09:44:20 == NET: nelli ret: user.ping { type => user.ping, errorCode => ok }
28.10 09:44:40 ++ NET: nelli req: user.ping { messageType => user.ping, msg => ok }
28.10 09:44:40 TIME: user.ping 0.15 ms
28.10 09:44:40 == NET: nelli ret: user.ping { type => user.ping, errorCode => ok }
28.10 09:45:00 ++ NET: nelli req: user.ping { messageType => user.ping, msg => ok }
28.10 09:45:00 TIME: user.ping 0.24 ms
28.10 09:45:00 == NET: nelli ret: user.ping { type => user.ping, errorCode => ok }
28.10 09:45:19 TIMER: Check auto-disconnect...
28.10 09:45:19 STATS: vdl.0 cache, locks:2
28.10 09:45:19 TIMER: Check auto-disconnect...
28.10 09:45:19 STATS: vdl.0 cache, locks:2
28.10 09:45:19 TIMER: Check auto-disconnect...
28.10 09:45:19 STATS: vdl.0 cache, locks:2
28.10 09:47:27 NET: Client (name:nelli conid:22633025 TCP) disconnected from vdl.0 (clients:0)
28.10 09:47:27 DB: SELECT id FROM battle WHERE firstid=92 OR secondid=92 AND finished <> true
28.10 09:47:27 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=92 OR secondid=92 AND finished <> true, _type => core/server.query }
28.10 09:47:27 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
28.10 09:47:27 STATS: vdl.0 cache connection, 87 calls, total 0.0762417316436768 sec spent, avg 0.88 ms
28.10 09:47:27 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 09:47:27 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
28.10 09:47:27 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 09:47:27 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 265
Called from modules/VDLBattleModule.hx line 278
Called from snipe/slave/Server.hx line 1009
28.10 09:47:27 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 92, _type => core/cache.update }
28.10 09:47:27 -<<-: core/cache.update { errorCode => ok, version => 4, _type => core/cache.update }
28.10 09:47:27 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 92, _type => core/cache.update }
28.10 09:47:27 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
28.10 09:47:27 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 92, _type => core/user.logoutPost }
28.10 09:47:27 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
28.10 09:48:19 STATS: vdl.0 cache, locks:0
28.10 09:48:19 TIMER: Check auto-disconnect...
