28.10 13:21:07 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
28.10 13:21:07 -<<-: server.login ok
28.10 13:21:07 DB: SELECT * FROM LocalizationStrings
28.10 13:21:07 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:21:07 TIMER: Starting timer...
28.10 13:21:07 TIMER: Timer running...
28.10 13:21:07 DB: SELECT * FROM GameVars
28.10 13:21:07 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:21:07 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
28.10 13:21:07 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:21:07 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
28.10 13:21:07 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:21:07 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
28.10 13:21:07 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:21:07 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
28.10 13:21:07 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:21:07 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
28.10 13:21:07 -<<-: core/quest.getDaily ok
28.10 13:21:07 DB: SELECT * FROM UserAttributeTypes
28.10 13:21:07 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:21:07 DB: SELECT * FROM UserVariableTypes
28.10 13:21:07 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:21:07 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
28.10 13:21:07 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:21:07 DB: SELECT * FROM ItemGroups
28.10 13:21:07 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:21:07 DB: SELECT * FROM Bundles ORDER BY ID
28.10 13:21:07 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:21:07 DB: SELECT * FROM BundleItems ORDER BY ID
28.10 13:21:07 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:21:07 SHOP: loading items...
28.10 13:21:07 ->>-: core/shop.getList { _type => core/shop.getList }
28.10 13:21:07 -<<-: core/shop.getList ok
28.10 13:21:07 SHOP: 0 items loaded (0 sec)
28.10 13:21:07 DB: SELECT * FROM EffectAttributeTypes
28.10 13:21:07 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:21:07 DB: SELECT * FROM Effects
28.10 13:21:07 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:21:07 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 13:21:07 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:21:07 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 13:21:07 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:21:07 DB: SELECT * FROM Badges
28.10 13:21:07 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
28.10 13:21:07 -<<-: core/server.query ok
28.10 13:22:06 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
28.10 13:22:06 -<<-: server.login ok
28.10 13:22:06 DB: SELECT * FROM LocalizationStrings
28.10 13:22:06 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:06 TIMER: Starting timer...
28.10 13:22:06 DB: SELECT * FROM GameVars
28.10 13:22:06 TIMER: Timer running...
28.10 13:22:06 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:06 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
28.10 13:22:06 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:06 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
28.10 13:22:06 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:06 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
28.10 13:22:06 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:06 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
28.10 13:22:06 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:06 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
28.10 13:22:06 -<<-: core/quest.getDaily ok
28.10 13:22:06 DB: SELECT * FROM UserAttributeTypes
28.10 13:22:06 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:06 DB: SELECT * FROM UserVariableTypes
28.10 13:22:06 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:06 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
28.10 13:22:06 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:06 DB: SELECT * FROM ItemGroups
28.10 13:22:06 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:06 DB: SELECT * FROM Bundles ORDER BY ID
28.10 13:22:06 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:06 DB: SELECT * FROM BundleItems ORDER BY ID
28.10 13:22:06 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:06 SHOP: loading items...
28.10 13:22:06 ->>-: core/shop.getList { _type => core/shop.getList }
28.10 13:22:06 -<<-: core/shop.getList ok
28.10 13:22:06 SHOP: 0 items loaded (0 sec)
28.10 13:22:06 DB: SELECT * FROM EffectAttributeTypes
28.10 13:22:06 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:06 DB: SELECT * FROM Effects
28.10 13:22:06 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:06 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 13:22:06 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:06 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 13:22:06 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:06 DB: SELECT * FROM Badges
28.10 13:22:06 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
28.10 13:22:06 -<<-: core/server.query ok
28.10 13:22:50 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
28.10 13:22:50 -<<-: server.login ok
28.10 13:22:50 DB: SELECT * FROM LocalizationStrings
28.10 13:22:50 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
28.10 13:22:50 -<<-: core/server.query ok
28.10 13:22:50 TIMER: Starting timer...
28.10 13:22:50 TIMER: Timer running...
28.10 13:22:50 DB: SELECT * FROM GameVars
28.10 13:22:50 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
28.10 13:22:50 -<<-: core/server.query ok
28.10 13:22:50 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
28.10 13:22:50 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
28.10 13:22:50 -<<-: core/server.query ok
28.10 13:22:50 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
28.10 13:22:50 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
28.10 13:22:50 -<<-: core/server.query ok
28.10 13:22:50 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
28.10 13:22:50 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
28.10 13:22:50 -<<-: core/server.query ok
28.10 13:22:50 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
28.10 13:22:50 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
28.10 13:22:50 -<<-: core/server.query ok
28.10 13:22:50 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
28.10 13:22:50 -<<-: core/quest.getDaily ok
28.10 13:22:50 DB: SELECT * FROM UserAttributeTypes
28.10 13:22:50 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
28.10 13:22:50 -<<-: core/server.query ok
28.10 13:22:50 DB: SELECT * FROM UserVariableTypes
28.10 13:22:50 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
28.10 13:22:50 -<<-: core/server.query ok
28.10 13:22:50 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
28.10 13:22:50 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
28.10 13:22:50 -<<-: core/server.query ok
28.10 13:22:50 DB: SELECT * FROM ItemGroups
28.10 13:22:50 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
28.10 13:22:50 -<<-: core/server.query ok
28.10 13:22:50 DB: SELECT * FROM Bundles ORDER BY ID
28.10 13:22:50 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
28.10 13:22:50 -<<-: core/server.query ok
28.10 13:22:50 DB: SELECT * FROM BundleItems ORDER BY ID
28.10 13:22:50 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
28.10 13:22:50 -<<-: core/server.query ok
28.10 13:22:50 SHOP: loading items...
28.10 13:22:50 ->>-: core/shop.getList { _type => core/shop.getList }
28.10 13:22:50 -<<-: core/shop.getList ok
28.10 13:22:50 SHOP: 0 items loaded (0 sec)
28.10 13:22:50 DB: SELECT * FROM EffectAttributeTypes
28.10 13:22:50 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
28.10 13:22:50 -<<-: core/server.query ok
28.10 13:22:50 DB: SELECT * FROM Effects
28.10 13:22:50 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
28.10 13:22:50 -<<-: core/server.query ok
28.10 13:22:50 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(28.10 13:26:15 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
28.10 13:26:15 -<<-: server.login ok
28.10 13:26:15 DB: SELECT * FROM LocalizationStrings
28.10 13:26:15 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:15 TIMER: Starting timer...
28.10 13:26:15 TIMER: Timer running...
28.10 13:26:15 DB: SELECT * FROM GameVars
28.10 13:26:15 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:15 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
28.10 13:26:15 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:15 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
28.10 13:26:15 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:15 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
28.10 13:26:15 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:15 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
28.10 13:26:15 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:15 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
28.10 13:26:15 -<<-: core/quest.getDaily ok
28.10 13:26:15 DB: SELECT * FROM UserAttributeTypes
28.10 13:26:15 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:15 DB: SELECT * FROM UserVariableTypes
28.10 13:26:15 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:15 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
28.10 13:26:15 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:15 DB: SELECT * FROM ItemGroups
28.10 13:26:15 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:15 DB: SELECT * FROM Bundles ORDER BY ID
28.10 13:26:15 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:15 DB: SELECT * FROM BundleItems ORDER BY ID
28.10 13:26:15 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:15 SHOP: loading items...
28.10 13:26:15 ->>-: core/shop.getList { _type => core/shop.getList }
28.10 13:26:15 -<<-: core/shop.getList ok
28.10 13:26:15 SHOP: 0 items loaded (0 sec)
28.10 13:26:15 DB: SELECT * FROM EffectAttributeTypes
28.10 13:26:15 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:15 DB: SELECT * FROM Effects
28.10 13:26:15 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:15 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 13:26:15 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:15 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 13:26:15 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:15 DB: SELECT * FROM Badges
28.10 13:26:15 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
28.10 13:26:15 -<<-: core/server.query ok
28.10 13:26:22 NET: Client (conid:31821955) connected to vdl.0 (clients:1)
28.10 13:26:23 ++ NET: null req: user.ping { password => test, name => nelli, messageType => user.ping }
28.10 13:26:23 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
28.10 13:26:23 TIME: user.ping 0.29 ms
28.10 13:26:30 NET: Client (name:null conid:31821955 TCP) disconnected from vdl.0 (clients:0)
28.10 13:41:27 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
28.10 13:41:27 -<<-: server.login ok
28.10 13:41:27 DB: SELECT * FROM LocalizationStrings
28.10 13:41:27 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 TIMER: Starting timer...
28.10 13:41:27 TIMER: Timer running...
28.10 13:41:27 DB: SELECT * FROM GameVars
28.10 13:41:27 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
28.10 13:41:27 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
28.10 13:41:27 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
28.10 13:41:27 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
28.10 13:41:27 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
28.10 13:41:27 -<<-: core/quest.getDaily ok
28.10 13:41:27 DB: SELECT * FROM UserAttributeTypes
28.10 13:41:27 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 DB: SELECT * FROM UserVariableTypes
28.10 13:41:27 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
28.10 13:41:27 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 DB: SELECT * FROM ItemGroups
28.10 13:41:27 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 DB: SELECT * FROM Bundles ORDER BY ID
28.10 13:41:27 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 DB: SELECT * FROM BundleItems ORDER BY ID
28.10 13:41:27 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 SHOP: loading items...
28.10 13:41:27 ->>-: core/shop.getList { _type => core/shop.getList }
28.10 13:41:27 -<<-: core/shop.getList ok
28.10 13:41:27 SHOP: 0 items loaded (0 sec)
28.10 13:41:27 DB: SELECT * FROM EffectAttributeTypes
28.10 13:41:27 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 DB: SELECT * FROM Effects
28.10 13:41:27 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 13:41:27 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 13:41:27 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 DB: SELECT * FROM Badges
28.10 13:41:27 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
28.10 13:41:27 -<<-: core/server.query ok
28.10 13:41:27 TIMER: Check auto-disconnect...
28.10 13:41:27 STATS: vdl.0 cache, locks:0
28.10 13:41:27 TIMER: Check auto-disconnect...
28.10 13:41:27 STATS: vdl.0 cache, locks:0
28.10 13:41:27 TIMER: Check auto-disconnect...
28.10 13:41:27 STATS: vdl.0 cache, locks:0
28.10 13:44:28 NET: Client (conid:15655721) connected to vdl.0 (clients:1)
28.10 13:44:29 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTc= }
28.10 13:44:29 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid97' AND Password = E'uid97'
28.10 13:44:29 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid97' AND Password = E'uid97', _type => core/server.query }
28.10 13:44:29 -<<-: core/server.query ok
28.10 13:44:29 STATS: vdl.0 cache connection, 21 calls, total 0.063277006149292 sec spent, avg 3.01 ms
28.10 13:44:29 ->>-: core/user.isOnlineID { id => 97, _type => core/user.isOnlineID }
28.10 13:44:29 -<<-: core/user.isOnlineID ok
28.10 13:44:29 ->>-: core/cache.get { type => user, v => -1, id => 97, _type => core/cache.get }
28.10 13:44:29 -<<-: core/cache.get ok
28.10 13:44:29 ->>-: core/cache.get { type => questdata, v => -1, id => 97, _type => core/cache.get }
28.10 13:44:29 -<<-: core/cache.get ok
28.10 13:44:29 NET: Client login (conid:15655721, id:97, name:uid97)
28.10 13:44:29 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 97, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
28.10 13:44:29 -<<-: core/user.loginPost null
28.10 13:44:29 == NET: uid97 ret: user.login { name => uid97, type => user.login, errorCode => ok, id => 97 }
28.10 13:44:29 == NET: uid97 ret: user.join { name => uid97, type => user.join }
28.10 13:44:33 ++ NET: uid97 req: user.ping { messageType => user.ping, msg => ok }
28.10 13:44:33 TIME: user.ping 0.2 ms
28.10 13:44:33 == NET: uid97 ret: user.check { type => user.check, errorCode => ok }
28.10 13:44:33 == NET: uid97 ret: user.ping { type => user.ping, errorCode => ok }
28.10 13:44:37 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 97, _type => core/cache.update }
28.10 13:44:37 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 13:45:27 TIMER: Check auto-disconnect...
28.10 13:45:27 STATS: vdl.0 cache, locks:2
28.10 13:45:27 TIMER: Check auto-disconnect...
28.10 13:45:27 STATS: vdl.0 cache, locks:2
28.10 13:45:27 TIMER: Check auto-disconnect...
28.10 13:45:27 STATS: vdl.0 cache, locks:2
28.10 13:45:27 TIMER: Check auto-disconnect...
28.10 13:45:27 NET: Client (name:uid97 conid:15655721 TCP) disconnected from vdl.0 (clients:0)
28.10 13:45:27 DB: SELECT id FROM battle WHERE firstid=97 OR secondid=97 AND finished <> true
28.10 13:45:27 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=97 OR secondid=97 AND finished <> true, _type => core/server.query }
28.10 13:45:27 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
28.10 13:45:27 STATS: vdl.0 cache connection, 27 calls, total 0.073983907699585 sec spent, avg 2.74 ms
28.10 13:45:27 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 13:45:27 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
28.10 13:45:27 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 13:45:27 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 266
Called from modules/VDLBattleModule.hx line 279
Called from snipe/slave/Server.hx line 994
28.10 13:45:27 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 97, _type => core/cache.update }
28.10 13:45:27 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
28.10 13:45:27 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 97, _type => core/cache.update }
28.10 13:45:27 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 13:45:27 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 97, _type => core/user.logoutPost }
28.10 13:45:27 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
28.10 13:45:27 STATS: vdl.0 cache, locks:0
28.10 13:45:27 TIMER: Check auto-disconnect...
28.10 13:45:27 STATS: vdl.0 cache, locks:0
28.10 13:45:27 TIMER: Check auto-disconnect...
28.10 13:45:27 STATS: vdl.0 cache, locks:0
28.10 13:45:27 TIMER: Check auto-disconnect...
28.10 13:45:27 STATS: vdl.0 cache, locks:0
28.10 13:45:27 TIMER: Check auto-disconnect...
28.10 13:45:27 STATS: vdl.0 cache, locks:0
28.10 13:45:27 TIMER: Check auto-disconnect...
28.10 13:45:27 STATS: vdl.0 cache, locks:0
28.10 13:54:04 NET: Client (conid:13635704) connected to vdl.0 (clients:1)
28.10 13:54:05 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTc= }
28.10 13:54:05 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid97' AND Password = E'uid97'
28.10 13:54:05 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid97' AND Password = E'uid97', _type => core/server.query }
28.10 13:54:05 -<<-: core/server.query { list => {{ name => uid97, networkid => , isbanned => false, id => 97 }}, errorCode => ok, _type => core/server.query }
28.10 13:54:05 STATS: vdl.0 cache connection, 32 calls, total 0.0842063426971436 sec spent, avg 2.63 ms
28.10 13:54:05 ->>-: core/user.isOnlineID { id => 97, _type => core/user.isOnlineID }
28.10 13:54:05 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
28.10 13:54:05 ->>-: core/cache.get { type => user, v => -1, id => 97, _type => core/cache.get }
28.10 13:54:05 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid97, deleted => false, email => , networktype =>   , password => uid97, isbanned => false, regdate => 2016-10-28 12:35:05.771011+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477647307, lastLoginDate => 302, lastLoadDate => 1029 }, effects => { list => [] } }}, version => 0, id => 97 } }
28.10 13:54:05 ->>-: core/cache.get { type => questdata, v => -1, id => 97, _type => core/cache.get }
28.10 13:54:05 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 97 } }
28.10 13:54:05 NET: Client login (conid:13635704, id:97, name:uid97)
28.10 13:54:05 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 97, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
28.10 13:54:05 -<<-: core/user.loginPost { _type => core/user.loginPost }
28.10 13:54:05 == NET: uid97 ret: user.login { name => uid97, type => user.login, errorCode => ok, id => 97 }
28.10 13:54:05 == NET: uid97 ret: user.join { name => uid97, type => user.join }
28.10 13:54:09 ++ NET: uid97 req: user.ping { messageType => user.ping, msg => ok }
28.10 13:54:09 TIME: user.ping 0.18 ms
28.10 13:54:09 == NET: uid97 ret: user.check { type => user.check, errorCode => ok }
28.10 13:54:09 == NET: uid97 ret: user.ping { type => user.ping, errorCode => ok }
28.10 13:54:12 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 97, _type => core/cache.update }
28.10 13:54:12 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 13:54:27 TIMER: Check auto-disconnect...
28.10 13:54:27 STATS: vdl.0 cache, locks:2
28.10 13:54:27 TIMER: Check auto-disconnect...
28.10 13:54:27 STATS: vdl.0 cache, locks:2
28.10 13:54:27 TIMER: Check auto-disconnect...
28.10 13:54:27 STATS: vdl.0 cache, locks:2
28.10 13:54:27 TIMER: Check auto-disconnect...
28.10 13:54:27 NET: Client (name:uid97 conid:13635704 TCP) disconnected from vdl.0 (clients:0)
28.10 13:54:27 DB: SELECT id FROM battle WHERE firstid=97 OR secondid=97 AND finished <> true
28.10 13:54:27 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=97 OR secondid=97 AND finished <> true, _type => core/server.query }
28.10 13:54:27 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
28.10 13:54:27 STATS: vdl.0 cache connection, 38 calls, total 0.0920217037200928 sec spent, avg 2.42 ms
28.10 13:54:27 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 13:54:27 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
28.10 13:54:27 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 13:54:27 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 266
Called from modules/VDLBattleModule.hx line 279
Called from snipe/slave/Server.hx line 994
28.10 13:54:27 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 97, _type => core/cache.update }
28.10 13:54:27 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
28.10 13:54:27 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 97, _type => core/cache.update }
28.10 13:54:27 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 13:54:27 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 97, _type => core/user.logoutPost }
28.10 13:54:27 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
28.10 13:54:27 STATS: vdl.0 cache, locks:0
28.10 13:54:27 TIMER: Check auto-disconnect...
28.10 13:54:27 STATS: vdl.0 cache, locks:0
28.10 13:59:10 NET: Client (conid:62227907) connected to vdl.0 (clients:1)
28.10 13:59:12 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 13:59:12 == NET: null ret: user.check { type => user.check, errorCode => notLogin }
28.10 13:59:12 TIME: user.ping 0.14 ms
28.10 13:59:12 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
28.10 13:59:20 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 13:59:20 == NET: null ret: user.check { type => user.check, errorCode => notLogin }
28.10 13:59:20 TIME: user.ping 0.13 ms
28.10 13:59:20 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
28.10 13:59:27 TIMER: Check auto-disconnect...
28.10 13:59:27 STATS: vdl.0 cache, locks:0
28.10 13:59:28 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 13:59:28 TIME: user.ping 0.14 ms
28.10 13:59:28 == NET: null ret: user.check { type => user.check, errorCode => notLogin }
28.10 13:59:28 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
28.10 13:59:37 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 13:59:37 == NET: null ret: user.check { type => user.check, errorCode => notLogin }
28.10 13:59:37 TIME: user.ping 0.14 ms
28.10 13:59:37 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
28.10 13:59:45 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 13:59:45 == NET: null ret: user.check { type => user.check, errorCode => notLogin }
28.10 13:59:45 TIME: user.ping 0.13 ms
28.10 13:59:45 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
28.10 13:59:53 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 13:59:53 == NET: null ret: user.check { type => user.check, errorCode => notLogin }
28.10 13:59:53 TIME: user.ping 0.13 ms
28.10 13:59:53 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
