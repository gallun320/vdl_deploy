16.11 13:47:36 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
16.11 13:47:36 -<<-: server.login ok
16.11 13:47:36 DB: SELECT * FROM LocalizationStrings
16.11 13:47:36 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 TIMER: Starting timer...
16.11 13:47:36 TIMER: Timer running...
16.11 13:47:36 DB: SELECT * FROM GameVars
16.11 13:47:36 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
16.11 13:47:36 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
16.11 13:47:36 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
16.11 13:47:36 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
16.11 13:47:36 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
16.11 13:47:36 -<<-: core/quest.getDaily ok
16.11 13:47:36 DB: SELECT * FROM UserAttributeTypes
16.11 13:47:36 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 DB: SELECT * FROM UserVariableTypes
16.11 13:47:36 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
16.11 13:47:36 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 DB: SELECT * FROM ItemGroups
16.11 13:47:36 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 DB: SELECT * FROM Bundles ORDER BY ID
16.11 13:47:36 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 DB: SELECT * FROM BundleItems ORDER BY ID
16.11 13:47:36 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 SHOP: loading items...
16.11 13:47:36 ->>-: core/shop.getList { _type => core/shop.getList }
16.11 13:47:36 -<<-: core/shop.getList ok
16.11 13:47:36 SHOP: 0 items loaded (0.001 sec)
16.11 13:47:36 DB: SELECT * FROM EffectAttributeTypes
16.11 13:47:36 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 DB: SELECT * FROM Effects
16.11 13:47:36 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
16.11 13:47:36 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
16.11 13:47:36 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 DB: SELECT * FROM Badges
16.11 13:47:36 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
16.11 13:47:36 -<<-: core/server.query ok
16.11 13:47:36 TIMER: Check auto-disconnect...
16.11 13:48:37 STATS: vdl.0 cache, locks:0
16.11 13:48:42 NET: Client (conid:28297220) connected to vdl.0 (clients:1)
16.11 13:48:43 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTI= }
16.11 13:48:43 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid12' AND Password = E'uid12'
16.11 13:48:43 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid12' AND Password = E'uid12', _type => core/server.query }
16.11 13:48:43 -<<-: core/server.query ok
16.11 13:48:43 STATS: vdl.0 cache connection, 21 calls, total 0.455514192581177 sec spent, avg 21.69 ms
16.11 13:48:43 ->>-: core/user.isOnlineID { id => 12, _type => core/user.isOnlineID }
16.11 13:48:43 -<<-: core/user.isOnlineID ok
16.11 13:48:43 ->>-: core/cache.get { type => user, v => -1, id => 12, _type => core/cache.get }
16.11 13:48:43 -<<-: core/cache.get ok
16.11 13:48:43 ->>-: core/cache.get { type => questdata, v => -1, id => 12, _type => core/cache.get }
16.11 13:48:43 -<<-: core/cache.get ok
16.11 13:48:43 NET: Client login (conid:28297220, id:12, name:uid12)
16.11 13:48:43 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 12, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
16.11 13:48:43 -<<-: core/user.loginPost null
16.11 13:48:43 DB: SELECT ID FROM TempUserLogins WHERE UserID = 12 AND Date = 'today'::timestamp
16.11 13:48:43 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 12 AND Date = 'today'::timestamp, _type => core/server.query }
16.11 13:48:43 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
16.11 13:48:43 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (12, 'today'::timestamp)
16.11 13:48:43 == NET: uid12 ret: user.login { name => uid12, type => user.login, errorCode => ok, id => 12 }
16.11 13:48:43 == NET: uid12 ret: user.join { name => uid12, type => user.join }
16.11 13:48:43 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (12, 'today'::timestamp), _type => core/server.pending }} }
16.11 13:48:43 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
16.11 13:48:47 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:48:47 TIME: user.ping 0.13 ms
16.11 13:48:47 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:48:52 ->>-: core/cache.update { diff => {language => en, params => { attrs => { lastLoginDate => 321, lastLoadDate => 1117 } }}, type => user, unlock => false, id => 12, _type => core/cache.update }
16.11 13:48:52 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
16.11 13:49:21 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:49:21 TIME: user.ping 0.23 ms
16.11 13:49:21 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:49:36 TIMER: Check auto-disconnect...
16.11 13:49:37 STATS: vdl.0 cache, locks:2
16.11 13:49:43 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:49:43 TIME: user.ping 0.18 ms
16.11 13:49:43 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:50:04 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:50:04 TIME: user.ping 0.21 ms
16.11 13:50:04 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:50:26 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:50:26 TIME: user.ping 0.12 ms
16.11 13:50:26 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:50:32 NET: Client (name:uid12 conid:28297220 TCP) disconnected from vdl.0 (clients:0)
16.11 13:50:32 DB: SELECT id FROM battle WHERE firstid=12 OR secondid=12 AND finished <> true
16.11 13:50:32 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=12 OR secondid=12 AND finished <> true, _type => core/server.query }
16.11 13:50:32 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
16.11 13:50:32 STATS: vdl.0 cache connection, 29 calls, total 0.819192409515381 sec spent, avg 28.25 ms
16.11 13:50:32 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
16.11 13:50:32 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
16.11 13:50:32 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
16.11 13:50:32 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 492
Called from modules/VDLBattleModule.hx line 505
Called from snipe/slave/Server.hx line 994
16.11 13:50:32 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 12, _type => core/cache.update }
16.11 13:50:32 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
16.11 13:50:32 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 12, _type => core/cache.update }
16.11 13:50:32 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
16.11 13:50:32 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 12, _type => core/user.logoutPost }
16.11 13:50:32 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
16.11 13:50:36 TIMER: Check auto-disconnect...
16.11 13:50:37 STATS: vdl.0 cache, locks:0
16.11 13:51:04 NET: Client (conid:70357077) connected to vdl.0 (clients:1)
16.11 13:51:04 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTI= }
16.11 13:51:04 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid12' AND Password = E'uid12'
16.11 13:51:04 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid12' AND Password = E'uid12', _type => core/server.query }
16.11 13:51:04 -<<-: core/server.query { list => {{ name => uid12, networkid => , isbanned => false, id => 12 }}, errorCode => ok, _type => core/server.query }
16.11 13:51:04 ->>-: core/user.isOnlineID { id => 12, _type => core/user.isOnlineID }
16.11 13:51:04 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
16.11 13:51:04 ->>-: core/cache.get { type => user, v => -1, id => 12, _type => core/cache.get }
16.11 13:51:04 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid12, deleted => false, email => , networktype =>   , password => uid12, isbanned => false, regdate => 2016-10-12 12:47:26.670465+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479221495, lastLoginDate => 321, lastLoadDate => 1117 }, effects => { list => [] } }}, version => 0, id => 12 } }
16.11 13:51:04 ->>-: core/cache.get { type => questdata, v => -1, id => 12, _type => core/cache.get }
16.11 13:51:04 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 12 } }
16.11 13:51:04 NET: Client login (conid:70357077, id:12, name:uid12)
16.11 13:51:04 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 12, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
16.11 13:51:04 -<<-: core/user.loginPost { _type => core/user.loginPost }
16.11 13:51:04 == NET: uid12 ret: user.login { name => uid12, type => user.login, errorCode => ok, id => 12 }
16.11 13:51:04 == NET: uid12 ret: user.join { name => uid12, type => user.join }
16.11 13:51:08 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:51:08 TIME: user.ping 0.18 ms
16.11 13:51:08 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:51:12 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 12, _type => core/cache.update }
16.11 13:51:12 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
16.11 13:51:24 ++ NET: uid12 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
16.11 13:51:24 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 12 }, _type => vdl/cache.battle.findRandom }
16.11 13:51:24 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
16.11 13:51:24 TIME: battle.find 0.65 ms
16.11 13:51:24 == NET: uid12 ret: battle.find { type => battle.find, errorCode => ok }
16.11 13:51:29 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:51:29 TIME: user.ping 0.15 ms
16.11 13:51:29 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:51:35 ++ NET: uid12 req: battle.end { type => closeGame, typeBattle => battle, tournamentId => 0, messageType => battle.end, battleId => 0 }
16.11 13:51:35 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
16.11 13:51:35 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
16.11 13:51:35 STATS: vdl.0 cache connection, 41 calls, total 0.829817533493042 sec spent, avg 20.24 ms
16.11 13:51:35 TRACE: battle.end : cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
16.11 13:51:35 TRACE: battle.end : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 492
Called from modules/VDLBattleModule.hx line 84
Called from modules/VDLBattleModule.hx line 50
Called from snipe/slave/Server.hx line 1176
16.11 13:51:36 TIMER: Check auto-disconnect...
16.11 13:51:37 STATS: vdl.0 cache, locks:2
16.11 13:51:47 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:51:47 TIME: user.ping 0.21 ms
16.11 13:51:47 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:51:47 NET: Client (name:uid12 conid:70357077 TCP) disconnected from vdl.0 (clients:0)
16.11 13:51:47 DB: SELECT id FROM battle WHERE firstid=12 OR secondid=12 AND finished <> true
16.11 13:51:47 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=12 OR secondid=12 AND finished <> true, _type => core/server.query }
16.11 13:51:47 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
16.11 13:51:47 NET: Client (conid:41327342) connected to vdl.0 (clients:1)
16.11 13:51:47 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
16.11 13:51:47 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
16.11 13:51:47 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
16.11 13:51:47 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 492
Called from modules/VDLBattleModule.hx line 505
Called from snipe/slave/Server.hx line 994
16.11 13:51:47 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 12, _type => core/cache.update }
16.11 13:51:47 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
16.11 13:51:47 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 12, _type => core/cache.update }
16.11 13:51:47 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
16.11 13:51:47 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 12, _type => core/user.logoutPost }
16.11 13:51:47 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
16.11 13:52:08 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
16.11 13:52:08 TRACE: User not logon yet.
16.11 13:52:08 NET: Client (name:null conid:41327342 TCP) disconnected from vdl.0 (clients:0)
16.11 13:52:08 NET: Client (conid:86857474) connected to vdl.0 (clients:1)
16.11 13:52:23 NET: Client (name:null conid:86857474 TCP) disconnected from vdl.0 (clients:0)
16.11 13:52:36 TIMER: Check auto-disconnect...
16.11 13:54:08 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
16.11 13:54:08 -<<-: server.login ok
16.11 13:54:08 DB: SELECT * FROM LocalizationStrings
16.11 13:54:08 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:08 TIMER: Starting timer...
16.11 13:54:08 TIMER: Timer running...
16.11 13:54:08 DB: SELECT * FROM GameVars
16.11 13:54:08 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:08 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
16.11 13:54:08 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:08 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
16.11 13:54:08 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:08 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
16.11 13:54:08 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:08 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
16.11 13:54:08 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:08 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
16.11 13:54:08 -<<-: core/quest.getDaily ok
16.11 13:54:08 DB: SELECT * FROM UserAttributeTypes
16.11 13:54:08 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:08 DB: SELECT * FROM UserVariableTypes
16.11 13:54:08 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:08 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
16.11 13:54:08 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:08 DB: SELECT * FROM ItemGroups
16.11 13:54:08 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:08 DB: SELECT * FROM Bundles ORDER BY ID
16.11 13:54:08 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:08 DB: SELECT * FROM BundleItems ORDER BY ID
16.11 13:54:08 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:08 SHOP: loading items...
16.11 13:54:08 ->>-: core/shop.getList { _type => core/shop.getList }
16.11 13:54:08 -<<-: core/shop.getList ok
16.11 13:54:08 SHOP: 0 items loaded (0 sec)
16.11 13:54:08 DB: SELECT * FROM EffectAttributeTypes
16.11 13:54:08 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:08 DB: SELECT * FROM Effects
16.11 13:54:08 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:08 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
16.11 13:54:08 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:08 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
16.11 13:54:08 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:08 DB: SELECT * FROM Badges
16.11 13:54:08 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
16.11 13:54:08 -<<-: core/server.query ok
16.11 13:54:16 NET: Client (conid:66952310) connected to vdl.0 (clients:1)
16.11 13:54:17 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTI= }
16.11 13:54:17 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid12' AND Password = E'uid12'
16.11 13:54:17 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid12' AND Password = E'uid12', _type => core/server.query }
16.11 13:54:17 -<<-: core/server.query ok
16.11 13:54:17 ->>-: core/user.isOnlineID { id => 12, _type => core/user.isOnlineID }
16.11 13:54:17 -<<-: core/user.isOnlineID ok
16.11 13:54:17 ->>-: core/cache.get { type => user, v => -1, id => 12, _type => core/cache.get }
16.11 13:54:17 -<<-: core/cache.get ok
16.11 13:54:17 ->>-: core/cache.get { type => questdata, v => -1, id => 12, _type => core/cache.get }
16.11 13:54:17 -<<-: core/cache.get ok
16.11 13:54:17 NET: Client login (conid:66952310, id:12, name:uid12)
16.11 13:54:17 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 12, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
16.11 13:54:17 -<<-: core/user.loginPost null
16.11 13:54:17 == NET: uid12 ret: user.login { name => uid12, type => user.login, errorCode => ok, id => 12 }
16.11 13:54:17 == NET: uid12 ret: user.join { name => uid12, type => user.join }
16.11 13:54:21 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:54:21 TIME: user.ping 0.16 ms
16.11 13:54:21 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:54:23 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 12, _type => core/cache.update }
16.11 13:54:23 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
16.11 13:54:25 ++ NET: uid12 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
16.11 13:54:25 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 12 }, _type => vdl/cache.battle.findRandom }
16.11 13:54:25 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
16.11 13:54:25 TIME: battle.find 0.69 ms
16.11 13:54:25 == NET: uid12 ret: battle.find { type => battle.find, errorCode => ok }
16.11 13:54:31 ++ NET: uid12 req: battle.end { type => closeGame, typeBattle => battle, tournamentId => 0, messageType => battle.end, battleId => 0 }
16.11 13:54:31 ->>-: vdl/cache.battle.closeFind { userId => 12, _type => vdl/cache.battle.closeFind }
16.11 13:54:31 -<<-: vdl/cache.battle.closeFind { errorCode => ok, _type => vdl/cache.battle.closeFind }
16.11 13:54:31 TIME: battle.end 0.32 ms
16.11 13:54:31 == NET: uid12 ret: battle.end { type => battle.end, errorCode => ok }
16.11 13:54:42 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:54:42 TIME: user.ping 0.21 ms
16.11 13:54:42 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:55:01 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:55:01 TIME: user.ping 0.22 ms
16.11 13:55:01 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:55:08 TIMER: Check auto-disconnect...
16.11 13:55:08 STATS: vdl.0 cache, locks:2
16.11 13:55:20 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:55:20 TIME: user.ping 0.17 ms
16.11 13:55:20 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:55:38 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:55:38 TIME: user.ping 0.21 ms
16.11 13:55:38 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:55:57 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:55:57 TIME: user.ping 0.21 ms
16.11 13:55:57 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:56:08 TIMER: Check auto-disconnect...
16.11 13:56:08 STATS: vdl.0 cache, locks:2
16.11 13:56:16 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:56:16 TIME: user.ping 0.22 ms
16.11 13:56:16 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:56:34 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:56:34 TIME: user.ping 0.2 ms
16.11 13:56:34 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:56:53 NET: Client (name:uid12 conid:66952310 TCP) disconnected from vdl.0 (clients:0)
16.11 13:56:53 DB: SELECT id FROM battle WHERE firstid=12 OR secondid=12 AND finished <> true
16.11 13:56:53 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=12 OR secondid=12 AND finished <> true, _type => core/server.query }
16.11 13:56:53 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
16.11 13:56:53 STATS: vdl.0 cache connection, 29 calls, total 0.0423645973205566 sec spent, avg 1.46 ms
16.11 13:56:53 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
16.11 13:56:53 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
16.11 13:56:53 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
16.11 13:56:53 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 497
Called from modules/VDLBattleModule.hx line 510
Called from snipe/slave/Server.hx line 994
16.11 13:56:53 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 12, _type => core/cache.update }
16.11 13:56:53 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
16.11 13:56:53 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 12, _type => core/cache.update }
16.11 13:56:53 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
16.11 13:56:53 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 12, _type => core/user.logoutPost }
16.11 13:56:53 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
16.11 13:56:56 NET: Client (conid:95876135) connected to vdl.0 (clients:1)
16.11 13:56:57 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTI= }
16.11 13:56:57 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid12' AND Password = E'uid12'
16.11 13:56:57 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid12' AND Password = E'uid12', _type => core/server.query }
16.11 13:56:57 -<<-: core/server.query { list => {{ name => uid12, networkid => , isbanned => false, id => 12 }}, errorCode => ok, _type => core/server.query }
16.11 13:56:57 ->>-: core/user.isOnlineID { id => 12, _type => core/user.isOnlineID }
16.11 13:56:57 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
16.11 13:56:57 ->>-: core/cache.get { type => user, v => -1, id => 12, _type => core/cache.get }
16.11 13:56:57 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid12, deleted => false, email => , networktype =>   , password => uid12, isbanned => false, regdate => 2016-10-12 12:47:26.670465+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479221495, lastLoginDate => 321, lastLoadDate => 1117 }, effects => { list => [] } }}, version => 2, id => 12 } }
16.11 13:56:57 ->>-: core/cache.get { type => questdata, v => -1, id => 12, _type => core/cache.get }
16.11 13:56:57 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 12 } }
16.11 13:56:57 NET: Client login (conid:95876135, id:12, name:uid12)
16.11 13:56:57 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 12, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
16.11 13:56:57 -<<-: core/user.loginPost { _type => core/user.loginPost }
16.11 13:56:57 == NET: uid12 ret: user.login { name => uid12, type => user.login, errorCode => ok, id => 12 }
16.11 13:56:57 == NET: uid12 ret: user.join { name => uid12, type => user.join }
16.11 13:57:01 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:57:01 TIME: user.ping 0.16 ms
16.11 13:57:01 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:57:03 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 12, _type => core/cache.update }
16.11 13:57:03 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
16.11 13:57:08 TIMER: Check auto-disconnect...
16.11 13:57:08 STATS: vdl.0 cache, locks:2
16.11 13:57:37 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:57:37 TIME: user.ping 0.16 ms
16.11 13:57:37 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:57:43 ++ NET: uid12 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
16.11 13:57:43 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 12 }, _type => vdl/cache.battle.findRandom }
16.11 13:57:43 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
16.11 13:57:43 TIME: battle.find 0.47 ms
16.11 13:57:43 == NET: uid12 ret: battle.find { type => battle.find, errorCode => ok }
16.11 13:57:46 ++ NET: uid12 req: battle.end { type => closeGame, typeBattle => battle, tournamentId => 0, messageType => battle.end, battleId => 0 }
16.11 13:57:46 ->>-: vdl/cache.battle.closeFind { userId => 12, _type => vdl/cache.battle.closeFind }
16.11 13:57:46 -<<-: vdl/cache.battle.closeFind { errorCode => ok, _type => vdl/cache.battle.closeFind }
16.11 13:57:46 TIME: battle.end 0.63 ms
16.11 13:57:46 == NET: uid12 ret: battle.end { type => battle.end, errorCode => ok }
16.11 13:57:58 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:57:58 TIME: user.ping 0.18 ms
16.11 13:57:58 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:58:08 TIMER: Check auto-disconnect...
16.11 13:58:08 STATS: vdl.0 cache, locks:2
16.11 13:58:20 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
16.11 13:58:20 TIME: user.ping 0.1 ms
16.11 13:58:20 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:2
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:2
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:2
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 NET: Client (name:uid12 conid:95876135 TCP) disconnected from vdl.0 (clients:0)
16.11 13:59:08 DB: SELECT id FROM battle WHERE firstid=12 OR secondid=12 AND finished <> true
16.11 13:59:08 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=12 OR secondid=12 AND finished <> true, _type => core/server.query }
16.11 13:59:08 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
16.11 13:59:08 STATS: vdl.0 cache connection, 42 calls, total 0.0540728569030762 sec spent, avg 1.29 ms
16.11 13:59:08 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
16.11 13:59:08 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
16.11 13:59:08 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
16.11 13:59:08 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 497
Called from modules/VDLBattleModule.hx line 510
Called from snipe/slave/Server.hx line 994
16.11 13:59:08 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 12, _type => core/cache.update }
16.11 13:59:08 -<<-: core/cache.update { errorCode => ok, version => 4, _type => core/cache.update }
16.11 13:59:08 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 12, _type => core/cache.update }
16.11 13:59:08 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
16.11 13:59:08 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 12, _type => core/user.logoutPost }
16.11 13:59:08 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
16.11 13:59:08 STATS: vdl.0 cache, locks:0
16.11 13:59:08 TIMER: Check auto-disconnect...
