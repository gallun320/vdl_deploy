19.11 21:00:12 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:00:12 TIME: user.ping 0.15 ms
19.11 21:00:12 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:00:27 TIMER: Check auto-disconnect...
19.11 21:00:27 STATS: vdl.0 cache, locks:6
19.11 21:00:28 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:00:28 TIME: user.ping 0.21 ms
19.11 21:00:28 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:00:45 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:00:45 TIME: user.ping 0.17 ms
19.11 21:00:45 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:01:01 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:01:01 TIME: user.ping 0.18 ms
19.11 21:01:01 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:01:18 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:01:18 TIME: user.ping 0.2 ms
19.11 21:01:18 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:01:27 TIMER: Check auto-disconnect...
19.11 21:01:27 NET: Client (name:uid141 conid:53867663 TCP) disconnected from vdl.0 (clients:1)
19.11 21:01:27 DB: SELECT id FROM battle WHERE firstid=141 OR secondid=141 AND finished <> true
19.11 21:01:27 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=141 OR secondid=141 AND finished <> true, _type => core/server.query }
19.11 21:01:27 -<<-: core/server.query { list => {{ id => 24 }}, errorCode => ok, _type => core/server.query }
19.11 21:01:27 STATS: vdl.0 cache connection, 60 calls, total 0.156327486038208 sec spent, avg 2.61 ms
19.11 21:01:27 ->>-: vdl/cache.battle.infoRoom { roomId => 24, _type => vdl/cache.battle.infoRoom }
19.11 21:01:27 -<<-: vdl/cache.battle.infoRoom { secondId => 141, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 140 }
19.11 21:01:27 ->>-: vdl/cache.battle.deleteRoom { roomId => 24, _type => vdl/cache.battle.deleteRoom }
19.11 21:01:27 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
19.11 21:01:27 ->>-: vdl/cache.battle.finishRoom { roomId => 24, _type => vdl/cache.battle.finishRoom }
19.11 21:01:27 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
19.11 21:01:27 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 141, _type => core/cache.update }
19.11 21:01:27 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
19.11 21:01:27 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 141, _type => core/cache.update }
19.11 21:01:27 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 21:01:27 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 141, _type => core/user.logoutPost }
19.11 21:01:27 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
19.11 21:01:27 == NET: uid140 ret: battle.leave { type => battle.leave }
19.11 21:01:27 STATS: vdl.0 cache, locks:4
19.11 21:01:37 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:01:37 TIME: user.ping 0.2 ms
19.11 21:01:37 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:01:58 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:01:58 TIME: user.ping 0.4 ms
19.11 21:01:58 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:02:20 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:02:20 TIME: user.ping 0.21 ms
19.11 21:02:20 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:02:27 TIMER: Check auto-disconnect...
19.11 21:02:27 STATS: vdl.0 cache, locks:4
19.11 21:02:41 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:02:41 TIME: user.ping 0.18 ms
19.11 21:02:41 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:03:02 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:03:02 TIME: user.ping 0.12 ms
19.11 21:03:02 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:03:24 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:03:24 TIME: user.ping 0.25 ms
19.11 21:03:24 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:03:27 TIMER: Check auto-disconnect...
19.11 21:03:27 STATS: vdl.0 cache, locks:4
19.11 21:03:37 NET: Client (name:uid140 conid:91139294 TCP) disconnected from vdl.0 (clients:0)
19.11 21:03:37 DB: SELECT id FROM battle WHERE firstid=140 OR secondid=140 AND finished <> true
19.11 21:03:37 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=140 OR secondid=140 AND finished <> true, _type => core/server.query }
19.11 21:03:37 -<<-: core/server.query { list => {{ id => 18 }, { id => 22 }, { id => 23 }}, errorCode => ok, _type => core/server.query }
19.11 21:03:37 STATS: vdl.0 cache connection, 67 calls, total 0.190706968307495 sec spent, avg 2.85 ms
19.11 21:03:37 ->>-: vdl/cache.battle.infoRoom { roomId => 23, _type => vdl/cache.battle.infoRoom }
19.11 21:03:37 -<<-: vdl/cache.battle.infoRoom { secondId => 141, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 141 }
19.11 21:03:37 ->>-: vdl/cache.battle.deleteRoom { roomId => 23, _type => vdl/cache.battle.deleteRoom }
19.11 21:03:37 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
19.11 21:03:37 ->>-: vdl/cache.battle.finishRoom { roomId => 23, _type => vdl/cache.battle.finishRoom }
19.11 21:03:37 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
19.11 21:03:37 ->>-: core/user.sendTo { id => 141, _type => core/user.sendTo, msg => { _type => battle.leave } }
19.11 21:03:37 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
19.11 21:03:37 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 140, _type => core/cache.update }
19.11 21:03:37 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
19.11 21:03:37 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 140, _type => core/cache.update }
19.11 21:03:37 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 21:03:37 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 140, _type => core/user.logoutPost }
19.11 21:03:37 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
19.11 21:03:44 NET: Client (conid:12158290) connected to vdl.0 (clients:1)
19.11 21:03:45 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTQw }
19.11 21:03:45 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid140' AND Password = E'uid140'
19.11 21:03:45 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid140' AND Password = E'uid140', _type => core/server.query }
19.11 21:03:45 -<<-: core/server.query { list => {{ name => uid140, networkid => , isbanned => false, id => 140 }}, errorCode => ok, _type => core/server.query }
19.11 21:03:45 ->>-: core/user.isOnlineID { id => 140, _type => core/user.isOnlineID }
19.11 21:03:45 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
19.11 21:03:45 ->>-: core/cache.get { type => user, v => -1, id => 140, _type => core/cache.get }
19.11 21:03:45 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid140, deleted => false, email => , networktype =>   , password => uid140, isbanned => false, regdate => 2016-11-19 17:25:00.661+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1479567029, lastLoginDate => 324, lastLoadDate => 1120 }, effects => { list => [] } }}, version => 2, id => 140 } }
19.11 21:03:45 ->>-: core/cache.get { type => questdata, v => -1, id => 140, _type => core/cache.get }
19.11 21:03:45 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 140 } }
19.11 21:03:45 NET: Client login (conid:12158290, id:140, name:uid140)
19.11 21:03:45 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 140, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
19.11 21:03:45 -<<-: core/user.loginPost { _type => core/user.loginPost }
19.11 21:03:45 == NET: uid140 ret: user.login { name => uid140, type => user.login, errorCode => ok, id => 140 }
19.11 21:03:45 == NET: uid140 ret: user.join { name => uid140, type => user.join }
19.11 21:03:49 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:03:49 TIME: user.ping 0.19 ms
19.11 21:03:49 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:03:52 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 140, _type => core/cache.update }
19.11 21:03:52 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
19.11 21:03:58 NET: Client (conid:87491773) connected to vdl.0 (clients:2)
19.11 21:03:58 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTQx }
19.11 21:03:58 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid141' AND Password = E'uid141'
19.11 21:03:58 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid141' AND Password = E'uid141', _type => core/server.query }
19.11 21:03:58 -<<-: core/server.query { list => {{ name => uid141, networkid => , isbanned => false, id => 141 }}, errorCode => ok, _type => core/server.query }
19.11 21:03:58 ->>-: core/user.isOnlineID { id => 141, _type => core/user.isOnlineID }
19.11 21:03:58 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
19.11 21:03:58 ->>-: core/cache.get { type => user, v => -1, id => 141, _type => core/cache.get }
19.11 21:03:58 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid141, deleted => false, email => , networktype =>   , password => uid141, isbanned => false, regdate => 2016-11-19 20:20:05.55314+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1479576158, lastLoginDate => 324, lastLoadDate => 1120 }, effects => { list => [] } }}, version => 0, id => 141 } }
19.11 21:03:58 ->>-: core/cache.get { type => questdata, v => -1, id => 141, _type => core/cache.get }
19.11 21:03:58 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 141 } }
19.11 21:03:58 NET: Client login (conid:87491773, id:141, name:uid141)
19.11 21:03:58 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 141, _type => core/user.loginPost, ipAddr => 172.16.20.65 }
19.11 21:03:58 -<<-: core/user.loginPost { _type => core/user.loginPost }
19.11 21:03:58 == NET: uid141 ret: user.login { name => uid141, type => user.login, errorCode => ok, id => 141 }
19.11 21:03:58 == NET: uid140 ret: user.join { name => uid141, type => user.join }
19.11 21:03:58 == NET: uid141 ret: user.join { name => uid140, type => user.join }
19.11 21:03:58 == NET: uid141 ret: user.join { name => uid141, type => user.join }
19.11 21:04:03 ++ NET: uid140 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
19.11 21:04:03 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 140 }, _type => vdl/cache.battle.findRandom }
19.11 21:04:03 -<<-: battle.enemyEvent { data => { name => uid140, enemy.id => 141, enemy.name => uid141, id => 140, enemy.num => 2, battleId => 25, player => 1 }, _isNotify => true, id => 140, _type => battle.enemyEvent }
19.11 21:04:03 -<<-: battle.enemyEvent { data => { name => uid141, enemy.id => 140, enemy.name => uid140, id => 141, enemy.num => 1, battleId => 25, player => 2 }, _isNotify => true, id => 141, _type => battle.enemyEvent }
19.11 21:04:03 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
19.11 21:04:03 TIME: battle.find 39.38 ms
19.11 21:04:03 == NET: uid140 ret: battle.find { type => battle.find, errorCode => ok }
19.11 21:04:03 == NET: uid140 ret: battle.enemy { data => { name => uid140, enemy.id => 141, enemy.name => uid141, id => 140, enemy.num => 2, battleId => 25, player => 1 }, type => battle.enemy }
19.11 21:04:03 == NET: uid141 ret: battle.enemy { data => { name => uid141, enemy.id => 140, enemy.name => uid140, id => 141, enemy.num => 1, battleId => 25, player => 2 }, type => battle.enemy }
19.11 21:04:07 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 141, _type => core/cache.update }
19.11 21:04:07 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 21:04:09 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:04:09 TIME: user.ping 0.17 ms
19.11 21:04:09 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:04:17 ++ NET: uid140 req: battle.end { type => leaveGame, typeBattle => battle, tournamentId => 0, messageType => battle.end, battleId => 25 }
19.11 21:04:17 ->>-: vdl/cache.battle.infoRoom { roomId => 25, _type => vdl/cache.battle.infoRoom }
19.11 21:04:17 -<<-: vdl/cache.battle.infoRoom { secondId => 141, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 140 }
19.11 21:04:17 ->>-: vdl/cache.battle.finishRoom { roomId => 25, _type => vdl/cache.battle.finishRoom }
19.11 21:04:17 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
19.11 21:04:17 TIME: battle.end 1.11 ms
19.11 21:04:17 == NET: uid140 ret: battle.end { type => battle.end, errorCode => ok }
19.11 21:04:17 == NET: uid141 ret: battle.leave { type => battle.leave }
19.11 21:04:22 ++ NET: uid141 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
19.11 21:04:22 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 141 }, _type => vdl/cache.battle.findRandom }
19.11 21:04:22 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
19.11 21:04:22 == NET: uid141 ret: battle.find { type => battle.find, errorCode => ok }
19.11 21:04:22 TIME: battle.find 0.83 ms
19.11 21:04:25 ++ NET: uid140 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
19.11 21:04:25 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 140 }, _type => vdl/cache.battle.findRandom }
19.11 21:04:25 -<<-: battle.enemyEvent { data => { name => uid140, enemy.id => 141, enemy.name => uid141, id => 140, enemy.num => 2, battleId => 26, player => 1 }, _isNotify => true, id => 140, _type => battle.enemyEvent }
19.11 21:04:25 -<<-: battle.enemyEvent { data => { name => uid141, enemy.id => 140, enemy.name => uid140, id => 141, enemy.num => 1, battleId => 26, player => 2 }, _isNotify => true, id => 141, _type => battle.enemyEvent }
19.11 21:04:25 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
19.11 21:04:25 TIME: battle.find 27.27 ms
19.11 21:04:25 == NET: uid140 ret: battle.find { type => battle.find, errorCode => ok }
19.11 21:04:25 == NET: uid140 ret: battle.enemy { data => { name => uid140, enemy.id => 141, enemy.name => uid141, id => 140, enemy.num => 2, battleId => 26, player => 1 }, type => battle.enemy }
19.11 21:04:25 == NET: uid141 ret: battle.enemy { data => { name => uid141, enemy.id => 140, enemy.name => uid140, id => 141, enemy.num => 1, battleId => 26, player => 2 }, type => battle.enemy }
19.11 21:04:27 TIMER: Check auto-disconnect...
19.11 21:04:27 STATS: vdl.0 cache, locks:6
19.11 21:04:28 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:04:28 TIME: user.ping 0.2 ms
19.11 21:04:28 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:04:31 ++ NET: uid140 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 26 }
19.11 21:04:31 ->>-: vdl/cache.battle.infoRoom { roomId => 26, _type => vdl/cache.battle.infoRoom }
19.11 21:04:31 -<<-: vdl/cache.battle.infoRoom { secondId => 141, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 140 }
19.11 21:04:31 TIME: battle.sendtask 0.79 ms
19.11 21:04:31 == NET: uid140 ret: battle.sendtask { name => throw, type => battle.sendtask, dices => [4,2,2,3,2,4], errorCode => ok, _type => battle.task }
19.11 21:04:31 == NET: uid140 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
19.11 21:04:31 == NET: uid141 ret: battle.task { name => throw, type => battle.task, dices => [4,2,2,3,2,4], errorCode => ok }
19.11 21:04:51 ++ NET: uid141 req: battle.end { type => leaveGame, typeBattle => battle, tournamentId => 0, messageType => battle.end, battleId => 26 }
19.11 21:04:51 ->>-: vdl/cache.battle.infoRoom { roomId => 26, _type => vdl/cache.battle.infoRoom }
19.11 21:04:51 -<<-: vdl/cache.battle.infoRoom { secondId => 141, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 140 }
19.11 21:04:51 STATS: vdl.0 cache connection, 93 calls, total 0.299844026565552 sec spent, avg 3.22 ms
19.11 21:04:51 ->>-: vdl/cache.battle.finishRoom { roomId => 26, _type => vdl/cache.battle.finishRoom }
19.11 21:04:51 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
19.11 21:04:51 TIME: battle.end 2.53 ms
19.11 21:04:51 == NET: uid141 ret: battle.end { type => battle.end, errorCode => ok }
19.11 21:04:51 == NET: uid140 ret: battle.leave { type => battle.leave }
19.11 21:05:27 TIMER: Check auto-disconnect...
19.11 21:05:27 STATS: vdl.0 cache, locks:6
19.11 21:05:27 TIMER: Check auto-disconnect...
19.11 21:05:27 STATS: vdl.0 cache, locks:6
19.11 21:06:37 NET: Client (name:uid140 conid:12158290 TCP) disconnected from vdl.0 (clients:1)
19.11 21:06:37 DB: SELECT id FROM battle WHERE firstid=140 OR secondid=140 AND finished <> true
19.11 21:06:37 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=140 OR secondid=140 AND finished <> true, _type => core/server.query }
19.11 21:06:37 -<<-: core/server.query { list => {{ id => 18 }, { id => 22 }, { id => 25 }, { id => 26 }}, errorCode => ok, _type => core/server.query }
19.11 21:06:37 STATS: vdl.0 cache connection, 95 calls, total 0.302042961120605 sec spent, avg 3.18 ms
19.11 21:06:37 ->>-: vdl/cache.battle.infoRoom { roomId => 26, _type => vdl/cache.battle.infoRoom }
19.11 21:06:37 -<<-: vdl/cache.battle.infoRoom { secondId => 141, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 140 }
19.11 21:06:37 ->>-: vdl/cache.battle.deleteRoom { roomId => 26, _type => vdl/cache.battle.deleteRoom }
19.11 21:06:37 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
19.11 21:06:37 ->>-: vdl/cache.battle.finishRoom { roomId => 26, _type => vdl/cache.battle.finishRoom }
19.11 21:06:37 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
19.11 21:06:37 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 140, _type => core/cache.update }
19.11 21:06:37 -<<-: core/cache.update { errorCode => ok, version => 4, _type => core/cache.update }
19.11 21:06:37 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 140, _type => core/cache.update }
19.11 21:06:37 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
19.11 21:06:37 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 140, _type => core/user.logoutPost }
19.11 21:06:37 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
19.11 21:06:37 == NET: uid141 ret: battle.leave { type => battle.leave }
19.11 21:06:40 NET: Client (conid:79575331) connected to vdl.0 (clients:2)
19.11 21:06:41 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTQw }
19.11 21:06:41 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid140' AND Password = E'uid140'
19.11 21:06:41 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid140' AND Password = E'uid140', _type => core/server.query }
19.11 21:06:41 -<<-: core/server.query { list => {{ name => uid140, networkid => , isbanned => false, id => 140 }}, errorCode => ok, _type => core/server.query }
19.11 21:06:41 ->>-: core/user.isOnlineID { id => 140, _type => core/user.isOnlineID }
19.11 21:06:41 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
19.11 21:06:41 ->>-: core/cache.get { type => user, v => -1, id => 140, _type => core/cache.get }
19.11 21:06:41 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid140, deleted => false, email => , networktype =>   , password => uid140, isbanned => false, regdate => 2016-11-19 17:25:00.661+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1479567029, lastLoginDate => 324, lastLoadDate => 1120 }, effects => { list => [] } }}, version => 4, id => 140 } }
19.11 21:06:41 ->>-: core/cache.get { type => questdata, v => -1, id => 140, _type => core/cache.get }
19.11 21:06:41 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 2, id => 140 } }
19.11 21:06:41 NET: Client login (conid:79575331, id:140, name:uid140)
19.11 21:06:41 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 140, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
19.11 21:06:41 -<<-: core/user.loginPost { _type => core/user.loginPost }
19.11 21:06:41 == NET: uid140 ret: user.login { name => uid140, type => user.login, errorCode => ok, id => 140 }
19.11 21:06:41 == NET: uid140 ret: user.join { name => uid141, type => user.join }
19.11 21:06:41 == NET: uid140 ret: user.join { name => uid140, type => user.join }
19.11 21:06:41 == NET: uid141 ret: user.join { name => uid140, type => user.join }
19.11 21:06:44 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:06:44 TIME: user.ping 0.18 ms
19.11 21:06:44 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:06:47 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 140, _type => core/cache.update }
19.11 21:06:47 -<<-: core/cache.update { errorCode => ok, version => 5, _type => core/cache.update }
19.11 21:07:04 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:07:04 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:07:04 TIME: user.ping 0.16 ms
19.11 21:07:23 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:07:23 TIME: user.ping 0.31 ms
19.11 21:07:23 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:07:27 TIMER: Check auto-disconnect...
19.11 21:07:27 STATS: vdl.0 cache, locks:6
19.11 21:07:43 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:07:43 TIME: user.ping 0.16 ms
19.11 21:07:43 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:08:03 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:08:03 TIME: user.ping 0.17 ms
19.11 21:08:03 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:08:23 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:08:23 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:08:23 TIME: user.ping 0.16 ms
19.11 21:08:27 TIMER: Check auto-disconnect...
19.11 21:08:27 NET: Client (name:uid141 conid:87491773 TCP) disconnected from vdl.0 (clients:1)
19.11 21:08:27 DB: SELECT id FROM battle WHERE firstid=141 OR secondid=141 AND finished <> true
19.11 21:08:27 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=141 OR secondid=141 AND finished <> true, _type => core/server.query }
19.11 21:08:27 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
19.11 21:08:27 STATS: vdl.0 cache connection, 108 calls, total 0.340298891067505 sec spent, avg 3.15 ms
19.11 21:08:27 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
19.11 21:08:27 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
19.11 21:08:27 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
19.11 21:08:27 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 498
Called from modules/VDLBattleModule.hx line 511
Called from snipe/slave/Server.hx line 994
19.11 21:08:27 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 141, _type => core/cache.update }
19.11 21:08:27 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
19.11 21:08:27 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 141, _type => core/cache.update }
19.11 21:08:27 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 21:08:27 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 141, _type => core/user.logoutPost }
19.11 21:08:27 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
19.11 21:08:27 STATS: vdl.0 cache, locks:4
19.11 21:08:44 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:08:44 TIME: user.ping 0.2 ms
19.11 21:08:44 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:09:03 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:09:03 TIME: user.ping 0.18 ms
19.11 21:09:03 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:09:21 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:09:21 TIME: user.ping 0.18 ms
19.11 21:09:21 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:09:27 TIMER: Check auto-disconnect...
19.11 21:09:27 STATS: vdl.0 cache, locks:4
19.11 21:09:39 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:09:39 TIME: user.ping 0.25 ms
19.11 21:09:39 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:09:57 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:09:57 TIME: user.ping 0.18 ms
19.11 21:09:57 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:10:15 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:10:15 TIME: user.ping 0.17 ms
19.11 21:10:15 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:10:27 TIMER: Check auto-disconnect...
19.11 21:10:27 STATS: vdl.0 cache, locks:4
19.11 21:10:33 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:10:33 TIME: user.ping 0.17 ms
19.11 21:10:33 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:10:52 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:10:52 TIME: user.ping 0.19 ms
19.11 21:10:52 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:11:13 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:11:13 TIME: user.ping 0.16 ms
19.11 21:11:13 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:11:27 TIMER: Check auto-disconnect...
19.11 21:11:27 STATS: vdl.0 cache, locks:4
19.11 21:11:35 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:11:35 TIME: user.ping 0.16 ms
19.11 21:11:35 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:11:56 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:11:56 TIME: user.ping 0.17 ms
19.11 21:11:56 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:12:18 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:12:18 TIME: user.ping 0.19 ms
19.11 21:12:18 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:12:27 TIMER: Check auto-disconnect...
19.11 21:12:27 STATS: vdl.0 cache, locks:4
19.11 21:12:40 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:12:40 TIME: user.ping 0.2 ms
19.11 21:12:40 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:13:01 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:13:01 TIME: user.ping 0.23 ms
19.11 21:13:01 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:13:23 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:13:23 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:13:23 TIME: user.ping 0.17 ms
19.11 21:13:27 TIMER: Check auto-disconnect...
19.11 21:13:27 STATS: vdl.0 cache, locks:4
19.11 21:13:44 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:13:44 TIME: user.ping 0.39 ms
19.11 21:13:44 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:14:06 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:14:06 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:14:06 TIME: user.ping 0.18 ms
19.11 21:14:27 TIMER: Check auto-disconnect...
19.11 21:14:27 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:14:27 TIME: user.ping 0.16 ms
19.11 21:14:27 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:14:27 STATS: vdl.0 cache, locks:4
19.11 21:14:48 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:14:48 TIME: user.ping 0.18 ms
19.11 21:14:48 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:15:10 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:15:10 TIME: user.ping 0.38 ms
19.11 21:15:10 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:15:27 TIMER: Check auto-disconnect...
19.11 21:15:27 STATS: vdl.0 cache, locks:4
19.11 21:34:00 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
19.11 21:34:00 -<<-: server.login ok
19.11 21:34:00 DB: SELECT * FROM LocalizationStrings
19.11 21:34:00 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 TIMER: Starting timer...
19.11 21:34:00 TIMER: Timer running...
19.11 21:34:00 DB: SELECT * FROM GameVars
19.11 21:34:00 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
19.11 21:34:00 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
19.11 21:34:00 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
19.11 21:34:00 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
19.11 21:34:00 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
19.11 21:34:00 -<<-: core/quest.getDaily ok
19.11 21:34:00 DB: SELECT * FROM UserAttributeTypes
19.11 21:34:00 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 DB: SELECT * FROM UserVariableTypes
19.11 21:34:00 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
19.11 21:34:00 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 DB: SELECT * FROM ItemGroups
19.11 21:34:00 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 DB: SELECT * FROM Bundles ORDER BY ID
19.11 21:34:00 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 DB: SELECT * FROM BundleItems ORDER BY ID
19.11 21:34:00 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 SHOP: loading items...
19.11 21:34:00 ->>-: core/shop.getList { _type => core/shop.getList }
19.11 21:34:00 -<<-: core/shop.getList ok
19.11 21:34:00 SHOP: 0 items loaded (0 sec)
19.11 21:34:00 DB: SELECT * FROM EffectAttributeTypes
19.11 21:34:00 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 DB: SELECT * FROM Effects
19.11 21:34:00 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
19.11 21:34:00 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
19.11 21:34:00 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 DB: SELECT * FROM Badges
19.11 21:34:00 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
19.11 21:34:00 -<<-: core/server.query ok
19.11 21:34:00 NET: Client (conid:98260523) connected to vdl.0 (clients:1)
19.11 21:34:01 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTQw }
19.11 21:34:01 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid140' AND Password = E'uid140'
19.11 21:34:01 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid140' AND Password = E'uid140', _type => core/server.query }
19.11 21:34:01 -<<-: core/server.query ok
19.11 21:34:01 ->>-: core/user.isOnlineID { id => 140, _type => core/user.isOnlineID }
19.11 21:34:01 -<<-: core/user.isOnlineID ok
19.11 21:34:01 ->>-: core/cache.get { type => user, v => -1, id => 140, _type => core/cache.get }
19.11 21:34:01 -<<-: core/cache.get ok
19.11 21:34:01 ->>-: core/cache.get { type => questdata, v => -1, id => 140, _type => core/cache.get }
19.11 21:34:01 -<<-: core/cache.get ok
19.11 21:34:01 NET: Client login (conid:98260523, id:140, name:uid140)
19.11 21:34:01 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 140, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
19.11 21:34:01 -<<-: core/user.loginPost null
19.11 21:34:01 == NET: uid140 ret: user.login { name => uid140, type => user.login, errorCode => ok, id => 140 }
19.11 21:34:01 == NET: uid140 ret: user.join { name => uid140, type => user.join }
19.11 21:34:02 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:34:02 TIME: user.ping 0.42 ms
19.11 21:34:02 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:34:10 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 140, _type => core/cache.update }
19.11 21:34:10 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 21:34:13 NET: Client (conid:35661178) connected to vdl.0 (clients:2)
19.11 21:34:13 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTQx }
19.11 21:34:13 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid141' AND Password = E'uid141'
19.11 21:34:13 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid141' AND Password = E'uid141', _type => core/server.query }
19.11 21:34:13 -<<-: core/server.query { list => {{ name => uid141, networkid => , isbanned => false, id => 141 }}, errorCode => ok, _type => core/server.query }
19.11 21:34:13 ->>-: core/user.isOnlineID { id => 141, _type => core/user.isOnlineID }
19.11 21:34:13 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
19.11 21:34:13 ->>-: core/cache.get { type => user, v => -1, id => 141, _type => core/cache.get }
19.11 21:34:13 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid141, deleted => false, email => , networktype =>   , password => uid141, isbanned => false, regdate => 2016-11-19 20:20:05.55314+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1479576158, lastLoginDate => 324, lastLoadDate => 1120 }, effects => { list => [] } }}, version => 0, id => 141 } }
19.11 21:34:13 ->>-: core/cache.get { type => questdata, v => -1, id => 141, _type => core/cache.get }
19.11 21:34:13 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 141 } }
19.11 21:34:13 NET: Client login (conid:35661178, id:141, name:uid141)
19.11 21:34:13 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 141, _type => core/user.loginPost, ipAddr => 172.16.20.65 }
19.11 21:34:13 -<<-: core/user.loginPost { _type => core/user.loginPost }
19.11 21:34:13 == NET: uid140 ret: user.join { name => uid141, type => user.join }
19.11 21:34:13 == NET: uid141 ret: user.login { name => uid141, type => user.login, errorCode => ok, id => 141 }
19.11 21:34:13 == NET: uid141 ret: user.join { name => uid140, type => user.join }
19.11 21:34:13 == NET: uid141 ret: user.join { name => uid141, type => user.join }
19.11 21:34:17 ++ NET: uid140 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
19.11 21:34:17 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 140 }, _type => vdl/cache.battle.findRandom }
19.11 21:34:17 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
19.11 21:34:17 TIME: battle.find 0.85 ms
19.11 21:34:17 == NET: uid140 ret: battle.find { type => battle.find, errorCode => ok }
19.11 21:34:20 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 141, _type => core/cache.update }
19.11 21:34:20 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 21:34:21 ++ NET: uid141 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
19.11 21:34:21 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 141 }, _type => vdl/cache.battle.findRandom }
19.11 21:34:21 -<<-: battle.enemyEvent { data => { name => uid141, enemy.id => 140, enemy.name => uid140, id => 141, enemy.num => 2, battleId => 27, player => 1 }, _isNotify => true, id => 141, _type => battle.enemyEvent }
19.11 21:34:21 -<<-: battle.enemyEvent { data => { name => uid140, enemy.id => 141, enemy.name => uid141, id => 140, enemy.num => 1, battleId => 27, player => 2 }, _isNotify => true, id => 140, _type => battle.enemyEvent }
19.11 21:34:21 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
19.11 21:34:21 TIME: battle.find 27.2 ms
19.11 21:34:21 == NET: uid141 ret: battle.find { type => battle.find, errorCode => ok }
19.11 21:34:21 == NET: uid140 ret: battle.enemy { data => { name => uid140, enemy.id => 141, enemy.name => uid141, id => 140, enemy.num => 1, battleId => 27, player => 2 }, type => battle.enemy }
19.11 21:34:21 == NET: uid141 ret: battle.enemy { data => { name => uid141, enemy.id => 140, enemy.name => uid140, id => 141, enemy.num => 2, battleId => 27, player => 1 }, type => battle.enemy }
19.11 21:34:23 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:34:23 TIME: user.ping 0.17 ms
19.11 21:34:23 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:34:31 ++ NET: uid141 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 27 }
19.11 21:34:31 ->>-: vdl/cache.battle.infoRoom { roomId => 27, _type => vdl/cache.battle.infoRoom }
19.11 21:34:31 -<<-: vdl/cache.battle.infoRoom { secondId => 140, firstId => 141, _type => vdl/cache.battle.infoRoom, turnId => 141 }
19.11 21:34:31 TIME: battle.sendtask 0.97 ms
19.11 21:34:31 == NET: uid140 ret: battle.task { name => throw, type => battle.task, dices => [3,5,4,1,1,2], errorCode => ok }
19.11 21:34:31 == NET: uid141 ret: battle.sendtask { name => throw, type => battle.task, dices => [3,5,4,1,1,2], errorCode => ok }
19.11 21:34:31 == NET: uid141 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
19.11 21:34:35 ++ NET: uid141 req: battle.sendtask { dice => 5, from => [7,4], name => swap, side => 2, messageType => battle.sendtask, to => [8,4], battleId => 27 }
19.11 21:34:35 ->>-: vdl/cache.battle.infoRoom { roomId => 27, _type => vdl/cache.battle.infoRoom }
19.11 21:34:35 -<<-: vdl/cache.battle.infoRoom { secondId => 140, firstId => 141, _type => vdl/cache.battle.infoRoom, turnId => 141 }
19.11 21:34:35 ->>-: vdl/cache.battle.setScores { scores => [0,0], _type => vdl/cache.battle.setScores, player1 => 141, player2 => 140, battleId => 27 }
19.11 21:34:35 -<<-: vdl/cache.battle.setScores { errorCode => ok, _type => vdl/cache.battle.setScores }
19.11 21:34:35 TIME: battle.sendtask 2.56 ms
19.11 21:34:35 == NET: uid141 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
19.11 21:34:35 == NET: uid140 ret: battle.task { dice => 5, from => [7,4], name => swap, side => 2, type => battle.task, dices => [3,4,1,1,2], messageType => battle.sendtask, to => [8,4], battleId => 27 }
19.11 21:34:38 ++ NET: uid141 req: battle.sendtask { dice => 3, from => [8,4], name => swap, side => 2, messageType => battle.sendtask, to => [9,4], battleId => 27 }
19.11 21:34:38 ->>-: vdl/cache.battle.infoRoom { roomId => 27, _type => vdl/cache.battle.infoRoom }
19.11 21:34:38 -<<-: vdl/cache.battle.infoRoom { secondId => 140, firstId => 141, _type => vdl/cache.battle.infoRoom, turnId => 141 }
19.11 21:34:38 ->>-: vdl/cache.battle.setScores { scores => [0,0], _type => vdl/cache.battle.setScores, player1 => 141, player2 => 140, battleId => 27 }
19.11 21:34:38 -<<-: vdl/cache.battle.setScores { errorCode => ok, _type => vdl/cache.battle.setScores }
19.11 21:34:38 TIME: battle.sendtask 3.67 ms
19.11 21:34:38 == NET: uid141 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
19.11 21:34:38 == NET: uid140 ret: battle.task { dice => 3, from => [8,4], name => swap, side => 2, type => battle.task, dices => [4,1,1,2], messageType => battle.sendtask, to => [9,4], battleId => 27 }
19.11 21:34:39 ++ NET: uid141 req: battle.sendtask { dice => 1, from => [9,4], name => swap, side => 2, messageType => battle.sendtask, to => [8,4], battleId => 27 }
19.11 21:34:39 ->>-: vdl/cache.battle.infoRoom { roomId => 27, _type => vdl/cache.battle.infoRoom }
19.11 21:34:39 -<<-: vdl/cache.battle.infoRoom { secondId => 140, firstId => 141, _type => vdl/cache.battle.infoRoom, turnId => 141 }
19.11 21:34:39 ->>-: vdl/cache.battle.setScores { scores => [0,0], _type => vdl/cache.battle.setScores, player1 => 141, player2 => 140, battleId => 27 }
19.11 21:34:39 -<<-: vdl/cache.battle.setScores { errorCode => ok, _type => vdl/cache.battle.setScores }
19.11 21:34:39 TIME: battle.sendtask 4.09 ms
19.11 21:34:39 == NET: uid141 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
19.11 21:34:39 == NET: uid140 ret: battle.task { dice => 1, from => [9,4], name => swap, side => 2, type => battle.task, dices => [4,1,2], messageType => battle.sendtask, to => [8,4], battleId => 27 }
19.11 21:34:40 ++ NET: uid141 req: battle.sendtask { dice => 4, from => [8,4], name => swap, side => 2, messageType => battle.sendtask, to => [9,4], battleId => 27 }
19.11 21:34:40 ->>-: vdl/cache.battle.infoRoom { roomId => 27, _type => vdl/cache.battle.infoRoom }
19.11 21:34:40 -<<-: vdl/cache.battle.infoRoom { secondId => 140, firstId => 141, _type => vdl/cache.battle.infoRoom, turnId => 141 }
19.11 21:34:40 ->>-: vdl/cache.battle.setScores { scores => [1,0], _type => vdl/cache.battle.setScores, player1 => 141, player2 => 140, battleId => 27 }
19.11 21:34:40 -<<-: battle.endEvent { type => winGame, typeBattle => battle, _isNotify => true, _type => battle.endEvent, win => 141, battleId => 27 }
19.11 21:34:40 -<<-: battle.endEvent { lose => 140, type => winGame, typeBattle => battle, _isNotify => true, _type => battle.endEvent, win => 0, battleId => 27 }
19.11 21:34:40 -<<-: vdl/cache.battle.setScores { errorCode => ok, _type => vdl/cache.battle.setScores }
19.11 21:34:40 TIME: battle.sendtask 3.41 ms
19.11 21:34:40 == NET: uid141 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
19.11 21:34:40 ->>-: core/cache.get { type => user, v => -1, id => 1, _type => core/cache.get }
19.11 21:34:40 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => --- DEFAULT ATTRIBUTES ---, deleted => false, email => , networktype =>   , password => , isbanned => false, regdate => 2016-08-30 15:45:16.008574+03, language =>   , networkid => , params => { inventory => { list => [] }, attrs => {}, effects => { list => [] } }}, version => 0, id => 1 } }
19.11 21:34:40 ->>-: core/cache.get { type => questdata, v => -1, id => 1, _type => core/cache.get }
19.11 21:34:40 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 1 } }
19.11 21:34:40 ->>-: vdl/cache.battle.infoRoom { roomId => 27, _type => vdl/cache.battle.infoRoom }
19.11 21:34:40 -<<-: vdl/cache.battle.infoRoom { secondId => 140, firstId => 141, _type => vdl/cache.battle.infoRoom, turnId => 141 }
19.11 21:34:40 ->>-: vdl/cache.battle.finishRoom { roomId => 27, _type => vdl/cache.battle.finishRoom }
19.11 21:34:40 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
19.11 21:34:40 ->>-: core/cache.get { type => user, v => -1, id => 1, _type => core/cache.get }
19.11 21:34:40 -<<-: core/cache.get { errorCode => lockTimeout, _type => core/cache.get }
19.11 21:34:40 TRACE: Invalid field access : id
19.11 21:34:40 TRACE: 
Called from modules/VDLBattleModule.hx line 146
Called from a C function
Called from snipe/slave/Server.hx line 685
Called from snipe/slave/CacheConnection.hx line 303
Called from snipe/slave/ThreadServerModified.hx line 202
19.11 21:34:40 == NET: uid140 ret: battle.task { dice => 4, from => [8,4], name => swap, side => 2, type => battle.task, dices => [1,2], messageType => battle.sendtask, to => [9,4], battleId => 27 }
19.11 21:34:40 == NET: uid140 ret: battle.end { type => battle.end }
19.11 21:34:41 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:34:41 TIME: user.ping 0.2 ms
19.11 21:34:41 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:35:00 TIMER: Check auto-disconnect...
19.11 21:35:00 STATS: vdl.0 cache, locks:6
19.11 21:35:03 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:35:03 TIME: user.ping 0.2 ms
19.11 21:35:03 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:35:11 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:35:11 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:35:11 TIME: user.ping 0.19 ms
19.11 21:35:24 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:35:24 TIME: user.ping 0.18 ms
19.11 21:35:24 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:36:00 TIMER: Check auto-disconnect...
19.11 21:36:00 STATS: vdl.0 cache, locks:6
19.11 21:36:11 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:36:11 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:36:11 TIME: user.ping 0.16 ms
19.11 21:37:00 TIMER: Check auto-disconnect...
19.11 21:37:00 STATS: vdl.0 cache, locks:6
19.11 21:37:27 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:37:27 TIME: user.ping 0.19 ms
19.11 21:37:27 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:37:35 NET: Client (name:uid141 conid:35661178 TCP) disconnected from vdl.0 (clients:1)
19.11 21:37:35 DB: SELECT id FROM battle WHERE firstid=141 OR secondid=141 AND finished <> true
19.11 21:37:35 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=141 OR secondid=141 AND finished <> true, _type => core/server.query }
19.11 21:37:35 -<<-: core/server.query { list => {{ id => 27 }}, errorCode => ok, _type => core/server.query }
19.11 21:37:35 STATS: vdl.0 cache connection, 49 calls, total 0.0877914428710938 sec spent, avg 1.79 ms
19.11 21:37:35 ->>-: vdl/cache.battle.infoRoom { roomId => 27, _type => vdl/cache.battle.infoRoom }
19.11 21:37:35 -<<-: vdl/cache.battle.infoRoom { secondId => 140, firstId => 141, _type => vdl/cache.battle.infoRoom, turnId => 141 }
19.11 21:37:35 ->>-: vdl/cache.battle.deleteRoom { roomId => 27, _type => vdl/cache.battle.deleteRoom }
19.11 21:37:35 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
19.11 21:37:35 ->>-: vdl/cache.battle.finishRoom { roomId => 27, _type => vdl/cache.battle.finishRoom }
19.11 21:37:35 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
19.11 21:37:35 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 141, _type => core/cache.update }
19.11 21:37:35 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
19.11 21:37:35 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 141, _type => core/cache.update }
19.11 21:37:35 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 21:37:35 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 141, _type => core/user.logoutPost }
19.11 21:37:35 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
19.11 21:37:35 == NET: uid140 ret: battle.leave { type => battle.leave }
19.11 21:37:43 NET: Client (name:uid140 conid:98260523 TCP) disconnected from vdl.0 (clients:0)
19.11 21:37:43 DB: SELECT id FROM battle WHERE firstid=140 OR secondid=140 AND finished <> true
19.11 21:37:43 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=140 OR secondid=140 AND finished <> true, _type => core/server.query }
19.11 21:37:43 -<<-: core/server.query { list => {{ id => 18 }, { id => 22 }, { id => 25 }}, errorCode => ok, _type => core/server.query }
19.11 21:37:43 ->>-: vdl/cache.battle.infoRoom { roomId => 25, _type => vdl/cache.battle.infoRoom }
19.11 21:37:43 -<<-: vdl/cache.battle.infoRoom { secondId => 141, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 140 }
19.11 21:37:43 ->>-: vdl/cache.battle.deleteRoom { roomId => 25, _type => vdl/cache.battle.deleteRoom }
19.11 21:37:43 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
19.11 21:37:43 ->>-: vdl/cache.battle.finishRoom { roomId => 25, _type => vdl/cache.battle.finishRoom }
19.11 21:37:43 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
19.11 21:37:43 ->>-: core/user.sendTo { id => 141, _type => core/user.sendTo, msg => { _type => battle.leave } }
19.11 21:37:43 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
19.11 21:37:43 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 140, _type => core/cache.update }
19.11 21:37:43 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
19.11 21:37:43 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 140, _type => core/cache.update }
19.11 21:37:43 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 21:37:43 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 140, _type => core/user.logoutPost }
19.11 21:37:43 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
19.11 21:37:48 NET: Client (conid:57767285) connected to vdl.0 (clients:1)
19.11 21:37:51 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTQx }
19.11 21:37:51 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid141' AND Password = E'uid141'
19.11 21:37:51 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid141' AND Password = E'uid141', _type => core/server.query }
19.11 21:37:51 -<<-: core/server.query { list => {{ name => uid141, networkid => , isbanned => false, id => 141 }}, errorCode => ok, _type => core/server.query }
19.11 21:37:51 ->>-: core/user.isOnlineID { id => 141, _type => core/user.isOnlineID }
19.11 21:37:51 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
19.11 21:37:51 ->>-: core/cache.get { type => user, v => -1, id => 141, _type => core/cache.get }
19.11 21:37:51 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid141, deleted => false, email => , networktype =>   , password => uid141, isbanned => false, regdate => 2016-11-19 20:20:05.55314+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1479576158, lastLoginDate => 324, lastLoadDate => 1120 }, effects => { list => [] } }}, version => 0, id => 141 } }
19.11 21:37:51 ->>-: core/cache.get { type => questdata, v => -1, id => 141, _type => core/cache.get }
19.11 21:37:51 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 141 } }
19.11 21:37:51 NET: Client login (conid:57767285, id:141, name:uid141)
19.11 21:37:51 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 141, _type => core/user.loginPost, ipAddr => 172.16.20.65 }
19.11 21:37:51 -<<-: core/user.loginPost { _type => core/user.loginPost }
19.11 21:37:51 == NET: uid141 ret: user.login { name => uid141, type => user.login, errorCode => ok, id => 141 }
19.11 21:37:51 == NET: uid141 ret: user.join { name => uid141, type => user.join }
19.11 21:38:00 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:38:00 TIME: user.ping 0.1 ms
19.11 21:38:00 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:38:00 TIMER: Check auto-disconnect...
19.11 21:38:00 STATS: vdl.0 cache, locks:4
19.11 21:38:00 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 141, _type => core/cache.update }
19.11 21:38:00 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 21:38:00 TIMER: Check auto-disconnect...
19.11 21:38:00 STATS: vdl.0 cache, locks:4
19.11 21:38:00 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:38:00 TIME: user.ping 0.2 ms
19.11 21:38:00 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:38:00 TIMER: Check auto-disconnect...
19.11 21:38:00 STATS: vdl.0 cache, locks:4
19.11 21:40:01 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:40:01 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:40:01 TIME: user.ping 0.24 ms
19.11 21:41:00 TIMER: Check auto-disconnect...
19.11 21:41:00 STATS: vdl.0 cache, locks:4
19.11 21:41:01 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:41:01 TIME: user.ping 0.16 ms
19.11 21:41:01 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:42:00 TIMER: Check auto-disconnect...
19.11 21:42:00 STATS: vdl.0 cache, locks:4
19.11 21:42:02 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:42:02 TIME: user.ping 0.16 ms
19.11 21:42:02 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:43:00 TIMER: Check auto-disconnect...
19.11 21:43:00 STATS: vdl.0 cache, locks:4
19.11 21:43:02 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:43:02 TIME: user.ping 0.2 ms
19.11 21:43:02 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:44:00 TIMER: Check auto-disconnect...
19.11 21:44:00 STATS: vdl.0 cache, locks:4
19.11 21:44:03 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:44:03 TIME: user.ping 0.24 ms
19.11 21:44:03 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:44:27 ++ NET: uid141 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
19.11 21:44:27 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 141 }, _type => vdl/cache.battle.findRandom }
19.11 21:44:27 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
19.11 21:44:27 STATS: vdl.0 cache connection, 70 calls, total 0.144187927246094 sec spent, avg 2.06 ms
19.11 21:44:27 TIME: battle.find 0.81 ms
19.11 21:44:27 == NET: uid141 ret: battle.find { type => battle.find, errorCode => ok }
19.11 21:44:32 ++ NET: uid141 req: battle.end { type => closeGame, typeBattle => battle, tournamentId => 0, messageType => battle.end, battleId => 0 }
19.11 21:44:32 ->>-: vdl/cache.battle.closeFind { userId => 141, _type => vdl/cache.battle.closeFind }
19.11 21:44:32 -<<-: vdl/cache.battle.closeFind { errorCode => ok, _type => vdl/cache.battle.closeFind }
19.11 21:44:32 TIME: battle.end 0.64 ms
19.11 21:44:32 == NET: uid141 ret: battle.end { type => battle.end, errorCode => ok }
19.11 21:45:00 TIMER: Check auto-disconnect...
19.11 21:45:00 STATS: vdl.0 cache, locks:4
19.11 21:45:03 NET: Client (conid:5837305) connected to vdl.0 (clients:2)
19.11 21:45:04 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTQw }
19.11 21:45:04 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid140' AND Password = E'uid140'
19.11 21:45:04 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid140' AND Password = E'uid140', _type => core/server.query }
19.11 21:45:04 -<<-: core/server.query { list => {{ name => uid140, networkid => , isbanned => false, id => 140 }}, errorCode => ok, _type => core/server.query }
19.11 21:45:04 ->>-: core/user.isOnlineID { id => 140, _type => core/user.isOnlineID }
19.11 21:45:04 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
19.11 21:45:04 ->>-: core/cache.get { type => user, v => -1, id => 140, _type => core/cache.get }
19.11 21:45:04 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid140, deleted => false, email => , networktype =>   , password => uid140, isbanned => false, regdate => 2016-11-19 17:25:00.661+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1479567029, lastLoginDate => 324, lastLoadDate => 1120 }, effects => { list => [] } }}, version => 0, id => 140 } }
19.11 21:45:04 ->>-: core/cache.get { type => questdata, v => -1, id => 140, _type => core/cache.get }
19.11 21:45:04 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 140 } }
19.11 21:45:04 NET: Client login (conid:5837305, id:140, name:uid140)
19.11 21:45:04 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 140, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
19.11 21:45:04 -<<-: core/user.loginPost { _type => core/user.loginPost }
19.11 21:45:04 == NET: uid140 ret: user.login { name => uid140, type => user.login, errorCode => ok, id => 140 }
19.11 21:45:04 == NET: uid141 ret: user.join { name => uid140, type => user.join }
19.11 21:45:04 == NET: uid140 ret: user.join { name => uid141, type => user.join }
19.11 21:45:04 == NET: uid140 ret: user.join { name => uid140, type => user.join }
19.11 21:45:07 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:45:07 TIME: user.ping 0.18 ms
19.11 21:45:07 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:45:10 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 140, _type => core/cache.update }
19.11 21:45:10 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 21:45:21 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:45:21 TIME: user.ping 0.22 ms
19.11 21:45:21 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:45:29 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:45:29 TIME: user.ping 0.19 ms
19.11 21:45:29 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:45:50 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:45:50 TIME: user.ping 0.1 ms
19.11 21:45:50 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:46:00 TIMER: Check auto-disconnect...
19.11 21:46:00 ++ NET: uid140 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
19.11 21:46:00 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 140 }, _type => vdl/cache.battle.findRandom }
19.11 21:46:00 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
19.11 21:46:00 STATS: vdl.0 cache connection, 78 calls, total 0.153055906295776 sec spent, avg 1.96 ms
19.11 21:46:00 TIME: battle.find 0.75 ms
19.11 21:46:00 == NET: uid140 ret: battle.find { type => battle.find, errorCode => ok }
19.11 21:46:00 STATS: vdl.0 cache, locks:6
19.11 21:46:04 ++ NET: uid140 req: battle.end { type => closeGame, typeBattle => battle, tournamentId => 0, messageType => battle.end, battleId => 0 }
19.11 21:46:04 ->>-: vdl/cache.battle.closeFind { userId => 140, _type => vdl/cache.battle.closeFind }
19.11 21:46:04 -<<-: vdl/cache.battle.closeFind { errorCode => ok, _type => vdl/cache.battle.closeFind }
19.11 21:46:04 TIME: battle.end 0.66 ms
19.11 21:46:04 == NET: uid140 ret: battle.end { type => battle.end, errorCode => ok }
19.11 21:46:11 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:46:11 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:46:11 TIME: user.ping 0.15 ms
19.11 21:46:27 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:46:27 TIME: user.ping 0.17 ms
19.11 21:46:27 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:46:45 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:46:45 TIME: user.ping 0.17 ms
19.11 21:46:45 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:46:53 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:46:53 TIME: user.ping 0.15 ms
19.11 21:46:53 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:47:00 TIMER: Check auto-disconnect...
19.11 21:47:00 STATS: vdl.0 cache, locks:6
19.11 21:47:03 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:47:03 TIME: user.ping 0.19 ms
19.11 21:47:03 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:47:21 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:47:21 TIME: user.ping 0.22 ms
19.11 21:47:21 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:47:39 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:47:39 TIME: user.ping 0.12 ms
19.11 21:47:39 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:47:47 NET: Client (name:uid140 conid:5837305 TCP) disconnected from vdl.0 (clients:1)
19.11 21:47:47 DB: SELECT id FROM battle WHERE firstid=140 OR secondid=140 AND finished <> true
19.11 21:47:47 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=140 OR secondid=140 AND finished <> true, _type => core/server.query }
19.11 21:47:47 -<<-: core/server.query { list => {{ id => 18 }, { id => 22 }}, errorCode => ok, _type => core/server.query }
19.11 21:47:47 STATS: vdl.0 cache connection, 80 calls, total 0.154810905456543 sec spent, avg 1.94 ms
19.11 21:47:47 ->>-: vdl/cache.battle.infoRoom { roomId => 22, _type => vdl/cache.battle.infoRoom }
19.11 21:47:47 -<<-: vdl/cache.battle.infoRoom { secondId => 141, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 141 }
19.11 21:47:47 ->>-: vdl/cache.battle.deleteRoom { roomId => 22, _type => vdl/cache.battle.deleteRoom }
19.11 21:47:47 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
19.11 21:47:47 ->>-: vdl/cache.battle.finishRoom { roomId => 22, _type => vdl/cache.battle.finishRoom }
19.11 21:47:47 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
19.11 21:47:47 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 140, _type => core/cache.update }
19.11 21:47:47 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
19.11 21:47:47 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 140, _type => core/cache.update }
19.11 21:47:47 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 21:47:47 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 140, _type => core/user.logoutPost }
19.11 21:47:47 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
19.11 21:47:47 == NET: uid141 ret: battle.leave { type => battle.leave }
19.11 21:48:00 TIMER: Check auto-disconnect...
19.11 21:48:00 STATS: vdl.0 cache, locks:4
19.11 21:48:26 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:48:26 TIME: user.ping 0.15 ms
19.11 21:48:26 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:49:56 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
19.11 21:49:56 -<<-: server.login ok
19.11 21:49:56 DB: SELECT * FROM LocalizationStrings
19.11 21:49:56 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:49:56 TIMER: Starting timer...
19.11 21:49:56 TIMER: Timer running...
19.11 21:49:56 DB: SELECT * FROM GameVars
19.11 21:49:56 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:49:56 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
19.11 21:49:56 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:49:56 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
19.11 21:49:56 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:49:56 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
19.11 21:49:56 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:49:56 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
19.11 21:49:56 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:49:56 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
19.11 21:49:56 -<<-: core/quest.getDaily ok
19.11 21:49:56 DB: SELECT * FROM UserAttributeTypes
19.11 21:49:56 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:49:56 DB: SELECT * FROM UserVariableTypes
19.11 21:49:56 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:49:56 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
19.11 21:49:56 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:49:56 DB: SELECT * FROM ItemGroups
19.11 21:49:56 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:49:56 DB: SELECT * FROM Bundles ORDER BY ID
19.11 21:49:56 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:49:56 DB: SELECT * FROM BundleItems ORDER BY ID
19.11 21:49:56 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:49:56 SHOP: loading items...
19.11 21:49:56 ->>-: core/shop.getList { _type => core/shop.getList }
19.11 21:49:56 -<<-: core/shop.getList ok
19.11 21:49:56 SHOP: 0 items loaded (0 sec)
19.11 21:49:56 DB: SELECT * FROM EffectAttributeTypes
19.11 21:49:56 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:49:56 DB: SELECT * FROM Effects
19.11 21:49:56 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:49:56 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
19.11 21:49:56 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:49:56 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
19.11 21:49:56 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:49:56 DB: SELECT * FROM Badges
19.11 21:49:56 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
19.11 21:49:56 -<<-: core/server.query ok
19.11 21:50:04 NET: Client (conid:79074606) connected to vdl.0 (clients:1)
19.11 21:50:04 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTQw }
19.11 21:50:04 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid140' AND Password = E'uid140'
19.11 21:50:04 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid140' AND Password = E'uid140', _type => core/server.query }
19.11 21:50:05 -<<-: core/server.query ok
19.11 21:50:05 ->>-: core/user.isOnlineID { id => 140, _type => core/user.isOnlineID }
19.11 21:50:05 -<<-: core/user.isOnlineID ok
19.11 21:50:05 ->>-: core/cache.get { type => user, v => -1, id => 140, _type => core/cache.get }
19.11 21:50:05 -<<-: core/cache.get ok
19.11 21:50:05 ->>-: core/cache.get { type => questdata, v => -1, id => 140, _type => core/cache.get }
19.11 21:50:05 -<<-: core/cache.get ok
19.11 21:50:05 NET: Client login (conid:79074606, id:140, name:uid140)
19.11 21:50:05 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 140, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
19.11 21:50:05 -<<-: core/user.loginPost null
19.11 21:50:05 == NET: uid140 ret: user.login { name => uid140, type => user.login, errorCode => ok, id => 140 }
19.11 21:50:05 == NET: uid140 ret: user.join { name => uid140, type => user.join }
19.11 21:50:08 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:50:08 TIME: user.ping 0.25 ms
19.11 21:50:08 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:50:11 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 140, _type => core/cache.update }
19.11 21:50:11 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 21:50:18 NET: Client (conid:23405183) connected to vdl.0 (clients:2)
19.11 21:50:21 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTQx }
19.11 21:50:21 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid141' AND Password = E'uid141'
19.11 21:50:21 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid141' AND Password = E'uid141', _type => core/server.query }
19.11 21:50:21 -<<-: core/server.query { list => {{ name => uid141, networkid => , isbanned => false, id => 141 }}, errorCode => ok, _type => core/server.query }
19.11 21:50:21 ->>-: core/user.isOnlineID { id => 141, _type => core/user.isOnlineID }
19.11 21:50:21 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
19.11 21:50:21 ->>-: core/cache.get { type => user, v => -1, id => 141, _type => core/cache.get }
19.11 21:50:21 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid141, deleted => false, email => , networktype =>   , password => uid141, isbanned => false, regdate => 2016-11-19 20:20:05.55314+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1479576158, lastLoginDate => 324, lastLoadDate => 1120 }, effects => { list => [] } }}, version => 0, id => 141 } }
19.11 21:50:21 ->>-: core/cache.get { type => questdata, v => -1, id => 141, _type => core/cache.get }
19.11 21:50:21 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 141 } }
19.11 21:50:21 NET: Client login (conid:23405183, id:141, name:uid141)
19.11 21:50:21 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 141, _type => core/user.loginPost, ipAddr => 172.16.20.65 }
19.11 21:50:21 -<<-: core/user.loginPost { _type => core/user.loginPost }
19.11 21:50:21 == NET: uid140 ret: user.join { name => uid141, type => user.join }
19.11 21:50:21 == NET: uid141 ret: user.login { name => uid141, type => user.login, errorCode => ok, id => 141 }
19.11 21:50:21 == NET: uid141 ret: user.join { name => uid140, type => user.join }
19.11 21:50:21 == NET: uid141 ret: user.join { name => uid141, type => user.join }
19.11 21:50:26 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 141, _type => core/cache.update }
19.11 21:50:26 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 21:50:29 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:50:29 TIME: user.ping 0.32 ms
19.11 21:50:29 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:50:30 ++ NET: uid141 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
19.11 21:50:30 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 141 }, _type => vdl/cache.battle.findRandom }
19.11 21:50:30 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
19.11 21:50:30 TIME: battle.find 0.73 ms
19.11 21:50:30 == NET: uid141 ret: battle.find { type => battle.find, errorCode => ok }
19.11 21:50:32 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:50:32 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:50:32 TIME: user.ping 0.15 ms
19.11 21:50:32 ++ NET: uid140 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
19.11 21:50:32 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 140 }, _type => vdl/cache.battle.findRandom }
19.11 21:50:32 -<<-: battle.enemyEvent { data => { name => uid140, enemy.id => 141, enemy.name => uid141, id => 140, enemy.num => 2, battleId => 28, player => 1 }, _isNotify => true, id => 140, _type => battle.enemyEvent }
19.11 21:50:32 -<<-: battle.enemyEvent { data => { name => uid141, enemy.id => 140, enemy.name => uid140, id => 141, enemy.num => 1, battleId => 28, player => 2 }, _isNotify => true, id => 141, _type => battle.enemyEvent }
19.11 21:50:32 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
19.11 21:50:32 TIME: battle.find 36.39 ms
19.11 21:50:32 == NET: uid140 ret: battle.find { type => battle.find, errorCode => ok }
19.11 21:50:32 == NET: uid141 ret: battle.enemy { data => { name => uid141, enemy.id => 140, enemy.name => uid140, id => 141, enemy.num => 1, battleId => 28, player => 2 }, type => battle.enemy }
19.11 21:50:32 == NET: uid140 ret: battle.enemy { data => { name => uid140, enemy.id => 141, enemy.name => uid141, id => 140, enemy.num => 2, battleId => 28, player => 1 }, type => battle.enemy }
19.11 21:50:41 ++ NET: uid140 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 28 }
19.11 21:50:41 ->>-: vdl/cache.battle.infoRoom { roomId => 28, _type => vdl/cache.battle.infoRoom }
19.11 21:50:41 -<<-: vdl/cache.battle.infoRoom { secondId => 141, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 140 }
19.11 21:50:41 TIME: battle.sendtask 0.78 ms
19.11 21:50:41 == NET: uid140 ret: battle.sendtask { name => throw, type => battle.sendtask, dices => [4,0,3,2,0,5], errorCode => ok, _type => null }
19.11 21:50:41 == NET: uid141 ret: battle.task { name => throw, type => battle.task, dices => [4,0,3,2,0,5], errorCode => ok }
19.11 21:50:41 == NET: uid140 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
19.11 21:50:44 ++ NET: uid140 req: battle.sendtask { dice => 5, from => [7,4], name => swap, side => 2, messageType => battle.sendtask, to => [8,4], battleId => 28 }
19.11 21:50:44 ->>-: vdl/cache.battle.infoRoom { roomId => 28, _type => vdl/cache.battle.infoRoom }
19.11 21:50:44 -<<-: vdl/cache.battle.infoRoom { secondId => 141, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 140 }
19.11 21:50:44 ->>-: vdl/cache.battle.setScores { scores => [0,0], _type => vdl/cache.battle.setScores, player1 => 140, player2 => 141, battleId => 28 }
19.11 21:50:44 -<<-: vdl/cache.battle.setScores { errorCode => ok, _type => vdl/cache.battle.setScores }
19.11 21:50:44 TIME: battle.sendtask 3.08 ms
19.11 21:50:44 == NET: uid140 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
19.11 21:50:44 == NET: uid141 ret: battle.task { dice => 5, from => [7,4], name => swap, side => 2, type => battle.task, dices => [4,0,3,2,0], messageType => battle.sendtask, to => [8,4], battleId => 28 }
19.11 21:50:45 ++ NET: uid140 req: battle.sendtask { dice => 3, from => [8,4], name => swap, side => 2, messageType => battle.sendtask, to => [9,4], battleId => 28 }
19.11 21:50:45 ->>-: vdl/cache.battle.infoRoom { roomId => 28, _type => vdl/cache.battle.infoRoom }
19.11 21:50:45 -<<-: vdl/cache.battle.infoRoom { secondId => 141, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 140 }
19.11 21:50:45 ->>-: vdl/cache.battle.setScores { scores => [0,0], _type => vdl/cache.battle.setScores, player1 => 140, player2 => 141, battleId => 28 }
19.11 21:50:45 -<<-: vdl/cache.battle.setScores { errorCode => ok, _type => vdl/cache.battle.setScores }
19.11 21:50:45 TIME: battle.sendtask 3.29 ms
19.11 21:50:45 == NET: uid140 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
19.11 21:50:45 == NET: uid141 ret: battle.task { dice => 3, from => [8,4], name => swap, side => 2, type => battle.task, dices => [4,0,2,0], messageType => battle.sendtask, to => [9,4], battleId => 28 }
19.11 21:50:46 ++ NET: uid140 req: battle.sendtask { dice => 2, from => [8,4], name => swap, side => 2, messageType => battle.sendtask, to => [9,4], battleId => 28 }
19.11 21:50:46 ->>-: vdl/cache.battle.infoRoom { roomId => 28, _type => vdl/cache.battle.infoRoom }
19.11 21:50:46 -<<-: vdl/cache.battle.infoRoom { secondId => 141, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 140 }
19.11 21:50:46 ->>-: vdl/cache.battle.setScores { scores => [1,0], _type => vdl/cache.battle.setScores, player1 => 140, player2 => 141, battleId => 28 }
19.11 21:50:46 -<<-: battle.endEvent { type => winGame, typeBattle => battle, _isNotify => true, _type => battle.endEvent, win => 140, battleId => 28 }
19.11 21:50:46 -<<-: vdl/cache.battle.setScores { errorCode => ok, _type => vdl/cache.battle.setScores }
19.11 21:50:46 TIME: battle.sendtask 4.28 ms
19.11 21:50:46 == NET: uid140 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
19.11 21:50:46 ->>-: core/cache.get { type => user, v => -1, id => 1, _type => core/cache.get }
19.11 21:50:46 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => --- DEFAULT ATTRIBUTES ---, deleted => false, email => , networktype =>   , password => , isbanned => false, regdate => 2016-08-30 15:45:16.008574+03, language =>   , networkid => , params => { inventory => { list => [] }, attrs => {}, effects => { list => [] } }}, version => 0, id => 1 } }
19.11 21:50:46 ->>-: core/cache.get { type => questdata, v => -1, id => 1, _type => core/cache.get }
19.11 21:50:46 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 1 } }
19.11 21:50:46 ->>-: vdl/cache.battle.infoRoom { roomId => 28, _type => vdl/cache.battle.infoRoom }
19.11 21:50:46 -<<-: vdl/cache.battle.infoRoom { secondId => 141, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 140 }
19.11 21:50:46 ->>-: vdl/cache.battle.finishRoom { roomId => 28, _type => vdl/cache.battle.finishRoom }
19.11 21:50:46 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
19.11 21:50:46 == NET: uid140 ret: battle.end { type => battle.end }
19.11 21:50:46 == NET: uid141 ret: battle.task { dice => 2, from => [8,4], name => swap, side => 2, type => battle.task, dices => [4,0,0], messageType => battle.sendtask, to => [9,4], battleId => 28 }
19.11 21:50:46 == NET: uid141 ret: battle.end { type => battle.end }
19.11 21:50:49 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:50:49 TIME: user.ping 0.17 ms
19.11 21:50:49 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:50:56 TIMER: Check auto-disconnect...
19.11 21:50:56 STATS: vdl.0 cache, locks:6
19.11 21:51:11 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:51:11 TIME: user.ping 0.23 ms
19.11 21:51:11 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:51:32 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:51:32 TIME: user.ping 0.16 ms
19.11 21:51:32 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:51:39 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:51:39 TIME: user.ping 0.21 ms
19.11 21:51:39 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:51:54 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:51:54 TIME: user.ping 0.17 ms
19.11 21:51:54 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:51:56 TIMER: Check auto-disconnect...
19.11 21:51:56 STATS: vdl.0 cache, locks:6
19.11 21:52:16 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:52:16 TIME: user.ping 0.19 ms
19.11 21:52:16 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:52:37 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:52:37 TIME: user.ping 0.16 ms
19.11 21:52:37 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:52:39 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:52:39 TIME: user.ping 0.21 ms
19.11 21:52:39 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:52:56 TIMER: Check auto-disconnect...
19.11 21:52:56 STATS: vdl.0 cache, locks:6
19.11 21:52:59 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:52:59 TIME: user.ping 0.21 ms
19.11 21:52:59 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:53:20 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:53:20 TIME: user.ping 0.18 ms
19.11 21:53:20 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:53:26 ++ NET: uid140 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
19.11 21:53:26 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 140 }, _type => vdl/cache.battle.findRandom }
19.11 21:53:26 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
19.11 21:53:26 STATS: vdl.0 cache connection, 46 calls, total 0.0921540260314941 sec spent, avg 2 ms
19.11 21:53:26 TIME: battle.find 0.55 ms
19.11 21:53:26 == NET: uid140 ret: battle.find { type => battle.find, errorCode => ok }
19.11 21:53:31 ++ NET: uid141 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
19.11 21:53:31 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 141 }, _type => vdl/cache.battle.findRandom }
19.11 21:53:31 -<<-: battle.enemyEvent { data => { name => uid141, enemy.id => 140, enemy.name => uid140, id => 141, enemy.num => 2, battleId => 29, player => 1 }, _isNotify => true, id => 141, _type => battle.enemyEvent }
19.11 21:53:31 -<<-: battle.enemyEvent { data => { name => uid140, enemy.id => 141, enemy.name => uid141, id => 140, enemy.num => 1, battleId => 29, player => 2 }, _isNotify => true, id => 140, _type => battle.enemyEvent }
19.11 21:53:31 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
19.11 21:53:31 TIME: battle.find 36.64 ms
19.11 21:53:31 == NET: uid141 ret: battle.find { type => battle.find, errorCode => ok }
19.11 21:53:31 == NET: uid141 ret: battle.enemy { data => { name => uid141, enemy.id => 140, enemy.name => uid140, id => 141, enemy.num => 2, battleId => 29, player => 1 }, type => battle.enemy }
19.11 21:53:31 == NET: uid140 ret: battle.enemy { data => { name => uid140, enemy.id => 141, enemy.name => uid141, id => 140, enemy.num => 1, battleId => 29, player => 2 }, type => battle.enemy }
19.11 21:53:39 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:53:39 TIME: user.ping 0.22 ms
19.11 21:53:39 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:53:45 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:53:45 TIME: user.ping 0.17 ms
19.11 21:53:45 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:53:55 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:53:55 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:53:55 TIME: user.ping 0.19 ms
19.11 21:53:56 TIMER: Check auto-disconnect...
19.11 21:53:56 STATS: vdl.0 cache, locks:6
19.11 21:54:11 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:54:11 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:54:11 TIME: user.ping 0.12 ms
19.11 21:54:27 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:54:27 TIME: user.ping 0.32 ms
19.11 21:54:27 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:54:43 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:54:43 TIME: user.ping 0.22 ms
19.11 21:54:43 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:54:56 TIMER: Check auto-disconnect...
19.11 21:54:56 STATS: vdl.0 cache, locks:6
19.11 21:55:00 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:55:00 TIME: user.ping 0.19 ms
19.11 21:55:00 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:55:11 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:55:11 TIME: user.ping 0.17 ms
19.11 21:55:11 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:55:16 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:55:16 TIME: user.ping 0.15 ms
19.11 21:55:16 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:55:32 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:55:32 TIME: user.ping 0.2 ms
19.11 21:55:32 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:55:49 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:55:49 TIME: user.ping 0.21 ms
19.11 21:55:49 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:55:56 TIMER: Check auto-disconnect...
19.11 21:55:56 STATS: vdl.0 cache, locks:6
19.11 21:56:05 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:56:05 TIME: user.ping 0.19 ms
19.11 21:56:05 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:56:21 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:56:21 TIME: user.ping 0.19 ms
19.11 21:56:21 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:56:35 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:56:35 TIME: user.ping 0.17 ms
19.11 21:56:35 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:56:38 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 21:56:38 TIME: user.ping 0.2 ms
19.11 21:56:38 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 21:56:56 TIMER: Check auto-disconnect...
19.11 21:56:56 STATS: vdl.0 cache, locks:6
19.11 21:56:56 TIMER: Check auto-disconnect...
19.11 21:56:56 STATS: vdl.0 cache, locks:6
19.11 21:56:56 TIMER: Check auto-disconnect...
19.11 21:56:56 STATS: vdl.0 cache, locks:6
19.11 21:56:56 TIMER: Check auto-disconnect...
19.11 21:56:56 NET: Client (name:uid140 conid:79074606 TCP) disconnected from vdl.0 (clients:1)
19.11 21:56:56 NET: Client (name:uid141 conid:23405183 TCP) disconnected from vdl.0 (clients:0)
19.11 21:56:56 DB: SELECT id FROM battle WHERE firstid=140 OR secondid=140 AND finished <> true
19.11 21:56:56 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=140 OR secondid=140 AND finished <> true, _type => core/server.query }
19.11 21:56:56 -<<-: core/server.query { list => {{ id => 28 }, { id => 29 }, { id => 18 }}, errorCode => ok, _type => core/server.query }
19.11 21:56:56 STATS: vdl.0 cache connection, 48 calls, total 0.130442142486572 sec spent, avg 2.72 ms
19.11 21:56:56 ->>-: vdl/cache.battle.infoRoom { roomId => 18, _type => vdl/cache.battle.infoRoom }
19.11 21:56:56 -<<-: vdl/cache.battle.infoRoom { secondId => 19, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 19 }
19.11 21:56:56 ->>-: vdl/cache.battle.deleteRoom { roomId => 18, _type => vdl/cache.battle.deleteRoom }
19.11 21:56:56 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
19.11 21:56:56 ->>-: vdl/cache.battle.finishRoom { roomId => 18, _type => vdl/cache.battle.finishRoom }
19.11 21:56:56 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
19.11 21:56:56 ->>-: core/user.sendTo { id => 19, _type => core/user.sendTo, msg => { _type => battle.leave } }
19.11 21:56:56 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
19.11 21:56:56 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 140, _type => core/cache.update }
19.11 21:56:56 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
19.11 21:56:56 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 140, _type => core/cache.update }
19.11 21:56:56 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 21:56:56 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 140, _type => core/user.logoutPost }
19.11 21:56:56 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
19.11 21:56:56 DB: SELECT id FROM battle WHERE firstid=141 OR secondid=141 AND finished <> true
19.11 21:56:56 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=141 OR secondid=141 AND finished <> true, _type => core/server.query }
19.11 21:56:56 -<<-: core/server.query { list => {{ id => 29 }}, errorCode => ok, _type => core/server.query }
19.11 21:56:56 ->>-: vdl/cache.battle.infoRoom { roomId => 29, _type => vdl/cache.battle.infoRoom }
19.11 21:56:56 -<<-: vdl/cache.battle.infoRoom { secondId => 140, firstId => 141, _type => vdl/cache.battle.infoRoom, turnId => 141 }
19.11 21:56:56 ->>-: vdl/cache.battle.deleteRoom { roomId => 29, _type => vdl/cache.battle.deleteRoom }
19.11 21:56:56 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
19.11 21:56:56 ->>-: vdl/cache.battle.finishRoom { roomId => 29, _type => vdl/cache.battle.finishRoom }
19.11 21:56:56 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
19.11 21:56:56 ->>-: core/user.sendTo { id => 140, _type => core/user.sendTo, msg => { _type => battle.leave } }
19.11 21:56:56 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
19.11 21:56:56 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 141, _type => core/cache.update }
19.11 21:56:56 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
19.11 21:56:56 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 141, _type => core/cache.update }
19.11 21:56:56 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 21:56:56 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 141, _type => core/user.logoutPost }
19.11 21:56:56 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
19.11 21:56:56 STATS: vdl.0 cache, locks:2
19.11 21:56:56 TIMER: Check auto-disconnect...
19.11 21:56:56 STATS: vdl.0 cache, locks:2
19.11 21:56:56 TIMER: Check auto-disconnect...
19.11 21:56:56 STATS: vdl.0 cache, locks:2
19.11 21:56:56 TIMER: Check auto-disconnect...
19.11 21:56:56 STATS: vdl.0 cache, locks:2
19.11 21:56:56 TIMER: Check auto-disconnect...
