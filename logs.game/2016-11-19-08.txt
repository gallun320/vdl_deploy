19.11 08:00:14 STATS: vdl.0 cache, locks:2
19.11 08:00:29 TIMER: Check auto-disconnect...
19.11 08:01:14 STATS: vdl.0 cache, locks:2
19.11 08:01:29 TIMER: Check auto-disconnect...
19.11 08:02:14 STATS: vdl.0 cache, locks:2
19.11 08:02:29 TIMER: Check auto-disconnect...
19.11 08:03:14 STATS: vdl.0 cache, locks:2
19.11 08:03:29 TIMER: Check auto-disconnect...
19.11 08:04:14 STATS: vdl.0 cache, locks:2
19.11 08:04:29 TIMER: Check auto-disconnect...
19.11 08:05:14 STATS: vdl.0 cache, locks:2
19.11 08:05:29 TIMER: Check auto-disconnect...
19.11 08:06:14 STATS: vdl.0 cache, locks:2
19.11 08:06:29 TIMER: Check auto-disconnect...
19.11 08:07:14 STATS: vdl.0 cache, locks:2
19.11 08:07:29 TIMER: Check auto-disconnect...
19.11 08:08:14 STATS: vdl.0 cache, locks:2
19.11 08:08:29 TIMER: Check auto-disconnect...
19.11 08:09:14 STATS: vdl.0 cache, locks:2
19.11 08:09:29 TIMER: Check auto-disconnect...
19.11 08:10:14 STATS: vdl.0 cache, locks:2
19.11 08:10:29 TIMER: Check auto-disconnect...
19.11 08:11:14 STATS: vdl.0 cache, locks:2
19.11 08:11:29 TIMER: Check auto-disconnect...
19.11 08:12:14 STATS: vdl.0 cache, locks:2
19.11 08:12:29 TIMER: Check auto-disconnect...
19.11 08:13:14 STATS: vdl.0 cache, locks:2
19.11 08:13:29 TIMER: Check auto-disconnect...
19.11 08:14:14 STATS: vdl.0 cache, locks:2
19.11 08:14:29 TIMER: Check auto-disconnect...
19.11 08:15:14 STATS: vdl.0 cache, locks:2
19.11 08:15:29 TIMER: Check auto-disconnect...
19.11 08:16:14 STATS: vdl.0 cache, locks:2
19.11 08:16:29 TIMER: Check auto-disconnect...
19.11 08:17:14 STATS: vdl.0 cache, locks:2
19.11 08:17:29 TIMER: Check auto-disconnect...
19.11 08:18:14 STATS: vdl.0 cache, locks:2
19.11 08:18:29 TIMER: Check auto-disconnect...
19.11 08:19:14 STATS: vdl.0 cache, locks:2
19.11 08:19:29 TIMER: Check auto-disconnect...
19.11 08:20:14 STATS: vdl.0 cache, locks:2
19.11 08:20:29 TIMER: Check auto-disconnect...
19.11 08:21:14 STATS: vdl.0 cache, locks:2
19.11 08:21:29 TIMER: Check auto-disconnect...
19.11 08:22:14 STATS: vdl.0 cache, locks:2
19.11 08:22:29 TIMER: Check auto-disconnect...
19.11 08:23:14 STATS: vdl.0 cache, locks:2
19.11 08:23:29 TIMER: Check auto-disconnect...
19.11 08:24:14 STATS: vdl.0 cache, locks:2
19.11 08:24:29 TIMER: Check auto-disconnect...
19.11 08:25:14 STATS: vdl.0 cache, locks:2
19.11 08:25:29 TIMER: Check auto-disconnect...
19.11 08:26:14 STATS: vdl.0 cache, locks:2
19.11 08:26:29 TIMER: Check auto-disconnect...
19.11 08:27:14 STATS: vdl.0 cache, locks:2
19.11 08:27:29 TIMER: Check auto-disconnect...
19.11 08:28:14 STATS: vdl.0 cache, locks:2
19.11 08:28:29 TIMER: Check auto-disconnect...
19.11 08:29:14 STATS: vdl.0 cache, locks:2
19.11 08:29:29 TIMER: Check auto-disconnect...
19.11 08:30:14 STATS: vdl.0 cache, locks:2
19.11 08:30:29 TIMER: Check auto-disconnect...
19.11 08:31:14 STATS: vdl.0 cache, locks:2
19.11 08:31:29 TIMER: Check auto-disconnect...
19.11 08:32:14 STATS: vdl.0 cache, locks:2
19.11 08:32:29 TIMER: Check auto-disconnect...
19.11 08:33:14 STATS: vdl.0 cache, locks:2
19.11 08:33:29 TIMER: Check auto-disconnect...
19.11 08:34:14 STATS: vdl.0 cache, locks:2
19.11 08:34:29 TIMER: Check auto-disconnect...
19.11 08:35:14 STATS: vdl.0 cache, locks:2
19.11 08:35:29 TIMER: Check auto-disconnect...
19.11 08:36:14 STATS: vdl.0 cache, locks:2
19.11 08:36:29 TIMER: Check auto-disconnect...
19.11 08:37:08 NET: Client (conid:25792403) connected to vdl.0 (clients:1)
19.11 08:37:10 ++ NET: null req: user.register { messageType => user.register }
19.11 08:37:10 DB: SELECT * FROM users
19.11 08:37:10 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
19.11 08:37:10 -<<-: core/server.query { list => {{ city => , password => , name => --- DEFAULT ATTRIBUTES ---, year => , networkid => , params => {"attrs":{},"inventory":{"list":[]}}, "info": {"city":"", "year": "", "email": ""}, networktype =>   , email => , isbanned => false, regdate => 2016-11-10 11:48:59.9391+00, language =>   , id => 1, deleted => false }, { city => , password => uid2, name => uid2, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1478779175,"lastLoginDate":315,"lastLoadDate":1111},"effects":{"list":[]}}, networktype =>   , email => mail, isbanned => false, regdate => 2016-11-10 11:56:09.590311+00, language => en, id => 2, deleted => false }, { city => , password => uid3, name => uid3, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-10 12:08:05.144895+00, language =>   , id => 3, deleted => false }, { city => , password => uid4, name => uid4, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-10 12:24:23.638304+00, language =>   , id => 4, deleted => false }, { city => , password => uid5, name => uid5, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-10 12:28:38.741567+00, language =>   , id => 5, deleted => false }, { city => , password => uid6, name => uid6, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1479119901,"lastLoginDate":319,"lastLoadDate":1115},"effects":{"list":[]}}, networktype =>   , email => mail, isbanned => false, regdate => 2016-11-10 12:31:41.286497+00, language => en, id => 6, deleted => false }, { city => , password => uid13, name => uid13, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-16 11:16:26.870358+00, language =>   , id => 13, deleted => false }, { city => , password => uid14, name => uid14, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-16 11:17:20.119377+00, language =>   , id => 14, deleted => false }, { city => , password => uid7, name => uid7, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-10 13:32:51.765479+00, language =>   , id => 7, deleted => false }, { city => , password => uid11, name => uid11, year => null, networkid => , params => {"info":{"city":"","year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1479067417,"lastLoginDate":319,"lastLoadDate":1115},"effects":{"list":[]}}, networktype =>   , email => null, isbanned => false, regdate => 2016-11-13 20:03:37.670616+00, language => en, id => 11, deleted => false }, { city => , password => uid12, name => uid12, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1479299358,"lastLoginDate":321,"lastLoadDate":1117},"effects":{"list":[]}}, networktype =>   , email => mail, isbanned => false, regdate => 2016-11-14 12:05:08.368578+00, language => en, id => 12, deleted => false }, { city => , password => uid8, name => uid8, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1479405440,"lastLoginDate":322,"lastLoadDate":1118},"effects":{"list":[]}}, networktype =>   , email => mail, isbanned => false, regdate => 2016-11-10 15:37:47.142701+00, language => en, id => 8, deleted => false }, { city => , password => uid10, name => uid10, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1478975056,"lastLoginDate":318,"lastLoadDate":1114},"effects":{"list":[]}}, networktype =>   , email => mail, isbanned => false, regdate => 2016-11-11 16:44:40.114978+00, language => en, id => 10, deleted => false }, { city => , password => uid9, name => uid9, year => , networkid => , params => {"attrs":{"_lastTime.24hr":1479481494,"lastLoginDate":323,"lastLoadDate":1119},"effects":{"list":[]}}, networktype =>   , email => mail, isbanned => false, regdate => 2016-11-11 07:57:55.30687+00, language => en, id => 9, deleted => false }, { city => , password => uid15, name => uid15, year => , networkid => , params => , networktype =>   , email => mail, isbanned => false, regdate => 2016-11-18 15:18:55.183965+00, language =>   , id => 15, deleted => false }}, errorCode => ok, _type => core/server.query }
19.11 08:37:10 STATS: vdl.0 cache connection, 2068 calls, total 1.452791929245 sec spent, avg 0.7 ms
19.11 08:37:10 == NET: null ret: user.auth { type => user.auth, token => dWlkMTY= }
19.11 08:37:10 DB: SELECT ID FROM Users WHERE Name = 'uid16'
19.11 08:37:10 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = 'uid16', _type => core/server.query }
19.11 08:37:10 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
19.11 08:37:10 DB: SELECT nextval('Users_id_seq') AS id
19.11 08:37:10 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
19.11 08:37:10 -<<-: core/server.query { list => {{ id => 16 }}, errorCode => ok, _type => core/server.query }
19.11 08:37:10 ->>-: core/user.register { password => uid16, name => uid16, fullParams => { password => uid16, name => uid16, networkid => , networktype => , messageType => user.register, id => 16 }, networkid => , connectionID => 25792403, networktype => , email => , id => 16, _type => core/user.register }
19.11 08:37:10 -<<-: core/user.register { errorCode => ok, _type => core/user.register }
19.11 08:37:10 -<<-: core/user.registerResponse { password => uid16, name => uid16, _isNotify => true, fullParams => { password => uid16, name => uid16, networkid => , networktype => , messageType => user.register, id => 16 }, networkid => , connectionID => 25792403, networktype => , email => , id => 16, _type => core/user.registerResponse }
19.11 08:37:10 DB: SELECT token FROM tokens WHERE userid = 16
19.11 08:37:10 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 16, _type => core/server.query }
19.11 08:37:10 -<<-: core/server.query { list => {{ token => 34f340cf99e35832f2a3463bb0e839de }, { token => f726a06436a6cf29a53e254a22e1a8f9 }}, errorCode => ok, _type => core/server.query }
19.11 08:37:10 == NET: null ret: user.register { type => user.register, errorCode => ok, token => 34f340cf99e35832f2a3463bb0e839de }
19.11 08:37:10 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTY= }
19.11 08:37:10 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid16' AND Password = 'uid16'
19.11 08:37:10 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid16' AND Password = 'uid16', _type => core/server.query }
19.11 08:37:10 -<<-: core/server.query { list => {{ name => uid16, networkid => , isbanned => false, id => 16 }}, errorCode => ok, _type => core/server.query }
19.11 08:37:10 ->>-: core/user.isOnlineID { id => 16, _type => core/user.isOnlineID }
19.11 08:37:10 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
19.11 08:37:10 ->>-: core/cache.get { type => user, v => -1, id => 16, _type => core/cache.get }
19.11 08:37:10 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid16, deleted => false, school => 1, year => null, email => null, networktype =>   , password => uid16, isbanned => false, regdate => 2016-11-19 08:37:10.286209+00, city => 1, language =>   , region => 1, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => { addAccess => , regionName => null, addDress => , cityName => null, schoolName => null, friendList => [], addWeapon => , addHeader =>  }, attrs => { level => 1, hints => 15 }, effects => { list => [] } }}, version => 19, id => 16 } }
19.11 08:37:10 ->>-: core/cache.get { type => questdata, v => -1, id => 16, _type => core/cache.get }
19.11 08:37:10 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 16 } }
19.11 08:37:10 NET: Client login (conid:25792403, id:16, name:uid16)
19.11 08:37:10 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 16, _type => core/user.loginPost, ipAddr => 91.226.152.104 }
19.11 08:37:10 -<<-: core/user.loginPost { _type => core/user.loginPost }
19.11 08:37:10 DB: SELECT token FROM tokens WHERE userid = 16
19.11 08:37:10 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 16, _type => core/server.query }
19.11 08:37:10 -<<-: core/server.query { list => {{ token => 34f340cf99e35832f2a3463bb0e839de }, { token => f726a06436a6cf29a53e254a22e1a8f9 }}, errorCode => ok, _type => core/server.query }
19.11 08:37:10 DB: SELECT ID FROM TempUserLogins WHERE UserID = 16 AND Date = 'today'::timestamp
19.11 08:37:10 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 16 AND Date = 'today'::timestamp, _type => core/server.query }
19.11 08:37:10 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
19.11 08:37:10 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (16, 'today'::timestamp)
19.11 08:37:10 == NET: uid16 ret: user.login { name => uid16, type => user.login, errorCode => ok, id => 16, token => 34f340cf99e35832f2a3463bb0e839de }
19.11 08:37:10 ++ NET: uid16 req: user.login { messageType => user.login, token => dWlkMTY= }
19.11 08:37:10 DB: SELECT id FROM battle WHERE firstid=16 OR secondid=16 AND finished <> true
19.11 08:37:10 == NET: uid16 ret: user.join { name => uid16, type => user.join }
19.11 08:37:10 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=16 OR secondid=16 AND finished <> true, _type => core/server.query, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (16, 'today'::timestamp), _type => core/server.pending }} }
19.11 08:37:11 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
19.11 08:37:11 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
19.11 08:37:11 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
19.11 08:37:11 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
19.11 08:37:11 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 472
Called from modules/VDLBattleModule.hx line 485
Called from snipe/slave/Server.hx line 1009
19.11 08:37:11 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1479544631, lastLoginDate => 324, lastLoadDate => 1120 } }}, type => user, unlock => true, id => 16, _type => core/cache.update }
19.11 08:37:11 -<<-: core/cache.update { errorCode => ok, version => 20, _type => core/cache.update }
19.11 08:37:11 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 16, _type => core/cache.update }
19.11 08:37:11 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 08:37:11 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 16, _type => core/user.logoutPost }
19.11 08:37:11 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
19.11 08:37:11 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid16' AND Password = 'uid16'
19.11 08:37:11 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid16' AND Password = 'uid16', _type => core/server.query }
19.11 08:37:11 -<<-: core/server.query { list => {{ name => uid16, networkid => , isbanned => false, id => 16 }}, errorCode => ok, _type => core/server.query }
19.11 08:37:11 ->>-: core/user.isOnlineID { id => 16, _type => core/user.isOnlineID }
19.11 08:37:11 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
19.11 08:37:11 ->>-: core/cache.get { type => user, v => -1, id => 16, _type => core/cache.get }
19.11 08:37:11 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid16, deleted => false, school => 1, year => null, email => null, networktype =>   , password => uid16, isbanned => false, regdate => 2016-11-19 08:37:10.286209+00, city => 1, language => en, region => 1, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => { addAccess => , regionName => null, addDress => , cityName => null, schoolName => null, friendList => [], addWeapon => , addHeader =>  }, attrs => { level => 1, _lastTime.24hr => 1479544631, lastLoginDate => 324, lastLoadDate => 1120, hints => 15 }, effects => { list => [] } }}, version => 20, id => 16 } }
19.11 08:37:11 ->>-: core/cache.get { type => questdata, v => -1, id => 16, _type => core/cache.get }
19.11 08:37:11 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 16 } }
19.11 08:37:11 NET: Client login (conid:25792403, id:16, name:uid16)
19.11 08:37:11 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 16, _type => core/user.loginPost, ipAddr => 91.226.152.104 }
19.11 08:37:11 -<<-: core/user.loginPost { _type => core/user.loginPost }
19.11 08:37:11 DB: SELECT token FROM tokens WHERE userid = 16
19.11 08:37:11 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 16, _type => core/server.query }
19.11 08:37:11 -<<-: core/server.query { list => {{ token => 34f340cf99e35832f2a3463bb0e839de }, { token => f726a06436a6cf29a53e254a22e1a8f9 }}, errorCode => ok, _type => core/server.query }
19.11 08:37:14 STATS: vdl.0 cache, locks:4
19.11 08:37:19 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 16, _type => core/cache.update }
19.11 08:37:19 -<<-: core/cache.update { errorCode => ok, version => 21, _type => core/cache.update }
19.11 08:37:21 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:37:21 TIME: user.ping 0.1 ms
19.11 08:37:25 ++ NET: uid16 req: battle.find { type => random, messageType => battle.find, roundTime => 30 }
19.11 08:37:25 ->>-: vdl/cache.battle.findRandom { user => { time => 30, player => 16 }, _type => vdl/cache.battle.findRandom }
19.11 08:37:26 -<<-: battle.enemyEvent { data => { name => uid16, enemy.id => 8, enemy.name => uid8, id => 16, enemy.num => 2, battleId => 14, player => 1 }, _isNotify => true, id => 16, _type => battle.enemyEvent }
19.11 08:37:26 -<<-: tournament.leaveEvent { type => winGame, typeBattle => battle, _isNotify => true, id => 16, _type => tournament.leaveEvent, battleId => 14 }
19.11 08:37:26 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
19.11 08:37:26 TIME: battle.find 9.9 ms
19.11 08:37:26 ->>-: core/user.sendTo { id => 16, _type => core/user.sendTo, msg => { data => { name => uid16, enemy.id => 8, enemy.name => uid8, id => 16, enemy.num => 2, battleId => 14, player => 1 }, _type => battle.enemy } }
19.11 08:37:26 -<<-: core/user.sendTo { _isNotify => true, id => 16, _type => core/user.sendTo, msg => { data => { name => uid16, enemy.id => 8, enemy.name => uid8, id => 16, enemy.num => 2, battleId => 14, player => 1 }, _type => battle.enemy } }
19.11 08:37:26 -<<-: core/user.sendTo { errorCode => ok, _type => core/user.sendTo }
19.11 08:37:26 ->>-: core/user.sendTo { id => 16, _type => core/user.sendTo, msg => { _type => battle.leave } }
19.11 08:37:26 -<<-: core/user.sendTo { _isNotify => true, id => 16, _type => core/user.sendTo, msg => { _type => battle.leave } }
19.11 08:37:26 -<<-: core/user.sendTo { errorCode => ok, _type => core/user.sendTo }
19.11 08:37:26 ->>-: core/cache.get { type => user, v => -1, id => 1, _type => core/cache.get }
19.11 08:37:26 -<<-: core/cache.get { errorCode => lockTimeout, _type => core/cache.get }
19.11 08:37:26 TRACE: Invalid field access : id
19.11 08:37:26 TRACE: 
Called from modules/VDLTournamentModule.hx line 101
Called from a C function
Called from snipe/slave/Server.hx line 688
Called from snipe/slave/CacheConnection.hx line 303
Called from snipe/slave/ThreadServerModified.hx line 202
19.11 08:37:29 TIMER: Check auto-disconnect...
19.11 08:37:52 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:37:52 TIME: user.ping 0.14 ms
19.11 08:38:14 STATS: vdl.0 cache, locks:4
19.11 08:38:24 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:38:24 TIME: user.ping 0.13 ms
19.11 08:38:29 TIMER: Check auto-disconnect...
19.11 08:38:57 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:38:57 TIME: user.ping 0.13 ms
19.11 08:39:14 STATS: vdl.0 cache, locks:4
19.11 08:39:28 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:39:28 TIME: user.ping 0.11 ms
19.11 08:39:29 TIMER: Check auto-disconnect...
19.11 08:39:45 NET: Client (name:uid16 conid:25792403 TCP) disconnected from vdl.0 (clients:0)
19.11 08:39:45 DB: SELECT id FROM battle WHERE firstid=16 OR secondid=16 AND finished <> true
19.11 08:39:45 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=16 OR secondid=16 AND finished <> true, _type => core/server.query }
19.11 08:39:45 -<<-: core/server.query { list => {{ id => 14 }}, errorCode => ok, _type => core/server.query }
19.11 08:39:45 STATS: vdl.0 cache connection, 2096 calls, total 1.48715901374817 sec spent, avg 0.71 ms
19.11 08:39:45 ->>-: vdl/cache.battle.infoRoom { roomId => 14, _type => vdl/cache.battle.infoRoom }
19.11 08:39:45 -<<-: vdl/cache.battle.infoRoom { secondId => 8, firstId => 16, _type => vdl/cache.battle.infoRoom, turnId => 16 }
19.11 08:39:45 ->>-: vdl/cache.battle.deleteRoom { roomId => 14, _type => vdl/cache.battle.deleteRoom }
19.11 08:39:45 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
19.11 08:39:45 ->>-: vdl/cache.battle.finishRoom { roomId => 14, _type => vdl/cache.battle.finishRoom }
19.11 08:39:45 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
19.11 08:39:45 ->>-: core/user.sendTo { id => 8, _type => core/user.sendTo, msg => { _type => battle.leave } }
19.11 08:39:45 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
19.11 08:39:45 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 16, _type => core/cache.update }
19.11 08:39:45 -<<-: core/cache.update { errorCode => ok, version => 22, _type => core/cache.update }
19.11 08:39:45 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 16, _type => core/cache.update }
19.11 08:39:45 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
19.11 08:39:45 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 16, _type => core/user.logoutPost }
19.11 08:39:45 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
19.11 08:39:58 NET: Client (conid:60511303) connected to vdl.0 (clients:1)
19.11 08:40:00 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTY= }
19.11 08:40:00 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid16' AND Password = 'uid16'
19.11 08:40:00 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid16' AND Password = 'uid16', _type => core/server.query }
19.11 08:40:00 -<<-: core/server.query { list => {{ name => uid16, networkid => , isbanned => false, id => 16 }}, errorCode => ok, _type => core/server.query }
19.11 08:40:00 ->>-: core/user.isOnlineID { id => 16, _type => core/user.isOnlineID }
19.11 08:40:00 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
19.11 08:40:00 ->>-: core/cache.get { type => user, v => -1, id => 16, _type => core/cache.get }
19.11 08:40:00 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid16, deleted => false, year => , email => mail, networktype =>   , password => uid16, isbanned => false, regdate => 2016-11-19 08:37:10.286209+00, city => , language =>   , networkid => , params => {}}, version => 0, id => 16 } }
19.11 08:40:00 ->>-: core/cache.get { type => questdata, v => -1, id => 16, _type => core/cache.get }
19.11 08:40:00 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 16 } }
19.11 08:40:00 NET: Client login (conid:60511303, id:16, name:uid16)
19.11 08:40:00 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 16, _type => core/user.loginPost, ipAddr => 91.226.152.104 }
19.11 08:40:00 -<<-: core/user.loginPost { _type => core/user.loginPost }
19.11 08:40:00 DB: SELECT token FROM tokens WHERE userid = 16
19.11 08:40:00 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 16, _type => core/server.query }
19.11 08:40:00 -<<-: core/server.query { list => {{ token => 34f340cf99e35832f2a3463bb0e839de }, { token => f726a06436a6cf29a53e254a22e1a8f9 }}, errorCode => ok, _type => core/server.query }
19.11 08:40:00 DB: SELECT ID FROM TempUserLogins WHERE UserID = 16 AND Date = 'today'::timestamp
19.11 08:40:00 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 16 AND Date = 'today'::timestamp, _type => core/server.query }
19.11 08:40:00 -<<-: core/server.query { list => {{ id => 147 }}, errorCode => ok, _type => core/server.query }
19.11 08:40:00 == NET: uid16 ret: user.login { name => uid16, type => user.login, errorCode => ok, id => 16, token => 34f340cf99e35832f2a3463bb0e839de }
19.11 08:40:00 == NET: uid16 ret: user.join { name => uid16, type => user.join }
19.11 08:40:09 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1479544800, lastLoginDate => 324, lastLoadDate => 1120 }, effects => { list => [] } }}, type => user, unlock => false, id => 16, _type => core/cache.update }
19.11 08:40:09 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 08:40:10 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:40:10 TIME: user.ping 0.12 ms
19.11 08:40:10 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:40:14 STATS: vdl.0 cache, locks:4
19.11 08:40:18 ++ NET: uid16 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
19.11 08:40:18 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
19.11 08:40:18 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid16, id => 16 }], battleActive => null, rounddate => 2016-09-11 16:00, startdate => 2016-09-11 16:00 },{ name => тест, type => once, winner => -1, battleFinished => null, round => 1, id => 2, status => starting, userList => [], battleActive => null, rounddate => 2016-11-19 15:29, startdate => 2016-11-18 15:29 }], count => 2, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
19.11 08:40:18 TIME: tournament.getAvailableTournament 2.78 ms
19.11 08:40:18 == NET: uid16 ret: tournament.getAvailableTournament { list => [{ name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid16, id => 16 }], battleActive => null, rounddate => 2016-09-11 16:00, startdate => 2016-09-11 16:00 },{ name => тест, type => once, winner => -1, battleFinished => null, round => 1, id => 2, status => starting, userList => [], battleActive => null, rounddate => 2016-11-19 15:29, startdate => 2016-11-18 15:29 }], count => 2, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
19.11 08:40:29 TIMER: Check auto-disconnect...
19.11 08:40:34 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:40:34 TIME: user.ping 0.13 ms
19.11 08:40:34 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:41:01 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:41:01 TIME: user.ping 0.12 ms
19.11 08:41:01 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:41:14 STATS: vdl.0 cache, locks:4
19.11 08:41:22 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:41:22 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:41:22 TIME: user.ping 0.13 ms
19.11 08:41:29 TIMER: Check auto-disconnect...
19.11 08:41:43 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:41:43 TIME: user.ping 0.12 ms
19.11 08:41:43 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:42:14 STATS: vdl.0 cache, locks:4
19.11 08:42:29 TIMER: Check auto-disconnect...
19.11 08:43:14 STATS: vdl.0 cache, locks:4
19.11 08:43:29 TIMER: Check auto-disconnect...
19.11 08:44:14 STATS: vdl.0 cache, locks:4
19.11 08:44:29 TIMER: Check auto-disconnect...
19.11 08:44:47 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:44:47 TIME: user.ping 0.15 ms
19.11 08:44:47 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:45:14 STATS: vdl.0 cache, locks:4
19.11 08:45:15 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:45:15 TIME: user.ping 0.15 ms
19.11 08:45:15 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:45:29 TIMER: Check auto-disconnect...
19.11 08:45:45 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:45:45 TIME: user.ping 0.15 ms
19.11 08:45:45 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:46:14 STATS: vdl.0 cache, locks:4
19.11 08:46:15 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:46:15 TIME: user.ping 0.15 ms
19.11 08:46:15 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:46:29 TIMER: Check auto-disconnect...
19.11 08:46:45 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:46:45 TIME: user.ping 0.14 ms
19.11 08:46:45 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:47:14 STATS: vdl.0 cache, locks:4
19.11 08:47:16 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:47:16 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:47:16 TIME: user.ping 0.14 ms
19.11 08:47:29 TIMER: Check auto-disconnect...
19.11 08:47:46 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:47:46 TIME: user.ping 0.12 ms
19.11 08:47:46 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:48:14 STATS: vdl.0 cache, locks:4
19.11 08:48:15 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:48:15 TIME: user.ping 0.14 ms
19.11 08:48:15 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:48:29 TIMER: Check auto-disconnect...
19.11 08:48:50 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:48:50 TIME: user.ping 0.13 ms
19.11 08:48:50 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:49:14 STATS: vdl.0 cache, locks:4
19.11 08:49:28 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:49:28 TIME: user.ping 0.16 ms
19.11 08:49:28 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:49:29 TIMER: Check auto-disconnect...
19.11 08:49:59 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:49:59 TIME: user.ping 0.14 ms
19.11 08:49:59 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:50:14 STATS: vdl.0 cache, locks:4
19.11 08:50:29 TIMER: Check auto-disconnect...
19.11 08:50:30 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:50:30 TIME: user.ping 0.13 ms
19.11 08:50:30 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:51:00 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:51:00 TIME: user.ping 0.13 ms
19.11 08:51:00 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:51:14 STATS: vdl.0 cache, locks:4
19.11 08:51:29 TIMER: Check auto-disconnect...
19.11 08:51:30 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:51:30 TIME: user.ping 0.13 ms
19.11 08:51:30 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:52:01 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:52:01 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:52:01 TIME: user.ping 0.12 ms
19.11 08:52:14 STATS: vdl.0 cache, locks:4
19.11 08:52:29 TIMER: Check auto-disconnect...
19.11 08:52:32 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:52:32 TIME: user.ping 0.15 ms
19.11 08:52:32 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:53:02 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:53:02 TIME: user.ping 0.13 ms
19.11 08:53:02 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:53:14 STATS: vdl.0 cache, locks:4
19.11 08:53:29 TIMER: Check auto-disconnect...
19.11 08:53:32 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:53:32 TIME: user.ping 0.11 ms
19.11 08:53:32 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:54:03 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:54:03 TIME: user.ping 0.12 ms
19.11 08:54:03 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:54:14 STATS: vdl.0 cache, locks:4
19.11 08:54:29 TIMER: Check auto-disconnect...
19.11 08:54:33 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:54:33 TIME: user.ping 0.13 ms
19.11 08:54:33 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:55:03 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:55:03 TIME: user.ping 0.14 ms
19.11 08:55:03 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:55:14 STATS: vdl.0 cache, locks:4
19.11 08:55:29 TIMER: Check auto-disconnect...
19.11 08:55:34 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:55:34 TIME: user.ping 0.15 ms
19.11 08:55:34 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:56:03 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:56:03 TIME: user.ping 0.13 ms
19.11 08:56:03 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:56:14 STATS: vdl.0 cache, locks:4
19.11 08:56:29 TIMER: Check auto-disconnect...
19.11 08:56:33 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:56:33 TIME: user.ping 0.13 ms
19.11 08:56:33 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:57:02 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:57:02 TIME: user.ping 0.12 ms
19.11 08:57:02 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:57:14 STATS: vdl.0 cache, locks:4
19.11 08:57:29 TIMER: Check auto-disconnect...
19.11 08:57:33 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:57:33 TIME: user.ping 0.14 ms
19.11 08:57:33 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:58:03 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:58:03 TIME: user.ping 0.12 ms
19.11 08:58:03 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:58:14 STATS: vdl.0 cache, locks:4
19.11 08:58:29 TIMER: Check auto-disconnect...
19.11 08:58:33 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:58:33 TIME: user.ping 0.18 ms
19.11 08:58:33 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:59:03 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:59:03 TIME: user.ping 0.13 ms
19.11 08:59:03 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
19.11 08:59:14 STATS: vdl.0 cache, locks:4
19.11 08:59:29 TIMER: Check auto-disconnect...
19.11 08:59:34 ++ NET: uid16 req: user.ping { messageType => user.ping, msg => ok }
19.11 08:59:34 TIME: user.ping 0.12 ms
19.11 08:59:34 == NET: uid16 ret: user.ping { type => user.ping, errorCode => ok }
