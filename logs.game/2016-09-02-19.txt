02.09 19:00:56 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 19:00:56 -<<-: server.login ok
02.09 19:00:56 DB: SELECT * FROM LocalizationStrings
02.09 19:00:56 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 TIMER: Starting timer...
02.09 19:00:56 TIMER: Timer running...
02.09 19:00:56 DB: SELECT * FROM GameVars
02.09 19:00:56 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 19:00:56 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 19:00:56 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 19:00:56 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 19:00:56 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 19:00:56 -<<-: core/quest.getDaily ok
02.09 19:00:56 DB: SELECT * FROM UserAttributeTypes
02.09 19:00:56 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 DB: SELECT * FROM UserVariableTypes
02.09 19:00:56 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 19:00:56 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 DB: SELECT * FROM ItemGroups
02.09 19:00:56 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 DB: SELECT * FROM Bundles ORDER BY ID
02.09 19:00:56 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 19:00:56 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 SHOP: loading items...
02.09 19:00:56 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 19:00:56 -<<-: core/shop.getList ok
02.09 19:00:56 SHOP: 0 items loaded (0 sec)
02.09 19:00:56 DB: SELECT * FROM EffectAttributeTypes
02.09 19:00:56 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 DB: SELECT * FROM Effects
02.09 19:00:56 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
02.09 19:00:56 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
02.09 19:00:56 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 DB: SELECT * FROM Badges
02.09 19:00:56 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
02.09 19:00:56 -<<-: core/server.query ok
02.09 19:00:56 TIMER: Check auto-disconnect...
02.09 19:00:56 STATS: vdl.0 cache, locks:0
02.09 19:00:56 TIMER: Check auto-disconnect...
02.09 19:00:56 STATS: vdl.0 cache, locks:0
02.09 19:03:47 NET: Client (conid:90024408) connected to vdl.0 (clients:1)
02.09 19:03:48 NET: Client (name:null conid:90024408 TCP) disconnected from vdl.0 (clients:0)
02.09 19:03:48 NET: Client (conid:57080201) connected to vdl.0 (clients:1)
02.09 19:03:56 TIMER: Check auto-disconnect...
02.09 19:03:56 STATS: vdl.0 cache, locks:0
02.09 19:04:37 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
02.09 19:04:37 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
02.09 19:04:37 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
02.09 19:04:37 -<<-: core/server.query ok
02.09 19:04:37 STATS: vdl.0 cache connection, 21 calls, total 0.0365512371063232 sec spent, avg 1.74 ms
02.09 19:04:37 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
02.09 19:04:37 -<<-: core/user.isOnlineID ok
02.09 19:04:37 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
02.09 19:04:37 -<<-: core/cache.get ok
02.09 19:04:37 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
02.09 19:04:37 -<<-: core/cache.get ok
02.09 19:04:37 NET: Client login (conid:57080201, id:3, name:test2)
02.09 19:04:37 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
02.09 19:04:37 -<<-: core/user.loginPost null
02.09 19:04:37 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
02.09 19:04:37 == NET: test2 ret: user.join { name => test2, type => user.join }
02.09 19:04:37 ++ NET: test2 req: battle.find { messageType => battle.find }
02.09 19:04:37 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 19:04:37 -<<-: vdl/cache.battle.find { list => {}, count => 0, errorCode => not, _type => vdl/cache.battle.find }
02.09 19:04:37 ->>-: vdl/cache.battle.create { selfId => 3, _type => vdl/cache.battle.create }
02.09 19:04:37 -<<-: vdl/cache.battle.create { room => 37, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 19:04:37 TIME: battle.find 31.87 ms
02.09 19:04:37 == NET: test2 ret: battle.find { room => 37, type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 19:04:46 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 3, _type => core/cache.update }
02.09 19:04:46 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 19:04:56 TIMER: Check auto-disconnect...
02.09 19:04:56 STATS: vdl.0 cache, locks:2
02.09 19:05:07 NET: Client (conid:87957042) connected to vdl.0 (clients:2)
02.09 19:05:08 NET: Client (name:null conid:87957042 TCP) disconnected from vdl.0 (clients:1)
02.09 19:05:08 NET: Client (conid:35683038) connected to vdl.0 (clients:2)
02.09 19:05:11 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
02.09 19:05:11 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
02.09 19:05:11 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
02.09 19:05:11 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
02.09 19:05:11 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
02.09 19:05:11 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
02.09 19:05:11 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
02.09 19:05:11 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472829608, lastLoginDate => 246, lastLoadDate => 903 }, effects => { list => [] } }}, version => 0, id => 2 } }
02.09 19:05:11 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
02.09 19:05:11 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
02.09 19:05:11 NET: Client login (conid:35683038, id:2, name:test1)
02.09 19:05:11 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
02.09 19:05:11 -<<-: core/user.loginPost { _type => core/user.loginPost }
02.09 19:05:11 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
02.09 19:05:11 == NET: test2 ret: user.join { name => test1, type => user.join }
02.09 19:05:11 == NET: test1 ret: user.join { name => test2, type => user.join }
02.09 19:05:11 == NET: test1 ret: user.join { name => test1, type => user.join }
02.09 19:05:11 ++ NET: test1 req: battle.find { messageType => battle.find }
02.09 19:05:11 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 19:05:11 -<<-: vdl/cache.battle.find { list => [{ id => 37, first => 3 }], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
02.09 19:05:11 ->>-: vdl/cache.battle.join { roomId => 37, selfId => 2, _type => vdl/cache.battle.join }
02.09 19:05:11 -<<-: vdl/cache.battle.join { room => 37, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 19:05:11 DB: SELECT name FROM users WHERE id=2
02.09 19:05:11 ->>-: core/server.query { q => SELECT name FROM users WHERE id=2, _type => core/server.query }
02.09 19:05:11 -<<-: core/server.query { list => {{ name => test1 }}, errorCode => ok, _type => core/server.query }
02.09 19:05:11 DB: SELECT name FROM users WHERE id=3
02.09 19:05:11 ->>-: core/server.query { q => SELECT name FROM users WHERE id=3, _type => core/server.query }
02.09 19:05:11 -<<-: core/server.query { list => {{ name => test2 }}, errorCode => ok, _type => core/server.query }
02.09 19:05:11 TIME: battle.find 7.92 ms
02.09 19:05:11 == NET: test1 ret: battle.enemy { name => test1, type => battle.enemy, enemy.id => 2, enemy.name => test2, enemy.num => 1 }
02.09 19:05:11 == NET: test2 ret: battle.enemy { name => test2, type => battle.enemy, enemy.id => 3, enemy.name => test1, enemy.num => 2 }
02.09 19:05:11 == NET: test1 ret: battle.find { room => 37, type => battle.find, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 19:05:21 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
02.09 19:05:21 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 19:05:21 ++ NET: test2 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 37, name => throw, side => 2, dices => 243040, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 19:05:21 ->>-: vdl/cache.battle.infoRoom { roomId => 37, _type => vdl/cache.battle.infoRoom }
02.09 19:05:21 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:05:21 TIME: battle.sendtask 0.52 ms
02.09 19:05:21 == NET: test1 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 37, name => throw, side => 2, type => battle.task, dices => 243040, to => (0.0, 0.0), diceID => 0 }
02.09 19:05:21 == NET: test2 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 19:05:56 TIMER: Check auto-disconnect...
02.09 19:05:56 STATS: vdl.0 cache, locks:4
02.09 19:05:56 TIMER: Check auto-disconnect...
02.09 19:05:56 STATS: vdl.0 cache, locks:4
02.09 19:05:56 TIMER: Check auto-disconnect...
02.09 19:05:56 STATS: vdl.0 cache, locks:4
02.09 19:08:22 ++ NET: test2 req: battle.end { roomId => 37, scoreSecondPlayer => 0, messageType => battle.end, scoreFirstPlayer => 0 }
02.09 19:08:22 TIME: battle.end 0.06 ms
02.09 19:10:35 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 19:10:35 -<<-: server.login ok
02.09 19:10:35 DB: SELECT * FROM LocalizationStrings
02.09 19:10:35 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 TIMER: Starting timer...
02.09 19:10:35 DB: SELECT * FROM GameVars
02.09 19:10:35 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 19:10:35 TIMER: Timer running...
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 19:10:35 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 19:10:35 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 19:10:35 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 19:10:35 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 19:10:35 -<<-: core/quest.getDaily ok
02.09 19:10:35 DB: SELECT * FROM UserAttributeTypes
02.09 19:10:35 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 DB: SELECT * FROM UserVariableTypes
02.09 19:10:35 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 19:10:35 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 DB: SELECT * FROM ItemGroups
02.09 19:10:35 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 DB: SELECT * FROM Bundles ORDER BY ID
02.09 19:10:35 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 19:10:35 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 SHOP: loading items...
02.09 19:10:35 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 19:10:35 -<<-: core/shop.getList ok
02.09 19:10:35 SHOP: 0 items loaded (0 sec)
02.09 19:10:35 DB: SELECT * FROM EffectAttributeTypes
02.09 19:10:35 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 DB: SELECT * FROM Effects
02.09 19:10:35 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
02.09 19:10:35 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
02.09 19:10:35 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 DB: SELECT * FROM Badges
02.09 19:10:35 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
02.09 19:10:35 -<<-: core/server.query ok
02.09 19:10:35 TIMER: Check auto-disconnect...
02.09 19:10:35 STATS: vdl.0 cache, locks:0
02.09 19:10:35 TIMER: Check auto-disconnect...
02.09 19:10:35 STATS: vdl.0 cache, locks:0
02.09 19:13:00 NET: Client (conid:53796209) connected to vdl.0 (clients:1)
02.09 19:13:00 NET: Client (name:null conid:53796209 TCP) disconnected from vdl.0 (clients:0)
02.09 19:13:00 NET: Client (conid:91206944) connected to vdl.0 (clients:1)
02.09 19:13:04 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
02.09 19:13:04 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
02.09 19:13:04 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
02.09 19:13:04 -<<-: core/server.query ok
02.09 19:13:04 STATS: vdl.0 cache connection, 21 calls, total 0.0211269855499268 sec spent, avg 1.01 ms
02.09 19:13:04 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
02.09 19:13:04 -<<-: core/user.isOnlineID ok
02.09 19:13:04 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
02.09 19:13:04 -<<-: core/cache.get ok
02.09 19:13:04 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
02.09 19:13:04 -<<-: core/cache.get ok
02.09 19:13:04 NET: Client login (conid:91206944, id:3, name:test2)
02.09 19:13:04 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
02.09 19:13:04 -<<-: core/user.loginPost null
02.09 19:13:04 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
02.09 19:13:04 == NET: test2 ret: user.join { name => test2, type => user.join }
02.09 19:13:05 ++ NET: test2 req: battle.find { messageType => battle.find }
02.09 19:13:05 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 19:13:05 -<<-: vdl/cache.battle.find { list => {}, count => 0, errorCode => not, _type => vdl/cache.battle.find }
02.09 19:13:05 ->>-: vdl/cache.battle.create { selfId => 3, _type => vdl/cache.battle.create }
02.09 19:13:05 -<<-: vdl/cache.battle.create { room => 38, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 19:13:05 TIME: battle.find 42.09 ms
02.09 19:13:05 == NET: test2 ret: battle.find { room => 38, type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 19:13:10 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 3, _type => core/cache.update }
02.09 19:13:10 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 19:13:27 NET: Client (conid:15698331) connected to vdl.0 (clients:2)
02.09 19:13:27 NET: Client (name:null conid:15698331 TCP) disconnected from vdl.0 (clients:1)
02.09 19:13:28 NET: Client (conid:66530935) connected to vdl.0 (clients:2)
02.09 19:13:30 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
02.09 19:13:30 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
02.09 19:13:30 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
02.09 19:13:30 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
02.09 19:13:30 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
02.09 19:13:30 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
02.09 19:13:30 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
02.09 19:13:30 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472829608, lastLoginDate => 246, lastLoadDate => 903 }, effects => { list => [] } }}, version => 0, id => 2 } }
02.09 19:13:30 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
02.09 19:13:30 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
02.09 19:13:30 NET: Client login (conid:66530935, id:2, name:test1)
02.09 19:13:30 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
02.09 19:13:30 -<<-: core/user.loginPost { _type => core/user.loginPost }
02.09 19:13:30 == NET: test2 ret: user.join { name => test1, type => user.join }
02.09 19:13:30 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
02.09 19:13:30 == NET: test1 ret: user.join { name => test2, type => user.join }
02.09 19:13:30 == NET: test1 ret: user.join { name => test1, type => user.join }
02.09 19:13:32 ++ NET: test1 req: battle.find { messageType => battle.find }
02.09 19:13:32 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 19:13:32 -<<-: vdl/cache.battle.find { list => [{ id => 38, first => 3 }], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
02.09 19:13:32 ->>-: vdl/cache.battle.join { roomId => 38, selfId => 2, _type => vdl/cache.battle.join }
02.09 19:13:32 -<<-: vdl/cache.battle.join { room => 38, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 19:13:32 DB: SELECT name FROM users WHERE id=2
02.09 19:13:32 ->>-: core/server.query { q => SELECT name FROM users WHERE id=2, _type => core/server.query }
02.09 19:13:32 -<<-: core/server.query { list => {{ name => test1 }}, errorCode => ok, _type => core/server.query }
02.09 19:13:32 DB: SELECT name FROM users WHERE id=3
02.09 19:13:32 ->>-: core/server.query { q => SELECT name FROM users WHERE id=3, _type => core/server.query }
02.09 19:13:32 -<<-: core/server.query { list => {{ name => test2 }}, errorCode => ok, _type => core/server.query }
02.09 19:13:32 TIME: battle.find 8.47 ms
02.09 19:13:32 == NET: test1 ret: battle.enemy { name => test1, type => battle.enemy, enemy.id => 2, enemy.name => test2, enemy.num => 1 }
02.09 19:13:32 == NET: test2 ret: battle.enemy { name => test2, type => battle.enemy, enemy.id => 3, enemy.name => test1, enemy.num => 2 }
02.09 19:13:32 == NET: test1 ret: battle.find { room => 38, type => battle.find, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 19:13:35 TIMER: Check auto-disconnect...
02.09 19:13:35 STATS: vdl.0 cache, locks:4
02.09 19:13:36 ++ NET: test2 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 38, name => throw, side => 2, dices => 011055, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 19:13:36 ->>-: vdl/cache.battle.infoRoom { roomId => 38, _type => vdl/cache.battle.infoRoom }
02.09 19:13:36 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:13:36 TIME: battle.sendtask 0.79 ms
02.09 19:13:36 == NET: test2 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 19:13:36 == NET: test1 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 38, name => throw, side => 2, type => battle.task, dices => 011055, to => (0.0, 0.0), diceID => 0 }
02.09 19:13:40 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
02.09 19:13:40 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 19:14:35 TIMER: Check auto-disconnect...
02.09 19:14:35 STATS: vdl.0 cache, locks:4
02.09 19:14:42 ++ NET: test2 req: battle.end { roomId => 38, scoreSecondPlayer => 0, messageType => battle.end, scoreFirstPlayer => 0 }
02.09 19:14:42 ->>-: vdl/cache.battle.infoRoom { roomId => 38, _type => vdl/cache.battle.infoRoom }
02.09 19:14:42 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:14:42 STATS: vdl.0 cache connection, 40 calls, total 0.0893359184265137 sec spent, avg 2.23 ms
02.09 19:14:42 DB: INSERT INTO statistics VALUES ('', 3,2,38,{ scoresSecond => null, scoresFirst => null })
02.09 19:14:42 ->>-: core/server.query { q => INSERT INTO statistics VALUES ('', 3,2,38,{ scoresSecond => null, scoresFirst => null }), _type => core/server.query }
02.09 19:14:42 -<<-: core/server.query { errorCode => ok, _type => core/server.query }
02.09 19:14:42 ->>-: vdl/cache.battle.finishRoom { roomId => 38, _type => vdl/cache.battle.finishRoom }
02.09 19:14:42 -<<-: vdl/cache.battle.finishRoom { errorCode => true, _type => vdl/cache.battle.finishRoom }
02.09 19:14:42 ->>-: vdl/cache.battle.deleteRoom { roomId => 38, _type => vdl/cache.battle.deleteRoom }
02.09 19:14:42 -<<-: vdl/cache.battle.deleteRoom { errorCode => true, _type => vdl/cache.battle.deleteRoom }
02.09 19:14:42 TIME: battle.end 61.26 ms
02.09 19:14:42 == NET: test2 ret: battle.end { type => battle.end, errorCode => ok }
02.09 19:14:42 == NET: test1 ret: null { type => null }
02.09 19:15:35 TIMER: Check auto-disconnect...
02.09 19:15:35 STATS: vdl.0 cache, locks:4
02.09 19:15:48 ++ NET: test2 req: battle.sendtask { dice => 48, from => (0.0, 0.0), roomId => 38, name => choose, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 19:15:48 ->>-: vdl/cache.battle.infoRoom { roomId => 38, _type => vdl/cache.battle.infoRoom }
02.09 19:15:48 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
02.09 19:15:48 STATS: vdl.0 cache connection, 44 calls, total 0.151624202728271 sec spent, avg 3.45 ms
02.09 19:15:48 TRACE: battle.sendtask : cacheRequest exception { roomId => 38, _type => vdl/cache.battle.infoRoom }
02.09 19:15:48 TRACE: battle.sendtask : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 195
Called from modules/VDLBattleModule.hx line 112
Called from modules/VDLBattleModule.hx line 45
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
02.09 19:16:35 TIMER: Check auto-disconnect...
02.09 19:16:35 NET: Client (name:test1 conid:66530935 TCP) disconnected from vdl.0 (clients:1)
02.09 19:16:35 DB: SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true
02.09 19:16:35 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true, _type => core/server.query }
02.09 19:16:35 -<<-: core/server.query { list => {{ id => 37 }}, errorCode => ok, _type => core/server.query }
02.09 19:16:35 ->>-: vdl/cache.battle.deleteRoom { roomId => 37, _type => vdl/cache.battle.deleteRoom }
02.09 19:16:35 -<<-: vdl/cache.battle.deleteRoom { errorCode => true, _type => vdl/cache.battle.deleteRoom }
02.09 19:16:35 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
02.09 19:16:35 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
02.09 19:16:35 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
02.09 19:16:35 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 19:16:35 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
02.09 19:16:35 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
02.09 19:16:35 STATS: vdl.0 cache, locks:2
02.09 19:16:35 TIMER: Check auto-disconnect...
02.09 19:16:35 STATS: vdl.0 cache, locks:2
02.09 19:24:20 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 19:24:20 -<<-: server.login ok
02.09 19:24:20 DB: SELECT * FROM LocalizationStrings
02.09 19:24:20 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 19:24:20 -<<-: core/server.query ok
02.09 19:24:20 TIMER: Starting timer...
02.09 19:24:20 TIMER: Timer running...
02.09 19:24:20 DB: SELECT * FROM GameVars
02.09 19:24:20 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 19:24:20 -<<-: core/server.query ok
02.09 19:24:20 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 19:24:20 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 19:24:20 -<<-: core/server.query ok
02.09 19:24:20 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 19:24:20 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 19:24:20 -<<-: core/server.query ok
02.09 19:24:20 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 19:24:20 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 19:24:20 -<<-: core/server.query ok
02.09 19:24:20 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 19:24:20 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 19:24:20 -<<-: core/server.query ok
02.09 19:24:20 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 19:24:20 -<<-: core/quest.getDaily ok
02.09 19:24:20 DB: SELECT * FROM UserAttributeTypes
02.09 19:24:20 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 19:24:20 -<<-: core/server.query ok
02.09 19:24:20 DB: SELECT * FROM UserVariableTypes
02.09 19:24:20 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 19:24:20 -<<-: core/server.query ok
02.09 19:24:20 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 19:24:20 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 19:24:20 -<<-: core/server.query ok
02.09 19:24:20 DB: SELECT * FROM ItemGroups
02.09 19:24:20 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 19:24:20 -<<-: core/server.query ok
02.09 19:24:20 DB: SELECT * FROM Bundles ORDER BY ID
02.09 19:24:20 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 19:24:20 -<<-: core/server.query ok
02.09 19:24:20 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 19:24:20 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 19:24:20 -<<-: core/server.query ok
02.09 19:24:20 SHOP: loading items...
02.09 19:24:20 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 19:24:20 -<<-: core/shop.getList ok
02.09 19:24:20 SHOP: 0 items loaded (0 sec)
02.09 19:24:20 DB: SELECT * FROM EffectAttributeTypes
02.09 19:24:20 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 19:24:20 -<<-: core/server.query ok
02.09 19:24:20 DB: SELECT * FROM Effects
02.09 19:24:20 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 19:24:20 -<<-: core/server.query ok
02.09 19:24:20 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(02.09 19:25:38 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 19:25:38 -<<-: server.login ok
02.09 19:25:38 DB: SELECT * FROM LocalizationStrings
02.09 19:25:38 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 TIMER: Starting timer...
02.09 19:25:38 TIMER: Timer running...
02.09 19:25:38 DB: SELECT * FROM GameVars
02.09 19:25:38 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 19:25:38 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 19:25:38 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 19:25:38 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 19:25:38 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 19:25:38 -<<-: core/quest.getDaily ok
02.09 19:25:38 DB: SELECT * FROM UserAttributeTypes
02.09 19:25:38 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 DB: SELECT * FROM UserVariableTypes
02.09 19:25:38 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 19:25:38 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 DB: SELECT * FROM ItemGroups
02.09 19:25:38 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 DB: SELECT * FROM Bundles ORDER BY ID
02.09 19:25:38 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 19:25:38 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 SHOP: loading items...
02.09 19:25:38 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 19:25:38 -<<-: core/shop.getList ok
02.09 19:25:38 SHOP: 0 items loaded (0 sec)
02.09 19:25:38 DB: SELECT * FROM EffectAttributeTypes
02.09 19:25:38 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 DB: SELECT * FROM Effects
02.09 19:25:38 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
02.09 19:25:38 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
02.09 19:25:38 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 DB: SELECT * FROM Badges
02.09 19:25:38 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
02.09 19:25:38 -<<-: core/server.query ok
02.09 19:25:38 TIMER: Check auto-disconnect...
02.09 19:25:38 STATS: vdl.0 cache, locks:0
02.09 19:25:38 TIMER: Check auto-disconnect...
02.09 19:25:38 STATS: vdl.0 cache, locks:0
02.09 19:25:38 TIMER: Check auto-disconnect...
02.09 19:25:38 STATS: vdl.0 cache, locks:0
02.09 19:25:38 TIMER: Check auto-disconnect...
02.09 19:25:38 STATS: vdl.0 cache, locks:0
02.09 19:25:38 TIMER: Check auto-disconnect...
02.09 19:25:38 STATS: vdl.0 cache, locks:0
02.09 19:25:38 TIMER: Check auto-disconnect...
02.09 19:25:38 STATS: vdl.0 cache, locks:0
02.09 19:25:38 TIMER: Check auto-disconnect...
02.09 19:25:38 STATS: vdl.0 cache, locks:0
02.09 19:25:38 TIMER: Check auto-disconnect...
02.09 19:25:38 STATS: vdl.0 cache, locks:0
02.09 19:25:38 TIMER: Check auto-disconnect...
02.09 19:25:38 STATS: vdl.0 cache, locks:0
02.09 19:25:38 TIMER: Check auto-disconnect...
02.09 19:25:38 STATS: vdl.0 cache, locks:0
02.09 19:25:38 TIMER: Check auto-disconnect...
02.09 19:25:38 STATS: vdl.0 cache, locks:0
02.09 19:25:38 TIMER: Check auto-disconnect...
02.09 19:25:38 STATS: vdl.0 cache, locks:0
02.09 19:38:05 NET: Client (conid:65028662) connected to vdl.0 (clients:1)
02.09 19:38:06 NET: Client (name:null conid:65028662 TCP) disconnected from vdl.0 (clients:0)
02.09 19:38:06 NET: Client (conid:97817191) connected to vdl.0 (clients:1)
02.09 19:38:14 NET: Client (name:null conid:97817191 TCP) disconnected from vdl.0 (clients:0)
02.09 19:38:38 TIMER: Check auto-disconnect...
02.09 19:38:38 STATS: vdl.0 cache, locks:0
02.09 19:38:38 TIMER: Check auto-disconnect...
02.09 19:38:38 STATS: vdl.0 cache, locks:0
02.09 19:38:38 TIMER: Check auto-disconnect...
02.09 19:38:38 STATS: vdl.0 cache, locks:0
02.09 19:38:38 TIMER: Check auto-disconnect...
02.09 19:38:38 STATS: vdl.0 cache, locks:0
02.09 19:38:38 TIMER: Check auto-disconnect...
02.09 19:38:38 STATS: vdl.0 cache, locks:0
02.09 19:38:38 TIMER: Check auto-disconnect...
02.09 19:38:38 STATS: vdl.0 cache, locks:0
02.09 19:43:59 NET: Client (conid:4564700) connected to vdl.0 (clients:1)
02.09 19:44:00 NET: Client (name:null conid:4564700 TCP) disconnected from vdl.0 (clients:0)
02.09 19:44:00 NET: Client (conid:56281904) connected to vdl.0 (clients:1)
02.09 19:44:38 TIMER: Check auto-disconnect...
02.09 19:44:38 STATS: vdl.0 cache, locks:0
02.09 19:44:38 TIMER: Check auto-disconnect...
02.09 19:44:38 STATS: vdl.0 cache, locks:0
02.09 19:44:38 TIMER: Check auto-disconnect...
02.09 19:44:38 STATS: vdl.0 cache, locks:0
02.09 19:44:38 TIMER: Check auto-disconnect...
02.09 19:44:38 NET: Client (name:null conid:56281904 TCP) disconnected from vdl.0 (clients:0)
02.09 19:44:38 STATS: vdl.0 cache, locks:0
02.09 19:44:38 TIMER: Check auto-disconnect...
02.09 19:44:38 STATS: vdl.0 cache, locks:0
02.09 19:44:38 TIMER: Check auto-disconnect...
02.09 19:44:38 STATS: vdl.0 cache, locks:0
02.09 19:50:04 NET: Client (conid:39991824) connected to vdl.0 (clients:1)
02.09 19:50:04 NET: Client (name:null conid:39991824 TCP) disconnected from vdl.0 (clients:0)
02.09 19:50:04 NET: Client (conid:14569371) connected to vdl.0 (clients:1)
02.09 19:50:10 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
02.09 19:50:10 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
02.09 19:50:10 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
02.09 19:50:10 -<<-: core/server.query ok
02.09 19:50:10 STATS: vdl.0 cache connection, 21 calls, total 0.0251481533050537 sec spent, avg 1.2 ms
02.09 19:50:10 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
02.09 19:50:10 -<<-: core/user.isOnlineID ok
02.09 19:50:10 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
02.09 19:50:10 -<<-: core/cache.get ok
02.09 19:50:10 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
02.09 19:50:10 -<<-: core/cache.get ok
02.09 19:50:10 NET: Client login (conid:14569371, id:3, name:test2)
02.09 19:50:10 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
02.09 19:50:10 -<<-: core/user.loginPost null
02.09 19:50:10 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
02.09 19:50:10 == NET: test2 ret: user.join { name => test2, type => user.join }
02.09 19:50:10 ++ NET: test2 req: battle.find { messageType => battle.find }
02.09 19:50:10 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 19:50:10 -<<-: vdl/cache.battle.find { list => {}, count => 0, errorCode => not, _type => vdl/cache.battle.find }
02.09 19:50:10 ->>-: vdl/cache.battle.create { selfId => 3, _type => vdl/cache.battle.create }
02.09 19:50:10 -<<-: vdl/cache.battle.create { room => 39, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 19:50:10 TIME: battle.find 30.23 ms
02.09 19:50:10 == NET: test2 ret: battle.find { room => 39, type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 19:50:18 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 3, _type => core/cache.update }
02.09 19:50:18 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 19:50:38 TIMER: Check auto-disconnect...
02.09 19:50:38 STATS: vdl.0 cache, locks:2
02.09 19:50:38 TIMER: Check auto-disconnect...
02.09 19:50:38 STATS: vdl.0 cache, locks:2
02.09 19:51:49 NET: Client (conid:44616905) connected to vdl.0 (clients:2)
02.09 19:51:50 NET: Client (name:null conid:44616905 TCP) disconnected from vdl.0 (clients:1)
02.09 19:51:50 NET: Client (conid:9068748) connected to vdl.0 (clients:2)
02.09 19:52:05 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
02.09 19:52:05 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
02.09 19:52:05 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
02.09 19:52:05 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
02.09 19:52:05 STATS: vdl.0 cache connection, 29 calls, total 0.0679895877838135 sec spent, avg 2.34 ms
02.09 19:52:05 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
02.09 19:52:05 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
02.09 19:52:05 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
02.09 19:52:05 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472829608, lastLoginDate => 246, lastLoadDate => 903 }, effects => { list => [] } }}, version => 0, id => 2 } }
02.09 19:52:05 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
02.09 19:52:05 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
02.09 19:52:05 NET: Client login (conid:9068748, id:2, name:test1)
02.09 19:52:05 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
02.09 19:52:05 -<<-: core/user.loginPost { _type => core/user.loginPost }
02.09 19:52:05 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
02.09 19:52:05 == NET: test2 ret: user.join { name => test1, type => user.join }
02.09 19:52:05 == NET: test1 ret: user.join { name => test2, type => user.join }
02.09 19:52:05 == NET: test1 ret: user.join { name => test1, type => user.join }
02.09 19:52:06 ++ NET: test1 req: battle.find { messageType => battle.find }
02.09 19:52:06 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 19:52:06 -<<-: vdl/cache.battle.find { list => [{ id => 39, first => 3 }], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
02.09 19:52:06 ->>-: vdl/cache.battle.join { roomId => 39, selfId => 2, _type => vdl/cache.battle.join }
02.09 19:52:06 -<<-: vdl/cache.battle.join { room => 39, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 19:52:06 DB: SELECT name FROM users WHERE id=2
02.09 19:52:06 ->>-: core/server.query { q => SELECT name FROM users WHERE id=2, _type => core/server.query }
02.09 19:52:06 -<<-: core/server.query { list => {{ name => test1 }}, errorCode => ok, _type => core/server.query }
02.09 19:52:06 DB: SELECT name FROM users WHERE id=3
02.09 19:52:06 ->>-: core/server.query { q => SELECT name FROM users WHERE id=3, _type => core/server.query }
02.09 19:52:06 -<<-: core/server.query { list => {{ name => test2 }}, errorCode => ok, _type => core/server.query }
02.09 19:52:06 TIME: battle.find 8.87 ms
02.09 19:52:06 == NET: test1 ret: battle.enemy { name => test1, type => battle.enemy, enemy.id => 2, enemy.name => test2, enemy.num => 1 }
02.09 19:52:06 == NET: test1 ret: battle.find { room => 39, type => battle.find, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 19:52:06 == NET: test2 ret: battle.enemy { name => test2, type => battle.enemy, enemy.id => 3, enemy.name => test1, enemy.num => 2 }
02.09 19:52:13 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
02.09 19:52:13 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 19:52:21 ++ NET: test2 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 39, name => throw, side => 2, dices => 334333, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 19:52:21 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
02.09 19:52:21 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:52:21 TIME: battle.sendtask 0.78 ms
02.09 19:52:21 == NET: test2 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 19:52:21 == NET: test1 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 39, name => throw, side => 2, type => battle.task, dices => 334333, to => (0.0, 0.0), diceID => 0 }
02.09 19:52:29 ++ NET: test2 req: battle.sendtask { dice => 3, from => (0.0, 0.0), roomId => 39, name => choose, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 4 }
02.09 19:52:29 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
02.09 19:52:29 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:52:29 TIME: battle.sendtask 0.73 ms
02.09 19:52:29 == NET: test2 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 19:52:29 == NET: test1 ret: battle.task { dice => 3, from => (0.0, 0.0), roomId => 39, name => choose, side => 2, type => battle.task, dices => null, to => (0.0, 0.0), diceID => 4 }
02.09 19:52:31 ++ NET: test2 req: battle.sendtask { dice => 3, from => (7.0, 3.0), roomId => 39, name => take, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 19:52:31 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
02.09 19:52:31 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:52:31 TIME: battle.sendtask 0.77 ms
02.09 19:52:31 == NET: test2 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 19:52:31 == NET: test1 ret: battle.task { dice => 3, from => (7.0, 3.0), roomId => 39, name => take, side => 2, type => battle.task, dices => null, to => (0.0, 0.0), diceID => 0 }
02.09 19:52:36 ++ NET: test2 req: battle.sendtask { dice => 3, from => (7.0, 3.0), roomId => 39, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (8.0, 3.0), diceID => 0 }
02.09 19:52:36 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
02.09 19:52:36 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:52:36 TIME: battle.sendtask 0.76 ms
02.09 19:52:36 == NET: test2 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 19:52:36 == NET: test1 ret: battle.task { dice => 3, from => (7.0, 3.0), roomId => 39, name => swap, side => 2, type => battle.task, dices => null, to => (8.0, 3.0), diceID => 0 }
02.09 19:52:38 TIMER: Check auto-disconnect...
02.09 19:52:38 STATS: vdl.0 cache, locks:4
02.09 19:53:30 ++ NET: test2 req: battle.sendtask { dice => 3, from => (0.0, 0.0), roomId => 39, name => choose, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 19:53:30 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
02.09 19:53:30 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:53:30 STATS: vdl.0 cache connection, 43 calls, total 0.0851247310638428 sec spent, avg 1.98 ms
02.09 19:53:30 TIME: battle.sendtask 0.85 ms
02.09 19:53:30 == NET: test2 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 19:53:30 == NET: test1 ret: battle.task { dice => 3, from => (0.0, 0.0), roomId => 39, name => choose, side => 2, type => battle.task, dices => null, to => (0.0, 0.0), diceID => 0 }
02.09 19:53:32 ++ NET: test2 req: battle.sendtask { dice => 3, from => (7.0, 4.0), roomId => 39, name => take, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 19:53:32 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
02.09 19:53:32 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:53:32 TIME: battle.sendtask 0.83 ms
02.09 19:53:32 == NET: test2 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 19:53:32 == NET: test1 ret: battle.task { dice => 3, from => (7.0, 4.0), roomId => 39, name => take, side => 2, type => battle.task, dices => null, to => (0.0, 0.0), diceID => 0 }
02.09 19:53:34 ++ NET: test2 req: battle.sendtask { dice => 3, from => (7.0, 4.0), roomId => 39, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (7.0, 3.0), diceID => 0 }
02.09 19:53:34 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
02.09 19:53:34 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:53:34 TIME: battle.sendtask 0.75 ms
02.09 19:53:34 == NET: test2 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 19:53:34 == NET: test1 ret: battle.task { dice => 3, from => (7.0, 4.0), roomId => 39, name => swap, side => 2, type => battle.task, dices => null, to => (7.0, 3.0), diceID => 0 }
02.09 19:53:36 ++ NET: test2 req: battle.sendtask { dice => 3, from => (7.0, 5.0), roomId => 39, name => take, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 19:53:36 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
02.09 19:53:36 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:53:36 TIME: battle.sendtask 0.83 ms
02.09 19:53:36 == NET: test2 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 19:53:36 == NET: test1 ret: battle.task { dice => 3, from => (7.0, 5.0), roomId => 39, name => take, side => 2, type => battle.task, dices => null, to => (0.0, 0.0), diceID => 0 }
02.09 19:53:38 TIMER: Check auto-disconnect...
02.09 19:53:38 ++ NET: test2 req: battle.sendtask { dice => 3, from => (7.0, 5.0), roomId => 39, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (7.0, 4.0), diceID => 0 }
02.09 19:53:38 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
02.09 19:53:38 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:53:38 TIME: battle.sendtask 0.6 ms
02.09 19:53:38 == NET: test2 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 19:53:38 == NET: test1 ret: battle.task { dice => 3, from => (7.0, 5.0), roomId => 39, name => swap, side => 2, type => battle.task, dices => null, to => (7.0, 4.0), diceID => 0 }
02.09 19:53:38 STATS: vdl.0 cache, locks:4
02.09 19:53:39 ++ NET: test2 req: battle.sendtask { dice => 3, from => (7.0, 6.0), roomId => 39, name => take, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 19:53:39 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
02.09 19:53:39 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:53:39 TIME: battle.sendtask 0.63 ms
02.09 19:53:39 == NET: test2 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 19:53:39 == NET: test1 ret: battle.task { dice => 3, from => (7.0, 6.0), roomId => 39, name => take, side => 2, type => battle.task, dices => null, to => (0.0, 0.0), diceID => 0 }
02.09 19:53:39 ++ NET: test2 req: battle.sendtask { dice => 3, from => (7.0, 6.0), roomId => 39, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (7.0, 5.0), diceID => 0 }
02.09 19:53:39 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
02.09 19:53:39 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:53:39 TIME: battle.sendtask 0.75 ms
02.09 19:53:39 == NET: test2 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 19:53:39 == NET: test1 ret: battle.task { dice => 3, from => (7.0, 6.0), roomId => 39, name => swap, side => 2, type => battle.task, dices => null, to => (7.0, 5.0), diceID => 0 }
02.09 19:53:42 ++ NET: test2 req: battle.sendtask { dice => 3, from => (7.0, 4.0), roomId => 39, name => take, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 19:53:42 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
02.09 19:53:42 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:53:42 TIME: battle.sendtask 0.81 ms
02.09 19:53:42 == NET: test2 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 19:53:42 == NET: test1 ret: battle.task { dice => 3, from => (7.0, 4.0), roomId => 39, name => take, side => 2, type => battle.task, dices => null, to => (0.0, 0.0), diceID => 0 }
02.09 19:53:42 ++ NET: test2 req: battle.sendtask { dice => 3, from => (7.0, 4.0), roomId => 39, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (8.0, 4.0), diceID => 0 }
02.09 19:53:42 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
02.09 19:53:42 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:53:42 TIME: battle.sendtask 0.75 ms
02.09 19:53:42 == NET: test2 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 19:53:42 == NET: test1 ret: battle.task { dice => 3, from => (7.0, 4.0), roomId => 39, name => swap, side => 2, type => battle.task, dices => null, to => (8.0, 4.0), diceID => 0 }
02.09 19:53:59 ++ NET: test2 req: battle.end { roomId => 39, scoreSecondPlayer => 0, messageType => battle.end, scoreFirstPlayer => 0 }
02.09 19:53:59 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
02.09 19:53:59 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 19:53:59 DB: INSERT INTO statistics (id, firstid,secondid, roomid, params) VALUES ('', 3,2,39,{ scoresSecond => null, scoresFirst => null })
02.09 19:53:59 ->>-: core/server.query { q => INSERT INTO statistics (id, firstid,secondid, roomid, params) VALUES ('', 3,2,39,{ scoresSecond => null, scoresFirst => null }), _type => core/server.query }
02.09 19:53:59 -<<-: core/server.query { errorCode => ok, _type => core/server.query }
02.09 19:53:59 ->>-: vdl/cache.battle.finishRoom { roomId => 39, _type => vdl/cache.battle.finishRoom }
02.09 19:53:59 -<<-: vdl/cache.battle.finishRoom { errorCode => true, _type => vdl/cache.battle.finishRoom }
02.09 19:53:59 ->>-: vdl/cache.battle.deleteRoom { roomId => 39, _type => vdl/cache.battle.deleteRoom }
02.09 19:53:59 -<<-: vdl/cache.battle.deleteRoom { errorCode => true, _type => vdl/cache.battle.deleteRoom }
02.09 19:53:59 TIME: battle.end 38.34 ms
02.09 19:53:59 == NET: test2 ret: battle.end { type => battle.end, errorCode => ok }
02.09 19:53:59 == NET: test1 ret: battle.end { type => battle.end }
02.09 19:54:38 TIMER: Check auto-disconnect...
02.09 19:54:38 STATS: vdl.0 cache, locks:4
02.09 19:54:38 TIMER: Check auto-disconnect...
02.09 19:54:38 NET: Client (name:test1 conid:9068748 TCP) disconnected from vdl.0 (clients:1)
02.09 19:54:38 DB: SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true
02.09 19:54:38 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true, _type => core/server.query }
02.09 19:54:38 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
02.09 19:54:38 STATS: vdl.0 cache connection, 56 calls, total 0.129780769348145 sec spent, avg 2.32 ms
02.09 19:54:38 ->>-: vdl/cache.battle.deleteRoom { roomId => 0, _type => vdl/cache.battle.deleteRoom }
02.09 19:54:38 -<<-: vdl/cache.battle.deleteRoom { errorCode => true, _type => vdl/cache.battle.deleteRoom }
02.09 19:54:38 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
02.09 19:54:38 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
02.09 19:54:38 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
02.09 19:54:38 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 19:54:38 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
02.09 19:54:38 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
02.09 19:54:38 STATS: vdl.0 cache, locks:2
02.09 19:56:10 NET: Client (name:test2 conid:14569371 TCP) disconnected from vdl.0 (clients:0)
02.09 19:56:10 DB: SELECT id FROM battle WHERE firstid=3 OR secondid=3 AND finished <> true
02.09 19:56:10 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=3 OR secondid=3 AND finished <> true, _type => core/server.query }
02.09 19:56:10 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
02.09 19:56:10 ->>-: vdl/cache.battle.deleteRoom { roomId => 0, _type => vdl/cache.battle.deleteRoom }
02.09 19:56:10 -<<-: vdl/cache.battle.deleteRoom { errorCode => true, _type => vdl/cache.battle.deleteRoom }
02.09 19:56:10 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 3, _type => core/cache.update }
02.09 19:56:10 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
02.09 19:56:10 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 3, _type => core/cache.update }
02.09 19:56:10 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 19:56:10 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 3, _type => core/user.logoutPost }
02.09 19:56:10 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
02.09 19:56:38 TIMER: Check auto-disconnect...
02.09 19:56:38 STATS: vdl.0 cache, locks:0
02.09 19:56:38 TIMER: Check auto-disconnect...
02.09 19:56:38 STATS: vdl.0 cache, locks:0
02.09 19:56:38 TIMER: Check auto-disconnect...
02.09 19:56:38 STATS: vdl.0 cache, locks:0
02.09 19:56:38 TIMER: Check auto-disconnect...
02.09 19:56:38 STATS: vdl.0 cache, locks:0
02.09 19:56:38 TIMER: Check auto-disconnect...
02.09 19:56:38 STATS: vdl.0 cache, locks:0
02.09 19:56:38 TIMER: Check auto-disconnect...
02.09 19:56:38 STATS: vdl.0 cache, locks:0
02.09 19:56:38 TIMER: Check auto-disconnect...
02.09 19:56:38 STATS: vdl.0 cache, locks:0
02.09 19:56:38 TIMER: Check auto-disconnect...
02.09 19:56:38 STATS: vdl.0 cache, locks:0
02.09 19:56:38 TIMER: Check auto-disconnect...
02.09 19:56:38 STATS: vdl.0 cache, locks:0
02.09 19:56:38 TIMER: Check auto-disconnect...
02.09 19:56:38 STATS: vdl.0 cache, locks:0
02.09 19:56:38 TIMER: Check auto-disconnect...
02.09 19:56:38 STATS: vdl.0 cache, locks:0
02.09 19:56:38 TIMER: Check auto-disconnect...
02.09 19:56:38 STATS: vdl.0 cache, locks:0
02.09 19:56:38 TIMER: Check auto-disconnect...
02.09 19:56:38 STATS: vdl.0 cache, locks:0
02.09 19:56:38 TIMER: Check auto-disconnect...
02.09 19:56:38 STATS: vdl.0 cache, locks:0
02.09 19:56:38 TIMER: Check auto-disconnect...
02.09 19:56:38 STATS: vdl.0 cache, locks:0
02.09 19:56:38 TIMER: Check auto-disconnect...
02.09 19:56:38 STATS: vdl.0 cache, locks:0
02.09 19:56:38 TIMER: Check auto-disconnect...
