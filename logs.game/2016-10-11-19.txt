11.10 19:01:09 NET: Client (conid:27963617) connected to vdl.0 (clients:1)
11.10 19:01:09 ++ NET: null req: user.login { type => token, messageType => user.login, token => 687ea8f7e0bf08d468c6ff8a91b05bdb }
11.10 19:01:09 TRACE: Invalid field access : length
11.10 19:01:09 TRACE: 
Called from /usr/share/haxe/std/StringTools.hx line 229
Called from /usr/share/haxe/std/StringTools.hx line 253
Called from snipe/slave/modules/UserModuleCore.hx line 334
Called from snipe/slave/Server.hx line 887
Called from snipe/slave/Server.hx line 1124
11.10 19:01:09 TRACE: Could not login.
11.10 19:01:09 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
11.10 19:01:34 TIMER: Check auto-disconnect...
11.10 19:01:34 STATS: vdl.0 cache, locks:0
11.10 19:01:34 TIMER: Check auto-disconnect...
11.10 19:01:34 STATS: vdl.0 cache, locks:0
11.10 19:01:34 TIMER: Check auto-disconnect...
11.10 19:01:34 STATS: vdl.0 cache, locks:0
11.10 19:01:34 TIMER: Check auto-disconnect...
11.10 19:01:34 NET: Client (name:null conid:27963617 TCP) disconnected from vdl.0 (clients:0)
11.10 19:01:34 STATS: vdl.0 cache, locks:0
11.10 19:01:34 TIMER: Check auto-disconnect...
11.10 19:01:34 STATS: vdl.0 cache, locks:0
11.10 19:06:00 NET: Client (conid:70148272) connected to vdl.0 (clients:1)
11.10 19:06:01 ++ NET: null req: user.login { type => token, messageType => user.login, token => 687ea8f7e0bf08d468c6ff8a91b05bdb }
11.10 19:06:01 TRACE: Invalid field access : length
11.10 19:06:01 TRACE: 
Called from /usr/share/haxe/std/StringTools.hx line 229
Called from /usr/share/haxe/std/StringTools.hx line 253
Called from snipe/slave/modules/UserModuleCore.hx line 334
Called from snipe/slave/Server.hx line 887
Called from snipe/slave/Server.hx line 1124
11.10 19:06:01 TRACE: Could not login.
11.10 19:06:01 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
11.10 19:06:05 ++ NET: null req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
11.10 19:06:05 TRACE: User not logon yet.
11.10 19:16:18 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
11.10 19:16:18 -<<-: server.login ok
11.10 19:16:18 DB: SELECT * FROM LocalizationStrings
11.10 19:16:18 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
11.10 19:16:18 -<<-: core/server.query ok
11.10 19:16:18 TIMER: Starting timer...
11.10 19:16:18 TIMER: Timer running...
11.10 19:16:18 DB: SELECT * FROM GameVars
11.10 19:16:18 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
11.10 19:16:18 -<<-: core/server.query ok
11.10 19:16:18 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
11.10 19:16:18 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
11.10 19:16:18 -<<-: core/server.query ok
11.10 19:16:18 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
11.10 19:16:18 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
11.10 19:16:18 -<<-: core/server.query ok
11.10 19:16:18 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
11.10 19:16:18 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
11.10 19:16:18 -<<-: core/server.query ok
11.10 19:16:18 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
11.10 19:16:18 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
11.10 19:16:18 -<<-: core/server.query ok
11.10 19:16:18 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
11.10 19:16:18 -<<-: core/quest.getDaily ok
11.10 19:16:18 DB: SELECT * FROM UserAttributeTypes
11.10 19:16:18 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
11.10 19:16:18 -<<-: core/server.query ok
11.10 19:16:18 DB: SELECT * FROM UserVariableTypes
11.10 19:16:18 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
11.10 19:16:18 -<<-: core/server.query ok
11.10 19:16:18 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
11.10 19:16:18 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
11.10 19:16:18 -<<-: core/server.query ok
11.10 19:16:18 DB: SELECT * FROM ItemGroups
11.10 19:16:18 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
11.10 19:16:18 -<<-: core/server.query ok
11.10 19:16:18 DB: SELECT * FROM Bundles ORDER BY ID
11.10 19:16:18 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
11.10 19:16:18 -<<-: core/server.query ok
11.10 19:16:18 DB: SELECT * FROM BundleItems ORDER BY ID
11.10 19:16:18 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
11.10 19:16:18 -<<-: core/server.query ok
11.10 19:16:18 SHOP: loading items...
11.10 19:16:18 ->>-: core/shop.getList { _type => core/shop.getList }
11.10 19:16:18 -<<-: core/shop.getList ok
11.10 19:16:18 SHOP: 0 items loaded (0.001 sec)
11.10 19:16:18 DB: SELECT * FROM EffectAttributeTypes
11.10 19:16:18 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
11.10 19:16:18 -<<-: core/server.query ok
11.10 19:16:18 DB: SELECT * FROM Effects
11.10 19:16:18 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
11.10 19:16:18 -<<-: core/server.query ok
11.10 19:16:18 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_p11.10 19:16:26 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
11.10 19:16:26 -<<-: server.login ok
11.10 19:16:26 DB: SELECT * FROM LocalizationStrings
11.10 19:16:26 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 TIMER: Starting timer...
11.10 19:16:26 TIMER: Timer running...
11.10 19:16:26 DB: SELECT * FROM GameVars
11.10 19:16:26 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
11.10 19:16:26 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
11.10 19:16:26 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
11.10 19:16:26 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
11.10 19:16:26 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
11.10 19:16:26 -<<-: core/quest.getDaily ok
11.10 19:16:26 DB: SELECT * FROM UserAttributeTypes
11.10 19:16:26 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 DB: SELECT * FROM UserVariableTypes
11.10 19:16:26 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
11.10 19:16:26 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 DB: SELECT * FROM ItemGroups
11.10 19:16:26 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 DB: SELECT * FROM Bundles ORDER BY ID
11.10 19:16:26 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 DB: SELECT * FROM BundleItems ORDER BY ID
11.10 19:16:26 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 SHOP: loading items...
11.10 19:16:26 ->>-: core/shop.getList { _type => core/shop.getList }
11.10 19:16:26 -<<-: core/shop.getList ok
11.10 19:16:26 SHOP: 0 items loaded (0 sec)
11.10 19:16:26 DB: SELECT * FROM EffectAttributeTypes
11.10 19:16:26 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 DB: SELECT * FROM Effects
11.10 19:16:26 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
11.10 19:16:26 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
11.10 19:16:26 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 DB: SELECT * FROM Badges
11.10 19:16:26 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
11.10 19:16:26 -<<-: core/server.query ok
11.10 19:16:26 TIMER: Check auto-disconnect...
11.10 19:16:26 STATS: vdl.0 cache, locks:0
11.10 19:16:26 TIMER: Check auto-disconnect...
11.10 19:16:26 STATS: vdl.0 cache, locks:0
11.10 19:16:26 TIMER: Check auto-disconnect...
11.10 19:16:26 STATS: vdl.0 cache, locks:0
11.10 19:16:26 TIMER: Check auto-disconnect...
11.10 19:16:26 STATS: vdl.0 cache, locks:0
11.10 19:16:26 TIMER: Check auto-disconnect...
11.10 19:16:26 STATS: vdl.0 cache, locks:0
11.10 19:16:26 TIMER: Check auto-disconnect...
11.10 19:16:26 STATS: vdl.0 cache, locks:0
11.10 19:16:26 TIMER: Check auto-disconnect...
11.10 19:16:26 STATS: vdl.0 cache, locks:0
11.10 19:16:26 TIMER: Check auto-disconnect...
11.10 19:16:26 STATS: vdl.0 cache, locks:0
11.10 19:16:26 TIMER: Check auto-disconnect...
11.10 19:16:26 STATS: vdl.0 cache, locks:0
11.10 19:16:26 TIMER: Check auto-disconnect...
11.10 19:16:26 STATS: vdl.0 cache, locks:0
11.10 19:16:26 TIMER: Check auto-disconnect...
11.10 19:16:26 STATS: vdl.0 cache, locks:0
11.10 19:16:26 TIMER: Check auto-disconnect...
11.10 19:16:26 STATS: vdl.0 cache, locks:0
11.10 19:16:26 TIMER: Check auto-disconnect...
11.10 19:16:26 STATS: vdl.0 cache, locks:0
11.10 19:16:26 TIMER: Check auto-disconnect...
11.10 19:16:26 STATS: vdl.0 cache, locks:0
11.10 19:31:14 NET: Client (conid:86321853) connected to vdl.0 (clients:1)
11.10 19:31:15 ++ NET: null req: user.login { type => token, messageType => user.login, token => 687ea8f7e0bf08d468c6ff8a91b05bdb }
11.10 19:31:15 TRACE: Invalid field access : length
11.10 19:31:15 TRACE: 
Called from /usr/share/haxe/std/StringTools.hx line 229
Called from /usr/share/haxe/std/StringTools.hx line 253
Called from snipe/slave/modules/UserModuleCore.hx line 334
Called from snipe/slave/Server.hx line 887
Called from snipe/slave/Server.hx line 1124
11.10 19:31:15 TRACE: Could not login.
11.10 19:31:15 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
11.10 19:31:25 ++ NET: null req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
11.10 19:31:25 TRACE: User not logon yet.
11.10 19:31:26 TIMER: Check auto-disconnect...
11.10 19:31:26 STATS: vdl.0 cache, locks:0
11.10 19:32:09 NET: Client (name:null conid:86321853 TCP) disconnected from vdl.0 (clients:0)
11.10 19:32:15 NET: Client (conid:61831916) connected to vdl.0 (clients:1)
11.10 19:32:16 ++ NET: null req: user.login { type => token, messageType => user.login, token => 687ea8f7e0bf08d468c6ff8a91b05bdb }
11.10 19:32:16 TRACE: Invalid field access : length
11.10 19:32:16 TRACE: 
Called from /usr/share/haxe/std/StringTools.hx line 229
Called from /usr/share/haxe/std/StringTools.hx line 253
Called from snipe/slave/modules/UserModuleCore.hx line 334
Called from snipe/slave/Server.hx line 887
Called from snipe/slave/Server.hx line 1124
11.10 19:32:16 TRACE: Could not login.
11.10 19:32:16 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
11.10 19:32:21 ++ NET: null req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
11.10 19:32:21 TRACE: User not logon yet.
11.10 19:32:26 TIMER: Check auto-disconnect...
11.10 19:32:26 STATS: vdl.0 cache, locks:0
11.10 19:32:26 TIMER: Check auto-disconnect...
11.10 19:32:26 STATS: vdl.0 cache, locks:0
11.10 19:32:26 TIMER: Check auto-disconnect...
11.10 19:32:26 STATS: vdl.0 cache, locks:0
11.10 19:32:26 TIMER: Check auto-disconnect...
11.10 19:32:26 NET: Client (name:null conid:61831916 TCP) disconnected from vdl.0 (clients:0)
11.10 19:32:26 STATS: vdl.0 cache, locks:0
11.10 19:32:26 TIMER: Check auto-disconnect...
11.10 19:32:26 STATS: vdl.0 cache, locks:0
11.10 19:32:26 TIMER: Check auto-disconnect...
11.10 19:32:26 STATS: vdl.0 cache, locks:0
11.10 19:32:26 TIMER: Check auto-disconnect...
11.10 19:32:26 STATS: vdl.0 cache, locks:0
11.10 19:32:26 TIMER: Check auto-disconnect...
11.10 19:32:26 STATS: vdl.0 cache, locks:0
11.10 19:32:26 TIMER: Check auto-disconnect...
11.10 19:32:26 STATS: vdl.0 cache, locks:0
11.10 19:32:26 TIMER: Check auto-disconnect...
11.10 19:32:26 STATS: vdl.0 cache, locks:0
11.10 19:42:01 NET: Client (conid:83271511) connected to vdl.0 (clients:1)
11.10 19:42:01 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
11.10 19:42:01 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
11.10 19:42:01 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
11.10 19:42:01 -<<-: core/server.query ok
11.10 19:42:01 STATS: vdl.0 cache connection, 21 calls, total 0.108746767044067 sec spent, avg 5.18 ms
11.10 19:42:01 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
11.10 19:42:01 -<<-: core/user.isOnlineID ok
11.10 19:42:01 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
11.10 19:42:02 -<<-: core/cache.get ok
11.10 19:42:02 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
11.10 19:42:02 -<<-: core/cache.get ok
11.10 19:42:02 NET: Client login (conid:83271511, id:2, name:test1)
11.10 19:42:02 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
11.10 19:42:02 -<<-: core/user.loginPost null
11.10 19:42:02 DB: SELECT ID FROM TempUserLogins WHERE UserID = 2 AND Date = 'today'::timestamp
11.10 19:42:02 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 2 AND Date = 'today'::timestamp, _type => core/server.query }
11.10 19:42:02 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
11.10 19:42:02 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (2, 'today'::timestamp)
11.10 19:42:02 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
11.10 19:42:02 == NET: test1 ret: user.join { name => test1, type => user.join }
11.10 19:42:02 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (2, 'today'::timestamp), _type => core/server.pending }} }
11.10 19:42:02 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
11.10 19:42:11 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1476204122, lastLoginDate => 285, lastLoadDate => 1012 } }}, type => user, unlock => false, id => 2, _type => core/cache.update }
11.10 19:42:11 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
11.10 19:42:14 ++ NET: test1 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
11.10 19:42:14 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
11.10 19:42:14 -<<-: vdl/cache.tournament.getAvailableTournament { list => [], count => 0, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
11.10 19:42:14 TIME: tournament.getAvailableTournament 9.38 ms
11.10 19:42:14 == NET: test1 ret: tournament.getAvailableTournament { list => [], count => 0, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
11.10 19:47:19 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
11.10 19:47:19 -<<-: server.login ok
11.10 19:47:19 DB: SELECT * FROM LocalizationStrings
11.10 19:47:19 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 TIMER: Starting timer...
11.10 19:47:19 TIMER: Timer running...
11.10 19:47:19 DB: SELECT * FROM GameVars
11.10 19:47:19 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
11.10 19:47:19 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
11.10 19:47:19 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
11.10 19:47:19 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
11.10 19:47:19 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
11.10 19:47:19 -<<-: core/quest.getDaily ok
11.10 19:47:19 DB: SELECT * FROM UserAttributeTypes
11.10 19:47:19 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 DB: SELECT * FROM UserVariableTypes
11.10 19:47:19 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
11.10 19:47:19 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 DB: SELECT * FROM ItemGroups
11.10 19:47:19 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 DB: SELECT * FROM Bundles ORDER BY ID
11.10 19:47:19 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 DB: SELECT * FROM BundleItems ORDER BY ID
11.10 19:47:19 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 SHOP: loading items...
11.10 19:47:19 ->>-: core/shop.getList { _type => core/shop.getList }
11.10 19:47:19 -<<-: core/shop.getList ok
11.10 19:47:19 SHOP: 0 items loaded (0 sec)
11.10 19:47:19 DB: SELECT * FROM EffectAttributeTypes
11.10 19:47:19 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 DB: SELECT * FROM Effects
11.10 19:47:19 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
11.10 19:47:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
11.10 19:47:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 DB: SELECT * FROM Badges
11.10 19:47:19 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
11.10 19:47:19 -<<-: core/server.query ok
11.10 19:47:19 TIMER: Check auto-disconnect...
11.10 19:47:19 STATS: vdl.0 cache, locks:0
11.10 19:47:19 TIMER: Check auto-disconnect...
11.10 19:47:19 STATS: vdl.0 cache, locks:0
11.10 19:47:19 TIMER: Check auto-disconnect...
11.10 19:47:19 STATS: vdl.0 cache, locks:0
11.10 19:47:19 TIMER: Check auto-disconnect...
11.10 19:47:19 STATS: vdl.0 cache, locks:0
11.10 19:47:19 TIMER: Check auto-disconnect...
11.10 19:47:19 STATS: vdl.0 cache, locks:0
11.10 19:53:00 NET: Client (conid:71360793) connected to vdl.0 (clients:1)
11.10 19:53:01 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
11.10 19:53:01 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
11.10 19:53:01 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
11.10 19:53:01 -<<-: core/server.query ok
11.10 19:53:01 STATS: vdl.0 cache connection, 21 calls, total 0.0247912406921387 sec spent, avg 1.18 ms
11.10 19:53:01 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
11.10 19:53:01 -<<-: core/user.isOnlineID ok
11.10 19:53:01 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
11.10 19:53:01 -<<-: core/cache.get ok
11.10 19:53:01 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
11.10 19:53:01 -<<-: core/cache.get ok
11.10 19:53:01 NET: Client login (conid:71360793, id:2, name:test1)
11.10 19:53:01 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
11.10 19:53:01 -<<-: core/user.loginPost null
11.10 19:53:01 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
11.10 19:53:01 == NET: test1 ret: user.join { name => test1, type => user.join }
11.10 19:53:10 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
11.10 19:53:10 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
11.10 19:53:19 TIMER: Check auto-disconnect...
11.10 19:53:20 STATS: vdl.0 cache, locks:2
11.10 19:53:45 ++ NET: test1 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
11.10 19:53:45 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
11.10 19:53:45 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, id => 1, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
11.10 19:53:45 TIME: tournament.getAvailableTournament 1.24 ms
11.10 19:53:45 == NET: test1 ret: tournament.getAvailableTournament { list => [{ name => test, id => 1, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
11.10 19:54:19 TIMER: Check auto-disconnect...
11.10 19:54:20 STATS: vdl.0 cache, locks:2
11.10 19:55:19 TIMER: Check auto-disconnect...
11.10 19:55:20 STATS: vdl.0 cache, locks:2
11.10 19:56:19 TIMER: Check auto-disconnect...
11.10 19:56:20 STATS: vdl.0 cache, locks:2
11.10 19:57:19 TIMER: Check auto-disconnect...
11.10 19:57:19 NET: Client (name:test1 conid:71360793 TCP) disconnected from vdl.0 (clients:0)
11.10 19:57:19 DB: SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true
11.10 19:57:19 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true, _type => core/server.query }
11.10 19:57:19 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
11.10 19:57:19 STATS: vdl.0 cache connection, 28 calls, total 0.0312583446502686 sec spent, avg 1.12 ms
11.10 19:57:19 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
11.10 19:57:19 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
11.10 19:57:19 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
11.10 19:57:19 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
11.10 19:57:19 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
11.10 19:57:19 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
11.10 19:57:19 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
11.10 19:57:19 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
11.10 19:57:19 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
11.10 19:57:19 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
11.10 19:57:20 STATS: vdl.0 cache, locks:0
11.10 19:58:19 TIMER: Check auto-disconnect...
11.10 19:58:20 STATS: vdl.0 cache, locks:0
11.10 19:59:19 TIMER: Check auto-disconnect...
11.10 19:59:20 STATS: vdl.0 cache, locks:0
