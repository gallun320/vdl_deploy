12.10 13:00:14 TIMER: Check auto-disconnect...
12.10 13:00:14 STATS: vdl.0 cache, locks:2
12.10 13:00:20 NET: Client (name:test1 conid:31686983 TCP) disconnected from vdl.0 (clients:0)
12.10 13:00:20 DB: SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true
12.10 13:00:20 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true, _type => core/server.query }
12.10 13:00:20 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 13:00:20 STATS: vdl.0 cache connection, 31 calls, total 0.0587723255157471 sec spent, avg 1.9 ms
12.10 13:00:20 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 13:00:20 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 13:00:20 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 13:00:20 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
12.10 13:00:20 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
12.10 13:00:20 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 13:00:20 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
12.10 13:00:20 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 13:00:20 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
12.10 13:00:20 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 13:01:14 TIMER: Check auto-disconnect...
12.10 13:01:14 STATS: vdl.0 cache, locks:0
12.10 13:01:18 NET: Client (conid:33258518) connected to vdl.0 (clients:1)
12.10 13:01:18 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
12.10 13:01:18 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
12.10 13:01:18 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
12.10 13:01:18 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
12.10 13:01:18 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
12.10 13:01:18 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 13:01:18 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
12.10 13:01:18 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1476204122, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 0, id => 2 } }
12.10 13:01:18 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
12.10 13:01:18 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
12.10 13:01:18 NET: Client login (conid:33258518, id:2, name:test1)
12.10 13:01:18 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.35.23 }
12.10 13:01:18 -<<-: core/user.loginPost { _type => core/user.loginPost }
12.10 13:01:18 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
12.10 13:01:18 == NET: test1 ret: user.join { name => test1, type => user.join }
12.10 13:01:24 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
12.10 13:01:24 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 13:01:24 STATS: vdl.0 cache connection, 41 calls, total 0.0690300464630127 sec spent, avg 1.68 ms
12.10 13:04:29 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:04:29 -<<-: server.login ok
12.10 13:04:29 DB: SELECT * FROM LocalizationStrings
12.10 13:04:29 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:29 TIMER: Starting timer...
12.10 13:04:29 TIMER: Timer running...
12.10 13:04:29 DB: SELECT * FROM GameVars
12.10 13:04:29 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:29 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:04:29 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:29 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:04:29 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:29 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:04:29 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:29 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:04:29 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:29 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:04:29 -<<-: core/quest.getDaily ok
12.10 13:04:29 DB: SELECT * FROM UserAttributeTypes
12.10 13:04:29 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:29 DB: SELECT * FROM UserVariableTypes
12.10 13:04:29 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:29 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:04:29 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:29 DB: SELECT * FROM ItemGroups
12.10 13:04:29 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:29 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:04:29 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:29 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:04:29 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:29 SHOP: loading items...
12.10 13:04:29 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 13:04:29 -<<-: core/shop.getList ok
12.10 13:04:29 SHOP: 0 items loaded (0 sec)
12.10 13:04:29 DB: SELECT * FROM EffectAttributeTypes
12.10 13:04:29 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:29 DB: SELECT * FROM Effects
12.10 13:04:29 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:29 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:04:29 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:29 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:04:29 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:29 DB: SELECT * FROM Badges
12.10 13:04:29 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:04:29 -<<-: core/server.query ok
12.10 13:04:39 NET: Client (conid:37706204) connected to vdl.0 (clients:1)
12.10 13:04:39 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
12.10 13:04:39 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
12.10 13:04:39 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
12.10 13:04:39 -<<-: core/server.query ok
12.10 13:04:39 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
12.10 13:04:39 -<<-: core/user.isOnlineID ok
12.10 13:04:39 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
12.10 13:04:39 -<<-: core/cache.get ok
12.10 13:04:39 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
12.10 13:04:39 -<<-: core/cache.get ok
12.10 13:04:39 NET: Client login (conid:37706204, id:2, name:test1)
12.10 13:04:39 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.35.23 }
12.10 13:04:39 -<<-: core/user.loginPost null
12.10 13:04:39 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
12.10 13:04:39 == NET: test1 ret: user.join { name => test1, type => user.join }
12.10 13:04:44 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
12.10 13:04:44 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 13:05:43 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:05:43 -<<-: server.login ok
12.10 13:05:43 DB: SELECT * FROM LocalizationStrings
12.10 13:05:43 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:43 TIMER: Starting timer...
12.10 13:05:43 TIMER: Timer running...
12.10 13:05:43 DB: SELECT * FROM GameVars
12.10 13:05:43 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:43 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:05:43 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:43 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:05:43 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:43 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:05:43 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:43 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:05:43 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:43 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:05:43 -<<-: core/quest.getDaily ok
12.10 13:05:43 DB: SELECT * FROM UserAttributeTypes
12.10 13:05:43 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:43 DB: SELECT * FROM UserVariableTypes
12.10 13:05:43 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:43 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:05:43 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:43 DB: SELECT * FROM ItemGroups
12.10 13:05:43 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:43 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:05:43 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:43 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:05:43 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:43 SHOP: loading items...
12.10 13:05:43 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 13:05:43 -<<-: core/shop.getList ok
12.10 13:05:43 SHOP: 0 items loaded (0 sec)
12.10 13:05:43 DB: SELECT * FROM EffectAttributeTypes
12.10 13:05:43 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:43 DB: SELECT * FROM Effects
12.10 13:05:43 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:43 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:05:43 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:43 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:05:43 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:43 DB: SELECT * FROM Badges
12.10 13:05:43 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:05:43 -<<-: core/server.query ok
12.10 13:05:51 NET: Client (conid:40450017) connected to vdl.0 (clients:1)
12.10 13:05:51 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
12.10 13:05:51 == NET: null ret: user.work { type => user.work, message => it's happens }
12.10 13:05:51 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
12.10 13:05:51 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
12.10 13:05:51 -<<-: core/server.query ok
12.10 13:05:51 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
12.10 13:05:51 -<<-: core/user.isOnlineID ok
12.10 13:05:51 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
12.10 13:05:51 -<<-: core/cache.get ok
12.10 13:05:51 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
12.10 13:05:51 -<<-: core/cache.get ok
12.10 13:05:51 NET: Client login (conid:40450017, id:2, name:test1)
12.10 13:05:51 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.35.23 }
12.10 13:05:51 -<<-: core/user.loginPost null
12.10 13:05:51 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
12.10 13:05:51 == NET: test1 ret: user.join { name => test1, type => user.join }
12.10 13:06:38 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:06:38 -<<-: server.login ok
12.10 13:06:38 DB: SELECT * FROM LocalizationStrings
12.10 13:06:38 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:06:38 TIMER: Starting timer...
12.10 13:06:38 TIMER: Timer running...
12.10 13:06:38 DB: SELECT * FROM GameVars
12.10 13:06:38 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:06:38 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:06:38 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:06:38 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:06:38 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:06:38 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:06:38 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:06:38 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:06:38 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:06:38 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:06:38 -<<-: core/quest.getDaily ok
12.10 13:06:38 DB: SELECT * FROM UserAttributeTypes
12.10 13:06:38 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:06:38 DB: SELECT * FROM UserVariableTypes
12.10 13:06:38 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:06:38 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:06:38 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:06:38 DB: SELECT * FROM ItemGroups
12.10 13:06:38 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:06:38 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:06:38 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:06:38 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:06:38 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:06:38 SHOP: loading items...
12.10 13:06:38 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 13:06:38 -<<-: core/shop.getList ok
12.10 13:06:38 SHOP: 0 items loaded (0 sec)
12.10 13:06:38 DB: SELECT * FROM EffectAttributeTypes
12.10 13:06:38 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:06:38 DB: SELECT * FROM Effects
12.10 13:06:38 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:06:38 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:06:38 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:06:38 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:06:38 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:06:38 DB: SELECT * FROM Badges
12.10 13:06:38 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:06:38 -<<-: core/server.query ok
12.10 13:07:14 NET: Client (conid:66362313) connected to vdl.0 (clients:1)
12.10 13:07:15 ++ NET: null req: user.register { messageType => user.register }
12.10 13:07:15 DB: SELECT * FROM users
12.10 13:07:15 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:07:15 -<<-: core/server.query ok
12.10 13:07:15 DB: SELECT ID FROM Users WHERE Name = E'uid17'
12.10 13:07:15 == NET: null ret: user.auth { type => user.auth, token => dWlkMTc= }
12.10 13:07:15 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid17', _type => core/server.query }
12.10 13:07:15 -<<-: core/server.query ok
12.10 13:07:15 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:07:15 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:07:15 -<<-: core/server.query ok
12.10 13:07:15 ->>-: core/user.register { password => uid17, name => uid17, fullParams => { password => uid17, name => uid17, networkid => , networktype => , messageType => user.register, id => 17 }, networkid => , connectionID => 66362313, networktype => , email => , id => 17, _type => core/user.register }
12.10 13:07:15 -<<-: core/user.register ok
12.10 13:07:15 -<<-: core/user.registerResponse null
12.10 13:07:15 == NET: null ret: user.register { type => user.register, errorCode => ok }
12.10 13:07:16 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMTc= }
12.10 13:07:16 TRACE: Class cast error
12.10 13:07:16 TRACE: 
Called from snipe/lib/Params.hx line 76
Called from snipe/slave/modules/UserModuleCore.hx line 330
Called from snipe/slave/Server.hx line 887
Called from snipe/slave/Server.hx line 1124
12.10 13:07:16 TRACE: Could not login.
12.10 13:07:16 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
12.10 13:07:38 TIMER: Check auto-disconnect...
12.10 13:07:38 STATS: vdl.0 cache, locks:0
12.10 13:07:58 NET: Client (name:null conid:66362313 TCP) disconnected from vdl.0 (clients:0)
12.10 13:09:25 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:09:25 -<<-: server.login ok
12.10 13:09:25 DB: SELECT * FROM LocalizationStrings
12.10 13:09:25 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:09:25 TIMER: Starting timer...
12.10 13:09:25 TIMER: Timer running...
12.10 13:09:25 DB: SELECT * FROM GameVars
12.10 13:09:25 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:09:25 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:09:25 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:09:25 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:09:25 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:09:25 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:09:25 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:09:25 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:09:25 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:09:25 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:09:25 -<<-: core/quest.getDaily ok
12.10 13:09:25 DB: SELECT * FROM UserAttributeTypes
12.10 13:09:25 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:09:25 DB: SELECT * FROM UserVariableTypes
12.10 13:09:25 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:09:25 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:09:25 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:09:25 DB: SELECT * FROM ItemGroups
12.10 13:09:25 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:09:25 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:09:25 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:09:25 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:09:25 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:09:25 SHOP: loading items...
12.10 13:09:25 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 13:09:25 -<<-: core/shop.getList ok
12.10 13:09:25 SHOP: 0 items loaded (0.001 sec)
12.10 13:09:25 DB: SELECT * FROM EffectAttributeTypes
12.10 13:09:25 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:09:25 DB: SELECT * FROM Effects
12.10 13:09:25 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:09:25 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:09:25 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:09:25 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:09:25 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:09:25 DB: SELECT * FROM Badges
12.10 13:09:25 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:09:25 -<<-: core/server.query ok
12.10 13:10:03 NET: Client (conid:21895126) connected to vdl.0 (clients:1)
12.10 13:10:03 ++ NET: null req: user.register { messageType => user.register }
12.10 13:10:03 DB: SELECT * FROM users
12.10 13:10:03 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:10:03 -<<-: core/server.query ok
12.10 13:10:03 == NET: null ret: user.auth { type => user.auth, token => dWlkMTg= }
12.10 13:10:03 DB: SELECT ID FROM Users WHERE Name = E'uid18'
12.10 13:10:03 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid18', _type => core/server.query }
12.10 13:10:03 -<<-: core/server.query ok
12.10 13:10:03 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:10:03 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:10:03 -<<-: core/server.query ok
12.10 13:10:03 ->>-: core/user.register { password => uid18, name => uid18, fullParams => { password => uid18, name => uid18, networkid => , networktype => , messageType => user.register, id => 18 }, networkid => , connectionID => 21895126, networktype => , email => , id => 18, _type => core/user.register }
12.10 13:10:03 -<<-: core/user.register ok
12.10 13:10:03 -<<-: core/user.registerResponse null
12.10 13:10:03 == NET: null ret: user.register { type => user.register, errorCode => ok }
12.10 13:10:04 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login, token => dWlkMTg= }
12.10 13:10:04 TRACE: Class cast error
12.10 13:10:04 TRACE: 
Called from snipe/lib/Params.hx line 76
Called from snipe/slave/modules/UserModuleCore.hx line 330
Called from snipe/slave/Server.hx line 887
Called from snipe/slave/Server.hx line 1124
12.10 13:10:04 TRACE: Could not login.
12.10 13:10:04 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
12.10 13:11:33 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:11:33 -<<-: server.login ok
12.10 13:11:33 DB: SELECT * FROM LocalizationStrings
12.10 13:11:33 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:33 TIMER: Starting timer...
12.10 13:11:33 TIMER: Timer running...
12.10 13:11:33 DB: SELECT * FROM GameVars
12.10 13:11:33 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:33 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:11:33 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:33 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:11:33 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:33 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:11:33 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:33 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:11:33 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:33 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:11:33 -<<-: core/quest.getDaily ok
12.10 13:11:33 DB: SELECT * FROM UserAttributeTypes
12.10 13:11:33 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:33 DB: SELECT * FROM UserVariableTypes
12.10 13:11:33 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:33 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:11:33 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:33 DB: SELECT * FROM ItemGroups
12.10 13:11:33 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:33 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:11:33 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:33 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:11:33 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:33 SHOP: loading items...
12.10 13:11:33 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 13:11:33 -<<-: core/shop.getList ok
12.10 13:11:33 SHOP: 0 items loaded (0.001 sec)
12.10 13:11:33 DB: SELECT * FROM EffectAttributeTypes
12.10 13:11:33 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:33 DB: SELECT * FROM Effects
12.10 13:11:33 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:33 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:11:33 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:33 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:11:33 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:33 DB: SELECT * FROM Badges
12.10 13:11:33 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:11:33 -<<-: core/server.query ok
12.10 13:11:41 NET: Client (conid:66482704) connected to vdl.0 (clients:1)
12.10 13:11:41 ++ NET: null req: user.register { messageType => user.register }
12.10 13:11:41 DB: SELECT * FROM users
12.10 13:11:41 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:11:41 -<<-: core/server.query ok
12.10 13:11:41 DB: SELECT ID FROM Users WHERE Name = E'uid19'
12.10 13:11:41 == NET: null ret: user.auth { type => user.auth, token => dWlkMTk= }
12.10 13:11:41 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid19', _type => core/server.query }
12.10 13:11:41 -<<-: core/server.query ok
12.10 13:11:41 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:11:41 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:11:41 -<<-: core/server.query ok
12.10 13:11:41 ->>-: core/user.register { password => uid19, name => uid19, fullParams => { password => uid19, name => uid19, networkid => , networktype => , messageType => user.register, id => 19 }, networkid => , connectionID => 66482704, networktype => , email => , id => 19, _type => core/user.register }
12.10 13:11:41 -<<-: core/user.register ok
12.10 13:11:41 -<<-: core/user.registerResponse null
12.10 13:11:41 == NET: null ret: user.register { type => user.register, errorCode => ok }
12.10 13:11:41 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login, token => dWlkMTk= }
12.10 13:11:41 TRACE: Class cast error
12.10 13:11:41 TRACE: 
Called from snipe/lib/Params.hx line 76
Called from snipe/slave/modules/UserModuleCore.hx line 330
Called from snipe/slave/Server.hx line 887
Called from snipe/slave/Server.hx line 1124
12.10 13:11:41 TRACE: Could not login.
12.10 13:11:41 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
12.10 13:13:51 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:13:51 -<<-: server.login ok
12.10 13:13:51 DB: SELECT * FROM LocalizationStrings
12.10 13:13:51 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:13:51 -<<-: core/server.query ok
12.10 13:13:52 TIMER: Starting timer...
12.10 13:13:52 TIMER: Timer running...
12.10 13:13:52 DB: SELECT * FROM GameVars
12.10 13:13:52 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:13:52 -<<-: core/server.query ok
12.10 13:13:52 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:13:52 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:13:52 -<<-: core/server.query ok
12.10 13:13:52 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:13:52 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:13:52 -<<-: core/server.query ok
12.10 13:13:52 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:13:52 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:13:52 -<<-: core/server.query ok
12.10 13:13:52 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:13:52 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:13:52 -<<-: core/server.query ok
12.10 13:13:52 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:13:52 -<<-: core/quest.getDaily ok
12.10 13:13:52 DB: SELECT * FROM UserAttributeTypes
12.10 13:13:52 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:13:52 -<<-: core/server.query ok
12.10 13:13:52 DB: SELECT * FROM UserVariableTypes
12.10 13:13:52 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:13:52 -<<-: core/server.query ok
12.10 13:13:52 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:13:52 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:13:52 -<<-: core/server.query ok
12.10 13:13:52 DB: SELECT * FROM ItemGroups
12.10 13:13:52 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:13:52 -<<-: core/server.query ok
12.10 13:13:52 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:13:52 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:13:52 -<<-: core/server.query ok
12.10 13:13:52 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:13:52 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:13:52 -<<-: core/server.query ok
12.10 13:13:52 SHOP: loading items...
12.10 13:13:52 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 13:13:52 -<<-: core/shop.getList ok
12.10 13:13:52 SHOP: 0 items loaded (0 sec)
12.10 13:13:52 DB: SELECT * FROM EffectAttributeTypes
12.10 13:13:52 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:13:52 -<<-: core/server.query ok
12.10 13:13:52 DB: SELECT * FROM Effects
12.10 13:13:52 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:13:52 -<<-: core/server.query ok
12.10 13:13:52 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:13:52 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:13:52 -<<-: core/server.query ok
12.10 13:13:52 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:13:52 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:13:52 -<<-: core/server.query ok
12.10 13:13:52 DB: SELECT * FROM Badges
12.10 13:13:52 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:13:52 -<<-: core/server.query ok
12.10 13:13:57 NET: Client (conid:57997747) connected to vdl.0 (clients:1)
12.10 13:13:57 ++ NET: null req: user.register { messageType => user.register }
12.10 13:13:57 DB: SELECT * FROM users
12.10 13:13:57 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:13:57 -<<-: core/server.query ok
12.10 13:13:57 == NET: null ret: user.auth { type => user.auth, token => dWlkMjA= }
12.10 13:13:57 DB: SELECT ID FROM Users WHERE Name = E'uid20'
12.10 13:13:57 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid20', _type => core/server.query }
12.10 13:13:57 -<<-: core/server.query ok
12.10 13:13:57 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:13:57 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:13:57 -<<-: core/server.query ok
12.10 13:13:57 ->>-: core/user.register { password => uid20, name => uid20, fullParams => { password => uid20, name => uid20, networkid => , networktype => , messageType => user.register, id => 20 }, networkid => , connectionID => 57997747, networktype => , email => , id => 20, _type => core/user.register }
12.10 13:13:57 -<<-: core/user.register ok
12.10 13:13:57 -<<-: core/user.registerResponse null
12.10 13:13:57 == NET: null ret: user.register { type => user.register, errorCode => ok }
12.10 13:13:57 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login, token => dWlkMjA= }
12.10 13:13:57 TRACE: Class cast error
12.10 13:13:57 TRACE: 
Called from snipe/lib/Params.hx line 76
Called from modules/VDLTournamentModule.hx line 386
Called from snipe/slave/Server.hx line 876
Called from snipe/slave/Server.hx line 1124
12.10 13:13:57 TRACE: Could not login.
12.10 13:13:57 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
12.10 13:16:14 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:16:14 -<<-: server.login ok
12.10 13:16:14 DB: SELECT * FROM LocalizationStrings
12.10 13:16:14 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:14 TIMER: Starting timer...
12.10 13:16:14 TIMER: Timer running...
12.10 13:16:14 DB: SELECT * FROM GameVars
12.10 13:16:14 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:14 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:16:14 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:14 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:16:14 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:14 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:16:14 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:14 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:16:14 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:14 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:16:14 -<<-: core/quest.getDaily ok
12.10 13:16:14 DB: SELECT * FROM UserAttributeTypes
12.10 13:16:14 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:14 DB: SELECT * FROM UserVariableTypes
12.10 13:16:14 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:14 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:16:14 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:14 DB: SELECT * FROM ItemGroups
12.10 13:16:14 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:14 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:16:14 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:14 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:16:14 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:14 SHOP: loading items...
12.10 13:16:14 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 13:16:14 -<<-: core/shop.getList ok
12.10 13:16:14 SHOP: 0 items loaded (0 sec)
12.10 13:16:14 DB: SELECT * FROM EffectAttributeTypes
12.10 13:16:14 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:14 DB: SELECT * FROM Effects
12.10 13:16:14 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:14 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:16:14 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:14 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:16:14 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:14 DB: SELECT * FROM Badges
12.10 13:16:14 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:16:14 -<<-: core/server.query ok
12.10 13:16:21 NET: Client (conid:24569015) connected to vdl.0 (clients:1)
12.10 13:16:21 ++ NET: null req: user.register { messageType => user.register }
12.10 13:16:21 DB: SELECT * FROM users
12.10 13:16:21 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:16:21 -<<-: core/server.query ok
12.10 13:16:21 DB: SELECT ID FROM Users WHERE Name = E'uid21'
12.10 13:16:21 == NET: null ret: user.auth { type => user.auth, token => dWlkMjE= }
12.10 13:16:21 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid21', _type => core/server.query }
12.10 13:16:21 -<<-: core/server.query ok
12.10 13:16:21 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:16:21 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:16:21 -<<-: core/server.query ok
12.10 13:16:21 ->>-: core/user.register { password => uid21, name => uid21, fullParams => { password => uid21, name => uid21, networkid => , networktype => , messageType => user.register, id => 21 }, networkid => , connectionID => 24569015, networktype => , email => , id => 21, _type => core/user.register }
12.10 13:16:21 -<<-: core/user.register ok
12.10 13:16:21 -<<-: core/user.registerResponse null
12.10 13:16:21 == NET: null ret: user.register { type => user.register, errorCode => ok }
12.10 13:16:21 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login, token => dWlkMjE= }
12.10 13:16:21 TRACE: Class cast error
12.10 13:16:21 TRACE: 
Called from snipe/lib/Params.hx line 76
Called from modules/VDLTournamentModule.hx line 387
Called from snipe/slave/Server.hx line 876
Called from snipe/slave/Server.hx line 1124
12.10 13:16:21 TRACE: Could not login.
12.10 13:16:21 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
12.10 13:18:03 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:18:03 -<<-: server.login ok
12.10 13:18:03 DB: SELECT * FROM LocalizationStrings
12.10 13:18:03 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:03 TIMER: Starting timer...
12.10 13:18:03 TIMER: Timer running...
12.10 13:18:03 DB: SELECT * FROM GameVars
12.10 13:18:03 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:03 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:18:03 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:03 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:18:03 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:03 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:18:03 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:03 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:18:03 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:03 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:18:03 -<<-: core/quest.getDaily ok
12.10 13:18:03 DB: SELECT * FROM UserAttributeTypes
12.10 13:18:03 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:03 DB: SELECT * FROM UserVariableTypes
12.10 13:18:03 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:03 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:18:03 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:03 DB: SELECT * FROM ItemGroups
12.10 13:18:03 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:03 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:18:03 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:03 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:18:03 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:03 SHOP: loading items...
12.10 13:18:03 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 13:18:03 -<<-: core/shop.getList ok
12.10 13:18:03 SHOP: 0 items loaded (0.001 sec)
12.10 13:18:03 DB: SELECT * FROM EffectAttributeTypes
12.10 13:18:03 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:03 DB: SELECT * FROM Effects
12.10 13:18:03 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:03 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:18:03 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:03 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:18:03 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:03 DB: SELECT * FROM Badges
12.10 13:18:03 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:18:03 -<<-: core/server.query ok
12.10 13:18:13 NET: Client (conid:64509725) connected to vdl.0 (clients:1)
12.10 13:18:13 ++ NET: null req: user.register { messageType => user.register }
12.10 13:18:13 DB: SELECT * FROM users
12.10 13:18:13 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:18:13 -<<-: core/server.query ok
12.10 13:18:13 DB: SELECT ID FROM Users WHERE Name = E'uid22'
12.10 13:18:13 == NET: null ret: user.auth { type => user.auth, token => dWlkMjI= }
12.10 13:18:13 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid22', _type => core/server.query }
12.10 13:18:13 -<<-: core/server.query ok
12.10 13:18:13 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:18:13 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:18:13 -<<-: core/server.query ok
12.10 13:18:13 ->>-: core/user.register { password => uid22, name => uid22, fullParams => { password => uid22, name => uid22, networkid => , networktype => , messageType => user.register, id => 22 }, networkid => , connectionID => 64509725, networktype => , email => , id => 22, _type => core/user.register }
12.10 13:18:13 -<<-: core/user.register ok
12.10 13:18:13 -<<-: core/user.registerResponse null
12.10 13:18:13 == NET: null ret: user.register { type => user.register, errorCode => ok }
12.10 13:18:13 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login, token => dWlkMjI= }
12.10 13:18:13 TRACE: Class cast error
12.10 13:18:13 TRACE: 
Called from snipe/lib/Params.hx line 76
Called from modules/VDLTournamentModule.hx line 387
Called from snipe/slave/Server.hx line 876
Called from snipe/slave/Server.hx line 1124
12.10 13:18:13 TRACE: Could not login.
12.10 13:18:13 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
12.10 13:19:03 TIMER: Check auto-disconnect...
12.10 13:19:03 STATS: vdl.0 cache, locks:0
12.10 13:19:03 TIMER: Check auto-disconnect...
12.10 13:19:03 STATS: vdl.0 cache, locks:0
12.10 13:19:03 TIMER: Check auto-disconnect...
12.10 13:19:03 STATS: vdl.0 cache, locks:0
12.10 13:19:03 TIMER: Check auto-disconnect...
12.10 13:19:03 NET: Client (name:null conid:64509725 TCP) disconnected from vdl.0 (clients:0)
12.10 13:19:03 STATS: vdl.0 cache, locks:0
12.10 13:19:03 TIMER: Check auto-disconnect...
12.10 13:19:03 STATS: vdl.0 cache, locks:0
12.10 13:19:03 TIMER: Check auto-disconnect...
12.10 13:19:03 STATS: vdl.0 cache, locks:0
12.10 13:19:03 TIMER: Check auto-disconnect...
12.10 13:25:04 STATS: vdl.0 cache, locks:0
12.10 13:26:03 TIMER: Check auto-disconnect...
12.10 13:26:04 STATS: vdl.0 cache, locks:0
12.10 13:27:03 TIMER: Check auto-disconnect...
12.10 13:27:04 STATS: vdl.0 cache, locks:0
12.10 13:28:03 TIMER: Check auto-disconnect...
12.10 13:28:04 STATS: vdl.0 cache, locks:0
12.10 13:29:03 TIMER: Check auto-disconnect...
12.10 13:29:04 STATS: vdl.0 cache, locks:0
12.10 13:30:03 TIMER: Check auto-disconnect...
12.10 13:30:04 STATS: vdl.0 cache, locks:0
12.10 13:31:03 TIMER: Check auto-disconnect...
12.10 13:31:04 STATS: vdl.0 cache, locks:0
12.10 13:32:03 TIMER: Check auto-disconnect...
12.10 13:32:04 STATS: vdl.0 cache, locks:0
12.10 13:33:03 TIMER: Check auto-disconnect...
12.10 13:33:04 STATS: vdl.0 cache, locks:0
12.10 13:33:07 NET: Client (conid:20509004) connected to vdl.0 (clients:1)
12.10 13:33:08 ++ NET: null req: user.register { messageType => user.register }
12.10 13:33:08 DB: SELECT * FROM users
12.10 13:33:08 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:33:08 -<<-: core/server.query ok
12.10 13:33:08 STATS: vdl.0 cache connection, 25 calls, total 0.113555669784546 sec spent, avg 4.54 ms
12.10 13:33:08 == NET: null ret: user.auth { type => user.auth, token => dWlkMjM= }
12.10 13:33:08 DB: SELECT ID FROM Users WHERE Name = E'uid23'
12.10 13:33:08 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid23', _type => core/server.query }
12.10 13:33:08 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 13:33:08 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:33:08 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:33:08 -<<-: core/server.query { list => {{ id => 23 }}, errorCode => ok, _type => core/server.query }
12.10 13:33:08 ->>-: core/user.register { password => uid23, name => uid23, fullParams => { password => uid23, name => uid23, networkid => , networktype => , messageType => user.register, id => 23 }, networkid => , connectionID => 20509004, networktype => , email => , id => 23, _type => core/user.register }
12.10 13:33:08 -<<-: core/user.register { errorCode => ok, _type => core/user.register }
12.10 13:33:08 -<<-: core/user.registerResponse { password => uid23, name => uid23, _isNotify => true, fullParams => { password => uid23, name => uid23, networkid => , networktype => , messageType => user.register, id => 23 }, networkid => , connectionID => 20509004, networktype => , email => , id => 23, _type => core/user.registerResponse }
12.10 13:33:08 == NET: null ret: user.register { type => user.register, errorCode => ok }
12.10 13:33:10 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMjM= }
12.10 13:33:10 TRACE: Class cast error
12.10 13:33:10 TRACE: 
Called from snipe/lib/Params.hx line 76
Called from modules/VDLTournamentModule.hx line 387
Called from snipe/slave/Server.hx line 876
Called from snipe/slave/Server.hx line 1124
12.10 13:33:10 TRACE: Could not login.
12.10 13:33:10 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
12.10 13:33:17 ++ NET: null req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 13:33:17 TRACE: User not logon yet.
12.10 13:33:42 NET: Client (name:null conid:20509004 TCP) disconnected from vdl.0 (clients:0)
12.10 13:34:03 TIMER: Check auto-disconnect...
12.10 13:34:04 STATS: vdl.0 cache, locks:0
12.10 13:35:03 TIMER: Check auto-disconnect...
12.10 13:35:04 STATS: vdl.0 cache, locks:0
12.10 13:36:03 TIMER: Check auto-disconnect...
12.10 13:36:35 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:36:35 -<<-: server.login ok
12.10 13:36:35 DB: SELECT * FROM LocalizationStrings
12.10 13:36:35 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:35 TIMER: Starting timer...
12.10 13:36:35 TIMER: Timer running...
12.10 13:36:35 DB: SELECT * FROM GameVars
12.10 13:36:35 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:35 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:36:35 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:35 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:36:35 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:35 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:36:35 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:35 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:36:35 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:35 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:36:35 -<<-: core/quest.getDaily ok
12.10 13:36:35 DB: SELECT * FROM UserAttributeTypes
12.10 13:36:35 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:35 DB: SELECT * FROM UserVariableTypes
12.10 13:36:35 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:35 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:36:35 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:35 DB: SELECT * FROM ItemGroups
12.10 13:36:35 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:35 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:36:35 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:35 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:36:35 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:35 SHOP: loading items...
12.10 13:36:35 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 13:36:35 -<<-: core/shop.getList ok
12.10 13:36:35 SHOP: 0 items loaded (0.002 sec)
12.10 13:36:35 DB: SELECT * FROM EffectAttributeTypes
12.10 13:36:35 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:35 DB: SELECT * FROM Effects
12.10 13:36:35 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:35 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:36:35 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:35 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:36:35 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:35 DB: SELECT * FROM Badges
12.10 13:36:35 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:36:35 -<<-: core/server.query ok
12.10 13:36:42 NET: Client (conid:64251534) connected to vdl.0 (clients:1)
12.10 13:36:42 ++ NET: null req: user.register { messageType => user.register }
12.10 13:36:42 DB: SELECT * FROM users
12.10 13:36:42 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:36:42 -<<-: core/server.query ok
12.10 13:36:42 DB: SELECT ID FROM Users WHERE Name = E'uid24'
12.10 13:36:42 == NET: null ret: user.auth { type => user.auth, token => dWlkMjQ= }
12.10 13:36:42 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid24', _type => core/server.query }
12.10 13:36:42 -<<-: core/server.query ok
12.10 13:36:42 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:36:42 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:36:42 -<<-: core/server.query ok
12.10 13:36:42 ->>-: core/user.register { password => uid24, name => uid24, fullParams => { password => uid24, name => uid24, networkid => , networktype => , messageType => user.register, id => 24 }, networkid => , connectionID => 64251534, networktype => , email => , id => 24, _type => core/user.register }
12.10 13:36:42 -<<-: core/user.register ok
12.10 13:36:42 -<<-: core/user.registerResponse null
12.10 13:36:42 == NET: null ret: user.register { type => user.register, errorCode => ok }
12.10 13:36:42 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login, token => dWlkMjQ= }
12.10 13:36:42 TRACE: Class cast error
12.10 13:36:42 TRACE: 
Called from snipe/lib/Params.hx line 76
Called from snipe/slave/modules/UserModuleCore.hx line 330
Called from snipe/slave/Server.hx line 887
Called from snipe/slave/Server.hx line 1124
12.10 13:36:42 TRACE: Could not login.
12.10 13:36:42 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
12.10 13:37:06 NET: Client (conid:20773087) connected to vdl.0 (clients:2)
12.10 13:37:07 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
12.10 13:37:07 TRACE: Invalid field access : length
12.10 13:37:07 TRACE: 
Called from /usr/share/haxe/std/haxe/crypto/Base64.hx line 47
Called from modules/VDLTournamentModule.hx line 382
Called from snipe/slave/Server.hx line 876
Called from snipe/slave/Server.hx line 1124
12.10 13:37:07 TRACE: Could not login.
12.10 13:37:07 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
12.10 13:37:16 NET: Client (name:null conid:20773087 TCP) disconnected from vdl.0 (clients:1)
12.10 13:40:27 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:40:27 -<<-: server.login ok
12.10 13:40:27 DB: SELECT * FROM LocalizationStrings
12.10 13:40:27 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 TIMER: Starting timer...
12.10 13:40:27 DB: SELECT * FROM GameVars
12.10 13:40:27 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:40:27 TIMER: Timer running...
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:40:27 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:40:27 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:40:27 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:40:27 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:40:27 -<<-: core/quest.getDaily ok
12.10 13:40:27 DB: SELECT * FROM UserAttributeTypes
12.10 13:40:27 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 DB: SELECT * FROM UserVariableTypes
12.10 13:40:27 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:40:27 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 DB: SELECT * FROM ItemGroups
12.10 13:40:27 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:40:27 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:40:27 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 SHOP: loading items...
12.10 13:40:27 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 13:40:27 -<<-: core/shop.getList ok
12.10 13:40:27 SHOP: 0 items loaded (0.001 sec)
12.10 13:40:27 DB: SELECT * FROM EffectAttributeTypes
12.10 13:40:27 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 DB: SELECT * FROM Effects
12.10 13:40:27 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:40:27 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:40:27 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 DB: SELECT * FROM Badges
12.10 13:40:27 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:40:27 -<<-: core/server.query ok
12.10 13:40:27 TIMER: Check auto-disconnect...
12.10 13:40:27 STATS: vdl.0 cache, locks:0
12.10 13:42:11 NET: Client (conid:15241932) connected to vdl.0 (clients:1)
12.10 13:42:14 ++ NET: null req: user.register { messageType => user.register }
12.10 13:42:14 DB: SELECT * FROM users
12.10 13:42:14 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:42:14 -<<-: core/server.query ok
12.10 13:42:14 STATS: vdl.0 cache connection, 21 calls, total 0.0394308567047119 sec spent, avg 1.88 ms
12.10 13:42:14 == NET: null ret: user.auth { type => user.auth, token => dWlkMjU= }
12.10 13:42:14 DB: SELECT ID FROM Users WHERE Name = E'uid25'
12.10 13:42:14 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid25', _type => core/server.query }
12.10 13:42:14 -<<-: core/server.query ok
12.10 13:42:14 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:42:14 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:42:14 -<<-: core/server.query ok
12.10 13:42:14 ->>-: core/user.register { password => uid25, name => uid25, fullParams => { password => uid25, name => uid25, networkid => , networktype => , messageType => user.register, id => 25 }, networkid => , connectionID => 15241932, networktype => , email => , id => 25, _type => core/user.register }
12.10 13:42:14 -<<-: core/user.register ok
12.10 13:42:14 -<<-: core/user.registerResponse null
12.10 13:42:14 == NET: null ret: user.register { type => user.register, errorCode => ok }
12.10 13:42:14 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login, token => dWlkMjU= }
12.10 13:42:14 TRACE: Class cast error
12.10 13:42:14 TRACE: 
Called from modules/VDLTournamentModule.hx line 385
Called from snipe/slave/Server.hx line 876
Called from snipe/slave/Server.hx line 1124
12.10 13:42:14 TRACE: Could not login.
12.10 13:42:14 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
12.10 13:52:42 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:52:42 -<<-: server.login ok
12.10 13:52:42 DB: SELECT * FROM LocalizationStrings
12.10 13:52:42 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:52:42 TIMER: Starting timer...
12.10 13:52:42 DB: SELECT * FROM GameVars
12.10 13:52:42 TIMER: Timer running...
12.10 13:52:42 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:52:42 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:52:42 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:52:42 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:52:42 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:52:42 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:52:42 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:52:42 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:52:42 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:52:42 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:52:42 -<<-: core/quest.getDaily ok
12.10 13:52:42 DB: SELECT * FROM UserAttributeTypes
12.10 13:52:42 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:52:42 DB: SELECT * FROM UserVariableTypes
12.10 13:52:42 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:52:42 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:52:42 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:52:42 DB: SELECT * FROM ItemGroups
12.10 13:52:42 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:52:42 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:52:42 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:52:42 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:52:42 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:52:42 SHOP: loading items...
12.10 13:52:42 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 13:52:42 -<<-: core/shop.getList ok
12.10 13:52:42 SHOP: 0 items loaded (0 sec)
12.10 13:52:42 DB: SELECT * FROM EffectAttributeTypes
12.10 13:52:42 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:52:42 DB: SELECT * FROM Effects
12.10 13:52:42 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:52:42 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:52:42 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:52:42 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:52:42 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:52:42 DB: SELECT * FROM Badges
12.10 13:52:42 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:52:42 -<<-: core/server.query ok
12.10 13:53:33 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:53:33 -<<-: server.login ok
12.10 13:53:33 DB: SELECT * FROM LocalizationStrings
12.10 13:53:33 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:33 TIMER: Starting timer...
12.10 13:53:33 TIMER: Timer running...
12.10 13:53:33 DB: SELECT * FROM GameVars
12.10 13:53:33 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:33 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:53:33 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:33 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:53:33 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:33 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:53:33 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:33 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:53:33 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:33 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:53:33 -<<-: core/quest.getDaily ok
12.10 13:53:33 DB: SELECT * FROM UserAttributeTypes
12.10 13:53:33 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:33 DB: SELECT * FROM UserVariableTypes
12.10 13:53:33 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:33 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:53:33 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:33 DB: SELECT * FROM ItemGroups
12.10 13:53:33 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:33 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:53:33 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:33 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:53:33 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:33 SHOP: loading items...
12.10 13:53:33 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 13:53:33 -<<-: core/shop.getList ok
12.10 13:53:33 SHOP: 0 items loaded (0 sec)
12.10 13:53:33 DB: SELECT * FROM EffectAttributeTypes
12.10 13:53:33 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:33 DB: SELECT * FROM Effects
12.10 13:53:33 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:33 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 13:53:33 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:33 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 13:53:33 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:33 DB: SELECT * FROM Badges
12.10 13:53:33 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 13:53:33 -<<-: core/server.query ok
12.10 13:53:40 NET: Client (conid:24116044) connected to vdl.0 (clients:1)
12.10 13:53:40 ++ NET: null req: user.register { messageType => user.register }
12.10 13:53:40 DB: SELECT * FROM users
12.10 13:53:40 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:53:40 -<<-: core/server.query ok
12.10 13:53:40 DB: SELECT ID FROM Users WHERE Name = E'uid27'
12.10 13:53:40 == NET: null ret: user.auth { type => user.auth, token => dWlkMjc= }
12.10 13:53:40 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid27', _type => core/server.query }
12.10 13:53:40 -<<-: core/server.query ok
12.10 13:53:40 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:53:40 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:53:40 -<<-: core/server.query ok
12.10 13:53:40 ->>-: core/user.register { password => uid27, name => uid27, fullParams => { password => uid27, name => uid27, networkid => , networktype => , messageType => user.register, id => 27 }, networkid => , connectionID => 24116044, networktype => , email => , id => 27, _type => core/user.register }
12.10 13:53:40 -<<-: core/user.register ok
12.10 13:53:40 -<<-: core/user.registerResponse null
12.10 13:53:40 == NET: null ret: user.register { type => user.register, errorCode => ok }
12.10 13:53:41 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login, token => dWlkMjc= }
12.10 13:53:41 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid27' AND Password = E'uid27'
12.10 13:53:41 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid27' AND Password = E'uid27', _type => core/server.query }
12.10 13:53:41 -<<-: core/server.query ok
12.10 13:53:41 ->>-: core/user.isOnlineID { id => 27, _type => core/user.isOnlineID }
12.10 13:53:41 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 13:53:41 ->>-: core/cache.get { type => user, v => -1, id => 27, _type => core/cache.get }
12.10 13:53:41 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid27, deleted => false, email => , networktype =>   , password => uid27, isbanned => false, regdate => 2016-10-12 13:53:40.789776+03, language =>   , networkid => , params => { inventory => { list => [] }, vars => {}, attrs => {}, effects => { list => [] } }}, version => 1, id => 27 } }
12.10 13:53:41 ->>-: core/cache.get { type => questdata, v => -1, id => 27, _type => core/cache.get }
12.10 13:53:41 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 27 } }
12.10 13:53:41 NET: Client login (conid:24116044, id:27, name:uid27)
12.10 13:53:41 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 27, _type => core/user.loginPost, ipAddr => 172.16.35.23 }
12.10 13:53:41 -<<-: core/user.loginPost { _type => core/user.loginPost }
12.10 13:53:41 DB: SELECT ID FROM TempUserLogins WHERE UserID = 27 AND Date = 'today'::timestamp
12.10 13:53:41 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 27 AND Date = 'today'::timestamp, _type => core/server.query }
12.10 13:53:41 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 13:53:41 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (27, 'today'::timestamp)
12.10 13:53:41 == NET: uid27 ret: user.login { name => uid27, type => user.login, errorCode => ok, id => 27 }
12.10 13:53:41 == NET: uid27 ret: user.join { name => uid27, type => user.join }
12.10 13:53:41 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (27, 'today'::timestamp), _type => core/server.pending }} }
12.10 13:53:41 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
12.10 13:53:48 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1476269621, lastLoginDate => 286, lastLoadDate => 1013 } }}, type => user, unlock => false, id => 27, _type => core/cache.update }
12.10 13:53:48 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 13:53:51 NET: Client (name:uid27 conid:24116044 TCP) disconnected from vdl.0 (clients:0)
12.10 13:53:51 DB: SELECT id FROM battle WHERE firstid=27 OR secondid=27 AND finished <> true
12.10 13:53:51 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=27 OR secondid=27 AND finished <> true, _type => core/server.query }
12.10 13:53:51 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 13:53:51 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 13:53:51 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 13:53:51 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 13:53:51 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
12.10 13:53:51 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 27, _type => core/cache.update }
12.10 13:53:51 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
12.10 13:53:51 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 27, _type => core/cache.update }
12.10 13:53:51 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 13:53:51 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 27, _type => core/user.logoutPost }
12.10 13:53:51 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 13:54:33 TIMER: Check auto-disconnect...
12.10 13:54:33 STATS: vdl.0 cache, locks:0
12.10 13:55:08 NET: Client (conid:58270493) connected to vdl.0 (clients:1)
12.10 13:55:09 ++ NET: null req: user.register { messageType => user.register }
12.10 13:55:09 DB: SELECT * FROM users
12.10 13:55:09 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 13:55:09 -<<-: core/server.query { list => {{ password => , name => --- DEFAULT ATTRIBUTES ---, networkid => , params => {"attrs":{},"inventory":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:45:16.008574+03, language =>   , id => 1, deleted => false }, { password => test, name => test3, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:08.364133+03, language =>   , id => 4, deleted => false }, { password => test, name => test4, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:11.728197+03, language =>   , id => 5, deleted => false }, { password => test, name => test5, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:15.596579+03, language =>   , id => 6, deleted => false }, { password => test, name => test6, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:19.233499+03, language =>   , id => 7, deleted => false }, { password => uid24, name => uid24, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:36:42.292969+03, language =>   , id => 24, deleted => false }, { password => uid25, name => uid25, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:42:14.268266+03, language =>   , id => 25, deleted => false }, { password => test, name => test7, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-09-07 16:46:43.688817+03, language =>   , id => 8, deleted => false }, { password => uid26, name => uid26, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:52:51.409771+03, language =>   , id => 26, deleted => false }, { password => uid9, name => uid9, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-11 20:36:09.090394+03, language =>   , id => 9, deleted => false }, { password => uid27, name => uid27, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476269621,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:53:40.789776+03, language => en, id => 27, deleted => false }, { password => uid10, name => uid10, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 11:12:48.168059+03, language =>   , id => 10, deleted => false }, { password => uid11, name => uid11, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:33:27.3109+03, language =>   , id => 11, deleted => false }, { password => uid12, name => uid12, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:47:26.670465+03, language =>   , id => 12, deleted => false }, { password => uid13, name => uid13, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:51:08.341292+03, language =>   , id => 13, deleted => false }, { password => uid14, name => uid14, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:53:34.360658+03, language =>   , id => 14, deleted => false }, { password => uid15, name => uid15, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:55:14.160619+03, language =>   , id => 15, deleted => false }, { password => uid16, name => uid16, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:59:18.86185+03, language =>   , id => 16, deleted => false }, { password => test, name => test2, networkid => , params => {"attrs":{"_lastTime.24hr":1472825979,"lastLoginDate":246,"lastLoadDate":903},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, id => 3, deleted => false }, { password => test, name => test1, networkid => , params => {"attrs":{"_lastTime.24hr":1476204122,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, id => 2, deleted => false }, { password => uid17, name => uid17, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:07:15.262858+03, language =>   , id => 17, deleted => false }, { password => uid18, name => uid18, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:10:03.885555+03, language =>   , id => 18, deleted => false }, { password => uid19, name => uid19, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:11:41.868111+03, language =>   , id => 19, deleted => false }, { password => uid20, name => uid20, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:13:57.605493+03, language =>   , id => 20, deleted => false }, { password => uid21, name => uid21, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:16:21.670662+03, language =>   , id => 21, deleted => false }, { password => uid22, name => uid22, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:18:13.422519+03, language =>   , id => 22, deleted => false }, { password => uid23, name => uid23, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:33:08.78413+03, language =>   , id => 23, deleted => false }}, errorCode => ok, _type => core/server.query }
12.10 13:55:09 STATS: vdl.0 cache connection, 38 calls, total 0.105175018310547 sec spent, avg 2.77 ms
12.10 13:55:09 == NET: null ret: user.auth { type => user.auth, token => dWlkMjg= }
12.10 13:55:09 DB: SELECT ID FROM Users WHERE Name = E'uid28'
12.10 13:55:09 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid28', _type => core/server.query }
12.10 13:55:09 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 13:55:09 DB: SELECT nextval('Users_id_seq') AS id
12.10 13:55:09 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 13:55:09 -<<-: core/server.query { list => {{ id => 28 }}, errorCode => ok, _type => core/server.query }
12.10 13:55:09 ->>-: core/user.register { password => uid28, name => uid28, fullParams => { password => uid28, name => uid28, networkid => , networktype => , messageType => user.register, id => 28 }, networkid => , connectionID => 58270493, networktype => , email => , id => 28, _type => core/user.register }
12.10 13:55:09 -<<-: core/user.register { errorCode => ok, _type => core/user.register }
12.10 13:55:09 -<<-: core/user.registerResponse { password => uid28, name => uid28, _isNotify => true, fullParams => { password => uid28, name => uid28, networkid => , networktype => , messageType => user.register, id => 28 }, networkid => , connectionID => 58270493, networktype => , email => , id => 28, _type => core/user.registerResponse }
12.10 13:55:09 == NET: null ret: user.register { type => user.register, errorCode => ok }
12.10 13:55:10 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMjg= }
12.10 13:55:10 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid28' AND Password = E'uid28'
12.10 13:55:10 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid28' AND Password = E'uid28', _type => core/server.query }
12.10 13:55:10 -<<-: core/server.query { list => {{ name => uid28, networkid => , isbanned => false, id => 28 }}, errorCode => ok, _type => core/server.query }
12.10 13:55:10 ->>-: core/user.isOnlineID { id => 28, _type => core/user.isOnlineID }
12.10 13:55:10 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 13:55:10 ->>-: core/cache.get { type => user, v => -1, id => 28, _type => core/cache.get }
12.10 13:55:10 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid28, deleted => false, email => , networktype =>   , password => uid28, isbanned => false, regdate => 2016-10-12 13:55:09.527211+03, language =>   , networkid => , params => { inventory => { list => [] }, vars => {}, attrs => {}, effects => { list => [] } }}, version => 1, id => 28 } }
12.10 13:55:10 ->>-: core/cache.get { type => questdata, v => -1, id => 28, _type => core/cache.get }
12.10 13:55:10 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 28 } }
12.10 13:55:10 NET: Client login (conid:58270493, id:28, name:uid28)
12.10 13:55:10 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 28, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 13:55:10 -<<-: core/user.loginPost { _type => core/user.loginPost }
12.10 13:55:10 DB: SELECT ID FROM TempUserLogins WHERE UserID = 28 AND Date = 'today'::timestamp
12.10 13:55:10 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 28 AND Date = 'today'::timestamp, _type => core/server.query }
12.10 13:55:10 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 13:55:10 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (28, 'today'::timestamp)
12.10 13:55:10 == NET: uid28 ret: user.login { name => uid28, type => user.login, errorCode => ok, id => 28 }
12.10 13:55:10 == NET: uid28 ret: user.join { name => uid28, type => user.join }
12.10 13:55:10 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (28, 'today'::timestamp), _type => core/server.pending }} }
12.10 13:55:10 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
12.10 13:55:18 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1476269710, lastLoginDate => 286, lastLoadDate => 1013 } }}, type => user, unlock => false, id => 28, _type => core/cache.update }
12.10 13:55:18 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 13:55:27 ++ NET: uid28 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 13:55:27 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 13:55:27 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 13:55:27 TIME: tournament.getAvailableTournament 20.37 ms
12.10 13:55:27 == NET: uid28 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 13:56:36 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 13:56:36 -<<-: server.login ok
12.10 13:56:36 DB: SELECT * FROM LocalizationStrings
12.10 13:56:36 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 13:56:36 -<<-: core/server.query ok
12.10 13:56:36 TIMER: Starting timer...
12.10 13:56:36 TIMER: Timer running...
12.10 13:56:36 DB: SELECT * FROM GameVars
12.10 13:56:36 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 13:56:36 -<<-: core/server.query ok
12.10 13:56:36 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 13:56:36 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 13:56:36 -<<-: core/server.query ok
12.10 13:56:36 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 13:56:36 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 13:56:36 -<<-: core/server.query ok
12.10 13:56:36 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 13:56:36 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 13:56:36 -<<-: core/server.query ok
12.10 13:56:36 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 13:56:36 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 13:56:36 -<<-: core/server.query ok
12.10 13:56:36 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 13:56:36 -<<-: core/quest.getDaily ok
12.10 13:56:36 DB: SELECT * FROM UserAttributeTypes
12.10 13:56:36 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 13:56:36 -<<-: core/server.query ok
12.10 13:56:36 DB: SELECT * FROM UserVariableTypes
12.10 13:56:36 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 13:56:36 -<<-: core/server.query ok
12.10 13:56:36 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 13:56:36 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 13:56:36 -<<-: core/server.query ok
12.10 13:56:36 DB: SELECT * FROM ItemGroups
12.10 13:56:36 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 13:56:36 -<<-: core/server.query ok
12.10 13:56:36 DB: SELECT * FROM Bundles ORDER BY ID
12.10 13:56:36 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 13:56:36 -<<-: core/server.query ok
12.10 13:56:36 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 13:56:36 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 13:56:36 -<<-: core/server.query ok
12.10 13:56:36 SHOP: loading items...
12.10 13:56:36 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 13:56:36 -<<-: core/shop.getList ok
12.10 13:56:36 SHOP: 0 items loaded (0 sec)
12.10 13:56:36 DB: SELECT * FROM EffectAttributeTypes
12.10 13:56:36 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 13:56:36 -<<-: core/server.query ok
12.10 13:56:36 DB: SELECT * FROM Effects
12.10 13:56:36 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 13:56:36 -<<-: core/server.query ok
12.10 13:56:36 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(