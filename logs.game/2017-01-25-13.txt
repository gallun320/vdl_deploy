25.01 13:01:02 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3020, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3020 }
25.01 13:01:02 -<<-: server.login ok
25.01 13:01:02 DB: SELECT * FROM LocalizationStrings
25.01 13:01:02 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 TIMER: Starting timer...
25.01 13:01:02 DB: SELECT * FROM GameVars
25.01 13:01:02 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.01 13:01:02 TIMER: Timer running...
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.01 13:01:02 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.01 13:01:02 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.01 13:01:02 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.01 13:01:02 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
25.01 13:01:02 -<<-: core/quest.getDaily ok
25.01 13:01:02 DB: SELECT * FROM UserAttributeTypes
25.01 13:01:02 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 DB: SELECT * FROM UserVariableTypes
25.01 13:01:02 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.01 13:01:02 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 DB: SELECT * FROM ItemGroups
25.01 13:01:02 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 DB: SELECT * FROM Bundles ORDER BY ID
25.01 13:01:02 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 DB: SELECT * FROM BundleItems ORDER BY ID
25.01 13:01:02 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 SHOP: loading items...
25.01 13:01:02 ->>-: core/shop.getList { _type => core/shop.getList }
25.01 13:01:02 -<<-: core/shop.getList ok
25.01 13:01:02 SHOP: 0 items loaded (0 sec)
25.01 13:01:02 DB: SELECT * FROM EffectAttributeTypes
25.01 13:01:02 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 DB: SELECT * FROM Effects
25.01 13:01:02 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.01 13:01:02 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.01 13:01:02 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 DB: SELECT * FROM Badges
25.01 13:01:02 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.01 13:01:02 -<<-: core/server.query ok
25.01 13:01:02 NET: Client (conid:1298193) connected to vdl.0 (clients:1)
25.01 13:01:03 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
25.01 13:01:03 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'Aimer' AND Password = 'kO2YJdf'
25.01 13:01:03 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'Aimer' AND Password = 'kO2YJdf', _type => core/server.query }
25.01 13:01:03 -<<-: core/server.query ok
25.01 13:01:03 ->>-: core/user.isOnlineID { id => 28, _type => core/user.isOnlineID }
25.01 13:01:03 -<<-: core/user.isOnlineID ok
25.01 13:01:03 ->>-: core/cache.get { type => user, v => -1, id => 28, _type => core/cache.get }
25.01 13:01:03 -<<-: core/cache.get ok
25.01 13:01:03 ->>-: core/cache.get { type => questdata, v => -1, id => 28, _type => core/cache.get }
25.01 13:01:03 -<<-: core/cache.get ok
25.01 13:01:03 NET: Client login (conid:1298193, id:28, name:Aimer)
25.01 13:01:03 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 28, _type => core/user.loginPost, ipAddr => 91.225.76.192 }
25.01 13:01:03 -<<-: core/user.loginPost null
25.01 13:01:03 DB: SELECT token FROM tokens WHERE userid = 28
25.01 13:01:03 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 28, _type => core/server.query }
25.01 13:01:03 -<<-: core/server.query { list => {{ token => f8036965bfbe74fbafeb175107a122c4 }, { token => f430b4db749d48ed955ce2b85103338c }}, errorCode => ok, _type => core/server.query }
25.01 13:01:03 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 28, token => f8036965bfbe74fbafeb175107a122c4 }
25.01 13:01:03 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
25.01 13:01:03 ++ NET: Aimer req: user.data { messageType => user.data }
25.01 13:01:03 ->>-: vdl/cache.user.getData { userId => 28, _type => vdl/cache.user.getData, money => 13 }
25.01 13:01:03 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData, money => 13 }
25.01 13:01:03 == NET: Aimer ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 13 }
25.01 13:01:03 TIME: user.data 0.93 ms
25.01 13:01:16 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3020, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3020 }
25.01 13:01:16 -<<-: server.login ok
25.01 13:01:16 DB: SELECT * FROM LocalizationStrings
25.01 13:01:16 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.01 13:01:16 -<<-: core/server.query ok
25.01 13:01:16 TIMER: Starting timer...
25.01 13:01:16 TIMER: Timer running...
25.01 13:01:16 DB: SELECT * FROM GameVars
25.01 13:01:16 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.01 13:01:16 -<<-: core/server.query ok
25.01 13:01:16 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.01 13:01:16 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.01 13:01:16 -<<-: core/server.query ok
25.01 13:01:16 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.01 13:01:16 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.01 13:01:16 -<<-: core/server.query ok
25.01 13:01:16 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.01 13:01:16 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.01 13:01:16 -<<-: core/server.query ok
25.01 13:01:16 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.01 13:01:16 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.01 13:01:16 -<<-: core/server.query ok
25.01 13:01:16 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
25.01 13:01:16 -<<-: core/quest.getDaily ok
25.01 13:01:16 DB: SELECT * FROM UserAttributeTypes
25.01 13:01:16 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.01 13:01:16 -<<-: core/server.query ok
25.01 13:01:16 DB: SELECT * FROM UserVariableTypes
25.01 13:01:16 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.01 13:01:16 -<<-: core/server.query ok
25.01 13:01:16 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.01 13:01:16 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.01 13:01:16 -<<-: core/server.query ok
25.01 13:01:16 DB: SELECT * FROM ItemGroups
25.01 13:01:16 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.01 13:01:16 -<<-: core/server.query ok
25.01 13:01:16 DB: SELECT * FROM Bundles ORDER BY ID
25.01 13:01:16 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.01 13:01:16 -<<-: core/server.query ok
25.01 13:01:16 DB: SELECT * FROM BundleItems ORDER BY ID
25.01 13:01:16 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.01 13:01:16 -<<-: core/server.query ok
25.01 13:01:16 SHOP: loading items...
25.01 13:01:16 ->>-: core/shop.getList { _type => core/shop.getList }
25.01 13:01:16 -<<-: core/shop.getList ok
25.01 13:01:16 SHOP: 0 items loaded (0 sec)
25.01 13:01:16 DB: SELECT * FROM EffectAttributeTypes
25.01 13:01:16 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.01 13:01:16 -<<-: core/server.query ok
25.01 13:01:16 DB: SELECT * FROM Effects
25.01 13:01:16 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.01 13:01:16 -<<-: core/server.query ok
25.01 13:01:16 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_p25.01 13:01:42 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3020, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3020 }
25.01 13:01:42 -<<-: server.login ok
25.01 13:01:42 DB: SELECT * FROM LocalizationStrings
25.01 13:01:42 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 TIMER: Starting timer...
25.01 13:01:42 TIMER: Timer running...
25.01 13:01:42 DB: SELECT * FROM GameVars
25.01 13:01:42 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.01 13:01:42 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.01 13:01:42 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.01 13:01:42 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.01 13:01:42 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
25.01 13:01:42 -<<-: core/quest.getDaily ok
25.01 13:01:42 DB: SELECT * FROM UserAttributeTypes
25.01 13:01:42 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 DB: SELECT * FROM UserVariableTypes
25.01 13:01:42 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.01 13:01:42 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 DB: SELECT * FROM ItemGroups
25.01 13:01:42 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 DB: SELECT * FROM Bundles ORDER BY ID
25.01 13:01:42 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 DB: SELECT * FROM BundleItems ORDER BY ID
25.01 13:01:42 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 SHOP: loading items...
25.01 13:01:42 ->>-: core/shop.getList { _type => core/shop.getList }
25.01 13:01:42 -<<-: core/shop.getList ok
25.01 13:01:42 SHOP: 0 items loaded (0 sec)
25.01 13:01:42 DB: SELECT * FROM EffectAttributeTypes
25.01 13:01:42 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 DB: SELECT * FROM Effects
25.01 13:01:42 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.01 13:01:42 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.01 13:01:42 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 DB: SELECT * FROM Badges
25.01 13:01:42 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 NET: Client (conid:75975926) connected to vdl.0 (clients:1)
25.01 13:01:42 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
25.01 13:01:42 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'Aimer' AND Password = 'kO2YJdf'
25.01 13:01:42 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'Aimer' AND Password = 'kO2YJdf', _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query ok
25.01 13:01:42 ->>-: core/user.isOnlineID { id => 28, _type => core/user.isOnlineID }
25.01 13:01:42 -<<-: core/user.isOnlineID ok
25.01 13:01:42 ->>-: core/cache.get { type => user, v => -1, id => 28, _type => core/cache.get }
25.01 13:01:42 -<<-: core/cache.get ok
25.01 13:01:42 ->>-: core/cache.get { type => questdata, v => -1, id => 28, _type => core/cache.get }
25.01 13:01:42 -<<-: core/cache.get ok
25.01 13:01:42 NET: Client login (conid:75975926, id:28, name:Aimer)
25.01 13:01:42 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 28, _type => core/user.loginPost, ipAddr => 91.225.76.192 }
25.01 13:01:42 -<<-: core/user.loginPost null
25.01 13:01:42 DB: SELECT token FROM tokens WHERE userid = 28
25.01 13:01:42 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 28, _type => core/server.query }
25.01 13:01:42 -<<-: core/server.query { list => {{ token => f8036965bfbe74fbafeb175107a122c4 }, { token => f430b4db749d48ed955ce2b85103338c }}, errorCode => ok, _type => core/server.query }
25.01 13:01:42 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 28, token => f8036965bfbe74fbafeb175107a122c4 }
25.01 13:01:42 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
25.01 13:01:42 ++ NET: Aimer req: user.data { messageType => user.data }
25.01 13:01:42 ->>-: vdl/cache.user.getData { userId => 28, _type => vdl/cache.user.getData, money => 13 }
25.01 13:01:42 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData, money => 13 }
25.01 13:01:42 == NET: Aimer ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 13 }
25.01 13:01:42 TIME: user.data 0.48 ms
25.01 13:01:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:01:48 TIME: user.ping 0.15 ms
25.01 13:01:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:01:59 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3020, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3020 }
25.01 13:01:59 -<<-: server.login ok
25.01 13:01:59 DB: SELECT * FROM LocalizationStrings
25.01 13:01:59 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:01:59 TIMER: Starting timer...
25.01 13:01:59 TIMER: Timer running...
25.01 13:01:59 DB: SELECT * FROM GameVars
25.01 13:01:59 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:01:59 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.01 13:01:59 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:01:59 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.01 13:01:59 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:01:59 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.01 13:01:59 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:01:59 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.01 13:01:59 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:01:59 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
25.01 13:01:59 -<<-: core/quest.getDaily ok
25.01 13:01:59 DB: SELECT * FROM UserAttributeTypes
25.01 13:01:59 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:01:59 DB: SELECT * FROM UserVariableTypes
25.01 13:01:59 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:01:59 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.01 13:01:59 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:01:59 DB: SELECT * FROM ItemGroups
25.01 13:01:59 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:01:59 DB: SELECT * FROM Bundles ORDER BY ID
25.01 13:01:59 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:01:59 DB: SELECT * FROM BundleItems ORDER BY ID
25.01 13:01:59 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:01:59 SHOP: loading items...
25.01 13:01:59 ->>-: core/shop.getList { _type => core/shop.getList }
25.01 13:01:59 -<<-: core/shop.getList ok
25.01 13:01:59 SHOP: 0 items loaded (0.001 sec)
25.01 13:01:59 DB: SELECT * FROM EffectAttributeTypes
25.01 13:01:59 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:01:59 DB: SELECT * FROM Effects
25.01 13:01:59 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:01:59 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.01 13:01:59 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:01:59 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.01 13:01:59 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:01:59 DB: SELECT * FROM Badges
25.01 13:01:59 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.01 13:01:59 -<<-: core/server.query ok
25.01 13:02:24 NET: Client (conid:40712177) connected to vdl.0 (clients:1)
25.01 13:02:24 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
25.01 13:02:24 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'Aimer' AND Password = 'kO2YJdf'
25.01 13:02:24 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'Aimer' AND Password = 'kO2YJdf', _type => core/server.query }
25.01 13:02:24 -<<-: core/server.query ok
25.01 13:02:24 ->>-: core/user.isOnlineID { id => 28, _type => core/user.isOnlineID }
25.01 13:02:24 -<<-: core/user.isOnlineID ok
25.01 13:02:24 ->>-: core/cache.get { type => user, v => -1, id => 28, _type => core/cache.get }
25.01 13:02:24 -<<-: core/cache.get ok
25.01 13:02:24 ->>-: core/cache.get { type => questdata, v => -1, id => 28, _type => core/cache.get }
25.01 13:02:24 -<<-: core/cache.get ok
25.01 13:02:24 NET: Client login (conid:40712177, id:28, name:Aimer)
25.01 13:02:24 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 28, _type => core/user.loginPost, ipAddr => 91.225.76.192 }
25.01 13:02:24 -<<-: core/user.loginPost null
25.01 13:02:24 DB: SELECT token FROM tokens WHERE userid = 28
25.01 13:02:24 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 28, _type => core/server.query }
25.01 13:02:24 -<<-: core/server.query { list => {{ token => f8036965bfbe74fbafeb175107a122c4 }, { token => f430b4db749d48ed955ce2b85103338c }}, errorCode => ok, _type => core/server.query }
25.01 13:02:24 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 28, token => f8036965bfbe74fbafeb175107a122c4 }
25.01 13:02:24 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
25.01 13:02:24 ++ NET: Aimer req: user.data { messageType => user.data }
25.01 13:02:24 ->>-: vdl/cache.user.getData { userId => 28, _type => vdl/cache.user.getData, money => 13 }
25.01 13:02:24 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData, money => 13 }
25.01 13:02:24 TIME: user.data 0.34 ms
25.01 13:02:24 == NET: Aimer ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 13 }
25.01 13:02:29 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 28, _type => core/cache.update }
25.01 13:02:29 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.01 13:02:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:02:31 TIME: user.ping 0.22 ms
25.01 13:02:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:02:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:02:52 TIME: user.ping 0.17 ms
25.01 13:02:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:02:59 TIMER: Check auto-disconnect...
25.01 13:02:59 STATS: vdl.0 cache, locks:2
25.01 13:03:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:03:14 TIME: user.ping 0.16 ms
25.01 13:03:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:03:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:03:36 TIME: user.ping 0.14 ms
25.01 13:03:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:03:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:03:58 TIME: user.ping 0.17 ms
25.01 13:03:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:03:59 TIMER: Check auto-disconnect...
25.01 13:03:59 STATS: vdl.0 cache, locks:2
25.01 13:04:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:04:20 TIME: user.ping 0.12 ms
25.01 13:04:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:04:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:04:42 TIME: user.ping 0.16 ms
25.01 13:04:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:04:59 TIMER: Check auto-disconnect...
25.01 13:04:59 STATS: vdl.0 cache, locks:2
25.01 13:05:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:05:04 TIME: user.ping 0.14 ms
25.01 13:05:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:05:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:05:25 TIME: user.ping 0.16 ms
25.01 13:05:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:05:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:05:47 TIME: user.ping 0.14 ms
25.01 13:05:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:05:59 TIMER: Check auto-disconnect...
25.01 13:05:59 STATS: vdl.0 cache, locks:2
25.01 13:06:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:06:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:06:09 TIME: user.ping 0.16 ms
25.01 13:06:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:06:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:06:30 TIME: user.ping 0.16 ms
25.01 13:06:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:06:52 TIME: user.ping 0.13 ms
25.01 13:06:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:06:59 TIMER: Check auto-disconnect...
25.01 13:06:59 STATS: vdl.0 cache, locks:2
25.01 13:07:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:07:13 TIME: user.ping 0.18 ms
25.01 13:07:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:07:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:07:35 TIME: user.ping 0.15 ms
25.01 13:07:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:07:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:07:57 TIME: user.ping 0.17 ms
25.01 13:07:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:07:59 TIMER: Check auto-disconnect...
25.01 13:07:59 STATS: vdl.0 cache, locks:2
25.01 13:08:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:08:18 TIME: user.ping 0.14 ms
25.01 13:08:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:08:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:08:40 TIME: user.ping 0.16 ms
25.01 13:08:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:08:59 TIMER: Check auto-disconnect...
25.01 13:08:59 STATS: vdl.0 cache, locks:2
25.01 13:09:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:09:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:09:01 TIME: user.ping 0.18 ms
25.01 13:09:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:09:23 TIME: user.ping 0.15 ms
25.01 13:09:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:09:30 ++ NET: Aimer req: user.getFriendList { messageType => user.getFriendList }
25.01 13:09:30 ->>-: vdl/cache.user.getFriendList { _type => vdl/cache.user.getFriendList, player => 28 }
25.01 13:09:30 -<<-: vdl/cache.user.getFriendList { list => [], errorCode => ok, _type => vdl/cache.user.getFriendList }
25.01 13:09:30 STATS: vdl.0 cache connection, 29 calls, total 0.0380406379699707 sec spent, avg 1.31 ms
25.01 13:09:30 TIME: user.getFriendList 0.43 ms
25.01 13:09:30 == NET: Aimer ret: user.getFriendList { list => [], type => user.getFriendList, errorCode => ok, _type => vdl/cache.user.getFriendList }
25.01 13:09:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:09:45 TIME: user.ping 0.17 ms
25.01 13:09:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:09:59 TIMER: Check auto-disconnect...
25.01 13:09:59 STATS: vdl.0 cache, locks:2
25.01 13:10:03 ++ NET: Aimer req: user.searchEnemy { name => aimer, messageType => user.searchEnemy }
25.01 13:10:03 ->>-: vdl/cache.user.searchEnemy { name => aimer, id => 28, _type => vdl/cache.user.searchEnemy }
25.01 13:10:03 -<<-: vdl/cache.user.searchEnemy { errorCode => ok, _type => vdl/cache.user.searchEnemy, users => [] }
25.01 13:10:03 TIME: user.searchEnemy 1.67 ms
25.01 13:10:03 == NET: Aimer ret: user.searchEnemy { list => [], type => user.searchEnemy, errorCode => ok }
25.01 13:10:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:10:06 TIME: user.ping 0.12 ms
25.01 13:10:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:10:13 ++ NET: Aimer req: user.searchEnemy { name => Aimer, messageType => user.searchEnemy }
25.01 13:10:13 ->>-: vdl/cache.user.searchEnemy { name => Aimer, id => 28, _type => vdl/cache.user.searchEnemy }
25.01 13:10:13 -<<-: vdl/cache.user.searchEnemy { errorCode => ok, _type => vdl/cache.user.searchEnemy, users => [] }
25.01 13:10:13 TIME: user.searchEnemy 2.02 ms
25.01 13:10:13 == NET: Aimer ret: user.searchEnemy { list => [], type => user.searchEnemy, errorCode => ok }
25.01 13:10:15 ++ NET: Aimer req: user.searchEnemy { name => Aimer, messageType => user.searchEnemy }
25.01 13:10:15 ->>-: vdl/cache.user.searchEnemy { name => Aimer, id => 28, _type => vdl/cache.user.searchEnemy }
25.01 13:10:15 -<<-: vdl/cache.user.searchEnemy { errorCode => ok, _type => vdl/cache.user.searchEnemy, users => [] }
25.01 13:10:15 TIME: user.searchEnemy 1.6 ms
25.01 13:10:15 == NET: Aimer ret: user.searchEnemy { list => [], type => user.searchEnemy, errorCode => ok }
25.01 13:10:28 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:10:28 TIME: user.ping 0.15 ms
25.01 13:10:28 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:10:47 ++ NET: Aimer req: user.searchEnemy { name => Uid, messageType => user.searchEnemy }
25.01 13:10:47 ->>-: vdl/cache.user.searchEnemy { name => Uid, id => 28, _type => vdl/cache.user.searchEnemy }
25.01 13:10:47 -<<-: vdl/cache.user.searchEnemy { errorCode => ok, _type => vdl/cache.user.searchEnemy, users => [] }
25.01 13:10:47 STATS: vdl.0 cache connection, 33 calls, total 0.0438797473907471 sec spent, avg 1.33 ms
25.01 13:10:47 TIME: user.searchEnemy 1 ms
25.01 13:10:47 == NET: Aimer ret: user.searchEnemy { list => [], type => user.searchEnemy, errorCode => ok }
25.01 13:10:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:10:50 TIME: user.ping 0.12 ms
25.01 13:10:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:10:59 TIMER: Check auto-disconnect...
25.01 13:10:59 STATS: vdl.0 cache, locks:2
25.01 13:11:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:11:11 TIME: user.ping 0.15 ms
25.01 13:11:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:11:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:11:33 TIME: user.ping 0.2 ms
25.01 13:11:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:11:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:11:54 TIME: user.ping 0.14 ms
25.01 13:11:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:11:59 TIMER: Check auto-disconnect...
25.01 13:11:59 STATS: vdl.0 cache, locks:2
25.01 13:12:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:12:16 TIME: user.ping 0.15 ms
25.01 13:12:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:12:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:12:37 TIME: user.ping 0.21 ms
25.01 13:12:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:12:59 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:12:59 TIME: user.ping 0.2 ms
25.01 13:12:59 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:12:59 TIMER: Check auto-disconnect...
25.01 13:12:59 STATS: vdl.0 cache, locks:2
25.01 13:13:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:13:21 TIME: user.ping 0.16 ms
25.01 13:13:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:13:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:13:42 TIME: user.ping 0.15 ms
25.01 13:13:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:13:59 TIMER: Check auto-disconnect...
25.01 13:13:59 STATS: vdl.0 cache, locks:2
25.01 13:14:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:14:05 TIME: user.ping 0.14 ms
25.01 13:14:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:14:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:14:27 TIME: user.ping 0.14 ms
25.01 13:14:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:14:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:14:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:14:48 TIME: user.ping 0.2 ms
25.01 13:14:59 TIMER: Check auto-disconnect...
25.01 13:14:59 STATS: vdl.0 cache, locks:2
25.01 13:15:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:15:09 TIME: user.ping 0.21 ms
25.01 13:15:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:15:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:15:30 TIME: user.ping 0.12 ms
25.01 13:15:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:15:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:15:51 TIME: user.ping 0.12 ms
25.01 13:15:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:15:59 TIMER: Check auto-disconnect...
25.01 13:15:59 STATS: vdl.0 cache, locks:2
25.01 13:16:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:16:12 TIME: user.ping 0.14 ms
25.01 13:16:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:16:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:16:34 TIME: user.ping 0.17 ms
25.01 13:16:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:16:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:16:55 TIME: user.ping 0.2 ms
25.01 13:16:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:16:59 TIMER: Check auto-disconnect...
25.01 13:16:59 STATS: vdl.0 cache, locks:2
25.01 13:17:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:17:16 TIME: user.ping 0.18 ms
25.01 13:17:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:17:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:17:37 TIME: user.ping 0.15 ms
25.01 13:17:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:17:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:17:58 TIME: user.ping 0.19 ms
25.01 13:17:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:17:59 TIMER: Check auto-disconnect...
25.01 13:17:59 STATS: vdl.0 cache, locks:2
25.01 13:18:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:18:19 TIME: user.ping 0.18 ms
25.01 13:18:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:18:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:18:40 TIME: user.ping 0.16 ms
25.01 13:18:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:18:59 TIMER: Check auto-disconnect...
25.01 13:18:59 STATS: vdl.0 cache, locks:2
25.01 13:19:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:19:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:19:01 TIME: user.ping 0.14 ms
25.01 13:19:22 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:19:22 TIME: user.ping 0.2 ms
25.01 13:19:22 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:19:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:19:43 TIME: user.ping 0.15 ms
25.01 13:19:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:19:59 TIMER: Check auto-disconnect...
25.01 13:19:59 STATS: vdl.0 cache, locks:2
25.01 13:20:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:20:04 TIME: user.ping 0.15 ms
25.01 13:20:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:20:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:20:26 TIME: user.ping 0.16 ms
25.01 13:20:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:20:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:20:47 TIME: user.ping 0.16 ms
25.01 13:20:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:20:59 TIMER: Check auto-disconnect...
25.01 13:20:59 STATS: vdl.0 cache, locks:2
25.01 13:21:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:21:08 TIME: user.ping 0.18 ms
25.01 13:21:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:21:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:21:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:21:29 TIME: user.ping 0.13 ms
25.01 13:21:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:21:50 TIME: user.ping 0.17 ms
25.01 13:21:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:21:59 TIMER: Check auto-disconnect...
25.01 13:21:59 STATS: vdl.0 cache, locks:2
25.01 13:22:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:22:11 TIME: user.ping 0.14 ms
25.01 13:22:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:22:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:22:32 TIME: user.ping 0.15 ms
25.01 13:22:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:22:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:22:53 TIME: user.ping 0.12 ms
25.01 13:22:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:22:59 TIMER: Check auto-disconnect...
25.01 13:22:59 STATS: vdl.0 cache, locks:2
25.01 13:23:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:23:15 TIME: user.ping 0.19 ms
25.01 13:23:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:23:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:23:36 TIME: user.ping 0.19 ms
25.01 13:23:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:23:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:23:57 TIME: user.ping 0.13 ms
25.01 13:23:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:23:59 TIMER: Check auto-disconnect...
25.01 13:23:59 STATS: vdl.0 cache, locks:2
25.01 13:24:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:24:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:24:20 TIME: user.ping 0.13 ms
25.01 13:24:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:24:41 TIME: user.ping 0.14 ms
25.01 13:24:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:24:59 TIMER: Check auto-disconnect...
25.01 13:24:59 STATS: vdl.0 cache, locks:2
25.01 13:25:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:25:02 TIME: user.ping 0.18 ms
25.01 13:25:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:25:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:25:23 TIME: user.ping 0.14 ms
25.01 13:25:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:25:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:25:45 TIME: user.ping 0.14 ms
25.01 13:25:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:25:59 TIMER: Check auto-disconnect...
25.01 13:25:59 STATS: vdl.0 cache, locks:2
25.01 13:26:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:26:06 TIME: user.ping 0.19 ms
25.01 13:26:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:26:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:26:27 TIME: user.ping 0.15 ms
25.01 13:26:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:26:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:26:48 TIME: user.ping 0.14 ms
25.01 13:26:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:26:59 TIMER: Check auto-disconnect...
25.01 13:26:59 STATS: vdl.0 cache, locks:2
25.01 13:27:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:27:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:27:09 TIME: user.ping 0.21 ms
25.01 13:27:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:27:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:27:30 TIME: user.ping 0.14 ms
25.01 13:27:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:27:51 TIME: user.ping 0.14 ms
25.01 13:27:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:27:59 TIMER: Check auto-disconnect...
25.01 13:27:59 STATS: vdl.0 cache, locks:2
25.01 13:28:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:28:13 TIME: user.ping 0.16 ms
25.01 13:28:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:28:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:28:34 TIME: user.ping 0.22 ms
25.01 13:28:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:28:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:28:55 TIME: user.ping 0.18 ms
25.01 13:28:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:28:59 TIMER: Check auto-disconnect...
25.01 13:28:59 STATS: vdl.0 cache, locks:2
25.01 13:29:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:29:16 TIME: user.ping 0.19 ms
25.01 13:29:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:29:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:29:37 TIME: user.ping 0.23 ms
25.01 13:29:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:29:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:29:58 TIME: user.ping 0.16 ms
25.01 13:29:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:29:59 TIMER: Check auto-disconnect...
25.01 13:29:59 STATS: vdl.0 cache, locks:2
25.01 13:30:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:30:19 TIME: user.ping 0.17 ms
25.01 13:30:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:30:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:30:40 TIME: user.ping 0.19 ms
25.01 13:30:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:30:59 TIMER: Check auto-disconnect...
25.01 13:30:59 STATS: vdl.0 cache, locks:2
25.01 13:31:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:31:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:31:02 TIME: user.ping 0.18 ms
25.01 13:31:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:31:23 TIME: user.ping 0.17 ms
25.01 13:31:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:31:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:31:44 TIME: user.ping 0.22 ms
25.01 13:31:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:31:59 TIMER: Check auto-disconnect...
25.01 13:31:59 STATS: vdl.0 cache, locks:2
25.01 13:32:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:32:05 TIME: user.ping 0.17 ms
25.01 13:32:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:32:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:32:26 TIME: user.ping 0.15 ms
25.01 13:32:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:32:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:32:47 TIME: user.ping 0.17 ms
25.01 13:32:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:32:59 TIMER: Check auto-disconnect...
25.01 13:32:59 STATS: vdl.0 cache, locks:2
25.01 13:33:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:33:08 TIME: user.ping 0.21 ms
25.01 13:33:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:33:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:33:29 TIME: user.ping 0.23 ms
25.01 13:33:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:33:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:33:50 TIME: user.ping 0.14 ms
25.01 13:33:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:33:59 TIMER: Check auto-disconnect...
25.01 13:33:59 STATS: vdl.0 cache, locks:2
25.01 13:34:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:34:13 TIME: user.ping 0.14 ms
25.01 13:34:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:34:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:34:35 TIME: user.ping 0.14 ms
25.01 13:34:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:34:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:34:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:34:56 TIME: user.ping 0.14 ms
25.01 13:34:59 TIMER: Check auto-disconnect...
25.01 13:34:59 STATS: vdl.0 cache, locks:2
25.01 13:35:17 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:35:17 TIME: user.ping 0.2 ms
25.01 13:35:17 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:35:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:35:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:35:38 TIME: user.ping 0.21 ms
25.01 13:35:59 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:35:59 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:35:59 TIME: user.ping 0.22 ms
25.01 13:35:59 TIMER: Check auto-disconnect...
25.01 13:35:59 STATS: vdl.0 cache, locks:2
25.01 13:36:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:36:20 TIME: user.ping 0.13 ms
25.01 13:36:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:36:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:36:41 TIME: user.ping 0.15 ms
25.01 13:36:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:36:59 TIMER: Check auto-disconnect...
25.01 13:36:59 STATS: vdl.0 cache, locks:2
25.01 13:37:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:37:03 TIME: user.ping 0.17 ms
25.01 13:37:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:37:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:37:24 TIME: user.ping 0.13 ms
25.01 13:37:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:37:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:37:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:37:45 TIME: user.ping 0.23 ms
25.01 13:37:59 TIMER: Check auto-disconnect...
25.01 13:37:59 STATS: vdl.0 cache, locks:2
25.01 13:38:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:38:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:38:06 TIME: user.ping 0.16 ms
25.01 13:38:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:38:27 TIME: user.ping 0.14 ms
25.01 13:38:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:38:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:38:48 TIME: user.ping 0.14 ms
25.01 13:38:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:38:59 TIMER: Check auto-disconnect...
25.01 13:38:59 STATS: vdl.0 cache, locks:2
25.01 13:39:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:39:10 TIME: user.ping 0.16 ms
25.01 13:39:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:39:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:39:31 TIME: user.ping 0.17 ms
25.01 13:39:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:39:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:39:52 TIME: user.ping 0.15 ms
25.01 13:39:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:39:59 TIMER: Check auto-disconnect...
25.01 13:39:59 STATS: vdl.0 cache, locks:2
25.01 13:40:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:40:13 TIME: user.ping 0.19 ms
25.01 13:40:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:40:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:40:34 TIME: user.ping 0.15 ms
25.01 13:40:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:40:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:40:55 TIME: user.ping 0.16 ms
25.01 13:40:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:40:59 TIMER: Check auto-disconnect...
25.01 13:40:59 STATS: vdl.0 cache, locks:2
25.01 13:41:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:41:16 TIME: user.ping 0.15 ms
25.01 13:41:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:41:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:41:38 TIME: user.ping 0.12 ms
25.01 13:41:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:41:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:41:58 TIME: user.ping 0.2 ms
25.01 13:41:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:41:59 TIMER: Check auto-disconnect...
25.01 13:42:00 STATS: vdl.0 cache, locks:2
25.01 13:42:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:42:20 TIME: user.ping 0.16 ms
25.01 13:42:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:42:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:42:41 TIME: user.ping 0.18 ms
25.01 13:42:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:42:59 TIMER: Check auto-disconnect...
25.01 13:43:00 STATS: vdl.0 cache, locks:2
25.01 13:43:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:43:02 TIME: user.ping 0.21 ms
25.01 13:43:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:43:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:43:23 TIME: user.ping 0.16 ms
25.01 13:43:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:43:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:43:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:43:44 TIME: user.ping 0.23 ms
25.01 13:43:59 TIMER: Check auto-disconnect...
25.01 13:44:00 STATS: vdl.0 cache, locks:2
25.01 13:44:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:44:07 TIME: user.ping 0.17 ms
25.01 13:44:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:44:28 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:44:28 TIME: user.ping 0.14 ms
25.01 13:44:28 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:44:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:44:50 TIME: user.ping 0.17 ms
25.01 13:44:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:44:59 TIMER: Check auto-disconnect...
25.01 13:45:00 STATS: vdl.0 cache, locks:2
25.01 13:45:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:45:10 TIME: user.ping 0.19 ms
25.01 13:45:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:45:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:45:31 TIME: user.ping 0.21 ms
25.01 13:45:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:45:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:45:52 TIME: user.ping 0.17 ms
25.01 13:45:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:45:59 TIMER: Check auto-disconnect...
25.01 13:46:00 STATS: vdl.0 cache, locks:2
25.01 13:46:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:46:13 TIME: user.ping 0.18 ms
25.01 13:46:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:46:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:46:34 TIME: user.ping 0.19 ms
25.01 13:46:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:46:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:46:55 TIME: user.ping 0.14 ms
25.01 13:46:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:46:59 TIMER: Check auto-disconnect...
25.01 13:47:00 STATS: vdl.0 cache, locks:2
25.01 13:47:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:47:16 TIME: user.ping 0.14 ms
25.01 13:47:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:47:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:47:37 TIME: user.ping 0.2 ms
25.01 13:47:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:47:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:47:58 TIME: user.ping 0.13 ms
25.01 13:47:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:47:59 TIMER: Check auto-disconnect...
25.01 13:48:00 STATS: vdl.0 cache, locks:2
25.01 13:48:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:48:19 TIME: user.ping 0.15 ms
25.01 13:48:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:48:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:48:40 TIME: user.ping 0.16 ms
25.01 13:48:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:48:59 TIMER: Check auto-disconnect...
25.01 13:49:00 STATS: vdl.0 cache, locks:2
25.01 13:49:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:49:01 TIME: user.ping 0.2 ms
25.01 13:49:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:49:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:49:23 TIME: user.ping 0.18 ms
25.01 13:49:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:49:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:49:45 TIME: user.ping 0.15 ms
25.01 13:49:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:49:59 TIMER: Check auto-disconnect...
25.01 13:50:00 STATS: vdl.0 cache, locks:2
25.01 13:50:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:50:07 TIME: user.ping 0.18 ms
25.01 13:50:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:50:28 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:50:28 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:50:28 TIME: user.ping 0.21 ms
25.01 13:50:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:50:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:50:50 TIME: user.ping 0.19 ms
25.01 13:50:59 TIMER: Check auto-disconnect...
25.01 13:51:00 STATS: vdl.0 cache, locks:2
25.01 13:51:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:51:11 TIME: user.ping 0.14 ms
25.01 13:51:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:51:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:51:33 TIME: user.ping 0.13 ms
25.01 13:51:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:51:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
25.01 13:51:54 TIME: user.ping 0.2 ms
25.01 13:51:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
25.01 13:51:59 TIMER: Check auto-disconnect...
25.01 13:52:00 STATS: vdl.0 cache, locks:2
25.01 13:52:22 NET: Client (name:Aimer conid:40712177 TCP) disconnected from vdl.0 (clients:0)
25.01 13:52:22 DB: SELECT id FROM battle WHERE firstid=28 OR secondid=28 AND finished <> true
25.01 13:52:22 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=28 OR secondid=28 AND finished <> true, _type => core/server.query }
25.01 13:52:22 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.01 13:52:22 STATS: vdl.0 cache connection, 34 calls, total 0.0447838306427002 sec spent, avg 1.32 ms
25.01 13:52:22 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.01 13:52:22 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.01 13:52:22 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.01 13:52:22 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 1009
25.01 13:52:22 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 28, _type => core/cache.update }
25.01 13:52:22 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.01 13:52:22 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 28, _type => core/cache.update }
25.01 13:52:22 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.01 13:52:22 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 28, _type => core/user.logoutPost }
25.01 13:52:22 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.01 13:52:59 TIMER: Check auto-disconnect...
25.01 13:53:00 STATS: vdl.0 cache, locks:0
25.01 13:53:59 TIMER: Check auto-disconnect...
25.01 13:54:00 STATS: vdl.0 cache, locks:0
25.01 13:54:59 TIMER: Check auto-disconnect...
25.01 13:55:00 STATS: vdl.0 cache, locks:0
25.01 13:55:59 TIMER: Check auto-disconnect...
25.01 13:56:00 STATS: vdl.0 cache, locks:0
25.01 13:56:59 TIMER: Check auto-disconnect...
25.01 13:57:00 STATS: vdl.0 cache, locks:0
25.01 13:57:59 TIMER: Check auto-disconnect...
25.01 13:58:00 STATS: vdl.0 cache, locks:0
25.01 13:58:59 TIMER: Check auto-disconnect...
25.01 13:59:00 STATS: vdl.0 cache, locks:0
25.01 13:59:59 TIMER: Check auto-disconnect...
