28.10 17:00:01 ++ NET: nelli8 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
28.10 17:00:01 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:00:01 ->>-: vdl/cache.tournament.addUsers { userId => 101, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:00:01 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:00:01 TIME: tournament.addUsers 0.52 ms
28.10 17:00:01 == NET: nelli8 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:00:01 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:00:01 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:00:01 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:00:01 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 2, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:00, startdate => 2016-28-10 17:00 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:00:01 TIME: tournament.getAvailableTournament 3.12 ms
28.10 17:00:01 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 2, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:00, startdate => 2016-28-10 17:00 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:00:01 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:00:01 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:00:01 TIME: user.ping 0.14 ms
28.10 17:00:01 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:00:11 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:00:11 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:00:11 TIME: user.ping 0.37 ms
28.10 17:00:11 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:00:13 TIMER: Check auto-disconnect...
28.10 17:00:13 STATS: vdl.0 cache, locks:4
28.10 17:00:21 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:00:21 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:00:21 TIME: user.ping 0.64 ms
28.10 17:00:21 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:00:34 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:00:34 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:00:34 TIME: user.ping 0.15 ms
28.10 17:00:34 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:00:41 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:00:41 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:00:41 TIME: user.ping 0.17 ms
28.10 17:00:41 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:00:56 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:00:56 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:00:56 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:00:56 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:03, startdate => 2016-28-10 17:03 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:00:56 STATS: vdl.0 cache connection, 46 calls, total 0.093794584274292 sec spent, avg 2.04 ms
28.10 17:00:56 TIME: tournament.getAvailableTournament 2.49 ms
28.10 17:00:56 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:03, startdate => 2016-28-10 17:03 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:01 ++ NET: test67 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
28.10 17:01:01 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:01:01 ->>-: vdl/cache.tournament.addUsers { userId => 100, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:01:01 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:01:01 TIME: tournament.addUsers 0.59 ms
28.10 17:01:01 == NET: test67 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:01:01 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:01:01 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:01:01 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:01 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:03, startdate => 2016-28-10 17:03 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:01 TIME: tournament.getAvailableTournament 1.88 ms
28.10 17:01:01 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:03, startdate => 2016-28-10 17:03 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:04 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:01:04 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:01:04 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:04 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:03, startdate => 2016-28-10 17:03 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:04 TIME: tournament.getAvailableTournament 2.27 ms
28.10 17:01:04 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:03, startdate => 2016-28-10 17:03 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:06 ++ NET: nelli8 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
28.10 17:01:06 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:01:06 ->>-: vdl/cache.tournament.addUsers { userId => 101, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:01:06 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:01:06 TIME: tournament.addUsers 0.61 ms
28.10 17:01:06 == NET: nelli8 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:01:06 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:01:06 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:01:06 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:06 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:03, startdate => 2016-28-10 17:03 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:06 TIME: tournament.getAvailableTournament 2.79 ms
28.10 17:01:06 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:03, startdate => 2016-28-10 17:03 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:09 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:01:09 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:01:09 TIME: user.ping 0.16 ms
28.10 17:01:09 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:01:13 TIMER: Check auto-disconnect...
28.10 17:01:13 STATS: vdl.0 cache, locks:4
28.10 17:01:21 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:01:21 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:01:21 TIME: user.ping 0.19 ms
28.10 17:01:21 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:01:34 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:01:34 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:01:34 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:34 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:02, startdate => 2016-28-10 17:02 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:34 TIME: tournament.getAvailableTournament 3.73 ms
28.10 17:01:34 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:02, startdate => 2016-28-10 17:02 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:36 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:01:36 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:01:36 TIME: user.ping 0.72 ms
28.10 17:01:36 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:01:40 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:01:40 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:01:40 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:40 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:02, startdate => 2016-28-10 17:02 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:40 TIME: tournament.getAvailableTournament 3.06 ms
28.10 17:01:40 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:02, startdate => 2016-28-10 17:02 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:01:41 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:01:41 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:01:41 TIME: user.ping 0.17 ms
28.10 17:01:41 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:02:01 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:02:01 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:02:01 TIME: user.ping 0.19 ms
28.10 17:02:01 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:02:02 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:02:02 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:02:02 TIME: user.ping 0.17 ms
28.10 17:02:02 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:02:13 TIMER: Check auto-disconnect...
28.10 17:02:13 -<<-: tournament.enemyEvent { data => { name => nelli8, tournamentId => 1, enemy.id => 100, enemy.name => test67, round => 1, roundDate => 2016-28-10 17:02, id => 101, enemy.num => 2, battleId => 94, player => 1 }, _isNotify => true, id => 101, _type => tournament.enemyEvent }
28.10 17:02:13 -<<-: tournament.enemyEvent { data => { name => test67, tournamentId => 1, enemy.id => 101, enemy.name => nelli8, round => 1, roundDate => 2016-28-10 17:02, id => 100, enemy.num => 1, battleId => 94, player => 2 }, _isNotify => true, id => 100, _type => tournament.enemyEvent }
28.10 17:02:13 == NET: nelli8 ret: tournament.enemy { data => { name => nelli8, tournamentId => 1, enemy.id => 100, enemy.name => test67, round => 1, roundDate => 2016-28-10 17:02, id => 101, enemy.num => 2, battleId => 94, player => 1 }, type => tournament.enemy }
28.10 17:02:13 == NET: test67 ret: tournament.enemy { data => { name => test67, tournamentId => 1, enemy.id => 101, enemy.name => nelli8, round => 1, roundDate => 2016-28-10 17:02, id => 100, enemy.num => 1, battleId => 94, player => 2 }, type => tournament.enemy }
28.10 17:02:13 STATS: vdl.0 cache, locks:4
28.10 17:02:22 ++ NET: nelli8 req: battle.end { type => leaveGame, typeBattle => tournament, tournamentId => 1, messageType => battle.end, battleId => 94 }
28.10 17:02:22 ->>-: vdl/cache.battle.infoRoom { roomId => 94, _type => vdl/cache.battle.infoRoom }
28.10 17:02:22 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:02:22 STATS: vdl.0 cache connection, 54 calls, total 0.108381509780884 sec spent, avg 2.01 ms
28.10 17:02:22 ->>-: vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
28.10 17:02:22 -<<-: vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[100,101],"battleActive":[94],"usersAll":[100,101]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-28-10 17:02, startdate => 2016-28-10 17:02, roundinterval => 1 }
28.10 17:02:22 ->>-: vdl/cache.battle.infoRoom { roomId => 94, _type => vdl/cache.battle.infoRoom }
28.10 17:02:22 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:02:22 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
28.10 17:02:22 -<<-: vdl/cache.tournament.getBattlesTournaments [94]
28.10 17:02:22 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
28.10 17:02:22 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [100,101] }
28.10 17:02:22 ->>-: vdl/cache.battle.finishRoom { roomId => 94, _type => vdl/cache.battle.finishRoom }
28.10 17:02:22 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
28.10 17:02:22 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [94] }
28.10 17:02:22 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
28.10 17:02:22 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [100], _type => vdl/cache.tournament.setUsersTournament }
28.10 17:02:22 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
28.10 17:02:22 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 100, round => 1, player1 => 101, player2 => 100 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:02:22 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:02:22 ->>-: vdl/cache.tournament.addRound { dateRound => 2016-28-10 17:02, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
28.10 17:02:22 -<<-: vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
28.10 17:02:22 ->>-: vdl/cache.tournament.finish { winner => 100, tournamentId => 1, _type => vdl/cache.tournament.finish }
28.10 17:02:22 -<<-: vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
28.10 17:02:22 TIME: battle.end 6.54 ms
28.10 17:02:22 == NET: nelli8 ret: battle.end { type => battle.end, errorCode => ok }
28.10 17:02:22 == NET: test67 ret: battle.leave { type => battle.leave }
28.10 17:02:22 ++ NET: test67 req: battle.end { type => winGame, typeBattle => tournament, tournamentId => 1, messageType => battle.end, battleId => 94 }
28.10 17:02:22 ->>-: vdl/cache.battle.infoRoom { roomId => 94, _type => vdl/cache.battle.infoRoom }
28.10 17:02:22 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:02:22 ->>-: vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
28.10 17:02:22 -<<-: vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[100,101],"battleActive":[94],"usersAll":[100,101]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-28-10 17:02, startdate => 2016-28-10 17:02, roundinterval => 1 }
28.10 17:02:22 ->>-: vdl/cache.battle.infoRoom { roomId => 94, _type => vdl/cache.battle.infoRoom }
28.10 17:02:22 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:02:22 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
28.10 17:02:22 -<<-: vdl/cache.tournament.getBattlesTournaments []
28.10 17:02:22 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
28.10 17:02:22 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [100] }
28.10 17:02:22 ->>-: vdl/cache.battle.finishRoom { roomId => 94, _type => vdl/cache.battle.finishRoom }
28.10 17:02:22 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
28.10 17:02:22 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [94] }
28.10 17:02:22 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
28.10 17:02:22 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [100], _type => vdl/cache.tournament.setUsersTournament }
28.10 17:02:22 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
28.10 17:02:22 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 100, round => 1, player1 => 101, player2 => 100 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:02:22 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => 100 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:02:22 ->>-: vdl/cache.tournament.addRound { dateRound => 2016-28-10 17:02, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
28.10 17:02:22 -<<-: vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
28.10 17:02:22 ->>-: vdl/cache.tournament.finish { winner => 100, tournamentId => 1, _type => vdl/cache.tournament.finish }
28.10 17:02:22 -<<-: vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
28.10 17:02:22 TIME: battle.end 5.76 ms
28.10 17:02:22 == NET: test67 ret: battle.end { type => battle.end, errorCode => ok }
28.10 17:02:22 == NET: nelli8 ret: battle.end { type => battle.end }
28.10 17:02:23 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:02:23 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:02:23 TIME: user.ping 0.14 ms
28.10 17:02:23 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:02:28 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:02:28 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:02:28 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:02:28 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 100, battleFinished => [94,94], round => 2, id => 1, status => finished, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => [], rounddate => 2016-28-10 17:02, startdate => 2016-28-10 17:02 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:02:28 TIME: tournament.getAvailableTournament 3.02 ms
28.10 17:02:28 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => 100, battleFinished => [94,94], round => 2, id => 1, status => finished, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => [], rounddate => 2016-28-10 17:02, startdate => 2016-28-10 17:02 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:02:35 ++ NET: test67 req: tournament.grid { tournamentId => 1, round => 2, messageType => tournament.grid }
28.10 17:02:35 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:02:35 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
28.10 17:02:35 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
28.10 17:02:35 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:02:35 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => 100 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:02:35 TIME: tournament.grid 1.26 ms
28.10 17:02:35 == NET: test67 ret: tournament.grid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => 100 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:02:36 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:02:36 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:02:36 TIME: user.ping 0.13 ms
28.10 17:02:36 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:02:43 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:02:43 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:02:43 TIME: user.ping 0.18 ms
28.10 17:02:43 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:03:13 TIMER: Check auto-disconnect...
28.10 17:03:13 STATS: vdl.0 cache, locks:4
28.10 17:03:29 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:03:29 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:03:29 TIME: user.ping 0.17 ms
28.10 17:03:29 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:03:50 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:03:50 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:03:50 TIME: user.ping 0.16 ms
28.10 17:03:50 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:04:13 TIMER: Check auto-disconnect...
28.10 17:04:13 STATS: vdl.0 cache, locks:4
28.10 17:04:13 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:04:13 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:04:13 TIME: user.ping 0.17 ms
28.10 17:04:13 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:04:22 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:04:22 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:04:22 TIME: user.ping 0.15 ms
28.10 17:04:22 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:04:33 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:04:33 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:04:33 TIME: user.ping 0.19 ms
28.10 17:04:33 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:05:13 TIMER: Check auto-disconnect...
28.10 17:05:13 STATS: vdl.0 cache, locks:4
28.10 17:05:29 NET: Client (conid:62358381) connected to vdl.0 (clients:3)
28.10 17:05:30 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
28.10 17:05:30 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
28.10 17:05:30 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
28.10 17:05:30 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
28.10 17:05:30 STATS: vdl.0 cache connection, 79 calls, total 0.124873638153076 sec spent, avg 1.58 ms
28.10 17:05:30 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
28.10 17:05:30 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
28.10 17:05:30 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
28.10 17:05:30 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477661839, lastLoginDate => 302, lastLoadDate => 1029 }, effects => { list => [] } }}, version => 0, id => 107 } }
28.10 17:05:30 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
28.10 17:05:30 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
28.10 17:05:30 NET: Client login (conid:62358381, id:107, name:uid107)
28.10 17:05:30 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
28.10 17:05:30 -<<-: core/user.loginPost { _type => core/user.loginPost }
28.10 17:05:30 == NET: nelli8 ret: user.join { name => uid107, type => user.join }
28.10 17:05:30 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
28.10 17:05:30 == NET: test67 ret: user.join { name => uid107, type => user.join }
28.10 17:05:30 == NET: uid107 ret: user.join { name => nelli8, type => user.join }
28.10 17:05:30 == NET: uid107 ret: user.join { name => test67, type => user.join }
28.10 17:05:30 == NET: uid107 ret: user.join { name => uid107, type => user.join }
28.10 17:05:34 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:05:34 == NET: uid107 ret: user.check { type => user.check, errorCode => ok }
28.10 17:05:34 TIME: user.ping 0.2 ms
28.10 17:05:34 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:05:38 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
28.10 17:05:38 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:05:44 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:05:44 == NET: uid107 ret: user.check { type => user.check, errorCode => ok }
28.10 17:05:44 TIME: user.ping 0.15 ms
28.10 17:05:44 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:06:30 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
28.10 17:06:30 -<<-: server.login ok
28.10 17:06:30 DB: SELECT * FROM LocalizationStrings
28.10 17:06:30 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:06:30 TIMER: Starting timer...
28.10 17:06:30 TIMER: Timer running...
28.10 17:06:30 DB: SELECT * FROM GameVars
28.10 17:06:30 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:06:30 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
28.10 17:06:30 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:06:30 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
28.10 17:06:30 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:06:30 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
28.10 17:06:30 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:06:30 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
28.10 17:06:30 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:06:30 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
28.10 17:06:30 -<<-: core/quest.getDaily ok
28.10 17:06:30 DB: SELECT * FROM UserAttributeTypes
28.10 17:06:30 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:06:30 DB: SELECT * FROM UserVariableTypes
28.10 17:06:30 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:06:30 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
28.10 17:06:30 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:06:30 DB: SELECT * FROM ItemGroups
28.10 17:06:30 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:06:30 DB: SELECT * FROM Bundles ORDER BY ID
28.10 17:06:30 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:06:30 DB: SELECT * FROM BundleItems ORDER BY ID
28.10 17:06:30 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:06:30 SHOP: loading items...
28.10 17:06:30 ->>-: core/shop.getList { _type => core/shop.getList }
28.10 17:06:30 -<<-: core/shop.getList ok
28.10 17:06:30 SHOP: 0 items loaded (0.001 sec)
28.10 17:06:30 DB: SELECT * FROM EffectAttributeTypes
28.10 17:06:30 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:06:30 DB: SELECT * FROM Effects
28.10 17:06:30 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:06:30 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 17:06:30 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:06:30 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 17:06:30 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:06:30 DB: SELECT * FROM Badges
28.10 17:06:30 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
28.10 17:06:30 -<<-: core/server.query ok
28.10 17:07:13 NET: Client (conid:34713978) connected to vdl.0 (clients:1)
28.10 17:07:14 NET: Client (conid:78847787) connected to vdl.0 (clients:2)
28.10 17:07:16 ++ NET: null req: user.login { password => test, name => test67, messageType => user.login }
28.10 17:07:16 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test67' AND Password = E'test'
28.10 17:07:16 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test67' AND Password = E'test', _type => core/server.query }
28.10 17:07:16 -<<-: core/server.query ok
28.10 17:07:16 ->>-: core/user.isOnlineID { id => 100, _type => core/user.isOnlineID }
28.10 17:07:16 -<<-: core/user.isOnlineID ok
28.10 17:07:16 ->>-: core/cache.get { type => user, v => -1, id => 100, _type => core/cache.get }
28.10 17:07:16 -<<-: core/cache.get ok
28.10 17:07:16 ->>-: core/cache.get { type => questdata, v => -1, id => 100, _type => core/cache.get }
28.10 17:07:16 -<<-: core/cache.get ok
28.10 17:07:16 NET: Client login (conid:34713978, id:100, name:test67)
28.10 17:07:16 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 100, _type => core/user.loginPost, ipAddr => 172.16.20.112 }
28.10 17:07:16 -<<-: core/user.loginPost null
28.10 17:07:16 == NET: test67 ret: user.login { name => test67, type => user.login, errorCode => ok, id => 100 }
28.10 17:07:16 == NET: null ret: user.join { name => test67, type => user.join }
28.10 17:07:16 == NET: test67 ret: user.join { name => test67, type => user.join }
28.10 17:07:16 == NET: test67 ret: user.join { name => null, type => user.join }
28.10 17:07:17 ++ NET: null req: user.login { password => qwerty, name => nelli8, messageType => user.login }
28.10 17:07:17 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'nelli8' AND Password = E'qwerty'
28.10 17:07:17 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'nelli8' AND Password = E'qwerty', _type => core/server.query }
28.10 17:07:17 -<<-: core/server.query { list => {{ name => nelli8, networkid => , isbanned => false, id => 101 }}, errorCode => ok, _type => core/server.query }
28.10 17:07:17 ->>-: core/user.isOnlineID { id => 101, _type => core/user.isOnlineID }
28.10 17:07:17 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
28.10 17:07:17 ->>-: core/cache.get { type => user, v => -1, id => 101, _type => core/cache.get }
28.10 17:07:17 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => nelli8, deleted => false, email => , networktype =>   , password => qwerty, isbanned => false, regdate => 2016-10-28 16:03:03.386319+03, language => en, networkid => , params => { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477659784, lastLoginDate => 302, lastLoadDate => 1029 }, effects => { list => [] } }}, version => 0, id => 101 } }
28.10 17:07:17 ->>-: core/cache.get { type => questdata, v => -1, id => 101, _type => core/cache.get }
28.10 17:07:17 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 101 } }
28.10 17:07:17 NET: Client login (conid:78847787, id:101, name:nelli8)
28.10 17:07:17 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 101, _type => core/user.loginPost, ipAddr => 172.16.20.79 }
28.10 17:07:17 -<<-: core/user.loginPost { _type => core/user.loginPost }
28.10 17:07:17 == NET: test67 ret: user.join { name => nelli8, type => user.join }
28.10 17:07:17 == NET: nelli8 ret: user.login { name => nelli8, type => user.login, errorCode => ok, id => 101 }
28.10 17:07:17 == NET: nelli8 ret: user.join { name => test67, type => user.join }
28.10 17:07:17 == NET: nelli8 ret: user.join { name => nelli8, type => user.join }
28.10 17:07:20 ++ NET: test67 req: user.data { messageType => user.data }
28.10 17:07:20 ->>-: vdl/cache.user.getData { userId => 100, _type => vdl/cache.user.getData }
28.10 17:07:20 -<<-: vdl/cache.user.getData { info => { city => , year => , email =>  }, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:07:20 TIME: user.data 0.58 ms
28.10 17:07:20 == NET: test67 ret: user.data { info => { city => , year => , email =>  }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:07:22 ++ NET: nelli8 req: user.data { messageType => user.data }
28.10 17:07:22 ->>-: vdl/cache.user.getData { userId => 101, _type => vdl/cache.user.getData }
28.10 17:07:22 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:07:22 TIME: user.data 0.59 ms
28.10 17:07:22 == NET: nelli8 ret: user.data { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:07:23 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:07:23 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:23 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:07:23 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:23 TIME: tournament.getAvailableTournament 3.99 ms
28.10 17:07:23 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:25 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 100, _type => core/cache.update }
28.10 17:07:25 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:07:25 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 101, _type => core/cache.update }
28.10 17:07:25 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:07:25 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:07:25 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:07:25 TIME: user.ping 0.15 ms
28.10 17:07:25 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:07:27 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:07:27 TIME: user.ping 0.16 ms
28.10 17:07:27 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:07:27 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:07:30 TIMER: Check auto-disconnect...
28.10 17:07:30 STATS: vdl.0 cache, locks:4
28.10 17:07:30 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:07:30 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:07:30 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:30 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:30 STATS: vdl.0 cache connection, 36 calls, total 0.0760691165924072 sec spent, avg 2.11 ms
28.10 17:07:30 TIME: tournament.getAvailableTournament 2.45 ms
28.10 17:07:30 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:44 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:07:44 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:44 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:07:44 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:44 TIME: tournament.getAvailableTournament 3.1 ms
28.10 17:07:44 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:46 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:07:46 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:07:46 TIME: user.ping 0.14 ms
28.10 17:07:46 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:07:47 ++ NET: test67 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
28.10 17:07:47 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:07:47 ->>-: vdl/cache.tournament.addUsers { userId => 100, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:07:47 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:07:47 TIME: tournament.addUsers 0.52 ms
28.10 17:07:47 == NET: test67 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:07:47 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:07:47 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:07:47 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:47 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:47 TIME: tournament.getAvailableTournament 3.94 ms
28.10 17:07:47 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:47 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:07:47 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:07:47 TIME: user.ping 0.17 ms
28.10 17:07:47 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:07:51 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:07:51 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:51 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:07:51 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:51 TIME: tournament.getAvailableTournament 2.27 ms
28.10 17:07:51 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:55 ++ NET: nelli8 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
28.10 17:07:55 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:07:55 ->>-: vdl/cache.tournament.addUsers { userId => 101, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:07:55 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:07:55 TIME: tournament.addUsers 0.67 ms
28.10 17:07:55 == NET: nelli8 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:07:55 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:07:55 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:07:55 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:55 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:07:55 TIME: tournament.getAvailableTournament 3.54 ms
28.10 17:07:55 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:08:01 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:08:01 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:08:01 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:08:01 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:08:01 TIME: tournament.getAvailableTournament 4.66 ms
28.10 17:08:01 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:08:07 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:08:07 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:08:07 TIME: user.ping 0.17 ms
28.10 17:08:07 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:08:11 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:08:11 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:08:11 TIME: user.ping 0.14 ms
28.10 17:08:11 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:08:23 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:08:23 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:08:23 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:08:23 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:08:23 TIME: tournament.getAvailableTournament 7.4 ms
28.10 17:08:23 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:08:28 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:08:28 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:08:28 TIME: user.ping 0.16 ms
28.10 17:08:28 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:08:30 TIMER: Check auto-disconnect...
28.10 17:08:30 STATS: vdl.0 cache, locks:4
28.10 17:08:38 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:08:38 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:08:38 TIME: user.ping 0.16 ms
28.10 17:08:38 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:08:55 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:08:55 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:08:55 TIME: user.ping 0.41 ms
28.10 17:08:55 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:09:04 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:09:04 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:09:04 TIME: user.ping 0.15 ms
28.10 17:09:04 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:09:21 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:09:21 TIME: user.ping 0.18 ms
28.10 17:09:21 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:09:21 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:09:30 TIMER: Check auto-disconnect...
28.10 17:09:30 -<<-: tournament.enemyEvent { data => { name => nelli8, tournamentId => 1, enemy.id => 100, enemy.name => test67, round => 1, roundDate => 2016-28-10 17:09, id => 101, enemy.num => 2, battleId => 95, player => 1 }, _isNotify => true, id => 101, _type => tournament.enemyEvent }
28.10 17:09:30 -<<-: tournament.enemyEvent { data => { name => test67, tournamentId => 1, enemy.id => 101, enemy.name => nelli8, round => 1, roundDate => 2016-28-10 17:09, id => 100, enemy.num => 1, battleId => 95, player => 2 }, _isNotify => true, id => 100, _type => tournament.enemyEvent }
28.10 17:09:30 == NET: nelli8 ret: tournament.enemy { data => { name => nelli8, tournamentId => 1, enemy.id => 100, enemy.name => test67, round => 1, roundDate => 2016-28-10 17:09, id => 101, enemy.num => 2, battleId => 95, player => 1 }, type => tournament.enemy }
28.10 17:09:30 == NET: test67 ret: tournament.enemy { data => { name => test67, tournamentId => 1, enemy.id => 101, enemy.name => nelli8, round => 1, roundDate => 2016-28-10 17:09, id => 100, enemy.num => 1, battleId => 95, player => 2 }, type => tournament.enemy }
28.10 17:09:30 STATS: vdl.0 cache, locks:4
28.10 17:09:36 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:09:36 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:09:36 TIME: user.ping 0.17 ms
28.10 17:09:36 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:09:39 ++ NET: nelli8 req: battle.end { type => leaveGame, typeBattle => tournament, tournamentId => 1, messageType => battle.end, battleId => 95 }
28.10 17:09:39 ->>-: vdl/cache.battle.infoRoom { roomId => 95, _type => vdl/cache.battle.infoRoom }
28.10 17:09:39 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:09:39 STATS: vdl.0 cache connection, 45 calls, total 0.101716756820679 sec spent, avg 2.26 ms
28.10 17:09:39 ->>-: vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
28.10 17:09:39 -<<-: vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[100,101],"battleActive":[95],"usersAll":[100,101]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09, roundinterval => 1 }
28.10 17:09:39 ->>-: vdl/cache.battle.infoRoom { roomId => 95, _type => vdl/cache.battle.infoRoom }
28.10 17:09:39 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:09:39 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
28.10 17:09:39 -<<-: vdl/cache.tournament.getBattlesTournaments [95]
28.10 17:09:39 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
28.10 17:09:39 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [100,101] }
28.10 17:09:39 ->>-: vdl/cache.battle.finishRoom { roomId => 95, _type => vdl/cache.battle.finishRoom }
28.10 17:09:39 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
28.10 17:09:39 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [95] }
28.10 17:09:39 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
28.10 17:09:39 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [100], _type => vdl/cache.tournament.setUsersTournament }
28.10 17:09:39 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
28.10 17:09:39 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 100, round => 1, player1 => 101, player2 => 100 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:09:39 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:09:39 ->>-: vdl/cache.tournament.addRound { dateRound => 2016-28-10 17:09, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
28.10 17:09:39 -<<-: vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
28.10 17:09:39 ->>-: vdl/cache.tournament.finish { winner => 100, tournamentId => 1, _type => vdl/cache.tournament.finish }
28.10 17:09:39 -<<-: vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
28.10 17:09:39 TIME: battle.end 8.73 ms
28.10 17:09:39 == NET: nelli8 ret: battle.end { type => battle.end, errorCode => ok }
28.10 17:09:39 == NET: test67 ret: battle.leave { type => battle.leave }
28.10 17:09:40 ++ NET: test67 req: battle.end { type => winGame, typeBattle => tournament, tournamentId => 1, messageType => battle.end, battleId => 95 }
28.10 17:09:40 ->>-: vdl/cache.battle.infoRoom { roomId => 95, _type => vdl/cache.battle.infoRoom }
28.10 17:09:40 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:09:40 ->>-: vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
28.10 17:09:40 -<<-: vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[100,101],"battleActive":[95],"usersAll":[100,101]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09, roundinterval => 1 }
28.10 17:09:40 ->>-: vdl/cache.battle.infoRoom { roomId => 95, _type => vdl/cache.battle.infoRoom }
28.10 17:09:40 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:09:40 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
28.10 17:09:40 -<<-: vdl/cache.tournament.getBattlesTournaments []
28.10 17:09:40 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
28.10 17:09:40 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [100] }
28.10 17:09:40 ->>-: vdl/cache.battle.finishRoom { roomId => 95, _type => vdl/cache.battle.finishRoom }
28.10 17:09:40 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
28.10 17:09:40 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [95] }
28.10 17:09:40 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
28.10 17:09:40 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [100], _type => vdl/cache.tournament.setUsersTournament }
28.10 17:09:40 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
28.10 17:09:40 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 100, round => 1, player1 => 101, player2 => 100 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:09:40 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => 100 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:09:40 ->>-: vdl/cache.tournament.addRound { dateRound => 2016-28-10 17:09, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
28.10 17:09:40 -<<-: vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
28.10 17:09:40 ->>-: vdl/cache.tournament.finish { winner => 100, tournamentId => 1, _type => vdl/cache.tournament.finish }
28.10 17:09:40 -<<-: vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
28.10 17:09:40 TIME: battle.end 6.47 ms
28.10 17:09:40 == NET: test67 ret: battle.end { type => battle.end, errorCode => ok }
28.10 17:09:40 == NET: nelli8 ret: battle.end { type => battle.end }
28.10 17:09:48 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:09:48 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:09:48 TIME: user.ping 0.15 ms
28.10 17:09:48 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:09:53 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:09:53 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:09:53 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:09:53 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 100, battleFinished => [95,95], round => 2, id => 1, status => finished, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => [], rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:09:53 TIME: tournament.getAvailableTournament 3.82 ms
28.10 17:09:53 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => 100, battleFinished => [95,95], round => 2, id => 1, status => finished, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => [], rounddate => 2016-28-10 17:09, startdate => 2016-28-10 17:09 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:09:57 ++ NET: test67 req: tournament.grid { tournamentId => 1, round => 2, messageType => tournament.grid }
28.10 17:09:57 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:09:57 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
28.10 17:09:57 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
28.10 17:09:57 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:09:57 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => 100 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:09:57 TIME: tournament.grid 1.09 ms
28.10 17:09:57 == NET: test67 ret: tournament.grid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => 100 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:10:08 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:10:08 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:10:08 TIME: user.ping 0.16 ms
28.10 17:10:08 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:10:16 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:10:16 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:10:16 TIME: user.ping 0.18 ms
28.10 17:10:16 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:10:30 TIMER: Check auto-disconnect...
28.10 17:10:30 STATS: vdl.0 cache, locks:4
28.10 17:10:30 TIMER: Check auto-disconnect...
28.10 17:10:30 STATS: vdl.0 cache, locks:4
28.10 17:10:30 TIMER: Check auto-disconnect...
28.10 17:10:30 STATS: vdl.0 cache, locks:4
28.10 17:10:30 TIMER: Check auto-disconnect...
28.10 17:10:30 NET: Client (name:test67 conid:34713978 TCP) disconnected from vdl.0 (clients:1)
28.10 17:10:30 NET: Client (name:nelli8 conid:78847787 TCP) disconnected from vdl.0 (clients:0)
28.10 17:10:30 DB: SELECT id FROM battle WHERE firstid=100 OR secondid=100 AND finished <> true
28.10 17:10:30 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=100 OR secondid=100 AND finished <> true, _type => core/server.query }
28.10 17:10:30 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
28.10 17:10:30 STATS: vdl.0 cache connection, 70 calls, total 0.122021913528442 sec spent, avg 1.74 ms
28.10 17:10:30 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 17:10:30 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
28.10 17:10:30 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 17:10:30 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 266
Called from modules/VDLBattleModule.hx line 279
Called from snipe/slave/Server.hx line 994
28.10 17:10:30 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 100, _type => core/cache.update }
28.10 17:10:30 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
28.10 17:10:30 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 100, _type => core/cache.update }
28.10 17:10:30 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:10:30 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 100, _type => core/user.logoutPost }
28.10 17:10:30 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
28.10 17:10:30 DB: SELECT id FROM battle WHERE firstid=101 OR secondid=101 AND finished <> true
28.10 17:10:30 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=101 OR secondid=101 AND finished <> true, _type => core/server.query }
28.10 17:10:30 -<<-: core/server.query { list => {{ id => 94 }, { id => 95 }}, errorCode => ok, _type => core/server.query }
28.10 17:10:30 ->>-: vdl/cache.battle.infoRoom { roomId => 95, _type => vdl/cache.battle.infoRoom }
28.10 17:10:30 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:10:30 ->>-: vdl/cache.battle.deleteRoom { roomId => 95, _type => vdl/cache.battle.deleteRoom }
28.10 17:10:30 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
28.10 17:10:30 ->>-: core/user.sendTo { id => 100, _type => core/user.sendTo, msg => { _type => battle.end } }
28.10 17:10:30 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
28.10 17:10:30 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 101, _type => core/cache.update }
28.10 17:10:30 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
28.10 17:10:30 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 101, _type => core/cache.update }
28.10 17:10:30 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:10:30 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 101, _type => core/user.logoutPost }
28.10 17:10:30 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
28.10 17:10:30 STATS: vdl.0 cache, locks:0
28.10 17:10:30 TIMER: Check auto-disconnect...
28.10 17:10:30 STATS: vdl.0 cache, locks:0
28.10 17:10:30 TIMER: Check auto-disconnect...
28.10 17:10:30 STATS: vdl.0 cache, lock28.10 17:16:13 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
28.10 17:16:13 -<<-: server.login ok
28.10 17:16:13 DB: SELECT * FROM LocalizationStrings
28.10 17:16:13 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 TIMER: Starting timer...
28.10 17:16:13 TIMER: Timer running...
28.10 17:16:13 DB: SELECT * FROM GameVars
28.10 17:16:13 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
28.10 17:16:13 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
28.10 17:16:13 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
28.10 17:16:13 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
28.10 17:16:13 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
28.10 17:16:13 -<<-: core/quest.getDaily ok
28.10 17:16:13 DB: SELECT * FROM UserAttributeTypes
28.10 17:16:13 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 DB: SELECT * FROM UserVariableTypes
28.10 17:16:13 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
28.10 17:16:13 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 DB: SELECT * FROM ItemGroups
28.10 17:16:13 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 DB: SELECT * FROM Bundles ORDER BY ID
28.10 17:16:13 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 DB: SELECT * FROM BundleItems ORDER BY ID
28.10 17:16:13 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 SHOP: loading items...
28.10 17:16:13 ->>-: core/shop.getList { _type => core/shop.getList }
28.10 17:16:13 -<<-: core/shop.getList ok
28.10 17:16:13 SHOP: 0 items loaded (0.001 sec)
28.10 17:16:13 DB: SELECT * FROM EffectAttributeTypes
28.10 17:16:13 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 DB: SELECT * FROM Effects
28.10 17:16:13 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 17:16:13 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 17:16:13 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 DB: SELECT * FROM Badges
28.10 17:16:13 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
28.10 17:16:13 -<<-: core/server.query ok
28.10 17:16:13 TIMER: Check auto-disconnect...
28.10 17:16:13 STATS: vdl.0 cache, locks:0
28.10 17:17:23 NET: Client (conid:44751752) connected to vdl.0 (clients:1)
28.10 17:17:36 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
28.10 17:17:36 == NET: null ret: user.check { type => user.check, errorCode => notLogin }
28.10 17:17:36 TIME: user.ping 0.17 ms
28.10 17:17:36 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:17:36 NET: Client (name:null conid:44751752 TCP) disconnected from vdl.0 (clients:0)
28.10 17:17:36 NET: Client (conid:55632089) connected to vdl.0 (clients:1)
28.10 17:17:38 NET: Client (name:null conid:55632089 TCP) disconnected from vdl.0 (clients:0)
28.10 17:17:38 NET: Client (conid:24750946) connected to vdl.0 (clients:1)
28.10 17:17:38 ++ NET: null req: user.login { password => test, name => test67, messageType => user.login }
28.10 17:17:38 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test67' AND Password = E'test'
28.10 17:17:38 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test67' AND Password = E'test', _type => core/server.query }
28.10 17:17:38 -<<-: core/server.query ok
28.10 17:17:38 STATS: vdl.0 cache connection, 21 calls, total 0.0579156875610352 sec spent, avg 2.76 ms
28.10 17:17:38 ->>-: core/user.isOnlineID { id => 100, _type => core/user.isOnlineID }
28.10 17:17:38 -<<-: core/user.isOnlineID ok
28.10 17:17:38 ->>-: core/cache.get { type => user, v => -1, id => 100, _type => core/cache.get }
28.10 17:17:38 -<<-: core/cache.get ok
28.10 17:17:38 ->>-: core/cache.get { type => questdata, v => -1, id => 100, _type => core/cache.get }
28.10 17:17:38 -<<-: core/cache.get ok
28.10 17:17:38 NET: Client login (conid:24750946, id:100, name:test67)
28.10 17:17:38 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 100, _type => core/user.loginPost, ipAddr => 172.16.20.112 }
28.10 17:17:38 -<<-: core/user.loginPost null
28.10 17:17:38 == NET: test67 ret: user.login { name => test67, type => user.login, errorCode => ok, id => 100 }
28.10 17:17:38 == NET: test67 ret: user.join { name => test67, type => user.join }
28.10 17:17:38 ++ NET: test67 req: user.data { messageType => user.data }
28.10 17:17:38 ->>-: vdl/cache.user.getData { userId => 100, _type => vdl/cache.user.getData }
28.10 17:17:38 -<<-: vdl/cache.user.getData { info => { city => , year => , email =>  }, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:17:38 TIME: user.data 0.58 ms
28.10 17:17:38 == NET: test67 ret: user.data { info => { city => , year => , email =>  }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:17:43 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 100, _type => core/cache.update }
28.10 17:17:43 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:17:47 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:17:47 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:17:47 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:17:47 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:17:47 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:17:47 TIME: tournament.getAvailableTournament 3.86 ms
28.10 17:17:51 NET: Client (conid:3287438) connected to vdl.0 (clients:2)
28.10 17:17:52 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:17:52 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:17:52 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:17:52 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:17:52 TIME: tournament.getAvailableTournament 2.74 ms
28.10 17:17:52 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:17:53 ++ NET: null req: user.login { password => qwerty, name => nelli8, messageType => user.login }
28.10 17:17:53 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'nelli8' AND Password = E'qwerty'
28.10 17:17:53 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'nelli8' AND Password = E'qwerty', _type => core/server.query }
28.10 17:17:53 -<<-: core/server.query { list => {{ name => nelli8, networkid => , isbanned => false, id => 101 }}, errorCode => ok, _type => core/server.query }
28.10 17:17:53 ->>-: core/user.isOnlineID { id => 101, _type => core/user.isOnlineID }
28.10 17:17:53 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
28.10 17:17:53 ->>-: core/cache.get { type => user, v => -1, id => 101, _type => core/cache.get }
28.10 17:17:53 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => nelli8, deleted => false, email => , networktype =>   , password => qwerty, isbanned => false, regdate => 2016-10-28 16:03:03.386319+03, language => en, networkid => , params => { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477659784, lastLoginDate => 302, lastLoadDate => 1029 }, effects => { list => [] } }}, version => 0, id => 101 } }
28.10 17:17:53 ->>-: core/cache.get { type => questdata, v => -1, id => 101, _type => core/cache.get }
28.10 17:17:53 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 101 } }
28.10 17:17:53 NET: Client login (conid:3287438, id:101, name:nelli8)
28.10 17:17:53 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 101, _type => core/user.loginPost, ipAddr => 172.16.20.79 }
28.10 17:17:53 -<<-: core/user.loginPost { _type => core/user.loginPost }
28.10 17:17:53 == NET: test67 ret: user.join { name => nelli8, type => user.join }
28.10 17:17:53 == NET: nelli8 ret: user.login { name => nelli8, type => user.login, errorCode => ok, id => 101 }
28.10 17:17:53 == NET: nelli8 ret: user.join { name => test67, type => user.join }
28.10 17:17:53 == NET: nelli8 ret: user.join { name => nelli8, type => user.join }
28.10 17:17:56 ++ NET: nelli8 req: user.data { messageType => user.data }
28.10 17:17:56 ->>-: vdl/cache.user.getData { userId => 101, _type => vdl/cache.user.getData }
28.10 17:17:56 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:17:56 TIME: user.data 0.55 ms
28.10 17:17:56 == NET: nelli8 ret: user.data { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:17:56 ++ NET: test67 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
28.10 17:17:56 ->>-: vdl/cache.tournament.addUsers { userId => 100, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:17:56 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:17:56 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:17:56 TIME: tournament.addUsers 5.73 ms
28.10 17:17:56 == NET: test67 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:17:56 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:17:56 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:17:56 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:17:56 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:17:56 TIME: tournament.getAvailableTournament 3.7 ms
28.10 17:17:56 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:17:58 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:17:58 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:17:58 TIME: user.ping 0.16 ms
28.10 17:17:58 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:18:01 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:18:01 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:18:01 TIME: user.ping 0.15 ms
28.10 17:18:01 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:18:02 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:18:02 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:18:02 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:18:02 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:18:02 TIME: tournament.getAvailableTournament 2.46 ms
28.10 17:18:02 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:18:03 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 101, _type => core/cache.update }
28.10 17:18:03 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:18:05 ++ NET: nelli8 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
28.10 17:18:05 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:18:05 ->>-: vdl/cache.tournament.addUsers { userId => 101, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:18:05 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:18:05 TIME: tournament.addUsers 0.87 ms
28.10 17:18:05 == NET: nelli8 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:18:06 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:18:06 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:18:06 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:18:06 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:18:06 TIME: tournament.getAvailableTournament 4.15 ms
28.10 17:18:06 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:18:09 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:18:09 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:18:09 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:18:09 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:18:09 TIME: tournament.getAvailableTournament 3.29 ms
28.10 17:18:09 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:18:13 TIMER: Check auto-disconnect...
28.10 17:18:13 STATS: vdl.0 cache, locks:4
28.10 17:18:21 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:18:21 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:18:21 TIME: user.ping 0.19 ms
28.10 17:18:21 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:18:34 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:18:34 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:18:34 TIME: user.ping 0.15 ms
28.10 17:18:34 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:18:51 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:18:51 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:18:51 TIME: user.ping 0.17 ms
28.10 17:18:51 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:19:11 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:19:11 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:19:11 TIME: user.ping 0.15 ms
28.10 17:19:11 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:19:13 TIMER: Check auto-disconnect...
28.10 17:19:13 -<<-: tournament.enemyEvent { data => { name => nelli8, tournamentId => 1, enemy.id => 100, enemy.name => test67, round => 1, roundDate => 2016-28-10 17:19, id => 101, enemy.num => 2, battleId => 96, player => 1 }, _isNotify => true, id => 101, _type => tournament.enemyEvent }
28.10 17:19:13 -<<-: tournament.enemyEvent { data => { name => test67, tournamentId => 1, enemy.id => 101, enemy.name => nelli8, round => 1, roundDate => 2016-28-10 17:19, id => 100, enemy.num => 1, battleId => 96, player => 2 }, _isNotify => true, id => 100, _type => tournament.enemyEvent }
28.10 17:19:13 == NET: nelli8 ret: tournament.enemy { data => { name => nelli8, tournamentId => 1, enemy.id => 100, enemy.name => test67, round => 1, roundDate => 2016-28-10 17:19, id => 101, enemy.num => 2, battleId => 96, player => 1 }, type => tournament.enemy }
28.10 17:19:13 == NET: test67 ret: tournament.enemy { data => { name => test67, tournamentId => 1, enemy.id => 101, enemy.name => nelli8, round => 1, roundDate => 2016-28-10 17:19, id => 100, enemy.num => 1, battleId => 96, player => 2 }, type => tournament.enemy }
28.10 17:19:13 STATS: vdl.0 cache, locks:4
28.10 17:19:14 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:19:14 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:19:14 TIME: user.ping 0.21 ms
28.10 17:19:14 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:19:34 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:19:34 TIME: user.ping 0.22 ms
28.10 17:19:34 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:19:34 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:19:46 ++ NET: nelli8 req: battle.end { type => leaveGame, typeBattle => tournament, tournamentId => 1, messageType => battle.end, battleId => 96 }
28.10 17:19:46 ->>-: vdl/cache.battle.infoRoom { roomId => 96, _type => vdl/cache.battle.infoRoom }
28.10 17:19:46 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:19:46 STATS: vdl.0 cache connection, 43 calls, total 0.0997767448425293 sec spent, avg 2.32 ms
28.10 17:19:46 ->>-: vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
28.10 17:19:46 -<<-: vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[100,101],"battleActive":[96],"usersAll":[100,101]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19, roundinterval => 1 }
28.10 17:19:46 ->>-: vdl/cache.battle.infoRoom { roomId => 96, _type => vdl/cache.battle.infoRoom }
28.10 17:19:46 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:19:46 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
28.10 17:19:46 -<<-: vdl/cache.tournament.getBattlesTournaments [96]
28.10 17:19:46 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
28.10 17:19:46 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [100,101] }
28.10 17:19:46 ->>-: vdl/cache.battle.finishRoom { roomId => 96, _type => vdl/cache.battle.finishRoom }
28.10 17:19:46 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
28.10 17:19:46 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [96] }
28.10 17:19:46 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
28.10 17:19:46 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [100], _type => vdl/cache.tournament.setUsersTournament }
28.10 17:19:46 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
28.10 17:19:46 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 100, round => 1, player1 => 101, player2 => 100 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:19:46 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:19:46 ->>-: vdl/cache.tournament.addRound { dateRound => 2016-28-10 17:19, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
28.10 17:19:46 -<<-: vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
28.10 17:19:46 ->>-: vdl/cache.tournament.finish { winner => 100, tournamentId => 1, _type => vdl/cache.tournament.finish }
28.10 17:19:46 -<<-: vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
28.10 17:19:46 TIME: battle.end 7.82 ms
28.10 17:19:46 == NET: nelli8 ret: battle.end { type => battle.end, errorCode => ok }
28.10 17:19:46 == NET: test67 ret: battle.leave { type => battle.leave }
28.10 17:19:48 ++ NET: test67 req: battle.end { type => winGame, typeBattle => tournament, tournamentId => 1, messageType => battle.end, battleId => 96 }
28.10 17:19:48 ->>-: vdl/cache.battle.infoRoom { roomId => 96, _type => vdl/cache.battle.infoRoom }
28.10 17:19:48 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:19:48 ->>-: vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
28.10 17:19:48 -<<-: vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[100,101],"battleActive":[96],"usersAll":[100,101]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19, roundinterval => 1 }
28.10 17:19:48 ->>-: vdl/cache.battle.infoRoom { roomId => 96, _type => vdl/cache.battle.infoRoom }
28.10 17:19:48 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:19:48 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
28.10 17:19:48 -<<-: vdl/cache.tournament.getBattlesTournaments []
28.10 17:19:48 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
28.10 17:19:48 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [100] }
28.10 17:19:48 ->>-: vdl/cache.battle.finishRoom { roomId => 96, _type => vdl/cache.battle.finishRoom }
28.10 17:19:48 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
28.10 17:19:48 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [96] }
28.10 17:19:48 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
28.10 17:19:48 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [100], _type => vdl/cache.tournament.setUsersTournament }
28.10 17:19:48 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
28.10 17:19:48 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 100, round => 1, player1 => 101, player2 => 100 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:19:48 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:19:48 ->>-: vdl/cache.tournament.addRound { dateRound => 2016-28-10 17:19, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
28.10 17:19:48 -<<-: vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
28.10 17:19:48 ->>-: vdl/cache.tournament.finish { winner => 100, tournamentId => 1, _type => vdl/cache.tournament.finish }
28.10 17:19:48 -<<-: vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
28.10 17:19:48 TIME: battle.end 11.39 ms
28.10 17:19:48 == NET: test67 ret: battle.end { type => battle.end, errorCode => ok }
28.10 17:19:48 == NET: nelli8 ret: battle.end { type => battle.end }
28.10 17:19:54 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:19:54 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:19:54 TIME: user.ping 0.15 ms
28.10 17:19:54 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:19:58 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:19:58 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:19:58 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:19:58 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 100, battleFinished => [96,96], round => 2, id => 1, status => finished, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => [], rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:19:58 TIME: tournament.getAvailableTournament 3.11 ms
28.10 17:19:58 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => 100, battleFinished => [96,96], round => 2, id => 1, status => finished, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => [], rounddate => 2016-28-10 17:19, startdate => 2016-28-10 17:19 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:20:04 NET: Client (name:test67 conid:24750946 TCP) disconnected from vdl.0 (clients:1)
28.10 17:20:04 DB: SELECT id FROM battle WHERE firstid=100 OR secondid=100 AND finished <> true
28.10 17:20:04 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=100 OR secondid=100 AND finished <> true, _type => core/server.query }
28.10 17:20:04 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
28.10 17:20:04 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 17:20:04 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
28.10 17:20:04 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
28.10 17:20:04 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 266
Called from modules/VDLBattleModule.hx line 279
Called from snipe/slave/Server.hx line 994
28.10 17:20:04 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 100, _type => core/cache.update }
28.10 17:20:04 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
28.10 17:20:04 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 100, _type => core/cache.update }
28.10 17:20:04 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:20:04 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 100, _type => core/user.logoutPost }
28.10 17:20:04 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
28.10 17:20:08 ++ NET: nelli8 req: tournament.grid { tournamentId => 1, round => 2, messageType => tournament.grid }
28.10 17:20:08 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:20:08 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
28.10 17:20:08 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
28.10 17:20:08 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:20:08 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:20:08 TIME: tournament.grid 1.07 ms
28.10 17:20:08 == NET: nelli8 ret: tournament.grid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:20:13 TIMER: Check auto-disconnect...
28.10 17:20:13 STATS: vdl.0 cache, locks:2
28.10 17:20:31 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
28.10 17:20:31 -<<-: server.login ok
28.10 17:20:31 DB: SELECT * FROM LocalizationStrings
28.10 17:20:31 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:31 TIMER: Starting timer...
28.10 17:20:31 TIMER: Timer running...
28.10 17:20:31 DB: SELECT * FROM GameVars
28.10 17:20:31 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:31 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
28.10 17:20:31 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:31 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
28.10 17:20:31 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:31 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
28.10 17:20:31 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:31 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
28.10 17:20:31 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:31 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
28.10 17:20:31 -<<-: core/quest.getDaily ok
28.10 17:20:31 DB: SELECT * FROM UserAttributeTypes
28.10 17:20:31 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:31 DB: SELECT * FROM UserVariableTypes
28.10 17:20:31 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:31 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
28.10 17:20:31 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:31 DB: SELECT * FROM ItemGroups
28.10 17:20:31 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:31 DB: SELECT * FROM Bundles ORDER BY ID
28.10 17:20:31 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:31 DB: SELECT * FROM BundleItems ORDER BY ID
28.10 17:20:31 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:31 SHOP: loading items...
28.10 17:20:31 ->>-: core/shop.getList { _type => core/shop.getList }
28.10 17:20:31 -<<-: core/shop.getList ok
28.10 17:20:31 SHOP: 0 items loaded (0.001 sec)
28.10 17:20:31 DB: SELECT * FROM EffectAttributeTypes
28.10 17:20:31 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:31 DB: SELECT * FROM Effects
28.10 17:20:31 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:31 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
28.10 17:20:31 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:31 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
28.10 17:20:31 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:31 DB: SELECT * FROM Badges
28.10 17:20:31 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
28.10 17:20:31 -<<-: core/server.query ok
28.10 17:20:37 NET: Client (conid:47996669) connected to vdl.0 (clients:1)
28.10 17:20:37 ++ NET: null req: user.login { password => test, name => test67, messageType => user.login }
28.10 17:20:37 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test67' AND Password = E'test'
28.10 17:20:37 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test67' AND Password = E'test', _type => core/server.query }
28.10 17:20:37 -<<-: core/server.query ok
28.10 17:20:37 ->>-: core/user.isOnlineID { id => 100, _type => core/user.isOnlineID }
28.10 17:20:37 -<<-: core/user.isOnlineID ok
28.10 17:20:37 ->>-: core/cache.get { type => user, v => -1, id => 100, _type => core/cache.get }
28.10 17:20:37 -<<-: core/cache.get ok
28.10 17:20:37 ->>-: core/cache.get { type => questdata, v => -1, id => 100, _type => core/cache.get }
28.10 17:20:37 -<<-: core/cache.get ok
28.10 17:20:37 NET: Client login (conid:47996669, id:100, name:test67)
28.10 17:20:37 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 100, _type => core/user.loginPost, ipAddr => 172.16.20.112 }
28.10 17:20:37 -<<-: core/user.loginPost null
28.10 17:20:37 == NET: test67 ret: user.login { name => test67, type => user.login, errorCode => ok, id => 100 }
28.10 17:20:37 == NET: test67 ret: user.join { name => test67, type => user.join }
28.10 17:20:38 ++ NET: test67 req: user.data { messageType => user.data }
28.10 17:20:38 ->>-: vdl/cache.user.getData { userId => 100, _type => vdl/cache.user.getData }
28.10 17:20:38 -<<-: vdl/cache.user.getData { info => { city => , year => , email =>  }, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:20:38 TIME: user.data 0.53 ms
28.10 17:20:38 == NET: test67 ret: user.data { info => { city => , year => , email =>  }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:20:42 NET: Client (conid:17100972) connected to vdl.0 (clients:2)
28.10 17:20:43 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:20:43 TIME: user.ping 0.16 ms
28.10 17:20:43 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:20:43 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:20:45 ++ NET: null req: user.login { password => qwerty, name => nelli8, messageType => user.login }
28.10 17:20:45 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'nelli8' AND Password = E'qwerty'
28.10 17:20:45 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'nelli8' AND Password = E'qwerty', _type => core/server.query }
28.10 17:20:45 -<<-: core/server.query { list => {{ name => nelli8, networkid => , isbanned => false, id => 101 }}, errorCode => ok, _type => core/server.query }
28.10 17:20:45 ->>-: core/user.isOnlineID { id => 101, _type => core/user.isOnlineID }
28.10 17:20:45 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
28.10 17:20:45 ->>-: core/cache.get { type => user, v => -1, id => 101, _type => core/cache.get }
28.10 17:20:45 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => nelli8, deleted => false, email => , networktype =>   , password => qwerty, isbanned => false, regdate => 2016-10-28 16:03:03.386319+03, language => en, networkid => , params => { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477659784, lastLoginDate => 302, lastLoadDate => 1029 }, effects => { list => [] } }}, version => 0, id => 101 } }
28.10 17:20:45 ->>-: core/cache.get { type => questdata, v => -1, id => 101, _type => core/cache.get }
28.10 17:20:45 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 101 } }
28.10 17:20:45 NET: Client login (conid:17100972, id:101, name:nelli8)
28.10 17:20:45 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 101, _type => core/user.loginPost, ipAddr => 172.16.20.79 }
28.10 17:20:45 -<<-: core/user.loginPost { _type => core/user.loginPost }
28.10 17:20:45 == NET: test67 ret: user.join { name => nelli8, type => user.join }
28.10 17:20:45 == NET: nelli8 ret: user.login { name => nelli8, type => user.login, errorCode => ok, id => 101 }
28.10 17:20:45 == NET: nelli8 ret: user.join { name => test67, type => user.join }
28.10 17:20:45 == NET: nelli8 ret: user.join { name => nelli8, type => user.join }
28.10 17:20:46 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 100, _type => core/cache.update }
28.10 17:20:46 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:20:50 ++ NET: nelli8 req: user.data { messageType => user.data }
28.10 17:20:50 ->>-: vdl/cache.user.getData { userId => 101, _type => vdl/cache.user.getData }
28.10 17:20:50 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:20:50 TIME: user.data 0.57 ms
28.10 17:20:50 == NET: nelli8 ret: user.data { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
28.10 17:20:51 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 101, _type => core/cache.update }
28.10 17:20:51 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
28.10 17:20:55 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:20:55 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:20:55 TIME: user.ping 0.17 ms
28.10 17:20:55 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:21:03 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:21:03 TIME: user.ping 0.19 ms
28.10 17:21:03 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:21:03 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:21:15 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:21:15 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:21:15 TIME: user.ping 0.16 ms
28.10 17:21:15 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:21:31 TIMER: Check auto-disconnect...
28.10 17:21:31 STATS: vdl.0 cache, locks:4
28.10 17:21:31 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:21:31 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:31 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:21:31 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:31 STATS: vdl.0 cache connection, 35 calls, total 0.0905876159667969 sec spent, avg 2.59 ms
28.10 17:21:31 TIME: tournament.getAvailableTournament 3.83 ms
28.10 17:21:31 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:34 ++ NET: test67 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
28.10 17:21:34 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:21:34 ->>-: vdl/cache.tournament.addUsers { userId => 100, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:21:34 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:21:34 TIME: tournament.addUsers 0.53 ms
28.10 17:21:34 == NET: test67 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:21:34 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:21:34 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:21:34 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:34 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:34 TIME: tournament.getAvailableTournament 2.79 ms
28.10 17:21:34 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:37 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:21:37 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:37 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:21:37 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:37 TIME: tournament.getAvailableTournament 3.08 ms
28.10 17:21:37 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:40 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:21:40 TIME: user.ping 0.17 ms
28.10 17:21:40 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:21:40 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:21:41 ++ NET: nelli8 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
28.10 17:21:41 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:21:41 ->>-: vdl/cache.tournament.addUsers { userId => 101, tournament => 1, _type => vdl/cache.tournament.addUsers }
28.10 17:21:41 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:21:41 TIME: tournament.addUsers 0.82 ms
28.10 17:21:41 == NET: nelli8 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
28.10 17:21:41 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:21:41 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:21:41 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:41 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:41 TIME: tournament.getAvailableTournament 3.68 ms
28.10 17:21:41 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:21:50 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:21:50 TIME: user.ping 0.17 ms
28.10 17:21:50 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:21:50 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:22:01 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:22:01 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:22:01 TIME: user.ping 0.16 ms
28.10 17:22:01 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:22:21 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:22:21 TIME: user.ping 0.18 ms
28.10 17:22:21 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:22:21 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:22:27 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:22:27 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:22:27 TIME: user.ping 0.17 ms
28.10 17:22:27 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:22:31 TIMER: Check auto-disconnect...
28.10 17:22:31 -<<-: tournament.enemyEvent { data => { name => nelli8, tournamentId => 1, enemy.id => 100, enemy.name => test67, round => 1, roundDate => 2016-28-10 17:22, id => 101, enemy.num => 2, battleId => 97, player => 1 }, _isNotify => true, id => 101, _type => tournament.enemyEvent }
28.10 17:22:31 == NET: nelli8 ret: tournament.enemy { data => { name => nelli8, tournamentId => 1, enemy.id => 100, enemy.name => test67, round => 1, roundDate => 2016-28-10 17:22, id => 101, enemy.num => 2, battleId => 97, player => 1 }, type => tournament.enemy }
28.10 17:22:31 -<<-: tournament.enemyEvent { data => { name => test67, tournamentId => 1, enemy.id => 101, enemy.name => nelli8, round => 1, roundDate => 2016-28-10 17:22, id => 100, enemy.num => 1, battleId => 97, player => 2 }, _isNotify => true, id => 100, _type => tournament.enemyEvent }
28.10 17:22:31 == NET: test67 ret: tournament.enemy { data => { name => test67, tournamentId => 1, enemy.id => 101, enemy.name => nelli8, round => 1, roundDate => 2016-28-10 17:22, id => 100, enemy.num => 1, battleId => 97, player => 2 }, type => tournament.enemy }
28.10 17:22:31 STATS: vdl.0 cache, locks:4
28.10 17:22:41 ++ NET: nelli8 req: battle.end { type => leaveGame, typeBattle => tournament, tournamentId => 1, messageType => battle.end, battleId => 97 }
28.10 17:22:41 ->>-: vdl/cache.battle.infoRoom { roomId => 97, _type => vdl/cache.battle.infoRoom }
28.10 17:22:41 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:22:41 STATS: vdl.0 cache connection, 41 calls, total 0.101371765136719 sec spent, avg 2.47 ms
28.10 17:22:41 ->>-: vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
28.10 17:22:41 -<<-: vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[100,101],"battleActive":[97],"usersAll":[100,101]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22, roundinterval => 1 }
28.10 17:22:41 ->>-: vdl/cache.battle.infoRoom { roomId => 97, _type => vdl/cache.battle.infoRoom }
28.10 17:22:41 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:22:41 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
28.10 17:22:41 -<<-: vdl/cache.tournament.getBattlesTournaments [97]
28.10 17:22:41 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
28.10 17:22:41 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [100,101] }
28.10 17:22:41 ->>-: vdl/cache.battle.finishRoom { roomId => 97, _type => vdl/cache.battle.finishRoom }
28.10 17:22:41 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
28.10 17:22:41 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [97] }
28.10 17:22:41 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
28.10 17:22:41 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [100], _type => vdl/cache.tournament.setUsersTournament }
28.10 17:22:41 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
28.10 17:22:41 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 100, round => 1, player1 => 101, player2 => 100 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:22:41 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:22:41 ->>-: vdl/cache.tournament.addRound { dateRound => 2016-28-10 17:22, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
28.10 17:22:41 -<<-: vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
28.10 17:22:41 ->>-: vdl/cache.tournament.finish { winner => 100, tournamentId => 1, _type => vdl/cache.tournament.finish }
28.10 17:22:41 -<<-: vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
28.10 17:22:41 TIME: battle.end 7.11 ms
28.10 17:22:41 == NET: nelli8 ret: battle.end { type => battle.end, errorCode => ok }
28.10 17:22:41 == NET: test67 ret: battle.leave { type => battle.leave }
28.10 17:22:41 ++ NET: test67 req: battle.end { type => winGame, typeBattle => tournament, tournamentId => 1, messageType => battle.end, battleId => 97 }
28.10 17:22:41 ->>-: vdl/cache.battle.infoRoom { roomId => 97, _type => vdl/cache.battle.infoRoom }
28.10 17:22:41 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:22:41 ->>-: vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
28.10 17:22:41 -<<-: vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[100,101],"battleActive":[97],"usersAll":[100,101]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22, roundinterval => 1 }
28.10 17:22:41 ->>-: vdl/cache.battle.infoRoom { roomId => 97, _type => vdl/cache.battle.infoRoom }
28.10 17:22:41 -<<-: vdl/cache.battle.infoRoom { secondId => 100, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
28.10 17:22:41 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
28.10 17:22:41 -<<-: vdl/cache.tournament.getBattlesTournaments []
28.10 17:22:41 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
28.10 17:22:41 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [100] }
28.10 17:22:41 ->>-: vdl/cache.battle.finishRoom { roomId => 97, _type => vdl/cache.battle.finishRoom }
28.10 17:22:41 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
28.10 17:22:41 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [97] }
28.10 17:22:41 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
28.10 17:22:41 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [100], _type => vdl/cache.tournament.setUsersTournament }
28.10 17:22:41 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
28.10 17:22:41 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 100, round => 1, player1 => 101, player2 => 100 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:22:41 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:22:41 ->>-: vdl/cache.tournament.addRound { dateRound => 2016-28-10 17:22, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
28.10 17:22:41 -<<-: vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
28.10 17:22:41 ->>-: vdl/cache.tournament.finish { winner => 100, tournamentId => 1, _type => vdl/cache.tournament.finish }
28.10 17:22:41 -<<-: vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
28.10 17:22:41 TIME: battle.end 8.53 ms
28.10 17:22:41 == NET: test67 ret: battle.end { type => battle.end, errorCode => ok }
28.10 17:22:41 == NET: nelli8 ret: battle.end { type => battle.end }
28.10 17:22:46 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
28.10 17:22:46 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:22:46 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:22:46 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 100, battleFinished => [97,97], round => 2, id => 1, status => finished, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => [], rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:22:46 TIME: tournament.getAvailableTournament 3.49 ms
28.10 17:22:46 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => 100, battleFinished => [97,97], round => 2, id => 1, status => finished, userList => [{ name => test67, id => 100 },{ name => nelli8, id => 101 }], battleActive => [], rounddate => 2016-28-10 17:22, startdate => 2016-28-10 17:22 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
28.10 17:22:51 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:22:51 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:22:51 TIME: user.ping 0.14 ms
28.10 17:22:51 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:22:53 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:22:53 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:22:53 TIME: user.ping 0.14 ms
28.10 17:22:53 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:22:53 ++ NET: test67 req: tournament.grid { tournamentId => 1, round => 2, messageType => tournament.grid }
28.10 17:22:53 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
28.10 17:22:53 == NET: test67 ret: user.check { type => user.check, errorCode => ok }
28.10 17:22:53 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
28.10 17:22:53 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
28.10 17:22:53 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:22:53 TIME: tournament.grid 1.19 ms
28.10 17:22:53 == NET: test67 ret: tournament.grid { list => [{ winner => 100, round => 1, player1 => 101, player2 => 100 },{ winner => -1, round => 2, player1 => 100, player2 => null }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
28.10 17:23:12 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:23:12 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:23:12 TIME: user.ping 0.17 ms
28.10 17:23:12 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:23:31 TIMER: Check auto-disconnect...
28.10 17:23:31 STATS: vdl.0 cache, locks:4
28.10 17:23:33 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:23:33 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:23:33 TIME: user.ping 0.18 ms
28.10 17:23:33 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
28.10 17:23:53 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
28.10 17:23:53 == NET: nelli8 ret: user.check { type => user.check, errorCode => ok }
28.10 17:23:53 TIME: user.ping 0.17 ms
28.10 17:23:53 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
