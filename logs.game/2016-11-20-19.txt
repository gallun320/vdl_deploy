20.11 19:00:04 ++ NET: Test5 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:00:04 TIME: user.ping 0.21 ms
20.11 19:00:04 == NET: Test5 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:00:06 TIMER: Check auto-disconnect...
20.11 19:00:06 STATS: vdl.0 cache, locks:2
20.11 19:00:26 ++ NET: Test5 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:00:26 TIME: user.ping 0.17 ms
20.11 19:00:26 == NET: Test5 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:00:48 ++ NET: Test5 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:00:48 TIME: user.ping 0.2 ms
20.11 19:00:48 == NET: Test5 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:01:03 NET: Client (name:Test5 conid:58172072 WS) disconnected from vdl.0 (clients:0)
20.11 19:01:03 DB: SELECT id FROM battle WHERE firstid=156 OR secondid=156 AND finished <> true
20.11 19:01:03 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=156 OR secondid=156 AND finished <> true, _type => core/server.query }
20.11 19:01:03 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.11 19:01:03 STATS: vdl.0 cache connection, 93 calls, total 0.154700994491577 sec spent, avg 1.66 ms
20.11 19:01:03 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.11 19:01:03 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
20.11 19:01:03 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.11 19:01:03 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 994
20.11 19:01:03 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 156, _type => core/cache.update }
20.11 19:01:03 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
20.11 19:01:03 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 156, _type => core/cache.update }
20.11 19:01:03 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.11 19:01:03 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 156, _type => core/user.logoutPost }
20.11 19:01:03 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.11 19:07:37 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
20.11 19:07:37 -<<-: server.login ok
20.11 19:07:37 DB: SELECT * FROM LocalizationStrings
20.11 19:07:37 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 TIMER: Starting timer...
20.11 19:07:37 TIMER: Timer running...
20.11 19:07:37 DB: SELECT * FROM GameVars
20.11 19:07:37 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
20.11 19:07:37 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
20.11 19:07:37 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
20.11 19:07:37 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
20.11 19:07:37 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
20.11 19:07:37 -<<-: core/quest.getDaily ok
20.11 19:07:37 DB: SELECT * FROM UserAttributeTypes
20.11 19:07:37 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 DB: SELECT * FROM UserVariableTypes
20.11 19:07:37 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
20.11 19:07:37 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 DB: SELECT * FROM ItemGroups
20.11 19:07:37 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 DB: SELECT * FROM Bundles ORDER BY ID
20.11 19:07:37 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 DB: SELECT * FROM BundleItems ORDER BY ID
20.11 19:07:37 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 SHOP: loading items...
20.11 19:07:37 ->>-: core/shop.getList { _type => core/shop.getList }
20.11 19:07:37 -<<-: core/shop.getList ok
20.11 19:07:37 SHOP: 0 items loaded (0 sec)
20.11 19:07:37 DB: SELECT * FROM EffectAttributeTypes
20.11 19:07:37 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 DB: SELECT * FROM Effects
20.11 19:07:37 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
20.11 19:07:37 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
20.11 19:07:37 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 DB: SELECT * FROM Badges
20.11 19:07:37 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
20.11 19:07:37 -<<-: core/server.query ok
20.11 19:07:37 TIMER: Check auto-disconnect...
20.11 19:07:37 STATS: vdl.0 cache, locks:0
20.11 19:07:37 TIMER: Check auto-disconnect...
20.11 19:07:37 STATS: vdl.0 cache, locks:0
20.11 19:07:37 TIMER: Check auto-disconnect...
20.11 19:07:37 STATS: vdl.0 cache, locks:0
20.11 19:07:37 TIMER: Check auto-disconnect...
20.11 19:07:37 STATS: vdl.0 cache, locks:0
20.11 19:11:44 NET: Client (conid:74341350) connected to vdl.0 (clients:1)
20.11 19:11:46 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTQx }
20.11 19:11:46 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid141' AND Password = E'uid141'
20.11 19:11:46 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid141' AND Password = E'uid141', _type => core/server.query }
20.11 19:11:46 -<<-: core/server.query ok
20.11 19:11:46 STATS: vdl.0 cache connection, 21 calls, total 0.0227398872375488 sec spent, avg 1.08 ms
20.11 19:11:46 ->>-: core/user.isOnlineID { id => 141, _type => core/user.isOnlineID }
20.11 19:11:46 -<<-: core/user.isOnlineID ok
20.11 19:11:46 ->>-: core/cache.get { type => user, v => -1, id => 141, _type => core/cache.get }
20.11 19:11:46 -<<-: core/cache.get ok
20.11 19:11:46 ->>-: core/cache.get { type => questdata, v => -1, id => 141, _type => core/cache.get }
20.11 19:11:46 -<<-: core/cache.get ok
20.11 19:11:46 NET: Client login (conid:74341350, id:141, name:uid141)
20.11 19:11:46 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 141, _type => core/user.loginPost, ipAddr => 172.16.20.65 }
20.11 19:11:46 -<<-: core/user.loginPost null
20.11 19:11:46 DB: SELECT ID FROM TempUserLogins WHERE UserID = 141 AND Date = 'today'::timestamp
20.11 19:11:46 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 141 AND Date = 'today'::timestamp, _type => core/server.query }
20.11 19:11:46 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.11 19:11:46 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (141, 'today'::timestamp)
20.11 19:11:46 == NET: uid141 ret: user.login { name => uid141, type => user.login, errorCode => ok, id => 141 }
20.11 19:11:46 == NET: uid141 ret: user.join { name => uid141, type => user.join }
20.11 19:11:46 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (141, 'today'::timestamp), _type => core/server.pending }} }
20.11 19:11:46 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
20.11 19:11:52 ->>-: core/cache.update { diff => {language => en, params => { attrs => { lastLoginDate => 325, lastLoadDate => 1121 } }}, type => user, unlock => false, id => 141, _type => core/cache.update }
20.11 19:11:52 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.11 19:11:54 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:11:54 TIME: user.ping 0.18 ms
20.11 19:11:54 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:12:37 TIMER: Check auto-disconnect...
20.11 19:12:37 STATS: vdl.0 cache, locks:2
20.11 19:12:54 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:12:54 TIME: user.ping 0.41 ms
20.11 19:12:54 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:13:37 TIMER: Check auto-disconnect...
20.11 19:13:37 STATS: vdl.0 cache, locks:2
20.11 19:13:55 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:13:55 TIME: user.ping 0.17 ms
20.11 19:13:55 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:14:10 NET: Client (conid:39220663) connected to vdl.0 (clients:2)
20.11 19:14:11 ++ NET: null req: user.login { password => 1111, name => Test5, messageType => user.login }
20.11 19:14:11 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Test5' AND Password = E'1111'
20.11 19:14:11 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Test5' AND Password = E'1111', _type => core/server.query }
20.11 19:14:11 -<<-: core/server.query { list => {{ name => Test5, networkid => , isbanned => false, id => 156 }}, errorCode => ok, _type => core/server.query }
20.11 19:14:11 STATS: vdl.0 cache connection, 29 calls, total 0.0370550155639648 sec spent, avg 1.28 ms
20.11 19:14:11 ->>-: core/user.isOnlineID { id => 156, _type => core/user.isOnlineID }
20.11 19:14:11 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.11 19:14:11 ->>-: core/cache.get { type => user, v => -1, id => 156, _type => core/cache.get }
20.11 19:14:11 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Test5, deleted => false, email => , networktype =>   , password => 1111, isbanned => false, regdate => 2016-11-20 18:57:55.997177+03, language => en, networkid => , params => { info => { city => Testcity, year => 1111, email => 2testemail2 }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479657476, lastLoginDate => 325, lastLoadDate => 1121 }, effects => { list => [] } }}, version => 0, id => 156 } }
20.11 19:14:11 ->>-: core/cache.get { type => questdata, v => -1, id => 156, _type => core/cache.get }
20.11 19:14:11 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 156 } }
20.11 19:14:11 NET: Client login (conid:39220663, id:156, name:Test5)
20.11 19:14:11 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 156, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
20.11 19:14:11 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.11 19:14:11 == NET: Test5 ret: user.login { name => Test5, type => user.login, errorCode => ok, id => 156 }
20.11 19:14:11 == NET: uid141 ret: user.join { name => Test5, type => user.join }
20.11 19:14:11 == NET: Test5 ret: user.join { name => uid141, type => user.join }
20.11 19:14:11 == NET: Test5 ret: user.join { name => Test5, type => user.join }
20.11 19:14:12 ++ NET: Test5 req: user.data { messageType => user.data }
20.11 19:14:12 ->>-: vdl/cache.user.getData { userId => 156, _type => vdl/cache.user.getData, money => 0 }
20.11 19:14:12 -<<-: vdl/cache.user.getData { info => { city => Testcity, year => 1111, email => 2testemail2 }, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.11 19:14:12 TIME: user.data 0.79 ms
20.11 19:14:12 == NET: Test5 ret: user.data { info => { city => Testcity, year => 1111, email => 2testemail2 }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.11 19:14:15 ++ NET: Test5 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:14:15 TIME: user.ping 0.15 ms
20.11 19:14:15 == NET: Test5 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:14:17 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 156, _type => core/cache.update }
20.11 19:14:17 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.11 19:14:25 ++ NET: Test5 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
20.11 19:14:25 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 156 }, _type => vdl/cache.battle.findRandom }
20.11 19:14:25 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
20.11 19:14:25 TIME: battle.find 0.67 ms
20.11 19:14:25 == NET: Test5 ret: battle.find { type => battle.find, errorCode => ok }
20.11 19:14:31 ++ NET: uid141 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
20.11 19:14:31 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 141 }, _type => vdl/cache.battle.findRandom }
20.11 19:14:31 -<<-: battle.enemyEvent { data => { name => uid141, enemy.id => 156, enemy.name => Test5, id => 141, enemy.num => 2, battleId => 31, player => 1 }, _isNotify => true, id => 141, _type => battle.enemyEvent }
20.11 19:14:31 -<<-: battle.enemyEvent { data => { name => Test5, enemy.id => 141, enemy.name => uid141, id => 156, enemy.num => 1, battleId => 31, player => 2 }, _isNotify => true, id => 156, _type => battle.enemyEvent }
20.11 19:14:31 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
20.11 19:14:31 TIME: battle.find 41.27 ms
20.11 19:14:31 == NET: uid141 ret: battle.find { type => battle.find, errorCode => ok }
20.11 19:14:31 == NET: uid141 ret: battle.enemy { data => { name => uid141, enemy.id => 156, enemy.name => Test5, id => 141, enemy.num => 2, battleId => 31, player => 1 }, type => battle.enemy }
20.11 19:14:31 == NET: Test5 ret: battle.enemy { data => { name => Test5, enemy.id => 141, enemy.name => uid141, id => 156, enemy.num => 1, battleId => 31, player => 2 }, type => battle.enemy }
20.11 19:14:34 ++ NET: Test5 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:14:34 TIME: user.ping 0.16 ms
20.11 19:14:34 == NET: Test5 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:14:37 TIMER: Check auto-disconnect...
20.11 19:14:37 STATS: vdl.0 cache, locks:4
20.11 19:14:48 NET: Client (name:uid141 conid:74341350 TCP) disconnected from vdl.0 (clients:1)
20.11 19:14:48 DB: SELECT id FROM battle WHERE firstid=141 OR secondid=141 AND finished <> true
20.11 19:14:48 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=141 OR secondid=141 AND finished <> true, _type => core/server.query }
20.11 19:14:48 -<<-: core/server.query { list => {{ id => 30 }, { id => 31 }}, errorCode => ok, _type => core/server.query }
20.11 19:14:48 ->>-: vdl/cache.battle.infoRoom { roomId => 31, _type => vdl/cache.battle.infoRoom }
20.11 19:14:48 -<<-: vdl/cache.battle.infoRoom { secondId => 156, firstId => 141, _type => vdl/cache.battle.infoRoom, turnId => 141 }
20.11 19:14:48 ->>-: vdl/cache.battle.deleteRoom { roomId => 31, _type => vdl/cache.battle.deleteRoom }
20.11 19:14:48 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
20.11 19:14:48 ->>-: vdl/cache.battle.finishRoom { roomId => 31, _type => vdl/cache.battle.finishRoom }
20.11 19:14:48 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
20.11 19:14:48 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 141, _type => core/cache.update }
20.11 19:14:48 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
20.11 19:14:48 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 141, _type => core/cache.update }
20.11 19:14:48 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.11 19:14:48 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 141, _type => core/user.logoutPost }
20.11 19:14:48 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.11 19:14:48 == NET: Test5 ret: battle.leave { type => battle.leave }
20.11 19:14:52 ++ NET: Test5 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:14:52 TIME: user.ping 0.19 ms
20.11 19:14:52 == NET: Test5 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:15:13 ++ NET: Test5 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:15:13 TIME: user.ping 0.15 ms
20.11 19:15:13 == NET: Test5 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:15:35 ++ NET: Test5 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:15:35 TIME: user.ping 0.2 ms
20.11 19:15:35 == NET: Test5 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:15:37 TIMER: Check auto-disconnect...
20.11 19:15:37 STATS: vdl.0 cache, locks:2
20.11 19:15:56 ++ NET: Test5 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:15:56 TIME: user.ping 0.21 ms
20.11 19:15:56 == NET: Test5 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:16:18 ++ NET: Test5 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:16:18 TIME: user.ping 0.2 ms
20.11 19:16:18 == NET: Test5 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:16:37 TIMER: Check auto-disconnect...
20.11 19:16:37 STATS: vdl.0 cache, locks:2
20.11 19:16:40 ++ NET: Test5 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:16:40 == NET: Test5 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:16:40 TIME: user.ping 0.17 ms
20.11 19:17:01 ++ NET: Test5 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:17:01 TIME: user.ping 0.17 ms
20.11 19:17:01 == NET: Test5 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:17:22 ++ NET: Test5 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:17:22 TIME: user.ping 0.17 ms
20.11 19:17:22 == NET: Test5 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:17:30 NET: Client (conid:95250956) connected to vdl.0 (clients:2)
20.11 19:17:31 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTQx }
20.11 19:17:31 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid141' AND Password = E'uid141'
20.11 19:17:31 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid141' AND Password = E'uid141', _type => core/server.query }
20.11 19:17:31 -<<-: core/server.query { list => {{ name => uid141, networkid => , isbanned => false, id => 141 }}, errorCode => ok, _type => core/server.query }
20.11 19:17:31 STATS: vdl.0 cache connection, 45 calls, total 0.108845233917236 sec spent, avg 2.42 ms
20.11 19:17:31 ->>-: core/user.isOnlineID { id => 141, _type => core/user.isOnlineID }
20.11 19:17:31 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.11 19:17:31 ->>-: core/cache.get { type => user, v => -1, id => 141, _type => core/cache.get }
20.11 19:17:31 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid141, deleted => false, email => , networktype =>   , password => uid141, isbanned => false, regdate => 2016-11-19 20:20:05.55314+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1479576158, lastLoginDate => 325, lastLoadDate => 1121 }, effects => { list => [] } }}, version => 0, id => 141 } }
20.11 19:17:31 ->>-: core/cache.get { type => questdata, v => -1, id => 141, _type => core/cache.get }
20.11 19:17:31 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 141 } }
20.11 19:17:31 NET: Client login (conid:95250956, id:141, name:uid141)
20.11 19:17:31 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 141, _type => core/user.loginPost, ipAddr => 172.16.20.65 }
20.11 19:17:31 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.11 19:17:31 == NET: uid141 ret: user.login { name => uid141, type => user.login, errorCode => ok, id => 141 }
20.11 19:17:31 == NET: Test5 ret: user.join { name => uid141, type => user.join }
20.11 19:17:31 == NET: uid141 ret: user.join { name => Test5, type => user.join }
20.11 19:17:31 == NET: uid141 ret: user.join { name => uid141, type => user.join }
20.11 19:17:37 TIMER: Check auto-disconnect...
20.11 19:17:37 STATS: vdl.0 cache, locks:4
20.11 19:17:37 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 141, _type => core/cache.update }
20.11 19:17:37 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.11 19:17:39 ++ NET: uid141 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:17:39 TIME: user.ping 0.17 ms
20.11 19:17:39 == NET: uid141 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:17:41 ++ NET: Test5 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:17:41 TIME: user.ping 0.17 ms
20.11 19:17:41 == NET: Test5 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:17:55 ++ NET: uid141 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
20.11 19:17:55 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 141 }, _type => vdl/cache.battle.findRandom }
20.11 19:17:55 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
20.11 19:17:55 TIME: battle.find 0.8 ms
20.11 19:17:55 == NET: uid141 ret: battle.find { type => battle.find, errorCode => ok }
20.11 19:17:57 ++ NET: Test5 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
20.11 19:17:57 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 156 }, _type => vdl/cache.battle.findRandom }
20.11 19:17:57 -<<-: battle.enemyEvent { data => { name => Test5, enemy.id => 141, enemy.name => uid141, id => 156, enemy.num => 2, battleId => 32, player => 1 }, _isNotify => true, id => 156, _type => battle.enemyEvent }
20.11 19:17:57 -<<-: battle.enemyEvent { data => { name => uid141, enemy.id => 156, enemy.name => Test5, id => 141, enemy.num => 1, battleId => 32, player => 2 }, _isNotify => true, id => 141, _type => battle.enemyEvent }
20.11 19:17:57 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
20.11 19:17:57 TIME: battle.find 38.3 ms
20.11 19:17:57 == NET: Test5 ret: battle.find { type => battle.find, errorCode => ok }
20.11 19:17:57 == NET: Test5 ret: battle.enemy { data => { name => Test5, enemy.id => 141, enemy.name => uid141, id => 156, enemy.num => 2, battleId => 32, player => 1 }, type => battle.enemy }
20.11 19:17:57 == NET: uid141 ret: battle.enemy { data => { name => uid141, enemy.id => 156, enemy.name => Test5, id => 141, enemy.num => 1, battleId => 32, player => 2 }, type => battle.enemy }
20.11 19:18:02 ++ NET: Test5 req: user.ping { messageType => user.ping, msg => ok }
20.11 19:18:02 TIME: user.ping 0.17 ms
20.11 19:18:02 == NET: Test5 ret: user.ping { type => user.ping, errorCode => ok }
20.11 19:18:08 NET: Client (name:uid141 conid:95250956 TCP) disconnected from vdl.0 (clients:1)
20.11 19:18:08 DB: SELECT id FROM battle WHERE firstid=141 OR secondid=141 AND finished <> true
20.11 19:18:08 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=141 OR secondid=141 AND finished <> true, _type => core/server.query }
20.11 19:18:08 -<<-: core/server.query { list => {{ id => 30 }, { id => 32 }}, errorCode => ok, _type => core/server.query }
20.11 19:18:08 ->>-: vdl/cache.battle.infoRoom { roomId => 32, _type => vdl/cache.battle.infoRoom }
20.11 19:18:08 -<<-: vdl/cache.battle.infoRoom { secondId => 141, firstId => 156, _type => vdl/cache.battle.infoRoom, turnId => 156 }
20.11 19:18:08 ->>-: vdl/cache.battle.deleteRoom { roomId => 32, _type => vdl/cache.battle.deleteRoom }
