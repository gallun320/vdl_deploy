29.10 17:01:46 NET: Client (conid:97277534) connected to vdl.0 (clients:1)
29.10 17:01:48 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:01:48 TRACE: User not logon yet.
29.10 17:01:55 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:01:55 TRACE: User not logon yet.
29.10 17:02:02 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:02:02 TRACE: User not logon yet.
29.10 17:02:09 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:02:09 TRACE: User not logon yet.
29.10 17:02:16 TIMER: Check auto-disconnect...
29.10 17:02:16 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:02:16 TRACE: User not logon yet.
29.10 17:02:16 STATS: vdl.0 cache, locks:0
29.10 17:02:23 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:02:23 TRACE: User not logon yet.
29.10 17:02:30 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:02:30 TRACE: User not logon yet.
29.10 17:02:37 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:02:37 TRACE: User not logon yet.
29.10 17:02:44 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:02:44 TRACE: User not logon yet.
29.10 17:02:51 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:02:51 TRACE: User not logon yet.
29.10 17:03:16 TIMER: Check auto-disconnect...
29.10 17:03:16 STATS: vdl.0 cache, locks:0
29.10 17:04:22 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
29.10 17:04:22 -<<-: server.login ok
29.10 17:04:22 DB: SELECT * FROM LocalizationStrings
29.10 17:04:22 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:22 TIMER: Starting timer...
29.10 17:04:22 TIMER: Timer running...
29.10 17:04:22 DB: SELECT * FROM GameVars
29.10 17:04:22 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:22 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
29.10 17:04:22 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:22 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
29.10 17:04:22 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:22 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
29.10 17:04:22 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:22 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
29.10 17:04:22 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:22 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
29.10 17:04:22 -<<-: core/quest.getDaily ok
29.10 17:04:22 DB: SELECT * FROM UserAttributeTypes
29.10 17:04:22 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:22 DB: SELECT * FROM UserVariableTypes
29.10 17:04:22 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:22 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
29.10 17:04:22 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:22 DB: SELECT * FROM ItemGroups
29.10 17:04:22 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:22 DB: SELECT * FROM Bundles ORDER BY ID
29.10 17:04:22 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:22 DB: SELECT * FROM BundleItems ORDER BY ID
29.10 17:04:22 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:22 SHOP: loading items...
29.10 17:04:22 ->>-: core/shop.getList { _type => core/shop.getList }
29.10 17:04:22 -<<-: core/shop.getList ok
29.10 17:04:22 SHOP: 0 items loaded (0 sec)
29.10 17:04:22 DB: SELECT * FROM EffectAttributeTypes
29.10 17:04:22 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:22 DB: SELECT * FROM Effects
29.10 17:04:22 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:22 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 17:04:22 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:22 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 17:04:22 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:22 DB: SELECT * FROM Badges
29.10 17:04:22 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
29.10 17:04:22 -<<-: core/server.query ok
29.10 17:04:55 NET: Client (conid:59003403) connected to vdl.0 (clients:1)
29.10 17:04:56 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
29.10 17:04:56 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
29.10 17:04:56 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
29.10 17:04:56 -<<-: core/server.query ok
29.10 17:04:56 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
29.10 17:04:56 -<<-: core/user.isOnlineID ok
29.10 17:04:56 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
29.10 17:04:56 -<<-: core/cache.get ok
29.10 17:04:56 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
29.10 17:04:56 -<<-: core/cache.get ok
29.10 17:04:56 NET: Client login (conid:59003403, id:107, name:uid107)
29.10 17:04:56 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
29.10 17:04:56 -<<-: core/user.loginPost null
29.10 17:04:56 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
29.10 17:04:56 == NET: uid107 ret: user.join { name => uid107, type => user.join }
29.10 17:04:59 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:04:59 TIME: user.ping 0.19 ms
29.10 17:04:59 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:05:02 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
29.10 17:05:02 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:05:07 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:05:07 TIME: user.ping 0.17 ms
29.10 17:05:07 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:05:22 TIMER: Check auto-disconnect...
29.10 17:05:22 STATS: vdl.0 cache, locks:2
29.10 17:05:22 TIMER: Check auto-disconnect...
29.10 17:05:22 STATS: vdl.0 cache, locks:2
29.10 17:05:22 TIMER: Check auto-disconnect...
29.10 17:05:22 STATS: vdl.0 cache, locks:2
29.10 17:05:22 TIMER: Check auto-disconnect...
29.10 17:05:22 NET: Client (name:uid107 conid:59003403 TCP) disconnected from vdl.0 (clients:0)
29.10 17:05:22 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
29.10 17:05:22 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
29.10 17:05:22 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.10 17:05:22 STATS: vdl.0 cache connection, 27 calls, total 0.0293476581573486 sec spent, avg 1.09 ms
29.10 17:05:22 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 17:05:22 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
29.10 17:05:22 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 17:05:22 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 267
Called from modules/VDLBattleModule.hx line 280
Called from snipe/slave/Server.hx line 994
29.10 17:05:22 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
29.10 17:05:22 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.10 17:05:22 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
29.10 17:05:22 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:05:22 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
29.10 17:05:22 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 17:05:22 STATS: vdl.0 cache, locks:0
29.10 17:05:22 TIMER: Check auto-disconnect...
29.10 17:05:22 STATS: vdl.0 cache, locks:0
29.10 17:10:19 NET: Client (conid:88113754) connected to vdl.0 (clients:1)
29.10 17:10:21 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:10:21 TRACE: User not logon yet.
29.10 17:10:22 TIMER: Check auto-disconnect...
29.10 17:10:22 STATS: vdl.0 cache, locks:0
29.10 17:10:29 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:10:29 TRACE: User not logon yet.
29.10 17:10:37 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:10:37 TRACE: User not logon yet.
29.10 17:10:44 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:10:44 TRACE: User not logon yet.
29.10 17:10:52 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:10:52 TRACE: User not logon yet.
29.10 17:11:00 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:11:00 TRACE: User not logon yet.
29.10 17:11:08 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:11:08 TRACE: User not logon yet.
29.10 17:11:16 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:11:16 TRACE: User not logon yet.
29.10 17:11:22 TIMER: Check auto-disconnect...
29.10 17:11:22 STATS: vdl.0 cache, locks:0
29.10 17:11:23 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:11:23 TRACE: User not logon yet.
29.10 17:11:29 NET: Client (name:null conid:88113754 TCP) disconnected from vdl.0 (clients:0)
29.10 17:12:22 TIMER: Check auto-disconnect...
29.10 17:12:22 STATS: vdl.0 cache, locks:0
29.10 17:12:49 NET: Client (conid:18986721) connected to vdl.0 (clients:1)
29.10 17:12:53 ++ NET: null req: user.register { messageType => user.register }
29.10 17:12:53 DB: SELECT * FROM users
29.10 17:12:53 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
29.10 17:12:53 -<<-: core/server.query { list => {{ password => , name => --- DEFAULT ATTRIBUTES ---, networkid => , params => {"attrs":{},"inventory":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:45:16.008574+03, language =>   , id => 1, deleted => false }, { password => test, name => test3, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:08.364133+03, language =>   , id => 4, deleted => false }, { password => test, name => test5, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:15.596579+03, language =>   , id => 6, deleted => false }, { password => test, name => test6, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:19.233499+03, language =>   , id => 7, deleted => false }, { password => uid24, name => uid24, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:36:42.292969+03, language =>   , id => 24, deleted => false }, { password => uid25, name => uid25, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:42:14.268266+03, language =>   , id => 25, deleted => false }, { password => test, name => test7, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-09-07 16:46:43.688817+03, language =>   , id => 8, deleted => false }, { password => uid26, name => uid26, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:52:51.409771+03, language =>   , id => 26, deleted => false }, { password => uid37, name => uid37, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476461351,"lastLoginDate":288,"lastLoadDate":1015},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-14 19:09:11.07001+03, language => en, id => 37, deleted => false }, { password => uid9, name => uid9, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-11 20:36:09.090394+03, language =>   , id => 9, deleted => false }, { password => uid32, name => uid32, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476271969,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 14:32:48.215636+03, language => en, id => 32, deleted => false }, { password => uid27, name => uid27, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476269621,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:53:40.789776+03, language => en, id => 27, deleted => false }, { password => uid10, name => uid10, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 11:12:48.168059+03, language =>   , id => 10, deleted => false }, { password => uid11, name => uid11, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:33:27.3109+03, language =>   , id => 11, deleted => false }, { password => uid12, name => uid12, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:47:26.670465+03, language =>   , id => 12, deleted => false }, { password => uid13, name => uid13, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:51:08.341292+03, language =>   , id => 13, deleted => false }, { password => uid14, name => uid14, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:53:34.360658+03, language =>   , id => 14, deleted => false }, { password => uid15, name => uid15, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:55:14.160619+03, language =>   , id => 15, deleted => false }, { password => uid28, name => uid28, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476269710,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:55:09.527211+03, language => en, id => 28, deleted => false }, { password => uid16, name => uid16, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:59:18.86185+03, language =>   , id => 16, deleted => false }, { password => test, name => test2, networkid => , params => {"attrs":{"_lastTime.24hr":1476808882,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, id => 3, deleted => false }, { password => test, name => test11, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 12:18:04.647106+03, language =>   , id => 39, deleted => false }, { password => uid29, name => uid29, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476271397,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 14:23:17.10609+03, language => en, id => 29, deleted => false }, { password => uid17, name => uid17, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:07:15.262858+03, language =>   , id => 17, deleted => false }, { password => uid18, name => uid18, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:10:03.885555+03, language =>   , id => 18, deleted => false }, { password => uid19, name => uid19, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:11:41.868111+03, language =>   , id => 19, deleted => false }, { password => uid20, name => uid20, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:13:57.605493+03, language =>   , id => 20, deleted => false }, { password => uid21, name => uid21, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:16:21.670662+03, language =>   , id => 21, deleted => false }, { password => uid22, name => uid22, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:18:13.422519+03, language =>   , id => 22, deleted => false }, { password => uid23, name => uid23, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:33:08.78413+03, language =>   , id => 23, deleted => false }, { password => uid34, name => uid34, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476437991,"lastLoginDate":288,"lastLoadDate":1015},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-14 12:39:51.725362+03, language => en, id => 34, deleted => false }, { password => uid30, name => uid30, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476271613,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 14:26:51.842745+03, language => en, id => 30, deleted => false }, { password => test, name => test12, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 12:21:55.316231+03, language =>   , id => 40, deleted => false }, { password => uid31, name => uid31, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476271703,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 14:28:22.51548+03, language => en, id => 31, deleted => false }, { password => uid35, name => uid35, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476458014,"lastLoginDate":288,"lastLoadDate":1015},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-14 18:13:33.360887+03, language => en, id => 35, deleted => false }, { password => uid33, name => uid33, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476272110,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, id => 33, deleted => false }, { password => test, name => test13, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 12:30:08.433611+03, language =>   , id => 41, deleted => false }, { password => uid38, name => uid38, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476782075,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 12:14:32.809+03, language => en, id => 38, deleted => false }, { password => test, name => test14, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 12:31:52.285659+03, language =>   , id => 42, deleted => false }, { password => test, name => test15, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 12:40:42.354135+03, language =>   , id => 43, deleted => false }, { password => uid36, name => uid36, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476789639,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-14 18:14:45.120358+03, language => en, id => 36, deleted => false }, { password => uid45, name => uid45, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476793290,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 15:21:30.078736+03, language => en, id => 45, deleted => false }, { password => uid46, name => uid46, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476793424,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 15:23:44.261533+03, language => en, id => 46, deleted => false }, { password => uid47, name => uid47, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476793513,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 15:25:12.83212+03, language => en, id => 47, deleted => false }, { password => test, name => test4, networkid => , params => {"attrs":{"_lastTime.24hr":1476809210,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:11.728197+03, language => en, id => 5, deleted => false }, { password => test, name => test1, networkid => , params => {"attrs":{"_lastTime.24hr":1477308461,"lastLoginDate":298,"lastLoadDate":1025},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, id => 2, deleted => false }, { password => uid64, name => uid64, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476877181,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 14:39:41.700061+03, language => en, id => 64, deleted => false }, { password => uid58, name => uid58, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476809753,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:55:53.508049+03, language => en, id => 58, deleted => false }, { password => uid48, name => uid48, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476807085,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:11:25.882545+03, language => en, id => 48, deleted => false }, { password => uid49, name => uid49, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476807618,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:20:16.265259+03, language => en, id => 49, deleted => false }, { password => uid50, name => uid50, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476807854,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:24:12.892256+03, language => en, id => 50, deleted => false }, { password => uid59, name => uid59, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476809815,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:56:55.344336+03, language => en, id => 59, deleted => false }, { password => uid51, name => uid51, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476808189,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:29:47.381194+03, language => en, id => 51, deleted => false }, { password => uid52, name => uid52, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476808378,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:32:58.719756+03, language => en, id => 52, deleted => false }, { password => uid53, name => uid53, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476808795,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:39:54.973899+03, language => en, id => 53, deleted => false }, { password => uid54, name => uid54, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476808869,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:41:09.113701+03, language => en, id => 54, deleted => false }, { password => uid67, name => uid67, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476886636,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 17:17:16.853975+03, language => en, id => 67, deleted => false }, { password => uid55, name => uid55, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476809185,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:46:25.229927+03, language => en, id => 55, deleted => false }, { password => uid65, name => uid65, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476879545,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 15:19:05.058893+03, language => en, id => 65, deleted => false }, { password => uid60, name => uid60, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476809868,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:57:48.24719+03, language => en, id => 60, deleted => false }, { password => uid56, name => uid56, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476809466,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:51:06.257024+03, language => en, id => 56, deleted => false }, { password => uid57, name => uid57, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476809529,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:52:09.241918+03, language => en, id => 57, deleted => false }, { password => uid61, name => uid61, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476810127,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 20:02:07.43066+03, language => en, id => 61, deleted => false }, { password => uid62, name => uid62, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476810165,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 20:02:45.274383+03, language => en, id => 62, deleted => false }, { password => qweqwe, name => asdasd, networkid => , params => {"info":{"city":"Dsadasd","year":"1231","email":"asdasdas"},"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 17:53:08.822508+03, language =>   , id => 69, deleted => false }, { password => uid66, name => uid66, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476882998,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 16:16:38.334095+03, language => en, id => 66, deleted => false }, { password => uid63, name => uid63, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476810879,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 20:14:39.877987+03, language => en, id => 63, deleted => false }, { password => uid73, name => uid73, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476889025,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 17:57:04.529542+03, language => en, id => 73, deleted => false }, { password => uid71, name => uid71, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476888930,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 17:55:29.621522+03, language => en, id => 71, deleted => false }, { password => uid68, name => uid68, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476888788,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 17:53:08.78775+03, language => en, id => 68, deleted => false }, { password => 123123, name => 123123, networkid => , params => {"info":{"city":"Weqwe","year":"1231","email":"123123"},"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 17:54:22.233721+03, language =>   , id => 70, deleted => false }, { password => qweqwe, name => 1qweqwe, networkid => , params => {"info":{"city":"Qweqwe","year":"1231","email":"qweqwe"},"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 17:56:17.221331+03, language =>   , id => 72, deleted => false }, { password => 123123, name => 123qwe, networkid => , params => {"info":{"city":"Wqe","year":"1233","email":"123qwe"},"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 17:59:29.773441+03, language =>   , id => 74, deleted => false }, { password => uid75, name => uid75, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476889477,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 18:04:35.916538+03, language => en, id => 75, deleted => false }, { password => test, name => test16, networkid => , params => {"info":{"city":"kazan"},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476890115,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 12:43:02.694689+03, language => en, id => 44, deleted => false }, { password => uid77, name => uid77, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476889607,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 18:06:46.41184+03, language => en, id => 77, deleted => false }, { password => 123456, name => test20, networkid => , params => {"info":{"city":"Weqwe","year":"1231","email":"123"},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477646178,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 12:16:18.03489+03, language => en, id => 96, deleted => false }, { password => uid78, name => uid78, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476890199,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 18:16:37.399803+03, language => en, id => 78, deleted => false }, { password => uid83, name => uid83, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476961590,"lastLoginDate":294,"lastLoadDate":1021},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 14:06:28.765885+03, language => en, id => 83, deleted => false }, { password => uid79, name => uid79, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476959779,"lastLoginDate":294,"lastLoadDate":1021},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 13:36:18.869521+03, language => en, id => 79, deleted => false }, { password => uid89, name => uid89, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477308423,"lastLoginDate":298,"lastLoadDate":1025},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-24 14:26:57.401644+03, language => en, id => 89, deleted => false }, { password => uid84, name => uid84, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476961768,"lastLoginDate":294,"lastLoadDate":1021},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 14:09:27.02443+03, language => en, id => 84, deleted => false }, { password => uid102, name => uid102, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477660100,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:08:15.479957+03, language => en, id => 102, deleted => false }, { password => uid80, name => uid80, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476960874,"lastLoginDate":294,"lastLoadDate":1021},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 13:54:32.93048+03, language => en, id => 80, deleted => false }, { password => uid81, name => uid81, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476961061,"lastLoginDate":294,"lastLoadDate":1021},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 13:57:40.114003+03, language => en, id => 81, deleted => false }, { password => uid85, name => uid85, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476962319,"lastLoginDate":294,"lastLoadDate":1021},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 14:18:38.418977+03, language => en, id => 85, deleted => false }, { password => 123123, name => Tester, networkid => , params => {"info":{"city":"Dsda","year":"1231","email":"123123"},"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 14:58:49.229528+03, language =>   , id => 86, deleted => false }, { password => qweqwe, name => Acterix, networkid => , params => {"info":{"city":"Weqwe","year":"2312","email":"eqwe123"},"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-25 15:39:29.554557+03, language =>   , id => 90, deleted => false }, { password => uid91, name => uid91, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477399413,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-25 15:43:32.477232+03, language => en, id => 91, deleted => false }, { password => uid82, name => uid82, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476961257,"lastLoginDate":294,"lastLoadDate":1021},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 14:00:56.513148+03, language => en, id => 82, deleted => false }, { password => uid87, name => uid87, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476968972,"lastLoginDate":294,"lastLoadDate":1021},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 16:09:31.194602+03, language => en, id => 87, deleted => false }, { password => uid88, name => uid88, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477049264,"lastLoginDate":295,"lastLoadDate":1022},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-21 14:27:43.099186+03, language => en, id => 88, deleted => false }, { password => 123456, name => test17, networkid => , params => {"info":{"city":"","year":"","email":"asda"},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477399457,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-25 15:44:17.274208+03, language => en, id => 92, deleted => false }, { password => uid95, name => uid95, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477489312,"lastLoginDate":300,"lastLoadDate":1027},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, id => 95, deleted => false }, { password => uid93, name => uid93, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477400907,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-25 16:08:27.066262+03, language => en, id => 93, deleted => false }, { password => uid94, name => uid94, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477655031,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, id => 94, deleted => false }, { password => kO2YJdf, name => Aimer, networkid => , params => {"info":{"city":"Kazan","year":"1993","email":"rabpoll1@ya.ru"},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477646117,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, id => 76, deleted => false }, { password => qwerty, name => qwerty, networkid => , params => {"info":{"city":"Qwety","year":"123","email":"qwrtty"},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477748645,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:12:35.945256+03, language => en, id => 104, deleted => false }, { password => uid98, name => uid98, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477659590,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 15:59:47.355767+03, language => en, id => 98, deleted => false }, { password => uid97, name => uid97, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477647307,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 12:35:05.771011+03, language => en, id => 97, deleted => false }, { password => uid99, name => uid99, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477659641,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:00:39.9083+03, language => en, id => 99, deleted => false }, { password => uid103, name => uid103, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477660355,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:12:35.388519+03, language => en, id => 103, deleted => false }, { password => qwerty, name => nelli8, networkid => , params => {"info":{"city":"Kazan","year":"","email":"nlqbunskaha@mail.ru"},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477659784,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:03:03.386319+03, language => en, id => 101, deleted => false }, { password => uid105, name => uid105, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477661095,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:24:51.972524+03, language => en, id => 105, deleted => false }, { password => uid106, name => uid106, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477661732,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:35:25.243155+03, language => en, id => 106, deleted => false }, { password => test, name => test67, networkid => , params => {"info":{"city":"","year":"","email":""},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477659775,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:02:55.698999+03, language => en, id => 100, deleted => false }, { password => uid108, name => uid108, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477661911,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:38:24.62117+03, language => en, id => 108, deleted => false }, { password => uid109, name => uid109, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477661920,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:38:37.423978+03, language => en, id => 109, deleted => false }, { password => uid111, name => uid111, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477662049,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:40:47.262501+03, language => en, id => 111, deleted => false }, { password => ass12, name => ass12, networkid => , params => {"info":{"city":"","year":"","email":""},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477661977,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:39:37.381394+03, language => en, id => 110, deleted => false }, { password => uid112, name => uid112, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477747925,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-29 16:31:59.278542+03, language => en, id => 112, deleted => false }, { password => uid107, name => uid107, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477748429,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, id => 107, deleted => false }}, errorCode => ok, _type => core/server.query }
29.10 17:12:53 STATS: vdl.0 cache connection, 32 calls, total 0.038067102432251 sec spent, avg 1.19 ms
29.10 17:12:53 == NET: null ret: user.auth { type => user.auth, token => dWlkMTEz }
29.10 17:12:53 DB: SELECT ID FROM Users WHERE Name = E'uid113'
29.10 17:12:53 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid113', _type => core/server.query }
29.10 17:12:53 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.10 17:12:53 DB: SELECT nextval('Users_id_seq') AS id
29.10 17:12:53 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
29.10 17:12:53 -<<-: core/server.query { list => {{ id => 113 }}, errorCode => ok, _type => core/server.query }
29.10 17:12:53 ->>-: core/user.register { password => uid113, name => uid113, fullParams => { password => uid113, name => uid113, networkid => , networktype => , messageType => user.register, id => 113 }, networkid => , connectionID => 18986721, networktype => , email => , id => 113, _type => core/user.register }
29.10 17:12:53 -<<-: core/user.register { errorCode => ok, _type => core/user.register }
29.10 17:12:53 -<<-: core/user.registerResponse { password => uid113, name => uid113, _isNotify => true, fullParams => { password => uid113, name => uid113, networkid => , networktype => , messageType => user.register, id => 113 }, networkid => , connectionID => 18986721, networktype => , email => , id => 113, _type => core/user.registerResponse }
29.10 17:12:53 == NET: null ret: user.register { type => user.register, errorCode => ok }
29.10 17:13:00 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTEz }
29.10 17:13:00 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113'
29.10 17:13:00 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113', _type => core/server.query }
29.10 17:13:00 -<<-: core/server.query { list => {{ name => uid113, networkid => , isbanned => false, id => 113 }}, errorCode => ok, _type => core/server.query }
29.10 17:13:00 ->>-: core/user.isOnlineID { id => 113, _type => core/user.isOnlineID }
29.10 17:13:00 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.10 17:13:00 ->>-: core/cache.get { type => user, v => -1, id => 113, _type => core/cache.get }
29.10 17:13:00 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid113, deleted => false, email => , networktype =>   , password => uid113, isbanned => false, regdate => 2016-10-29 17:12:53.911759+03, language =>   , networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => {}, effects => { list => [] } }}, version => 1, id => 113 } }
29.10 17:13:00 ->>-: core/cache.get { type => questdata, v => -1, id => 113, _type => core/cache.get }
29.10 17:13:00 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 113 } }
29.10 17:13:00 NET: Client login (conid:18986721, id:113, name:uid113)
29.10 17:13:00 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 113, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
29.10 17:13:00 -<<-: core/user.loginPost { _type => core/user.loginPost }
29.10 17:13:00 DB: SELECT ID FROM TempUserLogins WHERE UserID = 113 AND Date = 'today'::timestamp
29.10 17:13:00 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 113 AND Date = 'today'::timestamp, _type => core/server.query }
29.10 17:13:00 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.10 17:13:00 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (113, 'today'::timestamp)
29.10 17:13:00 == NET: uid113 ret: user.login { name => uid113, type => user.login, errorCode => ok, id => 113 }
29.10 17:13:00 ++ NET: uid113 req: user.login { messageType => user.login, token => dWlkMTEz }
29.10 17:13:00 TRACE: User already logon.
29.10 17:13:00 TRACE: 
Called from snipe/slave/Server.hx line 870
Called from snipe/slave/Server.hx line 1124
29.10 17:13:00 == NET: uid113 ret: user.join { name => uid113, type => user.join }
29.10 17:13:00 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1477750380, lastLoginDate => 303, lastLoadDate => 1030 } }}, type => user, unlock => true, id => 113, _type => core/cache.update, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (113, 'today'::timestamp), _type => core/server.pending }} }
29.10 17:13:00 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.10 17:13:00 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 113, _type => core/cache.update }
29.10 17:13:00 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:13:00 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 113, _type => core/user.logoutPost }
29.10 17:13:00 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 17:13:00 TRACE: Could not login.
29.10 17:13:00 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
29.10 17:13:03 ++ NET: uid113 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:13:03 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:03 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:00 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:03 TIME: tournament.getAvailableTournament 3 ms
29.10 17:13:03 == NET: uid113 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:00 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:06 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:13:06 TIME: user.ping 0.14 ms
29.10 17:13:06 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:13:08 NET: Client (conid:71744269) connected to vdl.0 (clients:2)
29.10 17:13:10 ++ NET: null req: user.login { password => qwerty, name => nelli8, messageType => user.login }
29.10 17:13:10 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'nelli8' AND Password = E'qwerty'
29.10 17:13:10 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'nelli8' AND Password = E'qwerty', _type => core/server.query }
29.10 17:13:10 -<<-: core/server.query { list => {{ name => nelli8, networkid => , isbanned => false, id => 101 }}, errorCode => ok, _type => core/server.query }
29.10 17:13:10 ->>-: core/user.isOnlineID { id => 101, _type => core/user.isOnlineID }
29.10 17:13:10 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.10 17:13:10 ->>-: core/cache.get { type => user, v => -1, id => 101, _type => core/cache.get }
29.10 17:13:10 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => nelli8, deleted => false, email => , networktype =>   , password => qwerty, isbanned => false, regdate => 2016-10-28 16:03:03.386319+03, language => en, networkid => , params => { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477659784, lastLoginDate => 302, lastLoadDate => 1029 }, effects => { list => [] } }}, version => 0, id => 101 } }
29.10 17:13:10 ->>-: core/cache.get { type => questdata, v => -1, id => 101, _type => core/cache.get }
29.10 17:13:10 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 101 } }
29.10 17:13:10 NET: Client login (conid:71744269, id:101, name:nelli8)
29.10 17:13:10 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 101, _type => core/user.loginPost, ipAddr => 172.16.20.79 }
29.10 17:13:10 -<<-: core/user.loginPost { _type => core/user.loginPost }
29.10 17:13:10 DB: SELECT ID FROM TempUserLogins WHERE UserID = 101 AND Date = 'today'::timestamp
29.10 17:13:10 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 101 AND Date = 'today'::timestamp, _type => core/server.query }
29.10 17:13:10 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.10 17:13:10 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (101, 'today'::timestamp)
29.10 17:13:10 == NET: nelli8 ret: user.login { name => nelli8, type => user.login, errorCode => ok, id => 101 }
29.10 17:13:10 == NET: uid113 ret: user.join { name => nelli8, type => user.join }
29.10 17:13:10 == NET: nelli8 ret: user.join { name => uid113, type => user.join }
29.10 17:13:10 == NET: nelli8 ret: user.join { name => nelli8, type => user.join }
29.10 17:13:10 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (101, 'today'::timestamp), _type => core/server.pending }} }
29.10 17:13:10 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
29.10 17:13:13 ++ NET: nelli8 req: user.data { messageType => user.data }
29.10 17:13:13 ->>-: vdl/cache.user.getData { userId => 101, _type => vdl/cache.user.getData }
29.10 17:13:13 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, errorCode => ok, _type => vdl/cache.user.getData }
29.10 17:13:13 TIME: user.data 0.6 ms
29.10 17:13:13 == NET: nelli8 ret: user.data { info => { city => Kazan, year => , email => nlqbunskaha@mail.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
29.10 17:13:17 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1477750390, lastLoginDate => 303, lastLoadDate => 1030 } }}, type => user, unlock => false, id => 101, _type => core/cache.update }
29.10 17:13:17 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:13:18 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:13:18 TIME: user.ping 0.14 ms
29.10 17:13:18 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:13:22 TIMER: Check auto-disconnect...
29.10 17:13:22 STATS: vdl.0 cache, locks:2
29.10 17:13:24 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:13:24 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:24 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:24 TIME: tournament.getAvailableTournament 3.74 ms
29.10 17:13:24 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:26 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:13:26 TIME: user.ping 0.14 ms
29.10 17:13:26 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:13:28 NET: Client (conid:48114221) connected to vdl.0 (clients:3)
29.10 17:13:29 ++ NET: nelli8 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
29.10 17:13:29 ->>-: vdl/cache.tournament.addUsers { userId => 101, tournament => 1, _type => vdl/cache.tournament.addUsers }
29.10 17:13:29 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 17:13:29 TIME: tournament.addUsers 0.68 ms
29.10 17:13:29 == NET: nelli8 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 17:13:29 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:13:29 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:29 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-29-10 17:18, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:29 TIME: tournament.getAvailableTournament 1.87 ms
29.10 17:13:29 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-29-10 17:18, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:31 ++ NET: null req: user.login { password => qwerty, name => qwerty, messageType => user.login }
29.10 17:13:31 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'qwerty' AND Password = E'qwerty'
29.10 17:13:31 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'qwerty' AND Password = E'qwerty', _type => core/server.query }
29.10 17:13:31 -<<-: core/server.query { list => {{ name => qwerty, networkid => , isbanned => false, id => 104 }}, errorCode => ok, _type => core/server.query }
29.10 17:13:31 ->>-: core/user.isOnlineID { id => 104, _type => core/user.isOnlineID }
29.10 17:13:31 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.10 17:13:31 ->>-: core/cache.get { type => user, v => -1, id => 104, _type => core/cache.get }
29.10 17:13:31 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => qwerty, deleted => false, email => , networktype =>   , password => qwerty, isbanned => false, regdate => 2016-10-28 16:12:35.945256+03, language => en, networkid => , params => { info => { city => Qwety, year => 123, email => qwrtty }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477748645, lastLoginDate => 303, lastLoadDate => 1030 }, effects => { list => [] } }}, version => 0, id => 104 } }
29.10 17:13:31 ->>-: core/cache.get { type => questdata, v => -1, id => 104, _type => core/cache.get }
29.10 17:13:31 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 104 } }
29.10 17:13:31 NET: Client login (conid:48114221, id:104, name:qwerty)
29.10 17:13:31 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 104, _type => core/user.loginPost, ipAddr => 172.16.20.121 }
29.10 17:13:31 -<<-: core/user.loginPost { _type => core/user.loginPost }
29.10 17:13:31 == NET: qwerty ret: user.login { name => qwerty, type => user.login, errorCode => ok, id => 104 }
29.10 17:13:31 == NET: uid113 ret: user.join { name => qwerty, type => user.join }
29.10 17:13:31 == NET: qwerty ret: user.join { name => uid113, type => user.join }
29.10 17:13:31 == NET: nelli8 ret: user.join { name => qwerty, type => user.join }
29.10 17:13:31 == NET: qwerty ret: user.join { name => nelli8, type => user.join }
29.10 17:13:31 == NET: qwerty ret: user.join { name => qwerty, type => user.join }
29.10 17:13:34 ++ NET: qwerty req: user.data { messageType => user.data }
29.10 17:13:34 ->>-: vdl/cache.user.getData { userId => 104, _type => vdl/cache.user.getData }
29.10 17:13:34 -<<-: vdl/cache.user.getData { info => { city => Qwety, year => 123, email => qwrtty }, errorCode => ok, _type => vdl/cache.user.getData }
29.10 17:13:34 TIME: user.data 0.8 ms
29.10 17:13:34 == NET: qwerty ret: user.data { info => { city => Qwety, year => 123, email => qwrtty }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
29.10 17:13:35 ++ NET: uid113 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:13:35 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:35 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:35 TIME: tournament.getAvailableTournament 3.18 ms
29.10 17:13:35 == NET: uid113 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:36 ++ NET: qwerty req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:13:36 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:36 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:36 TIME: tournament.getAvailableTournament 3.71 ms
29.10 17:13:36 == NET: qwerty ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:37 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 104, _type => core/cache.update }
29.10 17:13:37 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:13:38 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:13:38 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:13:38 TIME: user.ping 0.13 ms
29.10 17:13:39 ++ NET: uid113 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
29.10 17:13:39 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
29.10 17:13:39 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
29.10 17:13:39 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
29.10 17:13:39 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [104,101] }
29.10 17:13:39 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 104, player2 => 101 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
29.10 17:13:39 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 104, player2 => 101 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 17:13:39 TIME: tournament.grid 2.23 ms
29.10 17:13:39 == NET: uid113 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 104, player2 => 101 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 17:13:39 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:13:39 TIME: user.ping 0.19 ms
29.10 17:13:39 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:13:42 ++ NET: uid113 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:13:42 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:42 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-29-10 17:18, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:42 TIME: tournament.getAvailableTournament 3.59 ms
29.10 17:13:42 == NET: uid113 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-29-10 17:18, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:46 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:13:46 TIME: user.ping 0.09 ms
29.10 17:13:46 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:13:46 ++ NET: uid113 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:13:46 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:46 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-29-10 17:18, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:46 TIME: tournament.getAvailableTournament 1.42 ms
29.10 17:13:46 == NET: uid113 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 }], battleActive => null, rounddate => 2016-29-10 17:18, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:49 ++ NET: uid113 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
29.10 17:13:49 ->>-: vdl/cache.tournament.addUsers { userId => 113, tournament => 1, _type => vdl/cache.tournament.addUsers }
29.10 17:13:49 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 17:13:49 TIME: tournament.addUsers 0.68 ms
29.10 17:13:49 == NET: uid113 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 17:13:50 ++ NET: uid113 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:13:50 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:50 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 17:18, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:50 TIME: tournament.getAvailableTournament 1.88 ms
29.10 17:13:50 == NET: uid113 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 17:18, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:58 ++ NET: uid113 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:13:58 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:58 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:58 STATS: vdl.0 cache connection, 74 calls, total 0.114649534225464 sec spent, avg 1.55 ms
29.10 17:13:58 TIME: tournament.getAvailableTournament 2.38 ms
29.10 17:13:58 == NET: uid113 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:13:58 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:13:58 TIME: user.ping 0.08 ms
29.10 17:13:58 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:14:00 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:14:00 TIME: user.ping 0.09 ms
29.10 17:14:00 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:14:01 ++ NET: uid113 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
29.10 17:14:01 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
29.10 17:14:01 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
29.10 17:14:01 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
29.10 17:14:01 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [104,101,113] }
29.10 17:14:01 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 101, player2 => 113 },{ winner => -1, round => 1, player1 => null, player2 => 104 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
29.10 17:14:01 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 101, player2 => 113 },{ winner => -1, round => 1, player1 => null, player2 => 104 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 17:14:01 TIME: tournament.grid 0.91 ms
29.10 17:14:01 == NET: uid113 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 101, player2 => 113 },{ winner => -1, round => 1, player1 => null, player2 => 104 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 17:14:06 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:14:06 TIME: user.ping 0.16 ms
29.10 17:14:06 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:14:19 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:14:19 TIME: user.ping 0.14 ms
29.10 17:14:19 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:14:22 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:14:22 TIME: user.ping 0.21 ms
29.10 17:14:22 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:14:22 TIMER: Check auto-disconnect...
29.10 17:14:22 STATS: vdl.0 cache, locks:4
29.10 17:14:26 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:14:26 TIME: user.ping 0.09 ms
29.10 17:14:26 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:14:39 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:14:39 TIME: user.ping 0.19 ms
29.10 17:14:39 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:14:41 ++ NET: uid113 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:14:41 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:14:41 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:14:41 TIME: tournament.getAvailableTournament 5.03 ms
29.10 17:14:41 == NET: uid113 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:14:46 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:14:46 TIME: user.ping 0.23 ms
29.10 17:14:46 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:14:48 NET: Client (conid:2252710) connected to vdl.0 (clients:4)
29.10 17:14:50 ++ NET: null req: user.login { password => test, name => test67, messageType => user.login }
29.10 17:14:50 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test67' AND Password = E'test'
29.10 17:14:50 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test67' AND Password = E'test', _type => core/server.query }
29.10 17:14:50 -<<-: core/server.query { list => {{ name => test67, networkid => , isbanned => false, id => 100 }}, errorCode => ok, _type => core/server.query }
29.10 17:14:50 ->>-: core/user.isOnlineID { id => 100, _type => core/user.isOnlineID }
29.10 17:14:50 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.10 17:14:50 ->>-: core/cache.get { type => user, v => -1, id => 100, _type => core/cache.get }
29.10 17:14:50 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test67, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-10-28 16:02:55.698999+03, language => en, networkid => , params => { info => { city => , year => , email =>  }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477659775, lastLoginDate => 302, lastLoadDate => 1029 }, effects => { list => [] } }}, version => 0, id => 100 } }
29.10 17:14:50 ->>-: core/cache.get { type => questdata, v => -1, id => 100, _type => core/cache.get }
29.10 17:14:50 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 100 } }
29.10 17:14:50 NET: Client login (conid:2252710, id:100, name:test67)
29.10 17:14:50 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 100, _type => core/user.loginPost, ipAddr => 172.16.20.112 }
29.10 17:14:50 -<<-: core/user.loginPost { _type => core/user.loginPost }
29.10 17:14:50 DB: SELECT ID FROM TempUserLogins WHERE UserID = 100 AND Date = 'today'::timestamp
29.10 17:14:50 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 100 AND Date = 'today'::timestamp, _type => core/server.query }
29.10 17:14:50 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.10 17:14:50 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (100, 'today'::timestamp)
29.10 17:14:50 == NET: uid113 ret: user.join { name => test67, type => user.join }
29.10 17:14:50 == NET: nelli8 ret: user.join { name => test67, type => user.join }
29.10 17:14:50 == NET: test67 ret: user.login { name => test67, type => user.login, errorCode => ok, id => 100 }
29.10 17:14:50 == NET: qwerty ret: user.join { name => test67, type => user.join }
29.10 17:14:50 == NET: test67 ret: user.join { name => uid113, type => user.join }
29.10 17:14:50 == NET: test67 ret: user.join { name => nelli8, type => user.join }
29.10 17:14:50 == NET: test67 ret: user.join { name => qwerty, type => user.join }
29.10 17:14:50 == NET: test67 ret: user.join { name => test67, type => user.join }
29.10 17:14:50 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (100, 'today'::timestamp), _type => core/server.pending }} }
29.10 17:14:50 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
29.10 17:14:52 ++ NET: test67 req: user.data { messageType => user.data }
29.10 17:14:52 ->>-: vdl/cache.user.getData { userId => 100, _type => vdl/cache.user.getData }
29.10 17:14:52 -<<-: vdl/cache.user.getData { info => { city => , year => , email =>  }, errorCode => ok, _type => vdl/cache.user.getData }
29.10 17:14:52 TIME: user.data 0.4 ms
29.10 17:14:52 == NET: test67 ret: user.data { info => { city => , year => , email =>  }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
29.10 17:14:54 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:14:54 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:14:54 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:14:54 TIME: tournament.getAvailableTournament 3.97 ms
29.10 17:14:54 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:14:57 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1477750490, lastLoginDate => 303, lastLoadDate => 1030 } }}, type => user, unlock => false, id => 100, _type => core/cache.update }
29.10 17:14:57 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:14:57 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:14:57 TIME: user.ping 0.12 ms
29.10 17:14:57 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:14:58 ++ NET: test67 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
29.10 17:14:58 ->>-: vdl/cache.tournament.addUsers { userId => 100, tournament => 1, _type => vdl/cache.tournament.addUsers }
29.10 17:14:58 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 17:14:58 STATS: vdl.0 cache connection, 89 calls, total 0.134394407272339 sec spent, avg 1.51 ms
29.10 17:14:58 TIME: tournament.addUsers 0.53 ms
29.10 17:14:58 == NET: test67 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 17:14:58 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:14:58 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:14:58 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 },{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:14:58 TIME: tournament.getAvailableTournament 3.96 ms
29.10 17:14:58 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 },{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:15:00 ++ NET: test67 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
29.10 17:15:00 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
29.10 17:15:00 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
29.10 17:15:00 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
29.10 17:15:00 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [104,101,113,100] }
29.10 17:15:00 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 113, player2 => 100 },{ winner => -1, round => 1, player1 => 104, player2 => 101 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
29.10 17:15:00 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 113, player2 => 100 },{ winner => -1, round => 1, player1 => 104, player2 => 101 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 17:15:00 TIME: tournament.grid 1.35 ms
29.10 17:15:00 == NET: test67 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 113, player2 => 100 },{ winner => -1, round => 1, player1 => 104, player2 => 101 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 17:15:07 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:15:07 TIME: user.ping 0.19 ms
29.10 17:15:07 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:15:10 ++ NET: uid113 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:15:10 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:15:10 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 },{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:15:10 TIME: tournament.getAvailableTournament 3.49 ms
29.10 17:15:10 == NET: uid113 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 },{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:15:14 ++ NET: uid113 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
29.10 17:15:14 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
29.10 17:15:14 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
29.10 17:15:14 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
29.10 17:15:14 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [104,101,113,100] }
29.10 17:15:14 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 113, player2 => 100 },{ winner => -1, round => 1, player1 => 104, player2 => 101 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
29.10 17:15:14 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 113, player2 => 100 },{ winner => -1, round => 1, player1 => 104, player2 => 101 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 17:15:14 TIME: tournament.grid 0.83 ms
29.10 17:15:14 == NET: uid113 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 113, player2 => 100 },{ winner => -1, round => 1, player1 => 104, player2 => 101 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 17:15:18 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:15:18 TIME: user.ping 0.15 ms
29.10 17:15:18 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:15:22 TIMER: Check auto-disconnect...
29.10 17:15:22 STATS: vdl.0 cache, locks:6
29.10 17:15:27 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:15:27 TIME: user.ping 0.2 ms
29.10 17:15:27 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:15:39 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:15:39 TIME: user.ping 0.1 ms
29.10 17:15:39 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:15:40 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:15:40 TIME: user.ping 0.1 ms
29.10 17:15:40 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:15:47 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:15:47 TIME: user.ping 0.1 ms
29.10 17:15:47 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:16:00 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:16:00 TIME: user.ping 0.17 ms
29.10 17:16:00 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:16:01 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:16:01 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:16:01 TIME: user.ping 0.12 ms
29.10 17:16:07 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:16:07 TIME: user.ping 0.13 ms
29.10 17:16:07 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:16:20 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:16:20 TIME: user.ping 0.09 ms
29.10 17:16:20 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:16:20 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:16:20 TIME: user.ping 0.1 ms
29.10 17:16:20 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:16:22 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:16:22 TIME: user.ping 0.17 ms
29.10 17:16:22 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:16:22 TIMER: Check auto-disconnect...
29.10 17:16:22 STATS: vdl.0 cache, locks:6
29.10 17:16:27 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:16:27 TIME: user.ping 0.15 ms
29.10 17:16:27 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:16:40 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:16:40 TIME: user.ping 0.11 ms
29.10 17:16:40 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:16:40 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:16:40 TIME: user.ping 0.1 ms
29.10 17:16:40 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:16:42 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:16:42 TIME: user.ping 0.23 ms
29.10 17:16:42 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:16:48 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:16:48 TIME: user.ping 0.14 ms
29.10 17:16:48 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:16:51 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:16:51 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:16:51 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 },{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:16:51 STATS: vdl.0 cache connection, 98 calls, total 0.147189855575562 sec spent, avg 1.5 ms
29.10 17:16:51 TIME: tournament.getAvailableTournament 3.77 ms
29.10 17:16:51 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 },{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:17:00 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:17:00 TIME: user.ping 0.17 ms
29.10 17:17:00 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:17:02 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:17:02 TIME: user.ping 0.19 ms
29.10 17:17:02 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:17:02 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:17:02 TIME: user.ping 0.12 ms
29.10 17:17:02 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:17:04 ++ NET: qwerty req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:17:04 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:17:04 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 },{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:17:04 TIME: tournament.getAvailableTournament 2.85 ms
29.10 17:17:04 == NET: qwerty ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 },{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:17:08 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:17:08 TIME: user.ping 0.21 ms
29.10 17:17:08 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:17:08 ++ NET: test67 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:17:08 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:17:08 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 },{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:17:08 TIME: tournament.getAvailableTournament 3.43 ms
29.10 17:17:08 == NET: test67 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 },{ name => test67, id => 100 }], battleActive => null, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:17:22 TIMER: Check auto-disconnect...
29.10 17:17:22 STATS: vdl.0 cache, locks:6
29.10 17:17:23 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:17:23 TIME: user.ping 0.18 ms
29.10 17:17:23 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:17:24 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:17:24 TIME: user.ping 0.16 ms
29.10 17:17:24 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:17:29 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:17:29 TIME: user.ping 0.12 ms
29.10 17:17:29 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:17:31 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:17:31 TIME: user.ping 0.13 ms
29.10 17:17:31 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:17:44 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:17:44 TIME: user.ping 0.12 ms
29.10 17:17:44 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:17:44 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:17:44 TIME: user.ping 0.11 ms
29.10 17:17:44 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:17:56 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:17:56 TIME: user.ping 0.13 ms
29.10 17:17:56 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:17:58 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:17:58 TIME: user.ping 0.17 ms
29.10 17:17:58 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:18:04 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:18:04 TIME: user.ping 0.18 ms
29.10 17:18:04 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:18:05 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:18:05 TIME: user.ping 0.17 ms
29.10 17:18:05 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:18:22 TIMER: Check auto-disconnect...
29.10 17:18:22 STATS: vdl.0 cache, locks:6
29.10 17:18:22 -<<-: tournament.enemyEvent { data => { name => test67, tournamentId => 1, enemy.id => 113, enemy.name => uid113, round => 1, roundDate => 2016-29-10 17:00, id => 100, enemy.num => 2, battleId => 99, player => 1 }, _isNotify => true, id => 100, _type => tournament.enemyEvent }
29.10 17:18:22 -<<-: tournament.leaveEvent { _isNotify => true, id => 100, _type => tournament.leaveEvent }
29.10 17:18:22 == NET: test67 ret: tournament.enemy { data => { name => test67, tournamentId => 1, enemy.id => 113, enemy.name => uid113, round => 1, roundDate => 2016-29-10 17:00, id => 100, enemy.num => 2, battleId => 99, player => 1 }, type => tournament.enemy }
29.10 17:18:22 == NET: test67 ret: battle.leave { type => battle.leave }
29.10 17:18:22 -<<-: tournament.enemyEvent { data => { name => nelli8, tournamentId => 1, enemy.id => 104, enemy.name => qwerty, round => 1, roundDate => 2016-29-10 17:00, id => 101, enemy.num => 2, battleId => 100, player => 1 }, _isNotify => true, id => 101, _type => tournament.enemyEvent }
29.10 17:18:22 -<<-: tournament.enemyEvent { data => { name => qwerty, tournamentId => 1, enemy.id => 101, enemy.name => nelli8, round => 1, roundDate => 2016-29-10 17:00, id => 104, enemy.num => 1, battleId => 100, player => 2 }, _isNotify => true, id => 104, _type => tournament.enemyEvent }
29.10 17:18:22 == NET: nelli8 ret: tournament.enemy { data => { name => nelli8, tournamentId => 1, enemy.id => 104, enemy.name => qwerty, round => 1, roundDate => 2016-29-10 17:00, id => 101, enemy.num => 2, battleId => 100, player => 1 }, type => tournament.enemy }
29.10 17:18:22 == NET: qwerty ret: tournament.enemy { data => { name => qwerty, tournamentId => 1, enemy.id => 101, enemy.name => nelli8, round => 1, roundDate => 2016-29-10 17:00, id => 104, enemy.num => 1, battleId => 100, player => 2 }, type => tournament.enemy }
29.10 17:18:23 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:18:23 TIME: user.ping 0.18 ms
29.10 17:18:23 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:18:25 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:18:25 TIME: user.ping 0.19 ms
29.10 17:18:25 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:18:25 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:18:25 TIME: user.ping 0.14 ms
29.10 17:18:25 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:18:27 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:18:27 TIME: user.ping 0.2 ms
29.10 17:18:27 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:18:41 ++ NET: nelli8 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 2, dices => 554114, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:18:41 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:18:41 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:18:41 STATS: vdl.0 cache connection, 101 calls, total 0.154431819915771 sec spent, avg 1.53 ms
29.10 17:18:41 TIME: battle.sendtask 1.25 ms
29.10 17:18:41 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:18:41 == NET: qwerty ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 2, type => battle.task, dices => 554114, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:18:47 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:18:47 TIME: user.ping 0.12 ms
29.10 17:18:47 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:18:47 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:18:47 TIME: user.ping 0.1 ms
29.10 17:18:47 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:18:51 ++ NET: nelli8 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:18:51 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:18:51 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:18:51 TIME: battle.sendtask 0.56 ms
29.10 17:18:51 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:18:51 == NET: qwerty ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:18:51 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:18:51 TIME: user.ping 0.11 ms
29.10 17:18:51 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:18:52 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:18:52 TIME: user.ping 0.16 ms
29.10 17:18:52 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:18:55 ++ NET: qwerty req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 1, dices => 353301, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:18:55 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:18:55 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:18:55 TIME: battle.sendtask 0.42 ms
29.10 17:18:55 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:18:55 == NET: nelli8 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 1, type => battle.task, dices => 353301, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:19:00 ++ NET: qwerty req: battle.sendtask { dice => 3, from => (2.0, 6.0), roomId => 100, name => swap, side => 1, dices => null, messageType => battle.sendtask, to => (1.0, 6.0), diceID => 0 }
29.10 17:19:00 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:19:00 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:19:00 TIME: battle.sendtask 0.58 ms
29.10 17:19:00 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:19:00 == NET: nelli8 ret: battle.task { dice => 3, from => (2.0, 6.0), roomId => 100, name => swap, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (1.0, 6.0), diceID => 0 }
29.10 17:19:03 ++ NET: qwerty req: battle.sendtask { dice => 3, from => (2.0, 4.0), roomId => 100, name => swap, side => 1, dices => null, messageType => battle.sendtask, to => (1.0, 4.0), diceID => 0 }
29.10 17:19:03 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:19:03 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:19:03 TIME: battle.sendtask 0.36 ms
29.10 17:19:03 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:19:03 == NET: nelli8 ret: battle.task { dice => 3, from => (2.0, 4.0), roomId => 100, name => swap, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (1.0, 4.0), diceID => 0 }
29.10 17:19:06 ++ NET: qwerty req: battle.sendtask { dice => 3, from => (3.0, 7.0), roomId => 100, name => swap, side => 1, dices => null, messageType => battle.sendtask, to => (3.0, 8.0), diceID => 0 }
29.10 17:19:06 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:19:06 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:19:06 TIME: battle.sendtask 0.38 ms
29.10 17:19:06 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:19:06 == NET: nelli8 ret: battle.task { dice => 3, from => (3.0, 7.0), roomId => 100, name => swap, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (3.0, 8.0), diceID => 0 }
29.10 17:19:08 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:19:08 TIME: user.ping 0.14 ms
29.10 17:19:08 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:19:09 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:19:09 TIME: user.ping 0.19 ms
29.10 17:19:09 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:19:11 ++ NET: qwerty req: battle.sendtask { dice => 5, from => (2.0, 2.0), roomId => 100, name => swap, side => 1, dices => null, messageType => battle.sendtask, to => (2.0, 1.0), diceID => 0 }
29.10 17:19:11 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:19:11 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:19:11 TIME: battle.sendtask 0.31 ms
29.10 17:19:11 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:19:11 == NET: nelli8 ret: battle.task { dice => 5, from => (2.0, 2.0), roomId => 100, name => swap, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (2.0, 1.0), diceID => 0 }
29.10 17:19:14 ++ NET: qwerty req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 1, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:19:14 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:19:14 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:19:14 TIME: battle.sendtask 0.34 ms
29.10 17:19:14 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:19:14 == NET: nelli8 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:19:17 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:19:17 TIME: user.ping 0.12 ms
29.10 17:19:17 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:19:22 TIMER: Check auto-disconnect...
29.10 17:19:22 STATS: vdl.0 cache, locks:6
29.10 17:19:24 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:19:24 TIME: user.ping 0.23 ms
29.10 17:19:24 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:19:28 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:19:28 TIME: user.ping 0.13 ms
29.10 17:19:28 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:19:29 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:19:29 TIME: user.ping 0.14 ms
29.10 17:19:29 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:19:35 ++ NET: nelli8 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 2, dices => 451450, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:19:35 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:19:35 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:19:35 TIME: battle.sendtask 1.83 ms
29.10 17:19:35 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:19:35 == NET: qwerty ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 2, type => battle.task, dices => 451450, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:19:46 ++ NET: nelli8 req: battle.sendtask { dice => 5, from => (7.0, 2.0), roomId => 100, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (8.0, 2.0), diceID => 0 }
29.10 17:19:46 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:19:46 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:19:46 STATS: vdl.0 cache connection, 110 calls, total 0.159670829772949 sec spent, avg 1.45 ms
29.10 17:19:46 TIME: battle.sendtask 1.59 ms
29.10 17:19:46 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:19:46 == NET: qwerty ret: battle.task { dice => 5, from => (7.0, 2.0), roomId => 100, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (8.0, 2.0), diceID => 0 }
29.10 17:19:48 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:19:48 TIME: user.ping 0.13 ms
29.10 17:19:48 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:19:49 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:19:49 TIME: user.ping 0.22 ms
29.10 17:19:49 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:19:50 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:19:50 TIME: user.ping 0.25 ms
29.10 17:19:50 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:19:51 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:19:51 TIME: user.ping 0.09 ms
29.10 17:19:51 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:19:58 ++ NET: nelli8 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:19:58 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:19:58 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:19:58 TIME: battle.sendtask 1.1 ms
29.10 17:19:58 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:19:58 == NET: qwerty ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:20:02 ++ NET: qwerty req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 1, dices => 452105, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:20:02 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:20:02 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:20:02 TIME: battle.sendtask 0.64 ms
29.10 17:20:02 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:20:02 == NET: nelli8 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 1, type => battle.task, dices => 452105, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:20:10 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:20:10 TIME: user.ping 0.07 ms
29.10 17:20:10 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:20:10 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:20:10 TIME: user.ping 0.11 ms
29.10 17:20:10 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:20:12 ++ NET: qwerty req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 1, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:20:12 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:20:12 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:20:12 TIME: battle.sendtask 0.44 ms
29.10 17:20:12 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:20:12 == NET: nelli8 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:20:13 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:20:13 TIME: user.ping 0.08 ms
29.10 17:20:13 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:20:18 ++ NET: nelli8 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 2, dices => 413125, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:20:18 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:20:18 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:20:18 TIME: battle.sendtask 0.42 ms
29.10 17:20:18 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:20:18 == NET: qwerty ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 2, type => battle.task, dices => 413125, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:20:21 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:20:21 TIME: user.ping 0.18 ms
29.10 17:20:21 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:20:22 TIMER: Check auto-disconnect...
29.10 17:20:22 STATS: vdl.0 cache, locks:6
29.10 17:20:22 ++ NET: nelli8 req: battle.sendtask { dice => 2, from => (2.0, 4.0), roomId => 100, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (1.0, 4.0), diceID => 0 }
29.10 17:20:22 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:20:22 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:20:22 TIME: battle.sendtask 0.8 ms
29.10 17:20:22 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:20:22 == NET: qwerty ret: battle.task { dice => 2, from => (2.0, 4.0), roomId => 100, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (1.0, 4.0), diceID => 0 }
29.10 17:20:26 ++ NET: nelli8 req: battle.sendtask { dice => 3, from => (6.0, 2.0), roomId => 100, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (6.0, 1.0), diceID => 0 }
29.10 17:20:26 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:20:26 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:20:26 TIME: battle.sendtask 0.31 ms
29.10 17:20:26 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:20:26 == NET: qwerty ret: battle.task { dice => 3, from => (6.0, 2.0), roomId => 100, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (6.0, 1.0), diceID => 0 }
29.10 17:20:26 ++ NET: nelli8 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:20:26 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:20:26 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:20:26 TIME: battle.sendtask 0.74 ms
29.10 17:20:26 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:20:26 == NET: qwerty ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:20:30 ++ NET: qwerty req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 1, dices => 433135, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:20:30 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:20:30 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:20:30 TIME: battle.sendtask 0.57 ms
29.10 17:20:30 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:20:30 == NET: nelli8 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 1, type => battle.task, dices => 433135, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:20:30 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:20:30 TIME: user.ping 0.09 ms
29.10 17:20:30 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:20:31 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:20:31 TIME: user.ping 0.13 ms
29.10 17:20:31 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:20:34 ++ NET: qwerty req: battle.sendtask { dice => 3, from => (1.0, 4.0), roomId => 100, name => swap, side => 1, dices => null, messageType => battle.sendtask, to => (0.0, 4.0), diceID => 0 }
29.10 17:20:34 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:20:34 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:20:34 TIME: battle.sendtask 0.72 ms
29.10 17:20:34 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:20:34 == NET: nelli8 ret: battle.task { dice => 3, from => (1.0, 4.0), roomId => 100, name => swap, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (0.0, 4.0), diceID => 0 }
29.10 17:20:38 ++ NET: qwerty req: battle.sendtask { dice => 3, from => (3.0, 8.0), roomId => 100, name => swap, side => 1, dices => null, messageType => battle.sendtask, to => (3.0, 9.0), diceID => 0 }
29.10 17:20:38 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:20:38 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:20:38 TIME: battle.sendtask 0.66 ms
29.10 17:20:38 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:20:38 == NET: nelli8 ret: battle.task { dice => 3, from => (3.0, 8.0), roomId => 100, name => swap, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (3.0, 9.0), diceID => 0 }
29.10 17:20:40 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:20:40 TIME: user.ping 0.19 ms
29.10 17:20:40 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:20:41 ++ NET: qwerty req: battle.sendtask { dice => 3, from => (1.0, 6.0), roomId => 100, name => swap, side => 1, dices => null, messageType => battle.sendtask, to => (0.0, 6.0), diceID => 0 }
29.10 17:20:41 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:20:41 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:20:41 TIME: battle.sendtask 0.45 ms
29.10 17:20:41 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:20:41 == NET: nelli8 ret: battle.task { dice => 3, from => (1.0, 6.0), roomId => 100, name => swap, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (0.0, 6.0), diceID => 0 }
29.10 17:20:44 ++ NET: qwerty req: battle.sendtask { dice => 5, from => (2.0, 5.0), roomId => 100, name => swap, side => 1, dices => null, messageType => battle.sendtask, to => (1.0, 5.0), diceID => 0 }
29.10 17:20:44 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:20:44 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:20:44 TIME: battle.sendtask 0.78 ms
29.10 17:20:44 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:20:44 == NET: nelli8 ret: battle.task { dice => 5, from => (2.0, 5.0), roomId => 100, name => swap, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (1.0, 5.0), diceID => 0 }
29.10 17:20:47 ++ NET: qwerty req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 1, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:20:47 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:20:47 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:20:47 STATS: vdl.0 cache connection, 123 calls, total 0.166253566741943 sec spent, avg 1.35 ms
29.10 17:20:47 TIME: battle.sendtask 0.69 ms
29.10 17:20:47 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:20:47 == NET: nelli8 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:20:50 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:20:50 TIME: user.ping 0.19 ms
29.10 17:20:50 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:20:50 ++ NET: nelli8 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 2, dices => 335345, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:20:50 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:20:50 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:20:50 TIME: battle.sendtask 0.31 ms
29.10 17:20:50 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:20:50 == NET: qwerty ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 2, type => battle.task, dices => 335345, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:20:51 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:20:51 TIME: user.ping 0.22 ms
29.10 17:20:51 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:20:51 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:20:51 TIME: user.ping 0.22 ms
29.10 17:20:51 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:20:54 ++ NET: nelli8 req: battle.sendtask { dice => 5, from => (7.0, 3.0), roomId => 100, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (8.0, 3.0), diceID => 0 }
29.10 17:20:54 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:20:54 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:20:54 TIME: battle.sendtask 0.43 ms
29.10 17:20:54 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:20:54 == NET: qwerty ret: battle.task { dice => 5, from => (7.0, 3.0), roomId => 100, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (8.0, 3.0), diceID => 0 }
29.10 17:20:57 ++ NET: nelli8 req: battle.sendtask { dice => 5, from => (8.0, 3.0), roomId => 100, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (9.0, 3.0), diceID => 0 }
29.10 17:20:57 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:20:57 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:20:57 TIME: battle.sendtask 0.49 ms
29.10 17:20:57 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:20:57 == NET: qwerty ret: battle.task { dice => 5, from => (8.0, 3.0), roomId => 100, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (9.0, 3.0), diceID => 0 }
29.10 17:21:00 ++ NET: nelli8 req: battle.sendtask { dice => 3, from => (7.0, 6.0), roomId => 100, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (8.0, 6.0), diceID => 0 }
29.10 17:21:00 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:00 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:00 TIME: battle.sendtask 0.5 ms
29.10 17:21:00 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:00 == NET: qwerty ret: battle.task { dice => 3, from => (7.0, 6.0), roomId => 100, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (8.0, 6.0), diceID => 0 }
29.10 17:21:04 ++ NET: nelli8 req: battle.sendtask { dice => 3, from => (6.0, 7.0), roomId => 100, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (6.0, 8.0), diceID => 0 }
29.10 17:21:04 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:04 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:04 TIME: battle.sendtask 0.55 ms
29.10 17:21:04 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:04 == NET: qwerty ret: battle.task { dice => 3, from => (6.0, 7.0), roomId => 100, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (6.0, 8.0), diceID => 0 }
29.10 17:21:05 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:21:05 TIME: user.ping 0.21 ms
29.10 17:21:05 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:21:08 ++ NET: nelli8 req: battle.sendtask { dice => 3, from => (6.0, 1.0), roomId => 100, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (6.0, 0.0), diceID => 0 }
29.10 17:21:08 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:08 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:08 TIME: battle.sendtask 0.64 ms
29.10 17:21:08 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:08 == NET: qwerty ret: battle.task { dice => 3, from => (6.0, 1.0), roomId => 100, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (6.0, 0.0), diceID => 0 }
29.10 17:21:09 ++ NET: nelli8 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:21:09 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:09 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:09 TIME: battle.sendtask 0.48 ms
29.10 17:21:09 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:09 == NET: qwerty ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:21:10 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:21:10 TIME: user.ping 0.14 ms
29.10 17:21:10 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:21:12 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:21:12 TIME: user.ping 0.2 ms
29.10 17:21:12 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:21:13 ++ NET: qwerty req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 1, dices => 500343, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:21:13 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:13 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:13 TIME: battle.sendtask 0.25 ms
29.10 17:21:13 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:13 == NET: nelli8 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 1, type => battle.task, dices => 500343, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:21:17 ++ NET: qwerty req: battle.sendtask { dice => 3, from => (0.0, 6.0), roomId => 100, name => swap, side => 1, dices => null, messageType => battle.sendtask, to => (0.0, 7.0), diceID => 0 }
29.10 17:21:17 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:17 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:17 TIME: battle.sendtask 0.64 ms
29.10 17:21:17 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:17 == NET: nelli8 ret: battle.task { dice => 3, from => (0.0, 6.0), roomId => 100, name => swap, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (0.0, 7.0), diceID => 0 }
29.10 17:21:21 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:21:21 TIME: user.ping 0.17 ms
29.10 17:21:21 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:21:22 ++ NET: qwerty req: battle.sendtask { dice => 5, from => (7.0, 4.0), roomId => 100, name => swap, side => 1, dices => null, messageType => battle.sendtask, to => (8.0, 4.0), diceID => 0 }
29.10 17:21:22 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:22 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:22 TIME: battle.sendtask 0.66 ms
29.10 17:21:22 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:22 == NET: nelli8 ret: battle.task { dice => 5, from => (7.0, 4.0), roomId => 100, name => swap, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (8.0, 4.0), diceID => 0 }
29.10 17:21:22 TIMER: Check auto-disconnect...
29.10 17:21:22 STATS: vdl.0 cache, locks:6
29.10 17:21:26 ++ NET: qwerty req: battle.sendtask { dice => 3, from => (3.0, 9.0), roomId => 100, name => swap, side => 1, dices => null, messageType => battle.sendtask, to => (2.0, 9.0), diceID => 0 }
29.10 17:21:26 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:26 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:26 TIME: battle.sendtask 0.67 ms
29.10 17:21:26 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:26 == NET: nelli8 ret: battle.task { dice => 3, from => (3.0, 9.0), roomId => 100, name => swap, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (2.0, 9.0), diceID => 0 }
29.10 17:21:29 ++ NET: qwerty req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 1, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:21:29 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:29 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:29 TIME: battle.sendtask 0.32 ms
29.10 17:21:29 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:29 == NET: nelli8 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:21:31 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:21:31 TIME: user.ping 0.22 ms
29.10 17:21:31 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:21:32 ++ NET: nelli8 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 2, dices => 503355, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:21:32 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:32 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:32 TIME: battle.sendtask 0.34 ms
29.10 17:21:32 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:32 == NET: qwerty ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 2, type => battle.task, dices => 503355, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:21:33 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:21:33 TIME: user.ping 0.08 ms
29.10 17:21:33 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:21:38 ++ NET: nelli8 req: battle.sendtask { dice => 3, from => (8.0, 2.0), roomId => 100, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (9.0, 2.0), diceID => 0 }
29.10 17:21:38 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:38 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:38 TIME: battle.sendtask 0.67 ms
29.10 17:21:38 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:38 == NET: qwerty ret: battle.task { dice => 3, from => (8.0, 2.0), roomId => 100, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (9.0, 2.0), diceID => 0 }
29.10 17:21:41 ++ NET: nelli8 req: battle.sendtask { dice => 5, from => (5.0, 2.0), roomId => 100, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (5.0, 1.0), diceID => 0 }
29.10 17:21:41 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:41 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:41 TIME: battle.sendtask 0.78 ms
29.10 17:21:41 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:41 == NET: qwerty ret: battle.task { dice => 5, from => (5.0, 2.0), roomId => 100, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (5.0, 1.0), diceID => 0 }
29.10 17:21:44 ++ NET: nelli8 req: battle.sendtask { dice => 5, from => (7.0, 5.0), roomId => 100, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (8.0, 5.0), diceID => 0 }
29.10 17:21:44 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:44 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:44 TIME: battle.sendtask 0.61 ms
29.10 17:21:44 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:44 == NET: qwerty ret: battle.task { dice => 5, from => (7.0, 5.0), roomId => 100, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (8.0, 5.0), diceID => 0 }
29.10 17:21:46 ++ NET: nelli8 req: battle.sendtask { dice => 3, from => (2.0, 3.0), roomId => 100, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (1.0, 3.0), diceID => 0 }
29.10 17:21:46 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:46 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:46 TIME: battle.sendtask 0.79 ms
29.10 17:21:46 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:46 == NET: qwerty ret: battle.task { dice => 3, from => (2.0, 3.0), roomId => 100, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (1.0, 3.0), diceID => 0 }
29.10 17:21:48 ++ NET: nelli8 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:21:48 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:48 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:48 STATS: vdl.0 cache connection, 141 calls, total 0.173902750015259 sec spent, avg 1.23 ms
29.10 17:21:48 TIME: battle.sendtask 0.62 ms
29.10 17:21:48 == NET: nelli8 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:48 == NET: qwerty ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => skip, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:21:51 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:21:51 TIME: user.ping 0.17 ms
29.10 17:21:51 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:21:52 ++ NET: qwerty req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 1, dices => 054152, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:21:52 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:52 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:52 TIME: battle.sendtask 0.24 ms
29.10 17:21:52 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:52 == NET: nelli8 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 100, name => throw, side => 1, type => battle.task, dices => 054152, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
29.10 17:21:54 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:21:54 TIME: user.ping 0.09 ms
29.10 17:21:54 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:21:56 ++ NET: qwerty req: battle.sendtask { dice => 2, from => (3.0, 7.0), roomId => 100, name => swap, side => 1, dices => null, messageType => battle.sendtask, to => (3.0, 8.0), diceID => 0 }
29.10 17:21:56 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:21:56 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:21:56 TIME: battle.sendtask 0.69 ms
29.10 17:21:56 == NET: qwerty ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
29.10 17:21:56 == NET: nelli8 ret: battle.task { dice => 2, from => (3.0, 7.0), roomId => 100, name => swap, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (3.0, 8.0), diceID => 0 }
29.10 17:21:58 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:21:58 TIME: user.ping 0.09 ms
29.10 17:21:58 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:22:02 ++ NET: qwerty req: battle.end { type => leaveGame, typeBattle => tournament, tournamentId => 1, messageType => battle.end, battleId => 100 }
29.10 17:22:02 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:22:02 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:22:02 ->>-: vdl/cache.tournament.getTournament { tournamentId => 1, _type => vdl/cache.tournament.getTournament }
29.10 17:22:02 -<<-: vdl/cache.tournament.getTournament { name => test, type => once, winner => -1, repeatinterval => 0, round => 1, params => {"params":{"usersList":[104,101,113,100],"battleActive":[99,100],"usersAll":[104,101,113,100]}}, id => 1, _type => vdl/cache.tournament.getTournament, status => active, rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18, roundinterval => 1 }
29.10 17:22:02 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:22:02 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:22:02 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
29.10 17:22:02 -<<-: vdl/cache.tournament.getBattlesTournaments [99,100]
29.10 17:22:02 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
29.10 17:22:02 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [104,101,113,100] }
29.10 17:22:02 ->>-: vdl/cache.battle.finishRoom { roomId => 100, _type => vdl/cache.battle.finishRoom }
29.10 17:22:02 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
29.10 17:22:02 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [100] }
29.10 17:22:02 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
29.10 17:22:02 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [101,113,100], _type => vdl/cache.tournament.setUsersTournament }
29.10 17:22:02 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
29.10 17:22:02 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 101, round => 1, player1 => 101, player2 => 104 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => active }
29.10 17:22:02 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 100, player2 => 113 },{ winner => 101, round => 1, player1 => 101, player2 => 104 },{ winner => -1, round => 2, player1 => 101, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 17:22:02 TIME: battle.end 6.92 ms
29.10 17:22:02 == NET: qwerty ret: battle.end { type => battle.end, errorCode => ok }
29.10 17:22:02 == NET: nelli8 ret: battle.leave { type => battle.leave }
29.10 17:22:14 ++ NET: nelli8 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:22:14 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:22:14 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [100], round => 1, id => 1, status => active, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 },{ name => test67, id => 100 }], battleActive => [99], rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:22:14 TIME: tournament.getAvailableTournament 4.03 ms
29.10 17:22:14 == NET: nelli8 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [100], round => 1, id => 1, status => active, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 },{ name => test67, id => 100 }], battleActive => [99], rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:22:16 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:22:16 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:22:16 TIME: user.ping 0.09 ms
29.10 17:22:20 ++ NET: nelli8 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
29.10 17:22:20 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
29.10 17:22:20 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => active }
29.10 17:22:20 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => active }
29.10 17:22:20 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 100, player2 => 113 },{ winner => 101, round => 1, player1 => 101, player2 => 104 },{ winner => -1, round => 2, player1 => 101, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 17:22:20 TIME: tournament.grid 1.4 ms
29.10 17:22:20 == NET: nelli8 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 100, player2 => 113 },{ winner => 101, round => 1, player1 => 101, player2 => 104 },{ winner => -1, round => 2, player1 => 101, player2 => null }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 17:22:22 TIMER: Check auto-disconnect...
29.10 17:22:22 STATS: vdl.0 cache, locks:6
29.10 17:22:23 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:22:23 TIME: user.ping 0.2 ms
29.10 17:22:23 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:22:32 ++ NET: nelli8 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:22:32 TIME: user.ping 0.11 ms
29.10 17:22:32 == NET: nelli8 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:22:36 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:22:36 TIME: user.ping 0.19 ms
29.10 17:22:36 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:22:44 ++ NET: qwerty req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:22:44 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:22:44 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [100], round => 1, id => 1, status => active, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 },{ name => test67, id => 100 }], battleActive => [99], rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:22:44 TIME: tournament.getAvailableTournament 4.83 ms
29.10 17:22:44 == NET: qwerty ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [100], round => 1, id => 1, status => active, userList => [{ name => qwerty, id => 104 },{ name => nelli8, id => 101 },{ name => uid113, id => 113 },{ name => test67, id => 100 }], battleActive => [99], rounddate => 2016-29-10 17:00, startdate => 2016-29-10 17:18 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:22:47 ++ NET: qwerty req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
29.10 17:22:47 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
29.10 17:22:47 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => active }
29.10 17:22:47 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => active }
29.10 17:22:47 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 100, player2 => 113 },{ winner => 101, round => 1, player1 => 101, player2 => 104 },{ winner => -1, round => 2, player1 => 101, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 17:22:47 TIME: tournament.grid 0.86 ms
29.10 17:22:47 == NET: qwerty ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 100, player2 => 113 },{ winner => 101, round => 1, player1 => 101, player2 => 104 },{ winner => -1, round => 2, player1 => 101, player2 => null }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 17:22:56 ++ NET: qwerty req: user.ping { messageType => user.ping, msg => ok }
29.10 17:22:56 TIME: user.ping 0.06 ms
29.10 17:22:56 == NET: qwerty ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:23:14 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:23:14 TIME: user.ping 0.1 ms
29.10 17:23:14 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:23:22 TIMER: Check auto-disconnect...
29.10 17:23:22 STATS: vdl.0 cache, locks:6
29.10 17:23:22 TIMER: Check auto-disconnect...
29.10 17:23:22 STATS: vdl.0 cache, locks:6
29.10 17:24:59 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:24:59 TIME: user.ping 0.11 ms
29.10 17:24:59 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:25:22 TIMER: Check auto-disconnect...
29.10 17:25:22 STATS: vdl.0 cache, locks:6
29.10 17:25:50 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:25:50 TIME: user.ping 0.11 ms
29.10 17:25:50 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:26:11 ++ NET: test67 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:26:11 TIME: user.ping 0.1 ms
29.10 17:26:11 == NET: test67 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:26:22 TIMER: Check auto-disconnect...
29.10 17:26:22 NET: Client (name:qwerty conid:48114221 TCP) disconnected from vdl.0 (clients:3)
29.10 17:26:22 DB: SELECT id FROM battle WHERE firstid=104 OR secondid=104 AND finished <> true
29.10 17:26:22 NET: Client (name:uid113 conid:18986721 TCP) disconnected from vdl.0 (clients:2)
29.10 17:26:22 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=104 OR secondid=104 AND finished <> true, _type => core/server.query }
29.10 17:26:22 NET: Client (name:nelli8 conid:71744269 TCP) disconnected from vdl.0 (clients:1)
29.10 17:26:22 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.10 17:26:22 STATS: vdl.0 cache connection, 159 calls, total 0.193389415740967 sec spent, avg 1.22 ms
29.10 17:26:22 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 17:26:22 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
29.10 17:26:22 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 17:26:22 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 267
Called from modules/VDLBattleModule.hx line 280
Called from snipe/slave/Server.hx line 994
29.10 17:26:22 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 104, _type => core/cache.update }
29.10 17:26:22 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.10 17:26:22 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 104, _type => core/cache.update }
29.10 17:26:22 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:26:22 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 104, _type => core/user.logoutPost }
29.10 17:26:22 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 17:26:22 DB: SELECT id FROM battle WHERE firstid=113 OR secondid=113 AND finished <> true
29.10 17:26:22 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=113 OR secondid=113 AND finished <> true, _type => core/server.query }
29.10 17:26:22 -<<-: core/server.query { list => {{ id => 99 }}, errorCode => ok, _type => core/server.query }
29.10 17:26:22 ->>-: vdl/cache.battle.infoRoom { roomId => 99, _type => vdl/cache.battle.infoRoom }
29.10 17:26:22 -<<-: vdl/cache.battle.infoRoom { secondId => 113, firstId => 100, _type => vdl/cache.battle.infoRoom, turnId => 100 }
29.10 17:26:22 ->>-: vdl/cache.battle.deleteRoom { roomId => 99, _type => vdl/cache.battle.deleteRoom }
29.10 17:26:22 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
29.10 17:26:22 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 113, _type => core/cache.update }
29.10 17:26:22 -<<-: core/cache.update { errorCode => mustBeLocked, version => 0, _type => core/cache.update }
29.10 17:26:22 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 113, _type => core/cache.update }
29.10 17:26:22 -<<-: core/cache.update { errorCode => mustBeLocked, version => 0, _type => core/cache.update }
29.10 17:26:22 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 113, _type => core/user.logoutPost }
29.10 17:26:22 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 17:26:22 DB: SELECT id FROM battle WHERE firstid=101 OR secondid=101 AND finished <> true
29.10 17:26:22 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=101 OR secondid=101 AND finished <> true, _type => core/server.query }
29.10 17:26:22 -<<-: core/server.query { list => {{ id => 94 }, { id => 96 }, { id => 97 }, { id => 100 }}, errorCode => ok, _type => core/server.query }
29.10 17:26:22 ->>-: vdl/cache.battle.infoRoom { roomId => 100, _type => vdl/cache.battle.infoRoom }
29.10 17:26:22 -<<-: vdl/cache.battle.infoRoom { secondId => 104, firstId => 101, _type => vdl/cache.battle.infoRoom, turnId => 101 }
29.10 17:26:22 ->>-: vdl/cache.battle.deleteRoom { roomId => 100, _type => vdl/cache.battle.deleteRoom }
29.10 17:26:22 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
29.10 17:26:22 ->>-: core/user.sendTo { id => 104, _type => core/user.sendTo, msg => { _type => battle.end } }
29.10 17:26:22 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
29.10 17:26:22 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 101, _type => core/cache.update }
29.10 17:26:22 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.10 17:26:22 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 101, _type => core/cache.update }
29.10 17:26:22 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:26:22 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 101, _type => core/user.logoutPost }
29.10 17:26:22 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 17:26:22 == NET: test67 ret: battle.end { type => battle.end }
29.10 17:26:22 STATS: vdl.0 cache, locks:2
29.10 17:26:22 TIMER: Check auto-disconnect...
29.10 17:26:22 STATS: vdl.0 cache, locks:2
29.10 17:26:22 TIMER: Check auto-disconnect...
29.10 17:26:22 STATS: vdl.0 cache, locks:2
29.10 17:26:22 TIMER: Check auto-disconnect...
29.10 17:26:22 NET: Client (name:test67 conid:2252710 TCP) disconnected from vdl.0 (clients:0)
29.10 17:26:22 DB: SELECT id FROM battle WHERE firstid=100 OR secondid=100 AND finished <> true
29.10 17:26:22 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=100 OR secondid=100 AND finished <> true, _type => core/server.query }
29.10 17:26:22 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.10 17:26:22 STATS: vdl.0 cache connection, 177 calls, total 0.231181621551514 sec spent, avg 1.31 ms
29.10 17:26:22 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 17:26:22 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
29.10 17:26:22 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 17:26:22 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 267
Called from modules/VDLBattleModule.hx line 280
Called from snipe/slave/Server.hx line 994
29.10 17:26:22 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 100, _type => core/cache.update }
29.10 17:26:22 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.10 17:26:22 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 100, _type => core/cache.update }
29.10 17:26:22 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:26:22 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 100, _type => core/user.logoutPost }
29.10 17:26:22 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 17:26:22 STATS: vdl.0 cache, locks:0
29.10 17:26:22 TIMER: Check auto-disconnect...
29.10 17:26:22 STATS: vdl.0 cache, locks:0
29.10 17:31:20 NET: Client (conid:40688884) connected to vdl.0 (clients:1)
29.10 17:31:22 TIMER: Check auto-disconnect...
29.10 17:31:22 STATS: vdl.0 cache, locks:0
29.10 17:31:25 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:31:25 TRACE: User not logon yet.
29.10 17:31:45 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:31:45 TRACE: User not logon yet.
29.10 17:32:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:32:05 TRACE: User not logon yet.
29.10 17:32:22 NET: Client (conid:15626481) connected to vdl.0 (clients:2)
29.10 17:32:22 TIMER: Check auto-disconnect...
29.10 17:32:22 STATS: vdl.0 cache, locks:0
29.10 17:32:25 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:32:25 TRACE: User not logon yet.
29.10 17:32:51 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
29.10 17:32:51 -<<-: server.login ok
29.10 17:32:51 DB: SELECT * FROM LocalizationStrings
29.10 17:32:51 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:32:51 TIMER: Starting timer...
29.10 17:32:51 TIMER: Timer running...
29.10 17:32:51 DB: SELECT * FROM GameVars
29.10 17:32:51 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:32:51 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
29.10 17:32:51 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:32:51 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
29.10 17:32:51 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:32:51 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
29.10 17:32:51 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:32:51 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
29.10 17:32:51 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:32:51 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
29.10 17:32:51 -<<-: core/quest.getDaily ok
29.10 17:32:51 DB: SELECT * FROM UserAttributeTypes
29.10 17:32:51 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:32:51 DB: SELECT * FROM UserVariableTypes
29.10 17:32:51 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:32:51 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
29.10 17:32:51 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:32:51 DB: SELECT * FROM ItemGroups
29.10 17:32:51 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:32:51 DB: SELECT * FROM Bundles ORDER BY ID
29.10 17:32:51 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:32:51 DB: SELECT * FROM BundleItems ORDER BY ID
29.10 17:32:51 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:32:51 SHOP: loading items...
29.10 17:32:51 ->>-: core/shop.getList { _type => core/shop.getList }
29.10 17:32:51 -<<-: core/shop.getList ok
29.10 17:32:51 SHOP: 0 items loaded (0 sec)
29.10 17:32:51 DB: SELECT * FROM EffectAttributeTypes
29.10 17:32:51 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:32:51 DB: SELECT * FROM Effects
29.10 17:32:51 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:32:51 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 17:32:51 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:32:51 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 17:32:51 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:32:51 DB: SELECT * FROM Badges
29.10 17:32:51 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
29.10 17:32:51 -<<-: core/server.query ok
29.10 17:33:06 NET: Client (conid:27460637) connected to vdl.0 (clients:1)
29.10 17:33:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:33:11 TRACE: User not logon yet.
29.10 17:33:31 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:33:31 TRACE: User not logon yet.
29.10 17:33:51 TIMER: Check auto-disconnect...
29.10 17:33:51 STATS: vdl.0 cache, locks:0
29.10 17:34:48 NET: Client (conid:91780940) connected to vdl.0 (clients:2)
29.10 17:34:51 TIMER: Check auto-disconnect...
29.10 17:34:51 STATS: vdl.0 cache, locks:0
29.10 17:34:53 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTEz }
29.10 17:34:53 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113'
29.10 17:34:53 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113', _type => core/server.query }
29.10 17:34:53 -<<-: core/server.query ok
29.10 17:34:53 STATS: vdl.0 cache connection, 21 calls, total 0.0218656063079834 sec spent, avg 1.04 ms
29.10 17:34:53 ->>-: core/user.isOnlineID { id => 113, _type => core/user.isOnlineID }
29.10 17:34:53 -<<-: core/user.isOnlineID ok
29.10 17:34:53 ->>-: core/cache.get { type => user, v => -1, id => 113, _type => core/cache.get }
29.10 17:34:53 -<<-: core/cache.get ok
29.10 17:34:53 ->>-: core/cache.get { type => questdata, v => -1, id => 113, _type => core/cache.get }
29.10 17:34:53 -<<-: core/cache.get ok
29.10 17:34:53 NET: Client login (conid:91780940, id:113, name:uid113)
29.10 17:34:53 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 113, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
29.10 17:34:53 -<<-: core/user.loginPost null
29.10 17:34:53 == NET: uid113 ret: user.login { name => uid113, type => user.login, errorCode => ok, id => 113 }
29.10 17:34:53 == NET: uid113 ret: user.join { name => null, type => user.join }
29.10 17:34:53 == NET: null ret: user.join { name => uid113, type => user.join }
29.10 17:34:53 == NET: uid113 ret: user.join { name => uid113, type => user.join }
29.10 17:35:01 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 113, _type => core/cache.update }
29.10 17:35:01 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:35:05 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:35:05 TIME: user.ping 0.17 ms
29.10 17:35:05 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:35:25 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:35:25 TIME: user.ping 0.14 ms
29.10 17:35:25 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:35:40 NET: Client (conid:42164983) connected to vdl.0 (clients:3)
29.10 17:35:40 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
29.10 17:35:40 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
29.10 17:35:40 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
29.10 17:35:40 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
29.10 17:35:40 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
29.10 17:35:40 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.10 17:35:40 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
29.10 17:35:40 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477748429, lastLoginDate => 303, lastLoadDate => 1030 }, effects => { list => [] } }}, version => 0, id => 107 } }
29.10 17:35:40 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
29.10 17:35:40 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
29.10 17:35:40 NET: Client login (conid:42164983, id:107, name:uid107)
29.10 17:35:40 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
29.10 17:35:40 -<<-: core/user.loginPost { _type => core/user.loginPost }
29.10 17:35:40 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
29.10 17:35:40 == NET: uid113 ret: user.join { name => uid107, type => user.join }
29.10 17:35:40 == NET: null ret: user.join { name => uid107, type => user.join }
29.10 17:35:40 == NET: uid107 ret: user.join { name => null, type => user.join }
29.10 17:35:40 == NET: uid107 ret: user.join { name => uid113, type => user.join }
29.10 17:35:40 == NET: uid107 ret: user.join { name => uid107, type => user.join }
29.10 17:35:44 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:35:44 TIME: user.ping 0.09 ms
29.10 17:35:44 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:35:45 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:35:45 TIME: user.ping 0.14 ms
29.10 17:35:45 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:35:46 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
29.10 17:35:46 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:35:49 ++ NET: uid107 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:35:49 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:35:49 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-29-10 17:37, startdate => 2016-29-10 17:37 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:35:49 TIME: tournament.getAvailableTournament 2.91 ms
29.10 17:35:49 == NET: uid107 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-29-10 17:37, startdate => 2016-29-10 17:37 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:35:51 TIMER: Check auto-disconnect...
29.10 17:35:51 STATS: vdl.0 cache, locks:4
29.10 17:35:53 ++ NET: uid107 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
29.10 17:35:53 ->>-: vdl/cache.tournament.addUsers { userId => 107, tournament => 1, _type => vdl/cache.tournament.addUsers }
29.10 17:35:53 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 17:35:53 TIME: tournament.addUsers 0.51 ms
29.10 17:35:53 == NET: uid107 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 17:35:53 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:35:53 TIME: user.ping 0.06 ms
29.10 17:35:53 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:35:53 ++ NET: uid107 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:35:53 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:35:53 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 }], battleActive => null, rounddate => 2016-29-10 17:37, startdate => 2016-29-10 17:37 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:35:53 TIME: tournament.getAvailableTournament 1.29 ms
29.10 17:35:53 == NET: uid107 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 }], battleActive => null, rounddate => 2016-29-10 17:37, startdate => 2016-29-10 17:37 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:35:57 ++ NET: uid113 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:35:57 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:35:57 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 }], battleActive => null, rounddate => 2016-29-10 17:37, startdate => 2016-29-10 17:37 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:35:57 STATS: vdl.0 cache connection, 36 calls, total 0.043229341506958 sec spent, avg 1.2 ms
29.10 17:35:57 TIME: tournament.getAvailableTournament 3.62 ms
29.10 17:35:57 == NET: uid113 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 }], battleActive => null, rounddate => 2016-29-10 17:37, startdate => 2016-29-10 17:37 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:36:01 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:36:01 TIME: user.ping 0.11 ms
29.10 17:36:01 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:36:04 ++ NET: uid113 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
29.10 17:36:04 ->>-: vdl/cache.tournament.addUsers { userId => 113, tournament => 1, _type => vdl/cache.tournament.addUsers }
29.10 17:36:04 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 17:36:04 TIME: tournament.addUsers 0.63 ms
29.10 17:36:04 == NET: uid113 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
29.10 17:36:04 ++ NET: uid113 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:36:04 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:36:04 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 17:37, startdate => 2016-29-10 17:37 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:36:04 TIME: tournament.getAvailableTournament 2.77 ms
29.10 17:36:04 == NET: uid113 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 17:37, startdate => 2016-29-10 17:37 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:36:06 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:36:06 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:36:06 TIME: user.ping 0.15 ms
29.10 17:36:09 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:36:09 TIME: user.ping 0.16 ms
29.10 17:36:09 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:36:18 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:36:18 TIME: user.ping 0.09 ms
29.10 17:36:18 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:36:26 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:36:26 TIME: user.ping 0.11 ms
29.10 17:36:26 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:36:27 NET: Client (name:uid107 conid:42164983 TCP) disconnected from vdl.0 (clients:2)
29.10 17:36:27 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
29.10 17:36:27 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
29.10 17:36:27 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.10 17:36:27 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 17:36:27 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
29.10 17:36:27 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 17:36:27 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 268
Called from modules/VDLBattleModule.hx line 281
Called from snipe/slave/Server.hx line 994
29.10 17:36:27 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
29.10 17:36:27 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.10 17:36:27 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
29.10 17:36:27 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:36:27 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
29.10 17:36:27 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 17:36:37 NET: Client (conid:98603803) connected to vdl.0 (clients:3)
29.10 17:36:38 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
29.10 17:36:38 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
29.10 17:36:38 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
29.10 17:36:38 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
29.10 17:36:38 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
29.10 17:36:38 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.10 17:36:38 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
29.10 17:36:38 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477748429, lastLoginDate => 303, lastLoadDate => 1030 }, effects => { list => [] } }}, version => 0, id => 107 } }
29.10 17:36:38 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
29.10 17:36:38 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
29.10 17:36:38 NET: Client login (conid:98603803, id:107, name:uid107)
29.10 17:36:38 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
29.10 17:36:38 -<<-: core/user.loginPost { _type => core/user.loginPost }
29.10 17:36:38 == NET: uid113 ret: user.join { name => uid107, type => user.join }
29.10 17:36:38 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
29.10 17:36:38 == NET: null ret: user.join { name => uid107, type => user.join }
29.10 17:36:38 == NET: uid107 ret: user.join { name => null, type => user.join }
29.10 17:36:38 == NET: uid107 ret: user.join { name => uid113, type => user.join }
29.10 17:36:38 == NET: uid107 ret: user.join { name => uid107, type => user.join }
29.10 17:36:41 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:36:41 TIME: user.ping 0.13 ms
29.10 17:36:41 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:36:44 NET: Client (name:uid113 conid:91780940 TCP) disconnected from vdl.0 (clients:2)
29.10 17:36:44 DB: SELECT id FROM battle WHERE firstid=113 OR secondid=113 AND finished <> true
29.10 17:36:44 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=113 OR secondid=113 AND finished <> true, _type => core/server.query }
29.10 17:36:44 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.10 17:36:44 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 17:36:44 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
29.10 17:36:44 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.10 17:36:44 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 268
Called from modules/VDLBattleModule.hx line 281
Called from snipe/slave/Server.hx line 994
29.10 17:36:44 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 113, _type => core/cache.update }
29.10 17:36:44 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.10 17:36:44 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 113, _type => core/cache.update }
29.10 17:36:44 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:36:44 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 113, _type => core/user.logoutPost }
29.10 17:36:44 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.10 17:36:46 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
29.10 17:36:46 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:36:49 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:36:49 TIME: user.ping 0.16 ms
29.10 17:36:49 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:36:51 TIMER: Check auto-disconnect...
29.10 17:36:51 NET: Client (name:null conid:27460637 TCP) disconnected from vdl.0 (clients:1)
29.10 17:36:51 STATS: vdl.0 cache, locks:2
29.10 17:36:54 ++ NET: uid107 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:36:54 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:36:54 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 17:37, startdate => 2016-29-10 17:37 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:36:54 TIME: tournament.getAvailableTournament 1.94 ms
29.10 17:36:54 == NET: uid107 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 17:37, startdate => 2016-29-10 17:37 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:36:57 ++ NET: uid107 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
29.10 17:36:57 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
29.10 17:36:57 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
29.10 17:36:57 STATS: vdl.0 cache connection, 56 calls, total 0.0612585544586182 sec spent, avg 1.09 ms
29.10 17:36:57 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
29.10 17:36:57 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [107,113] }
29.10 17:36:57 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 107, player2 => 113 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
29.10 17:36:57 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 107, player2 => 113 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 17:36:57 TIME: tournament.grid 0.84 ms
29.10 17:36:57 == NET: uid107 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 107, player2 => 113 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
29.10 17:36:58 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:36:58 TIME: user.ping 0.07 ms
29.10 17:36:58 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:37:06 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:37:06 TIME: user.ping 0.12 ms
29.10 17:37:06 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:37:14 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:37:14 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:37:14 TIME: user.ping 0.11 ms
29.10 17:37:22 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:37:22 TIME: user.ping 0.11 ms
29.10 17:37:22 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:37:30 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:37:30 TIME: user.ping 0.24 ms
29.10 17:37:30 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:37:38 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:37:38 TIME: user.ping 0.09 ms
29.10 17:37:38 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:37:46 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:37:46 TIME: user.ping 0.1 ms
29.10 17:37:46 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:37:51 TIMER: Check auto-disconnect...
29.10 17:37:51 STATS: vdl.0 cache, locks:2
29.10 17:37:55 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:37:55 TIME: user.ping 0.17 ms
29.10 17:37:55 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:38:03 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:38:03 TIME: user.ping 0.15 ms
29.10 17:38:03 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:38:11 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:38:11 TIME: user.ping 0.11 ms
29.10 17:38:11 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:38:19 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:38:19 TIME: user.ping 0.12 ms
29.10 17:38:19 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:38:27 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:38:27 TIME: user.ping 0.07 ms
29.10 17:38:27 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:38:35 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:38:35 TIME: user.ping 0.09 ms
29.10 17:38:35 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:38:43 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:38:43 TIME: user.ping 0.15 ms
29.10 17:38:43 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:38:51 TIMER: Check auto-disconnect...
29.10 17:38:51 STATS: vdl.0 cache, locks:2
29.10 17:38:52 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:38:52 TIME: user.ping 0.21 ms
29.10 17:38:52 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:39:00 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:39:00 TIME: user.ping 0.19 ms
29.10 17:39:00 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:39:08 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:39:08 TIME: user.ping 0.11 ms
29.10 17:39:08 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:39:26 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
29.10 17:39:26 -<<-: server.login ok
29.10 17:39:26 DB: SELECT * FROM LocalizationStrings
29.10 17:39:26 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:26 TIMER: Starting timer...
29.10 17:39:26 TIMER: Timer running...
29.10 17:39:26 DB: SELECT * FROM GameVars
29.10 17:39:26 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:26 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
29.10 17:39:26 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:26 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
29.10 17:39:26 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:26 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
29.10 17:39:26 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:26 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
29.10 17:39:26 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:26 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
29.10 17:39:26 -<<-: core/quest.getDaily ok
29.10 17:39:26 DB: SELECT * FROM UserAttributeTypes
29.10 17:39:26 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:26 DB: SELECT * FROM UserVariableTypes
29.10 17:39:26 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:26 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
29.10 17:39:26 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:26 DB: SELECT * FROM ItemGroups
29.10 17:39:26 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:26 DB: SELECT * FROM Bundles ORDER BY ID
29.10 17:39:26 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:26 DB: SELECT * FROM BundleItems ORDER BY ID
29.10 17:39:26 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:26 SHOP: loading items...
29.10 17:39:26 ->>-: core/shop.getList { _type => core/shop.getList }
29.10 17:39:26 -<<-: core/shop.getList ok
29.10 17:39:26 SHOP: 0 items loaded (0 sec)
29.10 17:39:26 DB: SELECT * FROM EffectAttributeTypes
29.10 17:39:26 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:26 DB: SELECT * FROM Effects
29.10 17:39:26 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:26 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 17:39:26 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:26 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 17:39:26 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:26 DB: SELECT * FROM Badges
29.10 17:39:26 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
29.10 17:39:26 -<<-: core/server.query ok
29.10 17:39:32 NET: Client (conid:3843214) connected to vdl.0 (clients:1)
29.10 17:39:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:39:35 TRACE: User not logon yet.
29.10 17:39:43 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:39:43 TRACE: User not logon yet.
29.10 17:39:51 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:39:51 TRACE: User not logon yet.
29.10 17:39:59 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:39:59 TRACE: User not logon yet.
29.10 17:40:07 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:40:07 TRACE: User not logon yet.
29.10 17:40:15 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:40:15 TRACE: User not logon yet.
29.10 17:40:23 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:40:23 TRACE: User not logon yet.
29.10 17:40:26 NET: Client (name:null conid:3843214 TCP) disconnected from vdl.0 (clients:0)
29.10 17:40:26 TIMER: Check auto-disconnect...
29.10 17:40:26 STATS: vdl.0 cache, locks:0
29.10 17:40:30 NET: Client (conid:43920095) connected to vdl.0 (clients:1)
29.10 17:40:30 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
29.10 17:40:30 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
29.10 17:40:30 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
29.10 17:40:30 -<<-: core/server.query ok
29.10 17:40:30 STATS: vdl.0 cache connection, 21 calls, total 0.0255885124206543 sec spent, avg 1.22 ms
29.10 17:40:30 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
29.10 17:40:30 -<<-: core/user.isOnlineID ok
29.10 17:40:30 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
29.10 17:40:30 -<<-: core/cache.get ok
29.10 17:40:30 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
29.10 17:40:30 -<<-: core/cache.get ok
29.10 17:40:30 NET: Client login (conid:43920095, id:107, name:uid107)
29.10 17:40:30 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
29.10 17:40:30 -<<-: core/user.loginPost null
29.10 17:40:30 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
29.10 17:40:30 == NET: uid107 ret: user.join { name => uid107, type => user.join }
29.10 17:40:34 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:40:34 TIME: user.ping 0.13 ms
29.10 17:40:34 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:40:36 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
29.10 17:40:36 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:40:42 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:40:42 TIME: user.ping 0.19 ms
29.10 17:40:42 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:40:49 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:40:49 TIME: user.ping 0.13 ms
29.10 17:40:49 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:40:57 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:40:57 TIME: user.ping 0.1 ms
29.10 17:40:57 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:41:05 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:41:05 TIME: user.ping 0.27 ms
29.10 17:41:05 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:41:13 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:41:13 TIME: user.ping 0.2 ms
29.10 17:41:13 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:41:21 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:41:21 TIME: user.ping 0.2 ms
29.10 17:41:21 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:41:26 TIMER: Check auto-disconnect...
29.10 17:41:27 STATS: vdl.0 cache, locks:2
29.10 17:41:28 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:41:28 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:41:28 TIME: user.ping 0.18 ms
29.10 17:41:36 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:41:36 TIME: user.ping 0.11 ms
29.10 17:41:36 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:41:44 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:41:44 TIME: user.ping 0.18 ms
29.10 17:41:44 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:41:52 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:41:52 TIME: user.ping 0.13 ms
29.10 17:41:52 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:41:59 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:41:59 TIME: user.ping 0.08 ms
29.10 17:41:59 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:42:07 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:42:07 TIME: user.ping 0.22 ms
29.10 17:42:07 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:42:15 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:42:15 TIME: user.ping 0.14 ms
29.10 17:42:15 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:42:26 TIMER: Check auto-disconnect...
29.10 17:42:27 STATS: vdl.0 cache, locks:2
29.10 17:42:27 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:42:27 TIME: user.ping 0.14 ms
29.10 17:42:27 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:42:35 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:42:35 TIME: user.ping 0.1 ms
29.10 17:42:35 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:42:42 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:42:42 TIME: user.ping 0.16 ms
29.10 17:42:42 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:42:50 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:42:50 TIME: user.ping 0.08 ms
29.10 17:42:50 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:42:58 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:42:58 TIME: user.ping 0.11 ms
29.10 17:42:58 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:43:06 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:43:06 TIME: user.ping 0.15 ms
29.10 17:43:06 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:43:13 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:43:13 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:43:13 TIME: user.ping 0.09 ms
29.10 17:43:21 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:43:21 TIME: user.ping 0.08 ms
29.10 17:43:21 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:43:26 TIMER: Check auto-disconnect...
29.10 17:43:27 STATS: vdl.0 cache, locks:2
29.10 17:43:29 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:43:29 TIME: user.ping 0.13 ms
29.10 17:43:29 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:43:36 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:43:36 TIME: user.ping 0.11 ms
29.10 17:43:36 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:43:44 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:43:44 TIME: user.ping 0.13 ms
29.10 17:43:44 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:43:52 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:43:52 TIME: user.ping 0.07 ms
29.10 17:43:52 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:44:00 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:44:00 TIME: user.ping 0.1 ms
29.10 17:44:00 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:44:07 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:44:07 TIME: user.ping 0.2 ms
29.10 17:44:07 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:44:15 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:44:15 TIME: user.ping 0.08 ms
29.10 17:44:15 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:44:23 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:44:23 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:44:23 TIME: user.ping 0.12 ms
29.10 17:44:26 TIMER: Check auto-disconnect...
29.10 17:44:27 STATS: vdl.0 cache, locks:2
29.10 17:44:31 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:44:31 TIME: user.ping 0.22 ms
29.10 17:44:31 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:44:38 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:44:38 TIME: user.ping 0.1 ms
29.10 17:44:38 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:44:46 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:44:46 TIME: user.ping 0.1 ms
29.10 17:44:46 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:44:54 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:44:54 TIME: user.ping 0.18 ms
29.10 17:44:54 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:45:01 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:45:01 TIME: user.ping 0.16 ms
29.10 17:45:01 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:45:09 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:45:09 TIME: user.ping 0.09 ms
29.10 17:45:09 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:45:17 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:45:17 TIME: user.ping 0.24 ms
29.10 17:45:17 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:45:25 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:45:25 TIME: user.ping 0.19 ms
29.10 17:45:25 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:45:26 TIMER: Check auto-disconnect...
29.10 17:45:27 STATS: vdl.0 cache, locks:2
29.10 17:45:32 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:45:32 TIME: user.ping 0.09 ms
29.10 17:45:32 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:45:40 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:45:40 TIME: user.ping 0.22 ms
29.10 17:45:40 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:45:48 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:45:48 TIME: user.ping 0.1 ms
29.10 17:45:48 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:45:56 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:45:56 TIME: user.ping 0.08 ms
29.10 17:45:56 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:46:03 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:46:03 TIME: user.ping 0.21 ms
29.10 17:46:03 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:46:11 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:46:11 TIME: user.ping 0.09 ms
29.10 17:46:11 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:46:19 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:46:19 TIME: user.ping 0.17 ms
29.10 17:46:19 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:46:26 TIMER: Check auto-disconnect...
29.10 17:46:26 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:46:26 TIME: user.ping 0.11 ms
29.10 17:46:26 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:46:27 STATS: vdl.0 cache, locks:2
29.10 17:46:34 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:46:34 TIME: user.ping 0.17 ms
29.10 17:46:34 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:46:42 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:46:42 TIME: user.ping 0.15 ms
29.10 17:46:42 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:46:50 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:46:50 TIME: user.ping 0.2 ms
29.10 17:46:50 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:46:57 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:46:57 TIME: user.ping 0.09 ms
29.10 17:46:57 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:47:05 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:47:05 TIME: user.ping 0.1 ms
29.10 17:47:05 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:47:13 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:47:13 TIME: user.ping 0.07 ms
29.10 17:47:13 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:47:21 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:47:21 TIME: user.ping 0.1 ms
29.10 17:47:21 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:47:26 TIMER: Check auto-disconnect...
29.10 17:47:27 STATS: vdl.0 cache, locks:2
29.10 17:47:28 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:47:28 TIME: user.ping 0.07 ms
29.10 17:47:28 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:47:36 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:47:36 TIME: user.ping 0.11 ms
29.10 17:47:36 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:47:44 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:47:44 TIME: user.ping 0.09 ms
29.10 17:47:44 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:47:51 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:47:51 TIME: user.ping 0.09 ms
29.10 17:47:51 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:47:59 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:47:59 TIME: user.ping 0.12 ms
29.10 17:47:59 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:48:19 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
29.10 17:48:19 -<<-: server.login ok
29.10 17:48:19 DB: SELECT * FROM LocalizationStrings
29.10 17:48:19 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:19 TIMER: Starting timer...
29.10 17:48:19 TIMER: Timer running...
29.10 17:48:19 DB: SELECT * FROM GameVars
29.10 17:48:19 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:19 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
29.10 17:48:19 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:19 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
29.10 17:48:19 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:19 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
29.10 17:48:19 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:19 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
29.10 17:48:19 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:19 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
29.10 17:48:19 -<<-: core/quest.getDaily ok
29.10 17:48:19 DB: SELECT * FROM UserAttributeTypes
29.10 17:48:19 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:19 DB: SELECT * FROM UserVariableTypes
29.10 17:48:19 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:19 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
29.10 17:48:19 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:19 DB: SELECT * FROM ItemGroups
29.10 17:48:19 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:19 DB: SELECT * FROM Bundles ORDER BY ID
29.10 17:48:19 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:19 DB: SELECT * FROM BundleItems ORDER BY ID
29.10 17:48:19 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:19 SHOP: loading items...
29.10 17:48:19 ->>-: core/shop.getList { _type => core/shop.getList }
29.10 17:48:19 -<<-: core/shop.getList ok
29.10 17:48:19 SHOP: 0 items loaded (0 sec)
29.10 17:48:19 DB: SELECT * FROM EffectAttributeTypes
29.10 17:48:19 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:19 DB: SELECT * FROM Effects
29.10 17:48:19 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:19 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 17:48:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:19 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 17:48:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:19 DB: SELECT * FROM Badges
29.10 17:48:19 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
29.10 17:48:19 -<<-: core/server.query ok
29.10 17:48:22 NET: Client (conid:87835927) connected to vdl.0 (clients:1)
29.10 17:48:24 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:48:24 TRACE: User not logon yet.
29.10 17:48:32 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:48:32 TRACE: User not logon yet.
29.10 17:48:40 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:48:40 TRACE: User not logon yet.
29.10 17:48:48 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:48:48 TRACE: User not logon yet.
29.10 17:48:55 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:48:55 TRACE: User not logon yet.
29.10 17:49:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:49:03 TRACE: User not logon yet.
29.10 17:49:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:49:11 TRACE: User not logon yet.
29.10 17:49:12 NET: Client (name:null conid:87835927 TCP) disconnected from vdl.0 (clients:0)
29.10 17:49:16 NET: Client (conid:76724294) connected to vdl.0 (clients:1)
29.10 17:49:16 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
29.10 17:49:16 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
29.10 17:49:16 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
29.10 17:49:16 -<<-: core/server.query ok
29.10 17:49:16 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
29.10 17:49:16 -<<-: core/user.isOnlineID ok
29.10 17:49:16 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
29.10 17:49:16 -<<-: core/cache.get ok
29.10 17:49:16 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
29.10 17:49:16 -<<-: core/cache.get ok
29.10 17:49:16 NET: Client login (conid:76724294, id:107, name:uid107)
29.10 17:49:16 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
29.10 17:49:16 -<<-: core/user.loginPost null
29.10 17:49:16 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
29.10 17:49:16 == NET: uid107 ret: user.join { name => uid107, type => user.join }
29.10 17:49:19 TIMER: Check auto-disconnect...
29.10 17:49:19 STATS: vdl.0 cache, locks:2
29.10 17:49:20 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:49:20 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:49:20 TIME: user.ping 0.1 ms
29.10 17:49:24 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
29.10 17:49:24 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:49:24 STATS: vdl.0 cache connection, 26 calls, total 0.0259294509887695 sec spent, avg 1 ms
29.10 17:49:28 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:49:28 TIME: user.ping 0.15 ms
29.10 17:49:28 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:49:36 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:49:36 TIME: user.ping 0.21 ms
29.10 17:49:36 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:49:43 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:49:43 TIME: user.ping 0.17 ms
29.10 17:49:43 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:49:51 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:49:51 TIME: user.ping 0.2 ms
29.10 17:49:51 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:49:59 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:49:59 TIME: user.ping 0.16 ms
29.10 17:49:59 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:50:07 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:50:07 TIME: user.ping 0.12 ms
29.10 17:50:07 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:50:15 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:50:15 TIME: user.ping 0.08 ms
29.10 17:50:15 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:50:19 TIMER: Check auto-disconnect...
29.10 17:50:19 STATS: vdl.0 cache, locks:2
29.10 17:50:22 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:50:22 TIME: user.ping 0.1 ms
29.10 17:50:22 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:50:30 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:50:30 TIME: user.ping 0.2 ms
29.10 17:50:30 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:50:38 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:50:38 TIME: user.ping 0.09 ms
29.10 17:50:38 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:50:46 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:50:46 TIME: user.ping 0.2 ms
29.10 17:50:46 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:50:53 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:50:53 TIME: user.ping 0.13 ms
29.10 17:50:53 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:51:01 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:51:01 TIME: user.ping 0.14 ms
29.10 17:51:01 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:51:09 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:51:09 TIME: user.ping 0.08 ms
29.10 17:51:09 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:51:17 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:51:17 TIME: user.ping 0.16 ms
29.10 17:51:17 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:51:19 TIMER: Check auto-disconnect...
29.10 17:51:19 STATS: vdl.0 cache, locks:2
29.10 17:51:25 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:51:25 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:51:25 TIME: user.ping 0.1 ms
29.10 17:51:32 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:51:32 TIME: user.ping 0.07 ms
29.10 17:51:32 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:51:40 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:51:40 TIME: user.ping 0.07 ms
29.10 17:51:40 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:51:48 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:51:48 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:51:48 TIME: user.ping 0.13 ms
29.10 17:51:56 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:51:56 TIME: user.ping 0.13 ms
29.10 17:51:56 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:52:03 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:52:03 TIME: user.ping 0.11 ms
29.10 17:52:03 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:52:11 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:52:11 TIME: user.ping 0.5 ms
29.10 17:52:11 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:52:19 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:52:19 TIME: user.ping 0.14 ms
29.10 17:52:19 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:52:19 TIMER: Check auto-disconnect...
29.10 17:52:19 STATS: vdl.0 cache, locks:2
29.10 17:52:27 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:52:27 TIME: user.ping 0.21 ms
29.10 17:52:27 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:52:35 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:52:35 TIME: user.ping 0.2 ms
29.10 17:52:35 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:52:42 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:52:42 TIME: user.ping 0.17 ms
29.10 17:52:42 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:52:50 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:52:50 TIME: user.ping 0.13 ms
29.10 17:52:50 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:52:58 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:52:58 TIME: user.ping 0.12 ms
29.10 17:52:58 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:53:06 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:53:06 TIME: user.ping 0.08 ms
29.10 17:53:06 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:53:13 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:53:13 TIME: user.ping 0.24 ms
29.10 17:53:13 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:53:19 TIMER: Check auto-disconnect...
29.10 17:53:19 STATS: vdl.0 cache, locks:2
29.10 17:53:21 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:53:21 TIME: user.ping 0.08 ms
29.10 17:53:21 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:53:29 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:53:29 TIME: user.ping 0.19 ms
29.10 17:53:29 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:53:37 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:53:37 TIME: user.ping 0.13 ms
29.10 17:53:37 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:53:45 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:53:45 TIME: user.ping 0.09 ms
29.10 17:53:45 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:53:52 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:53:52 TIME: user.ping 0.11 ms
29.10 17:53:52 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:54:00 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:54:00 TIME: user.ping 0.13 ms
29.10 17:54:00 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:54:08 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:54:08 TIME: user.ping 0.08 ms
29.10 17:54:08 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:54:16 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:54:16 TIME: user.ping 0.08 ms
29.10 17:54:16 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:54:19 TIMER: Check auto-disconnect...
29.10 17:54:19 STATS: vdl.0 cache, locks:2
29.10 17:54:23 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:54:23 TIME: user.ping 0.09 ms
29.10 17:54:23 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:54:31 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:54:31 TIME: user.ping 0.13 ms
29.10 17:54:31 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:54:39 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:54:39 TIME: user.ping 0.09 ms
29.10 17:54:39 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:54:47 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:54:47 TIME: user.ping 0.1 ms
29.10 17:54:47 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:54:55 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:54:55 TIME: user.ping 0.12 ms
29.10 17:54:55 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:55:02 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:55:02 TIME: user.ping 0.09 ms
29.10 17:55:02 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:56:11 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
29.10 17:56:11 -<<-: server.login ok
29.10 17:56:11 DB: SELECT * FROM LocalizationStrings
29.10 17:56:11 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 TIMER: Starting timer...
29.10 17:56:11 TIMER: Timer running...
29.10 17:56:11 DB: SELECT * FROM GameVars
29.10 17:56:11 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
29.10 17:56:11 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
29.10 17:56:11 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
29.10 17:56:11 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
29.10 17:56:11 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
29.10 17:56:11 -<<-: core/quest.getDaily ok
29.10 17:56:11 DB: SELECT * FROM UserAttributeTypes
29.10 17:56:11 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 DB: SELECT * FROM UserVariableTypes
29.10 17:56:11 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
29.10 17:56:11 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 DB: SELECT * FROM ItemGroups
29.10 17:56:11 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 DB: SELECT * FROM Bundles ORDER BY ID
29.10 17:56:11 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 DB: SELECT * FROM BundleItems ORDER BY ID
29.10 17:56:11 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 SHOP: loading items...
29.10 17:56:11 ->>-: core/shop.getList { _type => core/shop.getList }
29.10 17:56:11 -<<-: core/shop.getList ok
29.10 17:56:11 SHOP: 0 items loaded (0 sec)
29.10 17:56:11 DB: SELECT * FROM EffectAttributeTypes
29.10 17:56:11 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 DB: SELECT * FROM Effects
29.10 17:56:11 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
29.10 17:56:11 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
29.10 17:56:11 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 DB: SELECT * FROM Badges
29.10 17:56:11 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
29.10 17:56:11 -<<-: core/server.query ok
29.10 17:56:11 NET: Client (conid:5642813) connected to vdl.0 (clients:1)
29.10 17:56:13 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:56:13 TRACE: User not logon yet.
29.10 17:56:21 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:56:21 TRACE: User not logon yet.
29.10 17:56:29 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:56:29 TRACE: User not logon yet.
29.10 17:56:37 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
29.10 17:56:37 TRACE: User not logon yet.
29.10 17:56:44 NET: Client (name:null conid:5642813 TCP) disconnected from vdl.0 (clients:0)
29.10 17:57:11 TIMER: Check auto-disconnect...
29.10 17:57:11 STATS: vdl.0 cache, locks:0
29.10 17:57:40 NET: Client (conid:6853996) connected to vdl.0 (clients:1)
29.10 17:57:46 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTEz }
29.10 17:57:46 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113'
29.10 17:57:46 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid113' AND Password = E'uid113', _type => core/server.query }
29.10 17:57:46 -<<-: core/server.query ok
29.10 17:57:46 STATS: vdl.0 cache connection, 21 calls, total 0.0232517719268799 sec spent, avg 1.11 ms
29.10 17:57:46 ->>-: core/user.isOnlineID { id => 113, _type => core/user.isOnlineID }
29.10 17:57:46 -<<-: core/user.isOnlineID ok
29.10 17:57:46 ->>-: core/cache.get { type => user, v => -1, id => 113, _type => core/cache.get }
29.10 17:57:46 -<<-: core/cache.get ok
29.10 17:57:46 ->>-: core/cache.get { type => questdata, v => -1, id => 113, _type => core/cache.get }
29.10 17:57:46 -<<-: core/cache.get ok
29.10 17:57:46 NET: Client login (conid:6853996, id:113, name:uid113)
29.10 17:57:46 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 113, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
29.10 17:57:46 -<<-: core/user.loginPost null
29.10 17:57:46 == NET: uid113 ret: user.login { name => uid113, type => user.login, errorCode => ok, id => 113 }
29.10 17:57:46 == NET: uid113 ret: user.join { name => uid113, type => user.join }
29.10 17:57:51 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 113, _type => core/cache.update }
29.10 17:57:51 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.10 17:57:58 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:57:58 TIME: user.ping 0.13 ms
29.10 17:57:58 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:58:04 ++ NET: uid113 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:58:04 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:58:04 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 17:59, startdate => 2016-29-10 17:59 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:58:04 TIME: tournament.getAvailableTournament 3.5 ms
29.10 17:58:04 == NET: uid113 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 17:59, startdate => 2016-29-10 17:59 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:58:11 TIMER: Check auto-disconnect...
29.10 17:58:11 STATS: vdl.0 cache, locks:2
29.10 17:58:19 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:58:19 TIME: user.ping 0.12 ms
29.10 17:58:19 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:58:45 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:58:45 TIME: user.ping 0.12 ms
29.10 17:58:45 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:58:49 ++ NET: uid113 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
29.10 17:58:49 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:58:49 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 17:59, startdate => 2016-29-10 17:59 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:58:49 STATS: vdl.0 cache connection, 28 calls, total 0.035294771194458 sec spent, avg 1.26 ms
29.10 17:58:49 TIME: tournament.getAvailableTournament 4.26 ms
29.10 17:58:49 == NET: uid113 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid107, id => 107 },{ name => uid113, id => 113 }], battleActive => null, rounddate => 2016-29-10 17:59, startdate => 2016-29-10 17:59 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
29.10 17:59:06 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:59:06 TIME: user.ping 0.13 ms
29.10 17:59:06 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:59:11 TIMER: Check auto-disconnect...
29.10 17:59:11 STATS: vdl.0 cache, locks:2
29.10 17:59:11 -<<-: tournament.enemyEvent { data => { name => uid113, tournamentId => 1, enemy.id => 107, enemy.name => uid107, round => 1, roundDate => 2016-29-10 17:59, id => 113, enemy.num => 2, battleId => 104, player => 1 }, _isNotify => true, id => 113, _type => tournament.enemyEvent }
29.10 17:59:11 == NET: uid113 ret: tournament.enemy { data => { name => uid113, tournamentId => 1, enemy.id => 107, enemy.name => uid107, round => 1, roundDate => 2016-29-10 17:59, id => 113, enemy.num => 2, battleId => 104, player => 1 }, type => tournament.enemy }
29.10 17:59:30 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:59:30 TIME: user.ping 0.14 ms
29.10 17:59:30 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
29.10 17:59:55 ++ NET: uid113 req: user.ping { messageType => user.ping, msg => ok }
29.10 17:59:55 TIME: user.ping 0.24 ms
29.10 17:59:55 == NET: uid113 ret: user.ping { type => user.ping, errorCode => ok }
