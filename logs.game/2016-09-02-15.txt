02.09 15:05:12 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 15:05:12 -<<-: server.login ok
02.09 15:05:12 DB: SELECT * FROM LocalizationStrings
02.09 15:05:12 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 TIMER: Starting timer...
02.09 15:05:12 DB: SELECT * FROM GameVars
02.09 15:05:12 TIMER: Timer running...
02.09 15:05:12 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 15:05:12 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 15:05:12 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 15:05:12 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 15:05:12 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 15:05:12 -<<-: core/quest.getDaily ok
02.09 15:05:12 DB: SELECT * FROM UserAttributeTypes
02.09 15:05:12 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 DB: SELECT * FROM UserVariableTypes
02.09 15:05:12 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 15:05:12 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 DB: SELECT * FROM ItemGroups
02.09 15:05:12 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 DB: SELECT * FROM Bundles ORDER BY ID
02.09 15:05:12 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 15:05:12 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 SHOP: loading items...
02.09 15:05:12 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 15:05:12 -<<-: core/shop.getList ok
02.09 15:05:12 SHOP: 0 items loaded (0 sec)
02.09 15:05:12 DB: SELECT * FROM EffectAttributeTypes
02.09 15:05:12 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 DB: SELECT * FROM Effects
02.09 15:05:12 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
02.09 15:05:12 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
02.09 15:05:12 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 DB: SELECT * FROM Badges
02.09 15:05:12 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
02.09 15:05:12 -<<-: core/server.query ok
02.09 15:05:12 TIMER: Check auto-disconnect...
02.09 15:05:12 STATS: vdl.0 cache, locks:0
02.09 15:05:12 TIMER: Check auto-disconnect...
02.09 15:05:12 STATS: vdl.0 cache, locks:0
02.09 15:07:29 NET: Client (conid:66161864) connected to vdl.0 (clients:1)
02.09 15:07:29 NET: Client (name:null conid:66161864 TCP) disconnected from vdl.0 (clients:0)
02.09 15:07:29 NET: Client (conid:30901913) connected to vdl.0 (clients:1)
02.09 15:21:58 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 15:21:58 -<<-: server.login ok
02.09 15:21:58 DB: SELECT * FROM LocalizationStrings
02.09 15:21:58 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 15:21:58 -<<-: core/server.query ok
02.09 15:21:58 TIMER: Starting timer...
02.09 15:21:58 TIMER: Timer running...
02.09 15:21:58 DB: SELECT * FROM GameVars
02.09 15:21:58 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 15:21:58 -<<-: core/server.query ok
02.09 15:21:58 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 15:21:58 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 15:21:58 -<<-: core/server.query ok
02.09 15:21:58 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 15:21:58 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 15:21:58 -<<-: core/server.query ok
02.09 15:21:58 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 15:21:58 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 15:21:58 -<<-: core/server.query ok
02.09 15:21:58 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 15:21:58 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 15:21:58 -<<-: core/server.query ok
02.09 15:21:58 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 15:21:58 -<<-: core/quest.getDaily ok
02.09 15:21:58 DB: SELECT * FROM UserAttributeTypes
02.09 15:21:58 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 15:21:58 -<<-: core/server.query ok
02.09 15:21:58 DB: SELECT * FROM UserVariableTypes
02.09 15:21:58 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 15:21:58 -<<-: core/server.query ok
02.09 15:21:58 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 15:21:58 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 15:21:58 -<<-: core/server.query ok
02.09 15:21:58 DB: SELECT * FROM ItemGroups
02.09 15:21:58 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 15:21:58 -<<-: core/server.query ok
02.09 15:21:58 DB: SELECT * FROM Bundles ORDER BY ID
02.09 15:21:58 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 15:21:58 -<<-: core/server.query ok
02.09 15:21:58 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 15:21:58 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 15:21:58 -<<-: core/server.query ok
02.09 15:21:58 SHOP: loading items...
02.09 15:21:58 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 15:21:58 -<<-: core/shop.getList ok
02.09 15:21:58 SHOP: 0 items loaded (0 sec)
02.09 15:21:58 DB: SELECT * FROM EffectAttributeTypes
02.09 15:21:58 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 15:21:58 -<<-: core/server.query ok
02.09 15:21:58 DB: SELECT * FROM Effects
02.09 15:21:58 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 15:21:58 -<<-: core/server.query ok
02.09 15:21:58 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(02.09 15:22:03 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 15:22:03 -<<-: server.login ok
02.09 15:22:03 DB: SELECT * FROM LocalizationStrings
02.09 15:22:03 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 TIMER: Starting timer...
02.09 15:22:03 TIMER: Timer running...
02.09 15:22:03 DB: SELECT * FROM GameVars
02.09 15:22:03 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 15:22:03 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 15:22:03 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 15:22:03 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 15:22:03 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 15:22:03 -<<-: core/quest.getDaily ok
02.09 15:22:03 DB: SELECT * FROM UserAttributeTypes
02.09 15:22:03 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 DB: SELECT * FROM UserVariableTypes
02.09 15:22:03 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 15:22:03 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 DB: SELECT * FROM ItemGroups
02.09 15:22:03 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 DB: SELECT * FROM Bundles ORDER BY ID
02.09 15:22:03 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 15:22:03 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 SHOP: loading items...
02.09 15:22:03 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 15:22:03 -<<-: core/shop.getList ok
02.09 15:22:03 SHOP: 0 items loaded (0 sec)
02.09 15:22:03 DB: SELECT * FROM EffectAttributeTypes
02.09 15:22:03 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 DB: SELECT * FROM Effects
02.09 15:22:03 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
02.09 15:22:03 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
02.09 15:22:03 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 DB: SELECT * FROM Badges
02.09 15:22:03 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
02.09 15:22:03 -<<-: core/server.query ok
02.09 15:22:03 TIMER: Check auto-disconnect...
02.09 15:22:03 STATS: vdl.0 cache, locks:0
02.09 15:22:03 TIMER: Check auto-disconnect...
02.09 15:22:03 STATS: vdl.0 cache, locks:0
02.09 15:22:03 TIMER: Check auto-disconnect...
02.09 15:22:03 STATS: vdl.0 cache, locks:0
02.09 15:25:20 NET: Client (conid:31526645) connected to vdl.0 (clients:1)
02.09 15:25:20 NET: Client (name:null conid:31526645 TCP) disconnected from vdl.0 (clients:0)
02.09 15:25:21 NET: Client (conid:87714212) connected to vdl.0 (clients:1)
02.09 15:25:26 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
02.09 15:25:26 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
02.09 15:25:26 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
02.09 15:25:26 -<<-: core/server.query ok
02.09 15:25:26 STATS: vdl.0 cache connection, 21 calls, total 0.0278832912445068 sec spent, avg 1.33 ms
02.09 15:25:26 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
02.09 15:25:26 -<<-: core/user.isOnlineID ok
02.09 15:25:26 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
02.09 15:25:26 -<<-: core/cache.get ok
02.09 15:25:26 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
02.09 15:25:26 -<<-: core/cache.get ok
02.09 15:25:26 NET: Client login (conid:87714212, id:2, name:test1)
02.09 15:25:26 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
02.09 15:25:26 -<<-: core/user.loginPost null
02.09 15:25:26 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
02.09 15:25:26 == NET: test1 ret: user.join { name => test1, type => user.join }
02.09 15:25:26 ++ NET: test1 req: battle.find { messageType => battle.find }
02.09 15:25:26 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 15:25:26 -<<-: vdl/cache.battle.find { list => {}, count => 0, errorCode => not, _type => vdl/cache.battle.find }
02.09 15:25:26 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
02.09 15:25:26 -<<-: vdl/cache.battle.create { room => 23, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 15:25:26 TIME: battle.find 34.65 ms
02.09 15:25:26 == NET: test1 ret: battle.find { room => 23, type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 15:25:32 ++ NET: test1 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 23, name => throw, side => 2, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 15:25:32 TIME: battle.sendtask 0.03 ms
02.09 15:25:33 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
02.09 15:25:33 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
