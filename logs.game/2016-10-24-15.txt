24.10 15:00:02 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:00:02 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:00:02 TIME: user.ping 0.23 ms
24.10 15:00:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:00:03 TIME: user.ping 0.19 ms
24.10 15:00:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:00:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:00:13 TIME: user.ping 0.18 ms
24.10 15:00:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:00:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:00:24 TIME: user.ping 0.32 ms
24.10 15:00:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:00:27 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:00:27 TIME: user.ping 0.13 ms
24.10 15:00:27 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:00:32 TIMER: Check auto-disconnect...
24.10 15:00:33 STATS: vdl.0 cache, locks:4
24.10 15:00:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:00:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:00:34 TIME: user.ping 0.14 ms
24.10 15:00:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:00:45 TIME: user.ping 0.21 ms
24.10 15:00:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:00:51 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:00:51 TIME: user.ping 0.18 ms
24.10 15:00:51 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:00:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:00:55 TIME: user.ping 0.15 ms
24.10 15:00:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:01:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:01:06 TIME: user.ping 0.13 ms
24.10 15:01:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:01:15 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:01:15 TIME: user.ping 0.18 ms
24.10 15:01:15 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:01:32 TIMER: Check auto-disconnect...
24.10 15:01:33 STATS: vdl.0 cache, locks:4
24.10 15:01:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:01:38 TIME: user.ping 0.16 ms
24.10 15:01:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:01:40 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:01:40 TIME: user.ping 0.12 ms
24.10 15:01:40 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:02:04 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:02:04 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:02:04 TIME: user.ping 0.19 ms
24.10 15:02:29 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:02:29 TIME: user.ping 0.15 ms
24.10 15:02:29 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:02:32 TIMER: Check auto-disconnect...
24.10 15:02:33 STATS: vdl.0 cache, locks:4
24.10 15:02:53 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:02:53 TIME: user.ping 0.17 ms
24.10 15:02:53 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:03:17 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:03:17 TIME: user.ping 0.24 ms
24.10 15:03:17 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:03:32 TIMER: Check auto-disconnect...
24.10 15:03:33 STATS: vdl.0 cache, locks:4
24.10 15:03:42 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:03:42 TIME: user.ping 0.17 ms
24.10 15:03:42 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:03:44 ++ NET: Aimer req: battle.end { roomId => 0, scoreSecondPlayer => 0, messageType => battle.end, scoreFirstPlayer => 0 }
24.10 15:03:44 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 15:03:44 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
24.10 15:03:44 STATS: vdl.0 cache connection, 36 calls, total 0.0421876907348633 sec spent, avg 1.17 ms
24.10 15:03:44 TRACE: battle.end : cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 15:03:44 TRACE: battle.end : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 214
Called from modules/VDLBattleModule.hx line 53
Called from modules/VDLBattleModule.hx line 35
Called from snipe/slave/Server.hx line 1176
24.10 15:03:44 NET: Client (name:Aimer conid:4914665 TCP) disconnected from vdl.0 (clients:1)
24.10 15:03:44 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
24.10 15:03:44 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
24.10 15:03:44 -<<-: core/server.query { list => {{ id => 59 }}, errorCode => ok, _type => core/server.query }
24.10 15:03:44 ->>-: vdl/cache.battle.infoRoom { roomId => 59, _type => vdl/cache.battle.infoRoom }
24.10 15:03:44 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:03:44 ->>-: vdl/cache.battle.deleteRoom { roomId => 59, _type => vdl/cache.battle.deleteRoom }
24.10 15:03:44 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
24.10 15:03:44 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
24.10 15:03:44 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
24.10 15:03:44 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
24.10 15:03:44 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 15:03:44 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
24.10 15:03:44 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
24.10 15:03:44 == NET: test1 ret: battle.end { type => battle.end }
24.10 15:04:17 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:04:17 TIME: user.ping 0.17 ms
24.10 15:04:17 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:04:32 TIMER: Check auto-disconnect...
24.10 15:04:33 STATS: vdl.0 cache, locks:2
24.10 15:04:54 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:04:54 TIME: user.ping 0.12 ms
24.10 15:04:54 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:05:31 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:05:31 TIME: user.ping 0.16 ms
24.10 15:05:31 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:05:32 TIMER: Check auto-disconnect...
24.10 15:05:33 STATS: vdl.0 cache, locks:2
24.10 15:05:50 NET: Client (name:test1 conid:93737400 TCP) disconnected from vdl.0 (clients:0)
24.10 15:05:50 DB: SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true
24.10 15:05:50 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true, _type => core/server.query }
24.10 15:05:50 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
24.10 15:05:50 STATS: vdl.0 cache connection, 43 calls, total 0.0632755756378174 sec spent, avg 1.47 ms
24.10 15:05:50 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 15:05:50 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
24.10 15:05:50 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 15:05:50 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 214
Called from modules/VDLBattleModule.hx line 227
Called from snipe/slave/Server.hx line 994
24.10 15:05:50 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
24.10 15:05:50 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
24.10 15:05:50 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
24.10 15:05:50 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 15:05:50 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
24.10 15:05:50 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
24.10 15:06:08 NET: Client (conid:73100035) connected to vdl.0 (clients:1)
24.10 15:06:12 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
24.10 15:06:12 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
24.10 15:06:12 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
24.10 15:06:12 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
24.10 15:06:12 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
24.10 15:06:12 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
24.10 15:06:12 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
24.10 15:06:12 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1477308461, lastLoginDate => 298, lastLoadDate => 1025 }, effects => { list => [] } }}, version => 0, id => 2 } }
24.10 15:06:12 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
24.10 15:06:12 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
24.10 15:06:12 NET: Client login (conid:73100035, id:2, name:test1)
24.10 15:06:12 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
24.10 15:06:12 -<<-: core/user.loginPost { _type => core/user.loginPost }
24.10 15:06:12 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
24.10 15:06:12 == NET: test1 ret: user.join { name => test1, type => user.join }
24.10 15:06:18 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
24.10 15:06:18 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 15:06:18 ++ NET: test1 req: user.data { messageType => user.data }
24.10 15:06:18 ->>-: vdl/cache.user.getData { userId => 2, _type => vdl/cache.user.getData }
24.10 15:06:18 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:06:18 TIME: user.data 0.5 ms
24.10 15:06:18 == NET: test1 ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:06:23 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:06:23 TIME: user.ping 0.14 ms
24.10 15:06:23 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:06:32 TIMER: Check auto-disconnect...
24.10 15:06:33 STATS: vdl.0 cache, locks:2
24.10 15:06:43 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:06:43 TIME: user.ping 0.21 ms
24.10 15:06:43 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:07:03 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:07:03 TIME: user.ping 0.07 ms
24.10 15:07:03 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:07:12 NET: Client (conid:92171759) connected to vdl.0 (clients:2)
24.10 15:07:13 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
24.10 15:07:13 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
24.10 15:07:13 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
24.10 15:07:13 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
24.10 15:07:13 STATS: vdl.0 cache connection, 55 calls, total 0.0726838111877441 sec spent, avg 1.32 ms
24.10 15:07:13 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
24.10 15:07:13 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
24.10 15:07:13 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
24.10 15:07:13 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477308408, lastLoginDate => 298, lastLoadDate => 1025 }, effects => { list => [] } }}, version => 0, id => 76 } }
24.10 15:07:13 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
24.10 15:07:13 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 76 } }
24.10 15:07:13 NET: Client login (conid:92171759, id:76, name:Aimer)
24.10 15:07:13 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
24.10 15:07:13 -<<-: core/user.loginPost { _type => core/user.loginPost }
24.10 15:07:13 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
24.10 15:07:13 == NET: test1 ret: user.join { name => Aimer, type => user.join }
24.10 15:07:13 == NET: Aimer ret: user.join { name => test1, type => user.join }
24.10 15:07:13 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
24.10 15:07:14 ++ NET: Aimer req: user.data { messageType => user.data }
24.10 15:07:14 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
24.10 15:07:14 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:07:14 TIME: user.data 0.52 ms
24.10 15:07:14 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:07:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:07:16 TIME: user.ping 0.08 ms
24.10 15:07:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:07:23 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
24.10 15:07:23 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 15:07:23 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:07:23 TIME: user.ping 0.08 ms
24.10 15:07:23 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:07:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:07:24 TIME: user.ping 0.08 ms
24.10 15:07:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:07:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:07:31 TIME: user.ping 0.09 ms
24.10 15:07:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:07:32 TIMER: Check auto-disconnect...
24.10 15:07:33 STATS: vdl.0 cache, locks:4
24.10 15:07:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:07:38 TIME: user.ping 0.14 ms
24.10 15:07:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:07:43 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:07:43 TIME: user.ping 0.08 ms
24.10 15:07:43 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:07:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:07:45 TIME: user.ping 0.08 ms
24.10 15:07:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:07:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:07:52 TIME: user.ping 0.18 ms
24.10 15:07:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:07:54 ++ NET: Aimer req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
24.10 15:07:54 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
24.10 15:07:54 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => Aimer, id => 76 },{ name => test1, id => 2 }], battleActive => [59], rounddate => 2016-24-10 14:55, startdate => 2016-24-10 14:55 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 15:07:54 TIME: tournament.getAvailableTournament 2.4 ms
24.10 15:07:54 == NET: Aimer ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => Aimer, id => 76 },{ name => test1, id => 2 }], battleActive => [59], rounddate => 2016-24-10 14:55, startdate => 2016-24-10 14:55 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 15:08:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:08:00 TIME: user.ping 0.07 ms
24.10 15:08:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:08:03 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:08:03 TIME: user.ping 0.09 ms
24.10 15:08:03 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:08:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:08:08 TIME: user.ping 0.15 ms
24.10 15:08:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:08:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:08:15 TIME: user.ping 0.2 ms
24.10 15:08:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:08:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:08:23 TIME: user.ping 0.18 ms
24.10 15:08:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:08:23 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:08:23 TIME: user.ping 0.1 ms
24.10 15:08:23 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:08:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:08:30 TIME: user.ping 0.21 ms
24.10 15:08:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:08:32 TIMER: Check auto-disconnect...
24.10 15:08:33 STATS: vdl.0 cache, locks:4
24.10 15:08:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:08:37 TIME: user.ping 0.12 ms
24.10 15:08:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:08:43 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:08:43 TIME: user.ping 0.19 ms
24.10 15:08:43 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:08:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:08:45 TIME: user.ping 0.15 ms
24.10 15:08:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:09:03 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:09:03 TIME: user.ping 0.17 ms
24.10 15:09:03 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:09:16 ++ NET: Aimer req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
24.10 15:09:16 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
24.10 15:09:16 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => Aimer, id => 76 },{ name => test1, id => 2 }], battleActive => [59], rounddate => 2016-24-10 15:15, startdate => 2016-24-10 15:15 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 15:09:16 STATS: vdl.0 cache connection, 63 calls, total 0.0851576328277588 sec spent, avg 1.35 ms
24.10 15:09:16 TIME: tournament.getAvailableTournament 4.55 ms
24.10 15:09:16 == NET: Aimer ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => Aimer, id => 76 },{ name => test1, id => 2 }], battleActive => [59], rounddate => 2016-24-10 15:15, startdate => 2016-24-10 15:15 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 15:09:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:09:20 TIME: user.ping 0.17 ms
24.10 15:09:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:09:24 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:09:24 TIME: user.ping 0.15 ms
24.10 15:09:24 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:09:28 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:09:28 TIME: user.ping 0.11 ms
24.10 15:09:28 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:09:32 TIMER: Check auto-disconnect...
24.10 15:09:33 STATS: vdl.0 cache, locks:4
24.10 15:09:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:09:35 TIME: user.ping 0.07 ms
24.10 15:09:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:09:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:09:42 TIME: user.ping 0.13 ms
24.10 15:09:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:09:44 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:09:44 TIME: user.ping 0.11 ms
24.10 15:09:44 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:09:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:09:50 TIME: user.ping 0.17 ms
24.10 15:09:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:09:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:09:57 TIME: user.ping 0.14 ms
24.10 15:09:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:10:04 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:10:04 TIME: user.ping 0.12 ms
24.10 15:10:04 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:10:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:10:04 TIME: user.ping 0.16 ms
24.10 15:10:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:10:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:10:11 TIME: user.ping 0.13 ms
24.10 15:10:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:10:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:10:19 TIME: user.ping 0.13 ms
24.10 15:10:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:10:24 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:10:24 TIME: user.ping 0.13 ms
24.10 15:10:24 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:10:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:10:26 TIME: user.ping 0.11 ms
24.10 15:10:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:10:32 TIMER: Check auto-disconnect...
24.10 15:10:33 STATS: vdl.0 cache, locks:4
24.10 15:10:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:10:33 TIME: user.ping 0.15 ms
24.10 15:10:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:10:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:10:40 TIME: user.ping 0.23 ms
24.10 15:10:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:10:44 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:10:44 TIME: user.ping 0.08 ms
24.10 15:10:44 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:10:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:10:48 TIME: user.ping 0.1 ms
24.10 15:10:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:10:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:10:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:10:55 TIME: user.ping 0.22 ms
24.10 15:11:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:11:02 TIME: user.ping 0.49 ms
24.10 15:11:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:11:04 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:11:04 TIME: user.ping 0.11 ms
24.10 15:11:04 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:11:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:11:09 TIME: user.ping 0.09 ms
24.10 15:11:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:11:17 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:11:17 TIME: user.ping 0.14 ms
24.10 15:11:17 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:11:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:11:24 TIME: user.ping 0.21 ms
24.10 15:11:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:11:24 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:11:24 TIME: user.ping 0.21 ms
24.10 15:11:24 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:11:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:11:31 TIME: user.ping 0.15 ms
24.10 15:11:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:11:32 TIMER: Check auto-disconnect...
24.10 15:11:33 STATS: vdl.0 cache, locks:4
24.10 15:11:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:11:38 TIME: user.ping 0.16 ms
24.10 15:11:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:11:44 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:11:44 TIME: user.ping 0.14 ms
24.10 15:11:44 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:11:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:11:46 TIME: user.ping 0.16 ms
24.10 15:11:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:11:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:11:53 TIME: user.ping 0.09 ms
24.10 15:11:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:12:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:12:00 TIME: user.ping 0.15 ms
24.10 15:12:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:12:04 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:12:04 TIME: user.ping 0.1 ms
24.10 15:12:04 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:12:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:12:07 TIME: user.ping 0.22 ms
24.10 15:12:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:12:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:12:15 TIME: user.ping 0.13 ms
24.10 15:12:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:12:22 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:12:22 TIME: user.ping 0.2 ms
24.10 15:12:22 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:12:24 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:12:24 TIME: user.ping 0.17 ms
24.10 15:12:24 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:12:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:12:29 TIME: user.ping 0.16 ms
24.10 15:12:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:12:32 TIMER: Check auto-disconnect...
24.10 15:12:33 STATS: vdl.0 cache, locks:4
24.10 15:12:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:12:36 TIME: user.ping 0.1 ms
24.10 15:12:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:12:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:12:44 TIME: user.ping 0.08 ms
24.10 15:12:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:12:44 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:12:44 TIME: user.ping 0.09 ms
24.10 15:12:44 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:12:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:12:51 TIME: user.ping 0.09 ms
24.10 15:12:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:12:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:12:58 TIME: user.ping 0.09 ms
24.10 15:12:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:13:04 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:13:04 TIME: user.ping 0.11 ms
24.10 15:13:04 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:13:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:13:05 TIME: user.ping 0.09 ms
24.10 15:13:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:13:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:13:13 TIME: user.ping 0.12 ms
24.10 15:13:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:13:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:13:20 TIME: user.ping 0.13 ms
24.10 15:13:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:13:24 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:13:24 TIME: user.ping 0.15 ms
24.10 15:13:24 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:13:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:13:27 TIME: user.ping 0.12 ms
24.10 15:13:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:13:32 TIMER: Check auto-disconnect...
24.10 15:13:33 STATS: vdl.0 cache, locks:4
24.10 15:13:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:13:34 TIME: user.ping 0.15 ms
24.10 15:13:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:13:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:13:41 TIME: user.ping 0.17 ms
24.10 15:13:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:13:44 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:13:44 TIME: user.ping 0.13 ms
24.10 15:13:44 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:13:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:13:49 TIME: user.ping 0.2 ms
24.10 15:13:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:13:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:13:56 TIME: user.ping 0.19 ms
24.10 15:13:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:14:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:14:03 TIME: user.ping 0.15 ms
24.10 15:14:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:14:04 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:14:04 TIME: user.ping 0.16 ms
24.10 15:14:04 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:14:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:14:10 TIME: user.ping 0.13 ms
24.10 15:14:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:14:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:14:18 TIME: user.ping 0.18 ms
24.10 15:14:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:14:25 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:14:25 TIME: user.ping 0.12 ms
24.10 15:14:25 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:14:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:14:25 TIME: user.ping 0.15 ms
24.10 15:14:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:14:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:14:32 TIME: user.ping 0.08 ms
24.10 15:14:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:14:32 TIMER: Check auto-disconnect...
24.10 15:14:33 STATS: vdl.0 cache, locks:4
24.10 15:14:39 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:14:39 TIME: user.ping 0.07 ms
24.10 15:14:39 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:14:45 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:14:45 TIME: user.ping 0.17 ms
24.10 15:14:45 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:14:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:14:47 TIME: user.ping 0.16 ms
24.10 15:14:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:14:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:14:54 TIME: user.ping 0.07 ms
24.10 15:14:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:15:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:15:01 TIME: user.ping 0.08 ms
24.10 15:15:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:15:05 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:15:05 TIME: user.ping 0.13 ms
24.10 15:15:05 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:15:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:15:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:15:09 TIME: user.ping 0.07 ms
24.10 15:15:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:15:16 TIME: user.ping 0.1 ms
24.10 15:15:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:15:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:15:23 TIME: user.ping 0.09 ms
24.10 15:15:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:15:25 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:15:25 TIME: user.ping 0.09 ms
24.10 15:15:25 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:15:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:15:31 TIME: user.ping 0.1 ms
24.10 15:15:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:15:32 TIMER: Check auto-disconnect...
24.10 15:15:33 STATS: vdl.0 cache, locks:4
24.10 15:15:33 -<<-: tournament.enemyEvent { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 15:15, id => 2, enemy.num => 2, battleId => 60, player => 1 }, _isNotify => true, id => 2, _type => tournament.enemyEvent }
24.10 15:15:33 -<<-: tournament.enemyEvent { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 15:15, id => 76, enemy.num => 1, battleId => 60, player => 2 }, _isNotify => true, id => 76, _type => tournament.enemyEvent }
24.10 15:15:33 == NET: test1 ret: tournament.enemy { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 15:15, id => 2, enemy.num => 2, battleId => 60, player => 1 }, type => tournament.enemy }
24.10 15:15:33 == NET: Aimer ret: tournament.enemy { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 15:15, id => 76, enemy.num => 1, battleId => 60, player => 2 }, type => tournament.enemy }
24.10 15:15:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:15:42 TIME: user.ping 0.08 ms
24.10 15:15:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:15:48 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:15:48 TIME: user.ping 0.1 ms
24.10 15:15:48 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:15:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:15:52 TIME: user.ping 0.09 ms
24.10 15:15:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:16:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:16:03 TIME: user.ping 0.08 ms
24.10 15:16:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:16:11 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:16:11 TIME: user.ping 0.08 ms
24.10 15:16:11 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:16:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:16:14 TIME: user.ping 0.17 ms
24.10 15:16:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:16:18 ++ NET: test1 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 60, name => throw, side => 2, dices => 323502, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 15:16:18 ->>-: vdl/cache.battle.infoRoom { roomId => 60, _type => vdl/cache.battle.infoRoom }
24.10 15:16:18 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:16:18 STATS: vdl.0 cache connection, 64 calls, total 0.0858755111694336 sec spent, avg 1.34 ms
24.10 15:16:18 TIME: battle.sendtask 0.84 ms
24.10 15:16:18 == NET: Aimer ret: null { dice => 0, from => (0.0, 0.0), roomId => 60, name => throw, side => 2, type => battle.task, dices => 323502, messageType => battle.sendtask, to => (0.0, 0.0), _type => battle.task, diceID => 0 }
24.10 15:16:18 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 15:16:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:16:25 TIME: user.ping 0.08 ms
24.10 15:16:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:16:32 TIMER: Check auto-disconnect...
24.10 15:16:33 STATS: vdl.0 cache, locks:4
24.10 15:16:35 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:16:35 TIME: user.ping 0.09 ms
24.10 15:16:35 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:16:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:16:35 TIME: user.ping 0.09 ms
24.10 15:16:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:16:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:16:49 TIME: user.ping 0.08 ms
24.10 15:16:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:16:59 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:16:59 TIME: user.ping 0.14 ms
24.10 15:16:59 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:17:00 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:17:00 TIME: user.ping 0.08 ms
24.10 15:17:00 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:17:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:17:10 TIME: user.ping 0.08 ms
24.10 15:17:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:17:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:17:20 TIME: user.ping 0.09 ms
24.10 15:17:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:17:24 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:17:24 TIME: user.ping 0.07 ms
24.10 15:17:24 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:17:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:17:30 TIME: user.ping 0.08 ms
24.10 15:17:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:17:32 TIMER: Check auto-disconnect...
24.10 15:17:33 STATS: vdl.0 cache, locks:4
24.10 15:18:29 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
24.10 15:18:29 -<<-: server.login ok
24.10 15:18:29 DB: SELECT * FROM LocalizationStrings
24.10 15:18:29 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:29 TIMER: Starting timer...
24.10 15:18:29 TIMER: Timer running...
24.10 15:18:29 DB: SELECT * FROM GameVars
24.10 15:18:29 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:29 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
24.10 15:18:29 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:29 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
24.10 15:18:29 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:29 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
24.10 15:18:29 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:29 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
24.10 15:18:29 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:29 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
24.10 15:18:29 -<<-: core/quest.getDaily ok
24.10 15:18:29 DB: SELECT * FROM UserAttributeTypes
24.10 15:18:29 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:29 DB: SELECT * FROM UserVariableTypes
24.10 15:18:29 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:29 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
24.10 15:18:29 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:29 DB: SELECT * FROM ItemGroups
24.10 15:18:29 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:29 DB: SELECT * FROM Bundles ORDER BY ID
24.10 15:18:29 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:29 DB: SELECT * FROM BundleItems ORDER BY ID
24.10 15:18:29 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:29 SHOP: loading items...
24.10 15:18:29 ->>-: core/shop.getList { _type => core/shop.getList }
24.10 15:18:29 -<<-: core/shop.getList ok
24.10 15:18:29 SHOP: 0 items loaded (0 sec)
24.10 15:18:29 DB: SELECT * FROM EffectAttributeTypes
24.10 15:18:29 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:29 DB: SELECT * FROM Effects
24.10 15:18:29 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:29 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
24.10 15:18:29 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:29 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
24.10 15:18:29 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:29 DB: SELECT * FROM Badges
24.10 15:18:29 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
24.10 15:18:29 -<<-: core/server.query ok
24.10 15:18:42 NET: Client (conid:79838899) connected to vdl.0 (clients:1)
24.10 15:18:45 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 15:18:45 TRACE: User not logon yet.
24.10 15:18:55 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 15:18:55 TRACE: User not logon yet.
24.10 15:19:01 NET: Client (conid:22621666) connected to vdl.0 (clients:2)
24.10 15:19:06 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 15:19:06 TRACE: User not logon yet.
24.10 15:19:07 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 15:19:07 TRACE: User not logon yet.
24.10 15:19:16 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 15:19:16 TRACE: User not logon yet.
24.10 15:19:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 15:19:26 TRACE: User not logon yet.
24.10 15:19:38 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
24.10 15:19:38 -<<-: server.login ok
24.10 15:19:38 DB: SELECT * FROM LocalizationStrings
24.10 15:19:38 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:38 TIMER: Starting timer...
24.10 15:19:38 TIMER: Timer running...
24.10 15:19:38 DB: SELECT * FROM GameVars
24.10 15:19:38 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:38 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
24.10 15:19:38 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:38 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
24.10 15:19:38 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:38 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
24.10 15:19:38 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:38 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
24.10 15:19:38 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:38 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
24.10 15:19:38 -<<-: core/quest.getDaily ok
24.10 15:19:38 DB: SELECT * FROM UserAttributeTypes
24.10 15:19:38 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:38 DB: SELECT * FROM UserVariableTypes
24.10 15:19:38 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:38 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
24.10 15:19:38 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:38 DB: SELECT * FROM ItemGroups
24.10 15:19:38 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:38 DB: SELECT * FROM Bundles ORDER BY ID
24.10 15:19:38 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:38 DB: SELECT * FROM BundleItems ORDER BY ID
24.10 15:19:38 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:38 SHOP: loading items...
24.10 15:19:38 ->>-: core/shop.getList { _type => core/shop.getList }
24.10 15:19:38 -<<-: core/shop.getList ok
24.10 15:19:38 SHOP: 0 items loaded (0 sec)
24.10 15:19:38 DB: SELECT * FROM EffectAttributeTypes
24.10 15:19:38 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:38 DB: SELECT * FROM Effects
24.10 15:19:38 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:38 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
24.10 15:19:38 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:38 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
24.10 15:19:38 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:38 DB: SELECT * FROM Badges
24.10 15:19:38 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
24.10 15:19:38 -<<-: core/server.query ok
24.10 15:19:47 NET: Client (conid:10986885) connected to vdl.0 (clients:1)
24.10 15:19:50 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 15:19:50 TIME: user.ping 0.09 ms
24.10 15:19:50 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:19:56 NET: Client (conid:55161812) connected to vdl.0 (clients:2)
24.10 15:20:00 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 15:20:00 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:20:00 TIME: user.ping 0.07 ms
24.10 15:20:02 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 15:20:02 TIME: user.ping 0.05 ms
24.10 15:20:02 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:20:10 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 15:20:10 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:20:10 TIME: user.ping 0.07 ms
24.10 15:20:19 ++ NET: null req: battle.end { roomId => 60, scoreSecondPlayer => 0, messageType => battle.end, scoreFirstPlayer => 0 }
24.10 15:20:19 TRACE: User not logon yet.
24.10 15:20:19 NET: Client (name:null conid:10986885 TCP) disconnected from vdl.0 (clients:1)
24.10 15:20:24 NET: Client (conid:58637679) connected to vdl.0 (clients:2)
24.10 15:20:25 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
24.10 15:20:25 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
24.10 15:20:25 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
24.10 15:20:25 -<<-: core/server.query ok
24.10 15:20:25 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
24.10 15:20:25 -<<-: core/user.isOnlineID ok
24.10 15:20:25 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
24.10 15:20:25 -<<-: core/cache.get ok
24.10 15:20:25 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
24.10 15:20:25 -<<-: core/cache.get ok
24.10 15:20:25 NET: Client login (conid:58637679, id:76, name:Aimer)
24.10 15:20:25 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
24.10 15:20:25 -<<-: core/user.loginPost null
24.10 15:20:25 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
24.10 15:20:25 == NET: null ret: user.join { name => Aimer, type => user.join }
24.10 15:20:25 == NET: Aimer ret: user.join { name => null, type => user.join }
24.10 15:20:25 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
24.10 15:20:26 ++ NET: null req: battle.end { roomId => 60, scoreSecondPlayer => 0, messageType => battle.end, scoreFirstPlayer => 0 }
24.10 15:20:26 TRACE: User not logon yet.
24.10 15:20:26 NET: Client (name:null conid:55161812 TCP) disconnected from vdl.0 (clients:1)
24.10 15:20:26 ++ NET: Aimer req: user.data { messageType => user.data }
24.10 15:20:26 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
24.10 15:20:26 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:20:26 TIME: user.data 0.32 ms
24.10 15:20:26 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:20:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:20:29 TIME: user.ping 0.08 ms
24.10 15:20:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:20:33 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
24.10 15:20:33 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 15:20:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:20:36 TIME: user.ping 0.06 ms
24.10 15:20:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:20:38 TIMER: Check auto-disconnect...
24.10 15:20:38 STATS: vdl.0 cache, locks:2
24.10 15:20:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:20:43 TIME: user.ping 0.1 ms
24.10 15:20:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:20:45 NET: Client (conid:2964611) connected to vdl.0 (clients:2)
24.10 15:20:49 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
24.10 15:20:49 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
24.10 15:20:49 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
24.10 15:20:49 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
24.10 15:20:49 STATS: vdl.0 cache connection, 28 calls, total 0.0350027084350586 sec spent, avg 1.25 ms
24.10 15:20:49 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
24.10 15:20:49 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
24.10 15:20:49 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
24.10 15:20:49 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1477308461, lastLoginDate => 298, lastLoadDate => 1025 }, effects => { list => [] } }}, version => 0, id => 2 } }
24.10 15:20:49 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
24.10 15:20:49 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
24.10 15:20:49 NET: Client login (conid:2964611, id:2, name:test1)
24.10 15:20:49 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
24.10 15:20:49 -<<-: core/user.loginPost { _type => core/user.loginPost }
24.10 15:20:49 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
24.10 15:20:49 == NET: Aimer ret: user.join { name => test1, type => user.join }
24.10 15:20:49 == NET: test1 ret: user.join { name => Aimer, type => user.join }
24.10 15:20:49 == NET: test1 ret: user.join { name => test1, type => user.join }
24.10 15:20:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:20:50 TIME: user.ping 0.09 ms
24.10 15:20:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:20:55 ++ NET: test1 req: user.data { messageType => user.data }
24.10 15:20:55 ->>-: vdl/cache.user.getData { userId => 2, _type => vdl/cache.user.getData }
24.10 15:20:55 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:20:55 TIME: user.data 0.32 ms
24.10 15:20:55 == NET: test1 ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:20:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:20:57 TIME: user.ping 0.09 ms
24.10 15:20:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:20:58 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
24.10 15:20:58 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 15:21:00 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:21:00 TIME: user.ping 0.09 ms
24.10 15:21:00 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:21:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:21:05 TIME: user.ping 0.08 ms
24.10 15:21:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:21:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:21:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:21:12 TIME: user.ping 0.1 ms
24.10 15:21:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:21:19 TIME: user.ping 0.07 ms
24.10 15:21:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:21:20 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:21:20 TIME: user.ping 0.09 ms
24.10 15:21:20 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:21:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:21:26 TIME: user.ping 0.09 ms
24.10 15:21:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:21:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:21:33 TIME: user.ping 0.08 ms
24.10 15:21:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:21:38 TIMER: Check auto-disconnect...
24.10 15:21:38 STATS: vdl.0 cache, locks:4
24.10 15:21:40 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:21:40 TIME: user.ping 0.08 ms
24.10 15:21:40 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:21:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:21:40 TIME: user.ping 0.11 ms
24.10 15:21:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:21:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:21:48 TIME: user.ping 0.08 ms
24.10 15:21:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:21:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:21:55 TIME: user.ping 0.09 ms
24.10 15:21:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:22:00 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:22:00 TIME: user.ping 0.21 ms
24.10 15:22:00 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:22:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:22:02 TIME: user.ping 0.13 ms
24.10 15:22:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:22:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:22:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:22:09 TIME: user.ping 0.08 ms
24.10 15:22:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:22:16 TIME: user.ping 0.17 ms
24.10 15:22:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:22:20 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:22:20 TIME: user.ping 0.08 ms
24.10 15:22:20 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:22:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:22:23 TIME: user.ping 0.1 ms
24.10 15:22:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:22:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:22:31 TIME: user.ping 0.08 ms
24.10 15:22:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:22:38 TIMER: Check auto-disconnect...
24.10 15:22:38 -<<-: tournament.enemyEvent { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 15:22, id => 2, enemy.num => 2, battleId => 61, player => 1 }, _isNotify => true, id => 2, _type => tournament.enemyEvent }
24.10 15:22:38 -<<-: tournament.enemyEvent { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 15:22, id => 76, enemy.num => 1, battleId => 61, player => 2 }, _isNotify => true, id => 76, _type => tournament.enemyEvent }
24.10 15:22:38 == NET: Aimer ret: tournament.enemy { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 15:22, id => 76, enemy.num => 1, battleId => 61, player => 2 }, type => tournament.enemy }
24.10 15:22:38 == NET: test1 ret: tournament.enemy { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 15:22, id => 2, enemy.num => 2, battleId => 61, player => 1 }, type => tournament.enemy }
24.10 15:22:38 STATS: vdl.0 cache, locks:4
24.10 15:22:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:22:38 TIME: user.ping 0.08 ms
24.10 15:22:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:22:42 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:22:42 TIME: user.ping 0.11 ms
24.10 15:22:42 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:22:47 ++ NET: test1 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 61, name => throw, side => 2, dices => 344215, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 15:22:47 ->>-: vdl/cache.battle.infoRoom { roomId => 61, _type => vdl/cache.battle.infoRoom }
24.10 15:22:47 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:22:47 STATS: vdl.0 cache connection, 35 calls, total 0.0383017063140869 sec spent, avg 1.09 ms
24.10 15:22:47 TIME: battle.sendtask 0.25 ms
24.10 15:22:47 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 15:22:47 == NET: Aimer ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 61, name => throw, side => 2, type => battle.task, dices => 344215, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 15:22:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:22:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:22:49 TIME: user.ping 0.13 ms
24.10 15:22:53 ++ NET: test1 req: battle.sendtask { dice => 5, from => (7.0, 3.0), roomId => 61, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (8.0, 3.0), diceID => 0 }
24.10 15:22:53 ->>-: vdl/cache.battle.infoRoom { roomId => 61, _type => vdl/cache.battle.infoRoom }
24.10 15:22:53 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:22:53 TIME: battle.sendtask 0.3 ms
24.10 15:22:53 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 15:22:53 == NET: Aimer ret: battle.task { dice => 5, from => (7.0, 3.0), roomId => 61, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (8.0, 3.0), diceID => 0 }
24.10 15:22:59 ++ NET: test1 req: battle.end { roomId => 61, scoreSecondPlayer => 0, messageType => battle.end, scoreFirstPlayer => 0 }
24.10 15:22:59 ->>-: vdl/cache.battle.infoRoom { roomId => 61, _type => vdl/cache.battle.infoRoom }
24.10 15:22:59 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:22:59 DB: INSERT INTO statistics (id, firstid,secondid, roomid, params) VALUES ('', 2,76,61,{ scoresSecond => null, scoresFirst => null })
24.10 15:22:59 ->>-: core/server.query { q => INSERT INTO statistics (id, firstid,secondid, roomid, params) VALUES ('', 2,76,61,{ scoresSecond => null, scoresFirst => null }), _type => core/server.query }
24.10 15:22:59 -<<-: core/server.query { errorCode => ok, _type => core/server.query }
24.10 15:22:59 ->>-: vdl/cache.battle.finishRoom { roomId => 61, _type => vdl/cache.battle.finishRoom }
24.10 15:22:59 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
24.10 15:22:59 ->>-: vdl/cache.battle.deleteRoom { roomId => 61, _type => vdl/cache.battle.deleteRoom }
24.10 15:22:59 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
24.10 15:22:59 TIME: battle.end 25.19 ms
24.10 15:22:59 == NET: test1 ret: battle.end { type => battle.end, errorCode => ok }
24.10 15:22:59 == NET: Aimer ret: battle.end { type => battle.end }
24.10 15:23:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:23:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:23:00 TIME: user.ping 0.07 ms
24.10 15:23:06 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:23:06 TIME: user.ping 0.11 ms
24.10 15:23:06 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:23:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:23:11 TIME: user.ping 0.09 ms
24.10 15:23:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:23:22 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:23:22 TIME: user.ping 0.1 ms
24.10 15:23:22 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:23:26 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:23:26 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:23:26 TIME: user.ping 0.1 ms
24.10 15:23:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:23:33 TIME: user.ping 0.1 ms
24.10 15:23:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:23:37 ++ NET: Aimer req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
24.10 15:23:37 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
24.10 15:23:37 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => Aimer, id => 76 },{ name => test1, id => 2 }], battleActive => [61], rounddate => 2016-24-10 15:22, startdate => 2016-24-10 15:22 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 15:23:37 TIME: tournament.getAvailableTournament 3.71 ms
24.10 15:23:37 == NET: Aimer ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => Aimer, id => 76 },{ name => test1, id => 2 }], battleActive => [61], rounddate => 2016-24-10 15:22, startdate => 2016-24-10 15:22 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 15:23:38 TIMER: Check auto-disconnect...
24.10 15:23:38 STATS: vdl.0 cache, locks:4
24.10 15:23:43 ++ NET: Aimer req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
24.10 15:23:43 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
24.10 15:23:43 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [76,2] }
24.10 15:23:43 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 76, player2 => 2 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid }
24.10 15:23:43 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 76, player2 => 2 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
24.10 15:23:43 TIME: tournament.grid 0.72 ms
24.10 15:23:43 == NET: Aimer ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 76, player2 => 2 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
24.10 15:23:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:23:45 TIME: user.ping 0.14 ms
24.10 15:23:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:23:46 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:23:46 TIME: user.ping 0.08 ms
24.10 15:23:46 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:23:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:23:57 TIME: user.ping 0.09 ms
24.10 15:23:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:24:06 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:24:06 TIME: user.ping 0.09 ms
24.10 15:24:06 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:24:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:24:08 TIME: user.ping 0.12 ms
24.10 15:24:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:24:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:24:19 TIME: user.ping 0.1 ms
24.10 15:24:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:24:26 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:24:26 TIME: user.ping 0.08 ms
24.10 15:24:26 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:24:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:24:31 TIME: user.ping 0.08 ms
24.10 15:24:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:24:38 TIMER: Check auto-disconnect...
24.10 15:24:38 STATS: vdl.0 cache, locks:4
24.10 15:24:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:24:43 TIME: user.ping 0.09 ms
24.10 15:24:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:24:46 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:24:46 TIME: user.ping 0.08 ms
24.10 15:24:46 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:24:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:24:55 TIME: user.ping 0.1 ms
24.10 15:24:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:25:07 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:25:07 TIME: user.ping 0.09 ms
24.10 15:25:07 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:25:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:25:07 TIME: user.ping 0.1 ms
24.10 15:25:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:25:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:25:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:25:19 TIME: user.ping 0.1 ms
24.10 15:25:27 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:25:27 TIME: user.ping 0.1 ms
24.10 15:25:27 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:25:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:25:31 TIME: user.ping 0.09 ms
24.10 15:25:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:25:38 TIMER: Check auto-disconnect...
24.10 15:25:38 STATS: vdl.0 cache, locks:4
24.10 15:25:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:25:43 TIME: user.ping 0.19 ms
24.10 15:25:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:25:47 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:25:47 TIME: user.ping 0.09 ms
24.10 15:25:47 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:26:07 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:26:07 TIME: user.ping 0.18 ms
24.10 15:26:07 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:26:27 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:26:27 TIME: user.ping 0.15 ms
24.10 15:26:27 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:26:38 TIMER: Check auto-disconnect...
24.10 15:26:38 STATS: vdl.0 cache, locks:4
24.10 15:26:47 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:26:47 TIME: user.ping 0.08 ms
24.10 15:26:47 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:27:07 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:27:07 TIME: user.ping 0.17 ms
24.10 15:27:07 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:27:27 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:27:27 TIME: user.ping 0.1 ms
24.10 15:27:27 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:27:33 ++ NET: Aimer req: battle.end { roomId => 61, scoreSecondPlayer => 0, messageType => battle.end, scoreFirstPlayer => 0 }
24.10 15:27:33 ->>-: vdl/cache.battle.infoRoom { roomId => 61, _type => vdl/cache.battle.infoRoom }
24.10 15:27:33 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
24.10 15:27:33 STATS: vdl.0 cache connection, 44 calls, total 0.0687618255615234 sec spent, avg 1.56 ms
24.10 15:27:33 TRACE: battle.end : cacheRequest exception { roomId => 61, _type => vdl/cache.battle.infoRoom }
24.10 15:27:33 TRACE: battle.end : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 54
Called from modules/VDLBattleModule.hx line 35
Called from snipe/slave/Server.hx line 1176
24.10 15:27:33 NET: Client (name:Aimer conid:58637679 TCP) disconnected from vdl.0 (clients:1)
24.10 15:27:33 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
24.10 15:27:33 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
24.10 15:27:33 -<<-: core/server.query { list => {{ id => 60 }}, errorCode => ok, _type => core/server.query }
24.10 15:27:33 ->>-: vdl/cache.battle.infoRoom { roomId => 60, _type => vdl/cache.battle.infoRoom }
24.10 15:27:33 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:27:33 ->>-: vdl/cache.battle.deleteRoom { roomId => 60, _type => vdl/cache.battle.deleteRoom }
24.10 15:27:33 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
24.10 15:27:33 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
24.10 15:27:33 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
24.10 15:27:33 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
24.10 15:27:33 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 15:27:33 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
24.10 15:27:33 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
24.10 15:27:33 == NET: test1 ret: battle.end { type => battle.end }
24.10 15:27:38 TIMER: Check auto-disconnect...
24.10 15:27:38 STATS: vdl.0 cache, locks:2
24.10 15:27:47 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:27:47 TIME: user.ping 0.16 ms
24.10 15:27:47 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:28:07 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:28:07 TIME: user.ping 0.18 ms
24.10 15:28:07 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:28:27 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:28:27 TIME: user.ping 0.23 ms
24.10 15:28:27 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:28:38 TIMER: Check auto-disconnect...
24.10 15:28:38 STATS: vdl.0 cache, locks:2
24.10 15:28:47 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:28:47 TIME: user.ping 0.17 ms
24.10 15:28:47 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:29:07 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:29:07 TIME: user.ping 0.18 ms
24.10 15:29:07 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:29:25 NET: Client (name:test1 conid:2964611 TCP) disconnected from vdl.0 (clients:0)
24.10 15:29:25 DB: SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true
24.10 15:29:25 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true, _type => core/server.query }
24.10 15:29:25 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
24.10 15:29:25 STATS: vdl.0 cache connection, 51 calls, total 0.0886077880859375 sec spent, avg 1.74 ms
24.10 15:29:25 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 15:29:25 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
24.10 15:29:25 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 15:29:25 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
24.10 15:29:25 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
24.10 15:29:25 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
24.10 15:29:25 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
24.10 15:29:25 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 15:29:25 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
24.10 15:29:25 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
24.10 15:29:38 TIMER: Check auto-disconnect...
24.10 15:29:38 STATS: vdl.0 cache, locks:0
24.10 15:29:43 NET: Client (conid:61074595) connected to vdl.0 (clients:1)
24.10 15:29:43 NET: Client (conid:72063016) connected to vdl.0 (clients:2)
24.10 15:29:44 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
24.10 15:29:44 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
24.10 15:29:44 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
24.10 15:29:44 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
24.10 15:29:44 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
24.10 15:29:44 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
24.10 15:29:44 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
24.10 15:29:44 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477308408, lastLoginDate => 298, lastLoadDate => 1025 }, effects => { list => [] } }}, version => 0, id => 76 } }
24.10 15:29:44 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
24.10 15:29:44 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 76 } }
24.10 15:29:44 NET: Client login (conid:72063016, id:76, name:Aimer)
24.10 15:29:44 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
24.10 15:29:44 -<<-: core/user.loginPost { _type => core/user.loginPost }
24.10 15:29:44 == NET: null ret: user.join { name => Aimer, type => user.join }
24.10 15:29:44 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
24.10 15:29:44 == NET: Aimer ret: user.join { name => null, type => user.join }
24.10 15:29:44 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
24.10 15:29:45 ++ NET: Aimer req: user.data { messageType => user.data }
24.10 15:29:45 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
24.10 15:29:45 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:29:45 TIME: user.data 0.45 ms
24.10 15:29:45 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:29:47 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
24.10 15:29:47 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
24.10 15:29:47 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
24.10 15:29:47 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
24.10 15:29:47 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
24.10 15:29:47 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
24.10 15:29:47 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
24.10 15:29:47 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1477308461, lastLoginDate => 298, lastLoadDate => 1025 }, effects => { list => [] } }}, version => 0, id => 2 } }
24.10 15:29:47 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
24.10 15:29:47 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
24.10 15:29:47 NET: Client login (conid:61074595, id:2, name:test1)
24.10 15:29:47 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
24.10 15:29:47 -<<-: core/user.loginPost { _type => core/user.loginPost }
24.10 15:29:47 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
24.10 15:29:47 == NET: Aimer ret: user.join { name => test1, type => user.join }
24.10 15:29:47 == NET: test1 ret: user.join { name => test1, type => user.join }
24.10 15:29:47 == NET: test1 ret: user.join { name => Aimer, type => user.join }
24.10 15:29:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:29:48 TIME: user.ping 0.16 ms
24.10 15:29:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:29:53 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
24.10 15:29:53 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 15:29:53 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
24.10 15:29:53 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 15:29:53 ++ NET: test1 req: user.data { messageType => user.data }
24.10 15:29:53 ->>-: vdl/cache.user.getData { userId => 2, _type => vdl/cache.user.getData }
24.10 15:29:53 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:29:53 TIME: user.data 0.83 ms
24.10 15:29:53 == NET: test1 ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:29:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:29:55 TIME: user.ping 0.18 ms
24.10 15:29:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:29:58 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:29:58 TIME: user.ping 0.16 ms
24.10 15:29:58 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:30:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:30:02 TIME: user.ping 0.12 ms
24.10 15:30:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:30:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:30:09 TIME: user.ping 0.09 ms
24.10 15:30:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:30:17 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:30:17 TIME: user.ping 0.16 ms
24.10 15:30:17 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:30:18 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:30:18 TIME: user.ping 0.19 ms
24.10 15:30:18 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:30:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:30:24 TIME: user.ping 0.1 ms
24.10 15:30:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:30:38 TIMER: Check auto-disconnect...
24.10 15:30:38 STATS: vdl.0 cache, locks:4
24.10 15:30:38 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:30:38 TIME: user.ping 0.19 ms
24.10 15:30:38 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:30:58 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:30:58 TIME: user.ping 0.15 ms
24.10 15:30:58 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:31:18 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:31:18 TIME: user.ping 0.09 ms
24.10 15:31:18 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:31:38 TIMER: Check auto-disconnect...
24.10 15:31:38 STATS: vdl.0 cache, locks:4
24.10 15:31:38 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:31:38 TIME: user.ping 0.1 ms
24.10 15:31:38 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:31:58 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:31:58 TIME: user.ping 0.1 ms
24.10 15:31:58 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:32:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:32:06 TIME: user.ping 0.12 ms
24.10 15:32:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:32:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:32:13 TIME: user.ping 0.07 ms
24.10 15:32:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:32:18 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:32:18 TIME: user.ping 0.09 ms
24.10 15:32:18 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:32:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:32:21 TIME: user.ping 0.12 ms
24.10 15:32:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:32:28 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:32:28 TIME: user.ping 0.11 ms
24.10 15:32:28 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:32:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:32:35 TIME: user.ping 0.13 ms
24.10 15:32:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:32:38 TIMER: Check auto-disconnect...
24.10 15:32:38 STATS: vdl.0 cache, locks:4
24.10 15:32:38 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:32:38 TIME: user.ping 0.15 ms
24.10 15:32:38 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:32:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:32:43 TIME: user.ping 0.13 ms
24.10 15:32:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:32:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:32:50 TIME: user.ping 0.16 ms
24.10 15:32:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:32:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:32:57 TIME: user.ping 0.17 ms
24.10 15:32:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:32:58 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:32:58 TIME: user.ping 0.09 ms
24.10 15:32:58 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:33:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:33:05 TIME: user.ping 0.14 ms
24.10 15:33:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:33:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:33:12 TIME: user.ping 0.15 ms
24.10 15:33:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:33:19 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:33:19 TIME: user.ping 0.14 ms
24.10 15:33:19 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:33:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:33:19 TIME: user.ping 0.14 ms
24.10 15:33:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:33:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:33:27 TIME: user.ping 0.12 ms
24.10 15:33:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:33:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:33:34 TIME: user.ping 0.18 ms
24.10 15:33:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:33:38 TIMER: Check auto-disconnect...
24.10 15:33:38 STATS: vdl.0 cache, locks:4
24.10 15:33:38 -<<-: tournament.enemyEvent { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 15:33, id => 2, enemy.num => 2, battleId => 62, player => 1 }, _isNotify => true, id => 2, _type => tournament.enemyEvent }
24.10 15:33:38 -<<-: tournament.enemyEvent { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 15:33, id => 76, enemy.num => 1, battleId => 62, player => 2 }, _isNotify => true, id => 76, _type => tournament.enemyEvent }
24.10 15:33:38 == NET: test1 ret: tournament.enemy { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 15:33, id => 2, enemy.num => 2, battleId => 62, player => 1 }, type => tournament.enemy }
24.10 15:33:38 == NET: Aimer ret: tournament.enemy { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 15:33, id => 76, enemy.num => 1, battleId => 62, player => 2 }, type => tournament.enemy }
24.10 15:33:40 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:33:40 TIME: user.ping 0.12 ms
24.10 15:33:40 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:33:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:33:44 TIME: user.ping 0.12 ms
24.10 15:33:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:33:46 ++ NET: test1 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 62, name => throw, side => 2, dices => 210014, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 15:33:46 ->>-: vdl/cache.battle.infoRoom { roomId => 62, _type => vdl/cache.battle.infoRoom }
24.10 15:33:46 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:33:46 STATS: vdl.0 cache connection, 70 calls, total 0.105350017547607 sec spent, avg 1.51 ms
24.10 15:33:46 TIME: battle.sendtask 0.73 ms
24.10 15:33:46 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 15:33:46 == NET: Aimer ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 62, name => throw, side => 2, type => battle.task, dices => 210014, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 15:33:50 ++ NET: test1 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 62, name => skip, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 15:33:50 ->>-: vdl/cache.battle.infoRoom { roomId => 62, _type => vdl/cache.battle.infoRoom }
24.10 15:33:50 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:33:50 TIME: battle.sendtask 0.49 ms
24.10 15:33:50 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 15:33:50 == NET: Aimer ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 62, name => skip, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 15:33:54 ++ NET: Aimer req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 62, name => throw, side => 1, dices => 015230, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 15:33:54 ->>-: vdl/cache.battle.infoRoom { roomId => 62, _type => vdl/cache.battle.infoRoom }
24.10 15:33:54 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:33:54 TIME: battle.sendtask 0.57 ms
24.10 15:33:54 == NET: Aimer ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 15:33:54 == NET: test1 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 62, name => throw, side => 1, type => battle.task, dices => 015230, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 15:33:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:33:56 TIME: user.ping 0.16 ms
24.10 15:33:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:33:59 ++ NET: Aimer req: battle.sendtask { dice => 5, from => (2.0, 6.0), roomId => 62, name => swap, side => 1, dices => null, messageType => battle.sendtask, to => (1.0, 6.0), diceID => 0 }
24.10 15:33:59 ->>-: vdl/cache.battle.infoRoom { roomId => 62, _type => vdl/cache.battle.infoRoom }
24.10 15:33:59 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:33:59 TIME: battle.sendtask 0.68 ms
24.10 15:33:59 == NET: Aimer ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 15:33:59 == NET: test1 ret: battle.task { dice => 5, from => (2.0, 6.0), roomId => 62, name => swap, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (1.0, 6.0), diceID => 0 }
24.10 15:34:02 ++ NET: Aimer req: battle.sendtask { dice => 3, from => (1.0, 6.0), roomId => 62, name => swap, side => 1, dices => null, messageType => battle.sendtask, to => (0.0, 6.0), diceID => 0 }
24.10 15:34:02 ->>-: vdl/cache.battle.infoRoom { roomId => 62, _type => vdl/cache.battle.infoRoom }
24.10 15:34:02 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:34:02 TIME: battle.sendtask 0.71 ms
24.10 15:34:02 == NET: Aimer ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 15:34:02 == NET: test1 ret: battle.task { dice => 3, from => (1.0, 6.0), roomId => 62, name => swap, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (0.0, 6.0), diceID => 0 }
24.10 15:34:03 ++ NET: Aimer req: battle.sendtask { dice => 2, from => (1.0, 6.0), roomId => 62, name => swap, side => 1, dices => null, messageType => battle.sendtask, to => (0.0, 6.0), diceID => 0 }
24.10 15:34:03 ->>-: vdl/cache.battle.infoRoom { roomId => 62, _type => vdl/cache.battle.infoRoom }
24.10 15:34:03 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:34:03 TIME: battle.sendtask 0.3 ms
24.10 15:34:03 == NET: Aimer ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 15:34:03 == NET: test1 ret: battle.task { dice => 2, from => (1.0, 6.0), roomId => 62, name => swap, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (0.0, 6.0), diceID => 0 }
24.10 15:34:06 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:34:06 TIME: user.ping 0.15 ms
24.10 15:34:06 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:34:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:34:09 TIME: user.ping 0.1 ms
24.10 15:34:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:34:13 ++ NET: Aimer req: tournament.end { lose => 0, dateRound => null, winner => 0, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 2, player2 => 76, battleId => 62 }
24.10 15:34:13 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
24.10 15:34:13 -<<-: vdl/cache.tournament.getBattlesTournaments [62]
24.10 15:34:13 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
24.10 15:34:13 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [76,2] }
24.10 15:34:13 ->>-: vdl/cache.battle.finishRoom { roomId => 62, _type => vdl/cache.battle.finishRoom }
24.10 15:34:13 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
24.10 15:34:13 ->>-: vdl/cache.battle.deleteRoom { roomId => 62, _type => vdl/cache.battle.deleteRoom }
24.10 15:34:13 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
24.10 15:34:13 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [62] }
24.10 15:34:13 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => _requestException, _type => vdl/cache.tournament.setBattlesTournaments }
24.10 15:34:13 TRACE: tournament.end : cacheRequest exception { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [62] }
24.10 15:34:13 TRACE: tournament.end : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 400
Called from modules/VDLTournamentModule.hx line 357
Called from a C function
Called from modules/VDLTournamentModule.hx line 142
Called from modules/VDLTournamentModule.hx line 67
Called from snipe/slave/Server.hx line 1176
24.10 15:34:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:34:18 TIME: user.ping 0.12 ms
24.10 15:34:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:34:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:34:25 TIME: user.ping 0.16 ms
24.10 15:34:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:34:30 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:34:30 TIME: user.ping 0.25 ms
24.10 15:34:30 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:34:38 TIMER: Check auto-disconnect...
24.10 15:34:38 STATS: vdl.0 cache, locks:4
24.10 15:34:54 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:34:54 TIME: user.ping 0.14 ms
24.10 15:34:54 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:35:19 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:35:19 TIME: user.ping 0.14 ms
24.10 15:35:19 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:35:38 TIMER: Check auto-disconnect...
24.10 15:35:38 STATS: vdl.0 cache, locks:4
24.10 15:35:43 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:35:43 TIME: user.ping 0.08 ms
24.10 15:35:43 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:36:07 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:36:07 TIME: user.ping 0.12 ms
24.10 15:36:07 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:36:31 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:36:31 TIME: user.ping 0.11 ms
24.10 15:36:31 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:36:38 TIMER: Check auto-disconnect...
24.10 15:36:38 STATS: vdl.0 cache, locks:4
24.10 15:36:55 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:36:55 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:36:55 TIME: user.ping 0.13 ms
24.10 15:37:19 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:37:19 TIME: user.ping 0.09 ms
24.10 15:37:19 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:37:38 TIMER: Check auto-disconnect...
24.10 15:37:38 NET: Client (name:Aimer conid:72063016 TCP) disconnected from vdl.0 (clients:1)
24.10 15:37:38 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
24.10 15:37:38 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
24.10 15:37:38 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
24.10 15:37:38 STATS: vdl.0 cache connection, 81 calls, total 0.13736891746521 sec spent, avg 1.7 ms
24.10 15:37:38 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 15:37:38 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
24.10 15:37:38 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 15:37:38 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
24.10 15:37:38 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
24.10 15:37:38 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
24.10 15:37:38 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
24.10 15:37:38 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 15:37:38 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
24.10 15:37:38 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
24.10 15:37:38 STATS: vdl.0 cache, locks:2
24.10 15:37:44 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:37:44 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:37:44 TIME: user.ping 0.15 ms
24.10 15:38:08 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:38:08 TIME: user.ping 0.18 ms
24.10 15:38:08 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:39:23 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
24.10 15:39:23 -<<-: server.login ok
24.10 15:39:23 DB: SELECT * FROM LocalizationStrings
24.10 15:39:23 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 TIMER: Starting timer...
24.10 15:39:23 TIMER: Timer running...
24.10 15:39:23 DB: SELECT * FROM GameVars
24.10 15:39:23 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
24.10 15:39:23 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
24.10 15:39:23 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
24.10 15:39:23 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
24.10 15:39:23 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
24.10 15:39:23 -<<-: core/quest.getDaily ok
24.10 15:39:23 DB: SELECT * FROM UserAttributeTypes
24.10 15:39:23 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 DB: SELECT * FROM UserVariableTypes
24.10 15:39:23 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
24.10 15:39:23 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 DB: SELECT * FROM ItemGroups
24.10 15:39:23 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 DB: SELECT * FROM Bundles ORDER BY ID
24.10 15:39:23 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 DB: SELECT * FROM BundleItems ORDER BY ID
24.10 15:39:23 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 SHOP: loading items...
24.10 15:39:23 ->>-: core/shop.getList { _type => core/shop.getList }
24.10 15:39:23 -<<-: core/shop.getList ok
24.10 15:39:23 SHOP: 0 items loaded (0 sec)
24.10 15:39:23 DB: SELECT * FROM EffectAttributeTypes
24.10 15:39:23 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 DB: SELECT * FROM Effects
24.10 15:39:23 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
24.10 15:39:23 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
24.10 15:39:23 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 DB: SELECT * FROM Badges
24.10 15:39:23 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
24.10 15:39:23 -<<-: core/server.query ok
24.10 15:39:23 TIMER: Check auto-disconnect...
24.10 15:39:23 STATS: vdl.0 cache, locks:0
24.10 15:39:23 TIMER: Check auto-disconnect...
24.10 15:39:23 STATS: vdl.0 cache, locks:0
24.10 15:39:23 TIMER: Check auto-disconnect...
24.10 15:39:23 STATS: vdl.0 cache, locks:0
24.10 15:39:23 TIMER: Check auto-disconnect...
24.10 15:39:23 STATS: vdl.0 cache, locks:0
24.10 15:39:23 TIMER: Check auto-disconnect...
24.10 15:39:23 STATS: vdl.0 cache, locks:0
24.10 15:39:23 TIMER: Check auto-disconnect...
24.10 15:39:23 STATS: vdl.0 cache, locks:0
24.10 15:46:20 NET: Client (conid:24590946) connected to vdl.0 (clients:1)
24.10 15:46:22 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
24.10 15:46:22 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
24.10 15:46:22 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
24.10 15:46:22 -<<-: core/server.query ok
24.10 15:46:22 STATS: vdl.0 cache connection, 21 calls, total 0.0688631534576416 sec spent, avg 3.28 ms
24.10 15:46:22 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
24.10 15:46:22 -<<-: core/user.isOnlineID ok
24.10 15:46:22 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
24.10 15:46:22 -<<-: core/cache.get ok
24.10 15:46:22 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
24.10 15:46:22 -<<-: core/cache.get ok
24.10 15:46:22 NET: Client login (conid:24590946, id:76, name:Aimer)
24.10 15:46:22 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
24.10 15:46:22 -<<-: core/user.loginPost null
24.10 15:46:22 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
24.10 15:46:22 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
24.10 15:46:23 TIMER: Check auto-disconnect...
24.10 15:46:23 STATS: vdl.0 cache, locks:2
24.10 15:46:23 ++ NET: Aimer req: user.data { messageType => user.data }
24.10 15:46:23 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
24.10 15:46:23 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:46:23 TIME: user.data 0.51 ms
24.10 15:46:23 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:46:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:46:25 TIME: user.ping 0.17 ms
24.10 15:46:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:46:28 NET: Client (conid:57774643) connected to vdl.0 (clients:2)
24.10 15:46:28 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
24.10 15:46:28 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 15:46:32 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
24.10 15:46:32 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
24.10 15:46:32 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
24.10 15:46:32 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
24.10 15:46:32 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
24.10 15:46:32 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
24.10 15:46:32 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
24.10 15:46:32 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1477308461, lastLoginDate => 298, lastLoadDate => 1025 }, effects => { list => [] } }}, version => 0, id => 2 } }
24.10 15:46:32 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
24.10 15:46:32 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
24.10 15:46:32 NET: Client login (conid:57774643, id:2, name:test1)
24.10 15:46:32 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
24.10 15:46:32 -<<-: core/user.loginPost { _type => core/user.loginPost }
24.10 15:46:32 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
24.10 15:46:32 == NET: test1 ret: user.join { name => Aimer, type => user.join }
24.10 15:46:32 == NET: test1 ret: user.join { name => test1, type => user.join }
24.10 15:46:32 == NET: Aimer ret: user.join { name => test1, type => user.join }
24.10 15:46:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:46:32 TIME: user.ping 0.16 ms
24.10 15:46:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:46:38 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
24.10 15:46:38 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 15:46:38 ++ NET: test1 req: user.data { messageType => user.data }
24.10 15:46:38 ->>-: vdl/cache.user.getData { userId => 2, _type => vdl/cache.user.getData }
24.10 15:46:38 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:46:38 TIME: user.data 0.53 ms
24.10 15:46:38 == NET: test1 ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:46:39 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:46:39 TIME: user.ping 0.11 ms
24.10 15:46:39 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:46:43 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:46:43 TIME: user.ping 0.12 ms
24.10 15:46:43 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:46:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:46:47 TIME: user.ping 0.16 ms
24.10 15:46:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:46:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:46:56 TIME: user.ping 0.17 ms
24.10 15:46:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:47:03 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:47:03 TIME: user.ping 0.19 ms
24.10 15:47:03 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:47:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:47:03 TIME: user.ping 0.16 ms
24.10 15:47:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:47:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:47:11 TIME: user.ping 0.16 ms
24.10 15:47:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:47:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:47:18 TIME: user.ping 0.17 ms
24.10 15:47:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:47:23 TIMER: Check auto-disconnect...
24.10 15:47:23 STATS: vdl.0 cache, locks:4
24.10 15:47:23 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:47:23 TIME: user.ping 0.18 ms
24.10 15:47:23 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:47:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:47:25 TIME: user.ping 0.19 ms
24.10 15:47:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:47:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:47:33 TIME: user.ping 0.17 ms
24.10 15:47:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:47:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:47:40 TIME: user.ping 0.18 ms
24.10 15:47:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:47:43 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:47:43 TIME: user.ping 0.22 ms
24.10 15:47:43 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:47:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:47:47 TIME: user.ping 0.16 ms
24.10 15:47:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:47:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:47:54 TIME: user.ping 0.19 ms
24.10 15:47:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:48:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:48:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:48:02 TIME: user.ping 0.17 ms
24.10 15:48:03 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:48:03 TIME: user.ping 0.17 ms
24.10 15:48:03 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:48:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:48:09 TIME: user.ping 0.38 ms
24.10 15:48:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:48:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:48:16 TIME: user.ping 0.13 ms
24.10 15:48:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:48:23 TIMER: Check auto-disconnect...
24.10 15:48:23 -<<-: tournament.enemyEvent { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 15:48, id => 2, enemy.num => 2, battleId => 63, player => 1 }, _isNotify => true, id => 2, _type => tournament.enemyEvent }
24.10 15:48:23 -<<-: tournament.enemyEvent { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 15:48, id => 76, enemy.num => 1, battleId => 63, player => 2 }, _isNotify => true, id => 76, _type => tournament.enemyEvent }
24.10 15:48:23 == NET: test1 ret: tournament.enemy { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 15:48, id => 2, enemy.num => 2, battleId => 63, player => 1 }, type => tournament.enemy }
24.10 15:48:23 == NET: Aimer ret: tournament.enemy { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 15:48, id => 76, enemy.num => 1, battleId => 63, player => 2 }, type => tournament.enemy }
24.10 15:48:23 STATS: vdl.0 cache, locks:4
24.10 15:48:24 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:48:24 TIME: user.ping 0.17 ms
24.10 15:48:24 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:48:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:48:25 TIME: user.ping 0.14 ms
24.10 15:48:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:48:30 ++ NET: test1 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 63, name => throw, side => 2, dices => 231222, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 15:48:30 ->>-: vdl/cache.battle.infoRoom { roomId => 63, _type => vdl/cache.battle.infoRoom }
24.10 15:48:30 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:48:30 STATS: vdl.0 cache connection, 35 calls, total 0.089733362197876 sec spent, avg 2.56 ms
24.10 15:48:30 TIME: battle.sendtask 3.18 ms
24.10 15:48:30 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 15:48:30 == NET: Aimer ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 63, name => throw, side => 2, type => battle.task, dices => 231222, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 15:48:34 ++ NET: test1 req: battle.sendtask { dice => 3, from => (7.0, 4.0), roomId => 63, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (8.0, 4.0), diceID => 0 }
24.10 15:48:34 ->>-: vdl/cache.battle.infoRoom { roomId => 63, _type => vdl/cache.battle.infoRoom }
24.10 15:48:34 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:48:34 TIME: battle.sendtask 0.59 ms
24.10 15:48:34 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 15:48:34 == NET: Aimer ret: battle.task { dice => 3, from => (7.0, 4.0), roomId => 63, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (8.0, 4.0), diceID => 0 }
24.10 15:48:36 ++ NET: test1 req: battle.sendtask { dice => 2, from => (7.0, 4.0), roomId => 63, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (8.0, 4.0), diceID => 0 }
24.10 15:48:36 ->>-: vdl/cache.battle.infoRoom { roomId => 63, _type => vdl/cache.battle.infoRoom }
24.10 15:48:36 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:48:36 TIME: battle.sendtask 0.58 ms
24.10 15:48:36 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 15:48:36 == NET: Aimer ret: battle.task { dice => 2, from => (7.0, 4.0), roomId => 63, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (8.0, 4.0), diceID => 0 }
24.10 15:48:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:48:36 TIME: user.ping 0.14 ms
24.10 15:48:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:48:39 ++ NET: test1 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 63, name => skip, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 15:48:39 ->>-: vdl/cache.battle.infoRoom { roomId => 63, _type => vdl/cache.battle.infoRoom }
24.10 15:48:39 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:48:39 TIME: battle.sendtask 0.58 ms
24.10 15:48:39 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 15:48:39 == NET: Aimer ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 63, name => skip, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 15:48:45 ++ NET: Aimer req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 63, name => throw, side => 1, dices => 514040, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 15:48:45 ->>-: vdl/cache.battle.infoRoom { roomId => 63, _type => vdl/cache.battle.infoRoom }
24.10 15:48:45 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:48:45 TIME: battle.sendtask 0.59 ms
24.10 15:48:45 == NET: Aimer ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 15:48:45 == NET: test1 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 63, name => throw, side => 1, type => battle.task, dices => 514040, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 15:48:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:48:48 TIME: user.ping 0.18 ms
24.10 15:48:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:48:50 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:48:50 TIME: user.ping 0.17 ms
24.10 15:48:50 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:48:52 ++ NET: Aimer req: battle.sendtask { dice => 5, from => (2.0, 4.0), roomId => 63, name => swap, side => 1, dices => null, messageType => battle.sendtask, to => (1.0, 4.0), diceID => 0 }
24.10 15:48:52 ->>-: vdl/cache.battle.infoRoom { roomId => 63, _type => vdl/cache.battle.infoRoom }
24.10 15:48:52 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
24.10 15:48:52 TIME: battle.sendtask 0.47 ms
24.10 15:48:52 == NET: Aimer ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 15:48:52 == NET: test1 ret: battle.task { dice => 5, from => (2.0, 4.0), roomId => 63, name => swap, side => 1, type => battle.task, dices => null, messageType => battle.sendtask, to => (1.0, 4.0), diceID => 0 }
24.10 15:48:58 ++ NET: Aimer req: tournament.end { lose => 76, dateRound => 2016-24-10 15:48, winner => 2, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 2, player2 => 76, battleId => 63 }
24.10 15:48:58 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
24.10 15:48:58 -<<-: vdl/cache.tournament.getBattlesTournaments [63]
24.10 15:48:58 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
24.10 15:48:58 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [76,2] }
24.10 15:48:58 ->>-: vdl/cache.battle.finishRoom { roomId => 63, _type => vdl/cache.battle.finishRoom }
24.10 15:48:58 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
24.10 15:48:58 ->>-: vdl/cache.battle.deleteRoom { roomId => 63, _type => vdl/cache.battle.deleteRoom }
24.10 15:48:58 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
24.10 15:48:58 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [63] }
24.10 15:48:58 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
24.10 15:48:58 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [76,2], _type => vdl/cache.tournament.setUsersTournament }
24.10 15:48:58 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
24.10 15:48:58 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => null, round => 1, player1 => 2, player2 => 76 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid }
24.10 15:48:58 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => null, round => 1, player1 => 2, player2 => 76 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
24.10 15:48:58 ->>-: vdl/cache.tournament.addRound { dateRound => null, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound }
24.10 15:48:58 -<<-: vdl/cache.tournament.addRound { errorCode => _requestException, _type => vdl/cache.tournament.addRound }
24.10 15:48:58 TRACE: tournament.end : cacheRequest exception { dateRound => null, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound }
24.10 15:48:58 TRACE: tournament.end : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 392
Called from modules/VDLTournamentModule.hx line 365
Called from a C function
Called from modules/VDLTournamentModule.hx line 142
Called from modules/VDLTournamentModule.hx line 67
Called from snipe/slave/Server.hx line 1176
24.10 15:49:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:49:00 TIME: user.ping 0.15 ms
24.10 15:49:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:49:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:49:07 TIME: user.ping 0.14 ms
24.10 15:49:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:49:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:49:14 TIME: user.ping 0.18 ms
24.10 15:49:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:49:14 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:49:14 TIME: user.ping 0.17 ms
24.10 15:49:14 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:49:22 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:49:22 TIME: user.ping 0.14 ms
24.10 15:49:22 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:49:23 TIMER: Check auto-disconnect...
24.10 15:49:23 STATS: vdl.0 cache, locks:4
24.10 15:49:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:49:29 TIME: user.ping 0.15 ms
24.10 15:49:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:49:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:49:36 TIME: user.ping 0.16 ms
24.10 15:49:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:49:39 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:49:39 TIME: user.ping 0.18 ms
24.10 15:49:39 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:49:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:49:43 TIME: user.ping 0.15 ms
24.10 15:49:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:49:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:49:50 TIME: user.ping 0.15 ms
24.10 15:49:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:49:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:49:58 TIME: user.ping 0.19 ms
24.10 15:49:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:49:58 ++ NET: Aimer req: tournament.end { lose => 76, dateRound => 2016-24-10 15:48, winner => 2, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 2, player2 => 76, battleId => 63 }
24.10 15:49:58 NET: Client (name:Aimer conid:24590946 TCP) disconnected from vdl.0 (clients:1)
24.10 15:49:58 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
24.10 15:49:58 -<<-: vdl/cache.tournament.getBattlesTournaments []
24.10 15:49:58 STATS: vdl.0 cache connection, 49 calls, total 0.118359565734863 sec spent, avg 2.42 ms
24.10 15:49:58 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
24.10 15:49:58 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [76,2] }
24.10 15:49:58 ->>-: vdl/cache.battle.finishRoom { roomId => 63, _type => vdl/cache.battle.finishRoom }
24.10 15:49:58 -<<-: vdl/cache.battle.finishRoom { errorCode => _requestException, _type => vdl/cache.battle.finishRoom }
24.10 15:49:58 TRACE: tournament.end : cacheRequest exception { roomId => 63, _type => vdl/cache.battle.finishRoom }
24.10 15:49:58 TRACE: tournament.end : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 460
Called from modules/VDLTournamentModule.hx line 355
Called from a C function
Called from modules/VDLTournamentModule.hx line 142
Called from modules/VDLTournamentModule.hx line 67
Called from snipe/slave/Server.hx line 1176
24.10 15:49:58 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
24.10 15:49:58 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
24.10 15:49:58 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
24.10 15:49:58 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 15:49:58 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
24.10 15:49:58 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 15:49:58 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
24.10 15:49:58 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
24.10 15:49:58 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
24.10 15:49:58 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
24.10 15:49:58 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 15:49:58 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
24.10 15:49:58 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
24.10 15:50:03 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:50:03 TIME: user.ping 0.18 ms
24.10 15:50:03 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:53:31 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
24.10 15:53:31 -<<-: server.login ok
24.10 15:53:31 DB: SELECT * FROM LocalizationStrings
24.10 15:53:31 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 TIMER: Starting timer...
24.10 15:53:31 DB: SELECT * FROM GameVars
24.10 15:53:31 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
24.10 15:53:31 TIMER: Timer running...
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
24.10 15:53:31 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
24.10 15:53:31 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
24.10 15:53:31 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
24.10 15:53:31 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
24.10 15:53:31 -<<-: core/quest.getDaily ok
24.10 15:53:31 DB: SELECT * FROM UserAttributeTypes
24.10 15:53:31 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 DB: SELECT * FROM UserVariableTypes
24.10 15:53:31 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
24.10 15:53:31 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 DB: SELECT * FROM ItemGroups
24.10 15:53:31 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 DB: SELECT * FROM Bundles ORDER BY ID
24.10 15:53:31 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 DB: SELECT * FROM BundleItems ORDER BY ID
24.10 15:53:31 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 SHOP: loading items...
24.10 15:53:31 ->>-: core/shop.getList { _type => core/shop.getList }
24.10 15:53:31 -<<-: core/shop.getList ok
24.10 15:53:31 SHOP: 0 items loaded (0.002 sec)
24.10 15:53:31 DB: SELECT * FROM EffectAttributeTypes
24.10 15:53:31 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 DB: SELECT * FROM Effects
24.10 15:53:31 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
24.10 15:53:31 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
24.10 15:53:31 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 DB: SELECT * FROM Badges
24.10 15:53:31 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
24.10 15:53:31 -<<-: core/server.query ok
24.10 15:53:31 TIMER: Check auto-disconnect...
24.10 15:53:31 STATS: vdl.0 cache, locks:0
24.10 15:53:31 TIMER: Check auto-disconnect...
24.10 15:53:31 STATS: vdl.0 cache, locks:0
24.10 15:53:31 TIMER: Check auto-disconnect...
24.10 15:53:31 STATS: vdl.0 cache, locks:0
24.10 15:53:31 TIMER: Check auto-disconnect...
24.10 15:53:31 STATS: vdl.0 cache, locks:0
24.10 15:53:31 TIMER: Check auto-disconnect...
24.10 15:53:31 STATS: vdl.0 cache, locks:0
24.10 15:59:02 NET: Client (conid:63908586) connected to vdl.0 (clients:1)
24.10 15:59:03 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
24.10 15:59:03 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
24.10 15:59:03 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
24.10 15:59:03 -<<-: core/server.query ok
24.10 15:59:03 STATS: vdl.0 cache connection, 21 calls, total 0.0589091777801514 sec spent, avg 2.81 ms
24.10 15:59:03 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
24.10 15:59:03 -<<-: core/user.isOnlineID ok
24.10 15:59:03 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
24.10 15:59:03 -<<-: core/cache.get ok
24.10 15:59:03 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
24.10 15:59:03 -<<-: core/cache.get ok
24.10 15:59:03 NET: Client login (conid:63908586, id:76, name:Aimer)
24.10 15:59:03 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
24.10 15:59:03 -<<-: core/user.loginPost null
24.10 15:59:03 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
24.10 15:59:03 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
24.10 15:59:05 ++ NET: Aimer req: user.data { messageType => user.data }
24.10 15:59:05 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
24.10 15:59:05 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:59:05 TIME: user.data 0.66 ms
24.10 15:59:05 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:59:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:59:07 TIME: user.ping 0.12 ms
24.10 15:59:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:59:11 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
24.10 15:59:11 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 15:59:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:59:14 TIME: user.ping 0.17 ms
24.10 15:59:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:59:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:59:21 TIME: user.ping 0.13 ms
24.10 15:59:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:59:26 NET: Client (conid:33137851) connected to vdl.0 (clients:2)
24.10 15:59:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:59:29 TIME: user.ping 0.13 ms
24.10 15:59:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:59:30 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
24.10 15:59:30 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
24.10 15:59:30 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
24.10 15:59:30 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
24.10 15:59:30 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
24.10 15:59:30 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
24.10 15:59:30 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
24.10 15:59:30 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1477308461, lastLoginDate => 298, lastLoadDate => 1025 }, effects => { list => [] } }}, version => 0, id => 2 } }
24.10 15:59:30 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
24.10 15:59:30 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
24.10 15:59:30 NET: Client login (conid:33137851, id:2, name:test1)
24.10 15:59:30 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
24.10 15:59:30 -<<-: core/user.loginPost { _type => core/user.loginPost }
24.10 15:59:30 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
24.10 15:59:30 == NET: test1 ret: user.join { name => Aimer, type => user.join }
24.10 15:59:30 == NET: test1 ret: user.join { name => test1, type => user.join }
24.10 15:59:30 == NET: Aimer ret: user.join { name => test1, type => user.join }
24.10 15:59:31 TIMER: Check auto-disconnect...
24.10 15:59:31 STATS: vdl.0 cache, locks:4
24.10 15:59:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:59:36 TIME: user.ping 0.15 ms
24.10 15:59:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:59:36 ++ NET: test1 req: user.data { messageType => user.data }
24.10 15:59:36 ->>-: vdl/cache.user.getData { userId => 2, _type => vdl/cache.user.getData }
24.10 15:59:36 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:59:36 TIME: user.data 0.63 ms
24.10 15:59:36 == NET: test1 ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 15:59:36 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
24.10 15:59:36 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 15:59:41 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 15:59:41 TIME: user.ping 0.13 ms
24.10 15:59:41 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 15:59:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 15:59:43 TIME: user.ping 0.12 ms
24.10 15:59:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
