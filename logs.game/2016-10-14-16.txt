14.10 16:00:29 TIMER: Check auto-disconnect...
14.10 16:00:30 STATS: vdl.0 cache, locks:0
14.10 16:01:29 TIMER: Check auto-disconnect...
14.10 16:01:30 STATS: vdl.0 cache, locks:0
14.10 16:02:29 TIMER: Check auto-disconnect...
14.10 16:02:30 STATS: vdl.0 cache, locks:0
14.10 16:03:29 TIMER: Check auto-disconnect...
14.10 16:03:30 STATS: vdl.0 cache, locks:0
14.10 16:04:29 TIMER: Check auto-disconnect...
14.10 16:04:30 STATS: vdl.0 cache, locks:0
14.10 16:05:07 NET: Client (conid:91311491) connected to vdl.0 (clients:1)
14.10 16:05:07 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzQ= }
14.10 16:05:07 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid34' AND Password = E'uid34'
14.10 16:05:07 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid34' AND Password = E'uid34', _type => core/server.query }
14.10 16:05:07 -<<-: core/server.query { list => {{ name => uid34, networkid => , isbanned => false, id => 34 }}, errorCode => ok, _type => core/server.query }
14.10 16:05:07 STATS: vdl.0 cache connection, 88 calls, total 0.143368721008301 sec spent, avg 1.63 ms
14.10 16:05:07 ->>-: core/user.isOnlineID { id => 34, _type => core/user.isOnlineID }
14.10 16:05:07 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
14.10 16:05:07 ->>-: core/cache.get { type => user, v => -1, id => 34, _type => core/cache.get }
14.10 16:05:07 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid34, deleted => false, email => , networktype =>   , password => uid34, isbanned => false, regdate => 2016-10-14 12:39:51.725362+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476437991, lastLoginDate => 288, lastLoadDate => 1015 }, effects => { list => [] } }}, version => 0, id => 34 } }
14.10 16:05:07 ->>-: core/cache.get { type => questdata, v => -1, id => 34, _type => core/cache.get }
14.10 16:05:07 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 34 } }
14.10 16:05:07 NET: Client login (conid:91311491, id:34, name:uid34)
14.10 16:05:07 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 34, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 16:05:07 -<<-: core/user.loginPost { _type => core/user.loginPost }
14.10 16:05:07 == NET: uid34 ret: user.login { name => uid34, type => user.login, errorCode => ok, id => 34 }
14.10 16:05:07 == NET: uid34 ret: user.join { name => uid34, type => user.join }
14.10 16:05:15 ++ NET: uid34 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 16:05:15 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:05:15 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 }], battleActive => null, startdate => 2016-14-10_16:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:05:15 TIME: tournament.getAvailableTournament 5.04 ms
14.10 16:05:15 == NET: uid34 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 }], battleActive => null, startdate => 2016-14-10_16:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:05:15 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 34, _type => core/cache.update }
14.10 16:05:15 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 16:05:29 TIMER: Check auto-disconnect...
14.10 16:05:30 STATS: vdl.0 cache, locks:2
14.10 16:06:29 TIMER: Check auto-disconnect...
14.10 16:06:30 STATS: vdl.0 cache, locks:2
14.10 16:07:29 TIMER: Check auto-disconnect...
14.10 16:07:30 STATS: vdl.0 cache, locks:2
14.10 16:08:29 TIMER: Check auto-disconnect...
14.10 16:08:29 NET: Client (name:uid34 conid:91311491 TCP) disconnected from vdl.0 (clients:0)
14.10 16:08:29 DB: SELECT id FROM battle WHERE firstid=34 OR secondid=34 AND finished <> true
14.10 16:08:29 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=34 OR secondid=34 AND finished <> true, _type => core/server.query }
14.10 16:08:29 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
14.10 16:08:29 STATS: vdl.0 cache connection, 95 calls, total 0.154725790023804 sec spent, avg 1.63 ms
14.10 16:08:29 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 16:08:29 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
14.10 16:08:29 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 16:08:29 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 214
Called from modules/VDLBattleModule.hx line 227
Called from snipe/slave/Server.hx line 994
14.10 16:08:29 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 34, _type => core/cache.update }
14.10 16:08:29 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
14.10 16:08:29 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 34, _type => core/cache.update }
14.10 16:08:29 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 16:08:29 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 34, _type => core/user.logoutPost }
14.10 16:08:29 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
14.10 16:08:30 STATS: vdl.0 cache, locks:0
14.10 16:09:29 TIMER: Check auto-disconnect...
14.10 16:09:30 STATS: vdl.0 cache, locks:0
14.10 16:09:54 NET: Client (conid:61296849) connected to vdl.0 (clients:1)
14.10 16:09:55 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzQ= }
14.10 16:09:55 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid34' AND Password = E'uid34'
14.10 16:09:55 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid34' AND Password = E'uid34', _type => core/server.query }
14.10 16:09:55 -<<-: core/server.query { list => {{ name => uid34, networkid => , isbanned => false, id => 34 }}, errorCode => ok, _type => core/server.query }
14.10 16:09:55 STATS: vdl.0 cache connection, 100 calls, total 0.159021615982056 sec spent, avg 1.59 ms
14.10 16:09:55 ->>-: core/user.isOnlineID { id => 34, _type => core/user.isOnlineID }
14.10 16:09:55 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
14.10 16:09:55 ->>-: core/cache.get { type => user, v => -1, id => 34, _type => core/cache.get }
14.10 16:09:55 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid34, deleted => false, email => , networktype =>   , password => uid34, isbanned => false, regdate => 2016-10-14 12:39:51.725362+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476437991, lastLoginDate => 288, lastLoadDate => 1015 }, effects => { list => [] } }}, version => 0, id => 34 } }
14.10 16:09:55 ->>-: core/cache.get { type => questdata, v => -1, id => 34, _type => core/cache.get }
14.10 16:09:55 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 34 } }
14.10 16:09:55 NET: Client login (conid:61296849, id:34, name:uid34)
14.10 16:09:55 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 34, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 16:09:55 -<<-: core/user.loginPost { _type => core/user.loginPost }
14.10 16:09:55 == NET: uid34 ret: user.login { name => uid34, type => user.login, errorCode => ok, id => 34 }
14.10 16:09:55 == NET: uid34 ret: user.join { name => uid34, type => user.join }
14.10 16:10:00 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 34, _type => core/cache.update }
14.10 16:10:00 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 16:10:04 ++ NET: uid34 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 16:10:04 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:10:04 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 }], battleActive => null, startdate => 2016-14-10_16:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:10:04 TIME: tournament.getAvailableTournament 3.98 ms
14.10 16:10:04 == NET: uid34 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 }], battleActive => null, startdate => 2016-14-10_16:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:10:12 ++ NET: uid34 req: tournament.deleteUsers { tournamentId => 1, messageType => tournament.deleteUsers }
14.10 16:10:12 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
14.10 16:10:12 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [34] }
14.10 16:10:12 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [], _type => vdl/cache.tournament.setUsersTournament }
14.10 16:10:12 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
14.10 16:10:12 TIME: tournament.deleteUsers 0.53 ms
14.10 16:10:12 == NET: uid34 ret: tournament.deleteUsers { type => tournament.deleteUsers, errorCode => ok }
14.10 16:10:12 ++ NET: uid34 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 16:10:12 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:10:12 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, startdate => 2016-14-10_16:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:10:12 TIME: tournament.getAvailableTournament 1.2 ms
14.10 16:10:12 == NET: uid34 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, startdate => 2016-14-10_16:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:10:17 ++ NET: uid34 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
14.10 16:10:17 ->>-: vdl/cache.tournament.addUsers { userId => 34, tournament => 1, _type => vdl/cache.tournament.addUsers }
14.10 16:10:17 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
14.10 16:10:17 TIME: tournament.addUsers 0.25 ms
14.10 16:10:17 == NET: uid34 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
14.10 16:10:17 ++ NET: uid34 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 16:10:17 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:10:17 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 }], battleActive => null, startdate => 2016-14-10_16:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:10:17 TIME: tournament.getAvailableTournament 1.01 ms
14.10 16:10:17 == NET: uid34 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 }], battleActive => null, startdate => 2016-14-10_16:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:10:29 TIMER: Check auto-disconnect...
14.10 16:10:30 STATS: vdl.0 cache, locks:2
14.10 16:11:29 TIMER: Check auto-disconnect...
14.10 16:11:30 STATS: vdl.0 cache, locks:2
14.10 16:12:29 TIMER: Check auto-disconnect...
14.10 16:12:30 STATS: vdl.0 cache, locks:2
14.10 16:12:40 NET: Client (name:uid34 conid:61296849 TCP) disconnected from vdl.0 (clients:0)
14.10 16:12:40 DB: SELECT id FROM battle WHERE firstid=34 OR secondid=34 AND finished <> true
14.10 16:12:40 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=34 OR secondid=34 AND finished <> true, _type => core/server.query }
14.10 16:12:40 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
14.10 16:12:40 STATS: vdl.0 cache connection, 112 calls, total 0.169275760650635 sec spent, avg 1.51 ms
14.10 16:12:40 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 16:12:40 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
14.10 16:12:40 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 16:12:40 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 214
Called from modules/VDLBattleModule.hx line 227
Called from snipe/slave/Server.hx line 994
14.10 16:12:40 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 34, _type => core/cache.update }
14.10 16:12:40 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
14.10 16:12:40 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 34, _type => core/cache.update }
14.10 16:12:40 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 16:12:40 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 34, _type => core/user.logoutPost }
14.10 16:12:40 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
14.10 16:13:29 TIMER: Check auto-disconnect...
14.10 16:13:30 STATS: vdl.0 cache, locks:0
14.10 16:14:29 TIMER: Check auto-disconnect...
14.10 16:14:30 STATS: vdl.0 cache, locks:0
14.10 16:15:29 TIMER: Check auto-disconnect...
14.10 16:15:30 STATS: vdl.0 cache, locks:0
14.10 16:16:29 TIMER: Check auto-disconnect...
14.10 16:16:30 STATS: vdl.0 cache, locks:0
14.10 16:17:29 TIMER: Check auto-disconnect...
14.10 16:17:30 STATS: vdl.0 cache, locks:0
14.10 16:18:29 TIMER: Check auto-disconnect...
14.10 16:18:30 STATS: vdl.0 cache, locks:0
14.10 16:19:29 TIMER: Check auto-disconnect...
14.10 16:19:30 STATS: vdl.0 cache, locks:0
14.10 16:19:34 NET: Client (conid:96713940) connected to vdl.0 (clients:1)
14.10 16:19:35 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzQ= }
14.10 16:19:35 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid34' AND Password = E'uid34'
14.10 16:19:35 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid34' AND Password = E'uid34', _type => core/server.query }
14.10 16:19:35 -<<-: core/server.query { list => {{ name => uid34, networkid => , isbanned => false, id => 34 }}, errorCode => ok, _type => core/server.query }
14.10 16:19:35 STATS: vdl.0 cache connection, 117 calls, total 0.172936677932739 sec spent, avg 1.48 ms
14.10 16:19:35 ->>-: core/user.isOnlineID { id => 34, _type => core/user.isOnlineID }
14.10 16:19:35 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
14.10 16:19:35 ->>-: core/cache.get { type => user, v => -1, id => 34, _type => core/cache.get }
14.10 16:19:35 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid34, deleted => false, email => , networktype =>   , password => uid34, isbanned => false, regdate => 2016-10-14 12:39:51.725362+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476437991, lastLoginDate => 288, lastLoadDate => 1015 }, effects => { list => [] } }}, version => 0, id => 34 } }
14.10 16:19:35 ->>-: core/cache.get { type => questdata, v => -1, id => 34, _type => core/cache.get }
14.10 16:19:35 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 34 } }
14.10 16:19:35 NET: Client login (conid:96713940, id:34, name:uid34)
14.10 16:19:35 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 34, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 16:19:35 -<<-: core/user.loginPost { _type => core/user.loginPost }
14.10 16:19:35 == NET: uid34 ret: user.login { name => uid34, type => user.login, errorCode => ok, id => 34 }
14.10 16:19:35 == NET: uid34 ret: user.join { name => uid34, type => user.join }
14.10 16:19:40 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 34, _type => core/cache.update }
14.10 16:19:40 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 16:19:42 ++ NET: uid34 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 16:19:42 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:19:42 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 }], battleActive => null, startdate => 2016-14-10_16:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:19:42 TIME: tournament.getAvailableTournament 3.7 ms
14.10 16:19:42 == NET: uid34 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 }], battleActive => null, startdate => 2016-14-10_16:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:20:29 TIMER: Check auto-disconnect...
14.10 16:42:52 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 16:42:52 -<<-: server.login ok
14.10 16:42:52 DB: SELECT * FROM LocalizationStrings
14.10 16:42:52 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:52 TIMER: Starting timer...
14.10 16:42:52 DB: SELECT * FROM GameVars
14.10 16:42:52 TIMER: Timer running...
14.10 16:42:52 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:52 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 16:42:52 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:52 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 16:42:52 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:52 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 16:42:52 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:52 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 16:42:52 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:52 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 16:42:52 -<<-: core/quest.getDaily ok
14.10 16:42:52 DB: SELECT * FROM UserAttributeTypes
14.10 16:42:52 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:52 DB: SELECT * FROM UserVariableTypes
14.10 16:42:52 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:52 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 16:42:52 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:52 DB: SELECT * FROM ItemGroups
14.10 16:42:52 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:52 DB: SELECT * FROM Bundles ORDER BY ID
14.10 16:42:52 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:52 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 16:42:52 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:52 SHOP: loading items...
14.10 16:42:52 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 16:42:52 -<<-: core/shop.getList ok
14.10 16:42:52 SHOP: 0 items loaded (0 sec)
14.10 16:42:52 DB: SELECT * FROM EffectAttributeTypes
14.10 16:42:52 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:52 DB: SELECT * FROM Effects
14.10 16:42:52 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:52 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 16:42:52 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:52 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 16:42:52 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:52 DB: SELECT * FROM Badges
14.10 16:42:52 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 16:42:52 -<<-: core/server.query ok
14.10 16:42:53 NET: Client (conid:85489503) connected to vdl.0 (clients:1)
14.10 16:42:53 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzQ= }
14.10 16:42:53 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid34' AND Password = E'uid34'
14.10 16:42:53 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid34' AND Password = E'uid34', _type => core/server.query }
14.10 16:42:53 -<<-: core/server.query ok
14.10 16:42:53 ->>-: core/user.isOnlineID { id => 34, _type => core/user.isOnlineID }
14.10 16:42:53 -<<-: core/user.isOnlineID ok
14.10 16:42:53 ->>-: core/cache.get { type => user, v => -1, id => 34, _type => core/cache.get }
14.10 16:42:53 -<<-: core/cache.get ok
14.10 16:42:53 ->>-: core/cache.get { type => questdata, v => -1, id => 34, _type => core/cache.get }
14.10 16:42:53 -<<-: core/cache.get ok
14.10 16:42:53 NET: Client login (conid:85489503, id:34, name:uid34)
14.10 16:42:53 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 34, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 16:42:53 -<<-: core/user.loginPost null
14.10 16:42:53 == NET: uid34 ret: user.login { name => uid34, type => user.login, errorCode => ok, id => 34 }
14.10 16:42:53 == NET: uid34 ret: user.join { name => uid34, type => user.join }
14.10 16:43:02 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 34, _type => core/cache.update }
14.10 16:43:02 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 16:43:28 ++ NET: uid34 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 16:43:28 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:43:28 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 }], battleActive => null, startdate => 2016-14-10_16:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:43:28 TIME: tournament.getAvailableTournament 3.61 ms
14.10 16:43:28 == NET: uid34 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 }], battleActive => null, startdate => 2016-14-10_16:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:43:37 ++ NET: uid34 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 16:43:37 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:43:37 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 }], battleActive => null, startdate => 2016-14-10_16:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:43:37 TIME: tournament.getAvailableTournament 1.66 ms
14.10 16:43:37 == NET: uid34 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 }], battleActive => null, startdate => 2016-14-10_16:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:2
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:2
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:2
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 NET: Client (name:uid34 conid:85489503 TCP) disconnected from vdl.0 (clients:0)
14.10 16:43:52 DB: SELECT id FROM battle WHERE firstid=34 OR secondid=34 AND finished <> true
14.10 16:43:52 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=34 OR secondid=34 AND finished <> true, _type => core/server.query }
14.10 16:43:52 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
14.10 16:43:52 STATS: vdl.0 cache connection, 29 calls, total 0.037034273147583 sec spent, avg 1.28 ms
14.10 16:43:52 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 16:43:52 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
14.10 16:43:52 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 16:43:52 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 214
Called from modules/VDLBattleModule.hx line 227
Called from snipe/slave/Server.hx line 994
14.10 16:43:52 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 34, _type => core/cache.update }
14.10 16:43:52 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
14.10 16:43:52 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 34, _type => core/cache.update }
14.10 16:43:52 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 16:43:52 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 34, _type => core/user.logoutPost }
14.10 16:43:52 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
14.10 16:43:52 STATS: vdl.0 cache, locks:0
14.10 16:43:52 TIMER: Check auto-disconnect...
