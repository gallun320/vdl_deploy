02.09 21:00:38 TIMER: Check auto-disconnect...
02.09 21:00:39 STATS: vdl.0 cache, locks:2
02.09 21:00:41 NET: Client (name:test1 conid:40936106 TCP) disconnected from vdl.0 (clients:1)
02.09 21:00:41 DB: SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true
02.09 21:00:41 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true, _type => core/server.query }
02.09 21:00:41 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
02.09 21:00:41 STATS: vdl.0 cache connection, 119 calls, total 0.481625318527222 sec spent, avg 4.05 ms
02.09 21:00:41 ->>-: vdl/cache.battle.deleteRoom { roomId => 0, _type => vdl/cache.battle.deleteRoom }
02.09 21:00:41 -<<-: vdl/cache.battle.deleteRoom { errorCode => true, _type => vdl/cache.battle.deleteRoom }
02.09 21:00:41 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
02.09 21:00:41 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
02.09 21:00:41 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
02.09 21:00:41 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 21:00:41 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
02.09 21:00:41 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
02.09 21:01:38 TIMER: Check auto-disconnect...
02.09 21:01:40 STATS: vdl.0 cache, locks:0
02.09 21:02:38 TIMER: Check auto-disconnect...
02.09 21:02:38 NET: Client (name:null conid:91575076 TCP) disconnected from vdl.0 (clients:0)
02.09 21:02:40 STATS: vdl.0 cache, locks:0
02.09 21:03:38 TIMER: Check auto-disconnect...
02.09 21:03:40 STATS: vdl.0 cache, locks:0
02.09 21:04:38 TIMER: Check auto-disconnect...
02.09 21:04:40 STATS: vdl.0 cache, locks:0
02.09 21:05:38 TIMER: Check auto-disconnect...
02.09 21:05:40 STATS: vdl.0 cache, locks:0
02.09 21:06:38 TIMER: Check auto-disconnect...
02.09 21:06:40 STATS: vdl.0 cache, locks:0
02.09 21:07:32 NET: Client (conid:64096414) connected to vdl.0 (clients:1)
02.09 21:07:32 NET: Client (name:null conid:64096414 TCP) disconnected from vdl.0 (clients:0)
02.09 21:07:32 NET: Client (conid:57706257) connected to vdl.0 (clients:1)
02.09 21:07:38 TIMER: Check auto-disconnect...
02.09 21:07:40 STATS: vdl.0 cache, locks:0
02.09 21:08:00 NET: Client (conid:36349771) connected to vdl.0 (clients:2)
02.09 21:08:16 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
02.09 21:08:16 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
02.09 21:08:16 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
02.09 21:08:17 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
02.09 21:08:17 STATS: vdl.0 cache connection, 124 calls, total 0.487082481384277 sec spent, avg 3.93 ms
02.09 21:08:17 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
02.09 21:08:17 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
02.09 21:08:17 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
02.09 21:08:17 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472829608, lastLoginDate => 246, lastLoadDate => 903 }, effects => { list => [] } }}, version => 0, id => 2 } }
02.09 21:08:17 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
02.09 21:08:17 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
02.09 21:08:17 NET: Client login (conid:36349771, id:2, name:test1)
02.09 21:08:17 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
02.09 21:08:17 -<<-: core/user.loginPost { _type => core/user.loginPost }
02.09 21:08:17 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
02.09 21:08:17 == NET: null ret: user.join { name => test1, type => user.join }
02.09 21:08:17 == NET: test1 ret: user.join { name => null, type => user.join }
02.09 21:08:17 == NET: test1 ret: user.join { name => test1, type => user.join }
02.09 21:08:17 ++ NET: test1 req: battle.find { messageType => battle.find }
02.09 21:08:17 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 21:08:17 -<<-: vdl/cache.battle.find { list => {}, count => 0, errorCode => not, _type => vdl/cache.battle.find }
02.09 21:08:17 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
02.09 21:08:17 -<<-: vdl/cache.battle.create { room => 43, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 21:08:17 TIME: battle.find 42.43 ms
02.09 21:08:17 == NET: test1 ret: battle.find { room => 43, type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 21:08:24 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
02.09 21:08:24 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
02.09 21:08:24 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
02.09 21:08:24 -<<-: core/server.query { list => {{ name => test2, networkid => , isbanned => false, id => 3 }}, errorCode => ok, _type => core/server.query }
02.09 21:08:24 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
02.09 21:08:24 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
02.09 21:08:24 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
02.09 21:08:24 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test2, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472825979, lastLoginDate => 246, lastLoadDate => 903 }, effects => { list => [] } }}, version => 0, id => 3 } }
02.09 21:08:24 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
02.09 21:08:24 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 3 } }
02.09 21:08:24 NET: Client login (conid:57706257, id:3, name:test2)
02.09 21:08:24 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
02.09 21:08:24 -<<-: core/user.loginPost { _type => core/user.loginPost }
02.09 21:08:24 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
02.09 21:08:24 == NET: test1 ret: user.join { name => test2, type => user.join }
02.09 21:08:24 == NET: test2 ret: user.join { name => test2, type => user.join }
02.09 21:08:24 == NET: test2 ret: user.join { name => test1, type => user.join }
02.09 21:08:24 ++ NET: test2 req: battle.find { messageType => battle.find }
02.09 21:08:24 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 21:08:24 -<<-: vdl/cache.battle.find { list => [{ id => 43, first => 2 }], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
02.09 21:08:24 ->>-: vdl/cache.battle.join { roomId => 43, selfId => 3, _type => vdl/cache.battle.join }
02.09 21:08:24 -<<-: vdl/cache.battle.join { room => 43, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 21:08:24 DB: SELECT name FROM users WHERE id=3
02.09 21:08:24 ->>-: core/server.query { q => SELECT name FROM users WHERE id=3, _type => core/server.query }
02.09 21:08:24 -<<-: core/server.query { list => {{ name => test2 }}, errorCode => ok, _type => core/server.query }
02.09 21:08:24 DB: SELECT name FROM users WHERE id=2
02.09 21:08:24 ->>-: core/server.query { q => SELECT name FROM users WHERE id=2, _type => core/server.query }
02.09 21:08:24 -<<-: core/server.query { list => {{ name => test1 }}, errorCode => ok, _type => core/server.query }
02.09 21:08:24 TIME: battle.find 7.28 ms
02.09 21:08:24 == NET: test2 ret: battle.enemy { name => test2, type => battle.enemy, enemy.id => 3, enemy.name => test1, enemy.num => 1 }
02.09 21:08:24 == NET: test2 ret: battle.find { room => 43, type => battle.find, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 21:08:24 == NET: test1 ret: battle.enemy { name => test1, type => battle.enemy, enemy.id => 2, enemy.name => test2, enemy.num => 2 }
02.09 21:08:25 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
02.09 21:08:25 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 21:08:30 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 3, _type => core/cache.update }
02.09 21:08:30 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 21:08:38 ++ NET: test1 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 43, name => throw, side => 2, dices => 340512, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 21:08:38 ->>-: vdl/cache.battle.infoRoom { roomId => 43, _type => vdl/cache.battle.infoRoom }
02.09 21:08:38 -<<-: vdl/cache.battle.infoRoom { secondId => 3, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
02.09 21:08:38 TIME: battle.sendtask 0.69 ms
02.09 21:08:38 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 21:08:38 == NET: test2 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 43, name => throw, side => 2, type => battle.task, dices => 340512, to => (0.0, 0.0), diceID => 0 }
02.09 21:08:38 TIMER: Check auto-disconnect...
02.09 21:08:40 STATS: vdl.0 cache, locks:4
02.09 21:08:44 ++ NET: test1 req: battle.sendtask { dice => 5, from => (0.0, 0.0), roomId => 43, name => choose, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 3 }
02.09 21:08:44 ->>-: vdl/cache.battle.infoRoom { roomId => 43, _type => vdl/cache.battle.infoRoom }
02.09 21:08:44 -<<-: vdl/cache.battle.infoRoom { secondId => 3, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
02.09 21:08:44 TIME: battle.sendtask 0.79 ms
02.09 21:08:44 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 21:08:44 == NET: test2 ret: battle.task { dice => 5, from => (0.0, 0.0), roomId => 43, name => choose, side => 2, type => battle.task, dices => null, to => (0.0, 0.0), diceID => 3 }
02.09 21:08:50 ++ NET: test1 req: battle.sendtask { dice => 5, from => (2.0, 4.0), roomId => 43, name => take, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 21:08:50 ->>-: vdl/cache.battle.infoRoom { roomId => 43, _type => vdl/cache.battle.infoRoom }
02.09 21:08:50 -<<-: vdl/cache.battle.infoRoom { secondId => 3, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
02.09 21:08:50 TIME: battle.sendtask 0.61 ms
02.09 21:08:50 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 21:08:50 == NET: test2 ret: battle.task { dice => 5, from => (2.0, 4.0), roomId => 43, name => take, side => 2, type => battle.task, dices => null, to => (0.0, 0.0), diceID => 0 }
02.09 21:08:52 ++ NET: test1 req: battle.sendtask { dice => 5, from => (2.0, 4.0), roomId => 43, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (1.0, 4.0), diceID => 0 }
02.09 21:08:52 ->>-: vdl/cache.battle.infoRoom { roomId => 43, _type => vdl/cache.battle.infoRoom }
02.09 21:08:52 -<<-: vdl/cache.battle.infoRoom { secondId => 3, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
02.09 21:08:52 TIME: battle.sendtask 0.79 ms
02.09 21:08:52 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 21:08:52 == NET: test2 ret: battle.task { dice => 5, from => (2.0, 4.0), roomId => 43, name => swap, side => 2, type => battle.task, dices => null, to => (1.0, 4.0), diceID => 0 }
02.09 21:08:56 ++ NET: test1 req: battle.sendtask { dice => 3, from => (4.0, 2.0), roomId => 43, name => take, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 21:08:56 ->>-: vdl/cache.battle.infoRoom { roomId => 43, _type => vdl/cache.battle.infoRoom }
02.09 21:08:56 -<<-: vdl/cache.battle.infoRoom { secondId => 3, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
02.09 21:08:56 TIME: battle.sendtask 0.87 ms
02.09 21:08:56 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 21:08:56 == NET: test2 ret: battle.task { dice => 3, from => (4.0, 2.0), roomId => 43, name => take, side => 2, type => battle.task, dices => null, to => (0.0, 0.0), diceID => 0 }
02.09 21:09:03 ++ NET: test1 req: battle.sendtask { dice => 3, from => (4.0, 2.0), roomId => 43, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (4.0, 1.0), diceID => 0 }
02.09 21:09:03 ->>-: vdl/cache.battle.infoRoom { roomId => 43, _type => vdl/cache.battle.infoRoom }
02.09 21:09:03 -<<-: vdl/cache.battle.infoRoom { secondId => 3, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
02.09 21:09:03 TIME: battle.sendtask 0.99 ms
02.09 21:09:03 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 21:09:03 == NET: test2 ret: battle.task { dice => 3, from => (4.0, 2.0), roomId => 43, name => swap, side => 2, type => battle.task, dices => null, to => (4.0, 1.0), diceID => 0 }
02.09 21:09:04 ++ NET: test1 req: battle.sendtask { dice => 1, from => (4.0, 1.0), roomId => 43, name => take, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 21:09:04 ->>-: vdl/cache.battle.infoRoom { roomId => 43, _type => vdl/cache.battle.infoRoom }
02.09 21:09:04 -<<-: vdl/cache.battle.infoRoom { secondId => 3, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
02.09 21:09:04 TIME: battle.sendtask 0.66 ms
02.09 21:09:04 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 21:09:04 == NET: test2 ret: battle.task { dice => 1, from => (4.0, 1.0), roomId => 43, name => take, side => 2, type => battle.task, dices => null, to => (0.0, 0.0), diceID => 0 }
02.09 21:09:04 ++ NET: test1 req: battle.sendtask { dice => 1, from => (4.0, 1.0), roomId => 43, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (4.0, 2.0), diceID => 0 }
02.09 21:09:04 ->>-: vdl/cache.battle.infoRoom { roomId => 43, _type => vdl/cache.battle.infoRoom }
02.09 21:09:04 -<<-: vdl/cache.battle.infoRoom { secondId => 3, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
02.09 21:09:04 TIME: battle.sendtask 0.69 ms
02.09 21:09:04 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 21:09:04 == NET: test2 ret: battle.task { dice => 1, from => (4.0, 1.0), roomId => 43, name => swap, side => 2, type => battle.task, dices => null, to => (4.0, 2.0), diceID => 0 }
02.09 21:09:38 TIMER: Check auto-disconnect...
02.09 21:09:40 STATS: vdl.0 cache, locks:4
02.09 21:09:56 NET: Client (name:test2 conid:57706257 TCP) disconnected from vdl.0 (clients:1)
02.09 21:09:56 DB: SELECT id FROM battle WHERE firstid=3 OR secondid=3 AND finished <> true
02.09 21:09:56 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=3 OR secondid=3 AND finished <> true, _type => core/server.query }
02.09 21:09:56 -<<-: core/server.query { list => {{ id => 43 }}, errorCode => ok, _type => core/server.query }
02.09 21:09:56 STATS: vdl.0 cache connection, 150 calls, total 0.55347466468811 sec spent, avg 3.69 ms
02.09 21:09:56 ->>-: vdl/cache.battle.deleteRoom { roomId => 43, _type => vdl/cache.battle.deleteRoom }
02.09 21:09:56 -<<-: vdl/cache.battle.deleteRoom { errorCode => true, _type => vdl/cache.battle.deleteRoom }
02.09 21:09:56 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 3, _type => core/cache.update }
02.09 21:09:56 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
02.09 21:09:56 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 3, _type => core/cache.update }
02.09 21:09:56 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 21:09:56 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 3, _type => core/user.logoutPost }
02.09 21:09:56 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
02.09 21:10:08 ++ NET: test1 req: battle.sendtask { dice => 2, from => (0.0, 0.0), roomId => 43, name => choose, side => 2, dices => null, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 5 }
02.09 21:10:08 ->>-: vdl/cache.battle.infoRoom { roomId => 43, _type => vdl/cache.battle.infoRoom }
02.09 21:10:08 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
02.09 21:10:08 TRACE: battle.sendtask : cacheRequest exception { roomId => 43, _type => vdl/cache.battle.infoRoom }
02.09 21:10:08 TRACE: battle.sendtask : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 195
Called from modules/VDLBattleModule.hx line 112
Called from modules/VDLBattleModule.hx line 45
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
02.09 21:10:38 TIMER: Check auto-disconnect...
02.09 21:10:40 STATS: vdl.0 cache, locks:2
02.09 21:11:38 TIMER: Check auto-disconnect...
02.09 21:11:40 STATS: vdl.0 cache, locks:2
02.09 21:12:38 TIMER: Check auto-disconnect...
02.09 21:12:40 STATS: vdl.0 cache, locks:2
02.09 21:13:38 TIMER: Check auto-disconnect...
02.09 21:13:38 NET: Client (name:test1 conid:36349771 TCP) disconnected from vdl.0 (clients:0)
02.09 21:13:38 DB: SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true
02.09 21:13:38 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true, _type => core/server.query }
02.09 21:13:38 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
02.09 21:13:38 STATS: vdl.0 cache connection, 156 calls, total 0.571388483047485 sec spent, avg 3.66 ms
02.09 21:13:38 ->>-: vdl/cache.battle.deleteRoom { roomId => 0, _type => vdl/cache.battle.deleteRoom }
02.09 21:13:38 -<<-: vdl/cache.battle.deleteRoom { errorCode => true, _type => vdl/cache.battle.deleteRoom }
02.09 21:13:38 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
02.09 21:13:38 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
02.09 21:13:38 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
02.09 21:13:38 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 21:13:38 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
02.09 21:13:38 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
02.09 21:13:40 STATS: vdl.0 cache, locks:0
02.09 21:14:38 TIMER: Check auto-disconnect...
02.09 21:14:40 STATS: vdl.0 cache, locks:0
02.09 21:15:38 TIMER: Check auto-disconnect...
02.09 21:15:40 STATS: vdl.0 cache, locks:0
02.09 21:16:38 TIMER: Check auto-disconnect...
02.09 21:16:40 STATS: vdl.0 cache, locks:0
02.09 21:17:38 TIMER: Check auto-disconnect...
02.09 21:17:40 STATS: vdl.0 cache, locks:0
02.09 21:18:14 NET: Client (conid:31537704) connected to vdl.0 (clients:1)
02.09 21:18:14 NET: Client (name:null conid:31537704 TCP) disconnected from vdl.0 (clients:0)
02.09 21:18:14 NET: Client (conid:57333425) connected to vdl.0 (clients:1)
02.09 21:18:38 TIMER: Check auto-disconnect...
02.09 21:18:40 STATS: vdl.0 cache, locks:0
02.09 21:18:53 NET: Client (name:null conid:57333425 TCP) disconnected from vdl.0 (clients:0)
02.09 21:19:38 TIMER: Check auto-disconnect...
02.09 21:19:40 STATS: vdl.0 cache, locks:0
02.09 21:20:38 TIMER: Check auto-disconnect...
02.09 21:20:40 STATS: vdl.0 cache, locks:0
02.09 21:21:38 TIMER: Check auto-disconnect...
02.09 21:21:40 STATS: vdl.0 cache, locks:0
02.09 21:22:38 TIMER: Check auto-disconnect...
02.09 21:22:40 STATS: vdl.0 cache, locks:0
02.09 21:23:38 TIMER: Check auto-disconnect...
02.09 21:23:40 STATS: vdl.0 cache, locks:0
02.09 21:24:38 TIMER: Check auto-disconnect...
02.09 21:24:40 STATS: vdl.0 cache, locks:0
02.09 21:25:38 TIMER: Check auto-disconnect...
02.09 21:25:40 STATS: vdl.0 cache, locks:0
02.09 21:26:38 TIMER: Check auto-disconnect...
02.09 21:26:40 STATS: vdl.0 cache, locks:0
02.09 21:27:38 TIMER: Check auto-disconnect...
02.09 21:27:40 STATS: vdl.0 cache, locks:0
02.09 21:28:38 TIMER: Check auto-disconnect...
02.09 21:28:40 STATS: vdl.0 cache, locks:0
02.09 21:29:38 TIMER: Check auto-disconnect...
02.09 21:29:40 STATS: vdl.0 cache, locks:0
02.09 21:30:38 TIMER: Check auto-disconnect...
02.09 21:30:40 STATS: vdl.0 cache, locks:0
02.09 21:31:38 TIMER: Check auto-disconnect...
02.09 21:31:40 STATS: vdl.0 cache, locks:0
02.09 21:32:38 TIMER: Check auto-disconnect...
02.09 21:32:40 STATS: vdl.0 cache, locks:0
02.09 21:33:38 TIMER: Check auto-disconnect...
02.09 21:33:40 STATS: vdl.0 cache, locks:0
02.09 21:34:38 TIMER: Check auto-disconnect...
02.09 21:34:40 STATS: vdl.0 cache, locks:0
02.09 21:35:38 TIMER: Check auto-disconnect...
02.09 21:35:40 STATS: vdl.0 cache, locks:0
02.09 21:36:38 TIMER: Check auto-disconnect...
02.09 21:36:40 STATS: vdl.0 cache, locks:0
02.09 21:37:38 TIMER: Check auto-disconnect...
02.09 21:37:40 STATS: vdl.0 cache, locks:0
02.09 21:38:38 TIMER: Check auto-disconnect...
02.09 21:38:40 STATS: vdl.0 cache, locks:0
02.09 21:39:38 TIMER: Check auto-disconnect...
02.09 21:39:40 STATS: vdl.0 cache, locks:0
02.09 21:40:38 TIMER: Check auto-disconnect...
02.09 21:40:40 STATS: vdl.0 cache, locks:0
02.09 21:41:38 TIMER: Check auto-disconnect...
02.09 21:42:48 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3010, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3010 }
02.09 21:42:48 -<<-: server.login ok
02.09 21:42:48 DB: SELECT * FROM LocalizationStrings
02.09 21:42:48 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 21:42:49 -<<-: core/server.query ok
02.09 21:42:49 TIMER: Starting timer...
02.09 21:42:49 TIMER: Timer running...
02.09 21:42:49 DB: SELECT * FROM GameVars
02.09 21:42:49 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 21:42:50 -<<-: core/server.query ok
02.09 21:42:50 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 21:42:50 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 21:42:50 -<<-: core/server.query ok
02.09 21:42:50 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 21:42:50 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 21:42:51 -<<-: core/server.query ok
02.09 21:42:51 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 21:42:51 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 21:42:51 -<<-: core/server.query ok
02.09 21:42:51 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 21:42:51 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 21:42:51 -<<-: core/server.query ok
02.09 21:42:51 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 21:42:51 -<<-: core/quest.getDaily ok
02.09 21:42:51 DB: SELECT * FROM UserAttributeTypes
02.09 21:42:51 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 21:42:52 -<<-: core/server.query ok
02.09 21:42:52 DB: SELECT * FROM UserVariableTypes
02.09 21:42:52 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 21:42:52 -<<-: core/server.query ok
02.09 21:42:52 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 21:42:52 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 21:42:52 -<<-: core/server.query ok
02.09 21:42:52 DB: SELECT * FROM ItemGroups
02.09 21:42:52 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 21:42:53 -<<-: core/server.query ok
02.09 21:42:53 DB: SELECT * FROM Bundles ORDER BY ID
02.09 21:42:53 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 21:42:53 -<<-: core/server.query ok
02.09 21:42:53 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 21:42:53 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 21:42:53 -<<-: core/server.query ok
02.09 21:42:53 SHOP: loading items...
02.09 21:42:53 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 21:42:53 -<<-: core/shop.getList ok
02.09 21:42:53 SHOP: 0 items loaded (0 sec)
02.09 21:42:53 DB: SELECT * FROM EffectAttributeTypes
02.09 21:42:53 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 21:42:54 -<<-: core/server.query ok
02.09 21:42:54 DB: SELECT * FROM Effects
02.09 21:42:54 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 21:42:54 -<<-: core/server.query ok
02.09 21:42:54 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
02.09 21:42:54 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
02.09 21:42:54 -<<-: core/server.query ok
02.09 21:42:54 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
02.09 21:42:54 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
02.09 21:43:38 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3010, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3010 }
02.09 21:43:38 -<<-: server.login ok
02.09 21:43:38 DB: SELECT * FROM LocalizationStrings
02.09 21:43:38 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 21:43:39 -<<-: core/server.query ok
02.09 21:43:39 TIMER: Starting timer...
02.09 21:43:39 TIMER: Timer running...
02.09 21:43:39 DB: SELECT * FROM GameVars
02.09 21:43:39 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 21:43:40 -<<-: core/server.query ok
02.09 21:43:40 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 21:43:40 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 21:43:40 -<<-: core/server.query ok
02.09 21:43:40 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 21:43:40 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 21:43:41 -<<-: core/server.query ok
02.09 21:43:41 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 21:43:41 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 21:43:41 -<<-: core/server.query ok
02.09 21:43:41 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 21:43:41 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 21:43:41 -<<-: core/server.query ok
02.09 21:43:41 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 21:43:41 -<<-: core/quest.getDaily ok
02.09 21:43:41 DB: SELECT * FROM UserAttributeTypes
02.09 21:43:41 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 21:43:42 -<<-: core/server.query ok
02.09 21:43:42 DB: SELECT * FROM UserVariableTypes
02.09 21:43:42 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 21:43:42 -<<-: core/server.query ok
02.09 21:43:42 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 21:43:42 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 21:43:42 -<<-: core/server.query ok
02.09 21:43:42 DB: SELECT * FROM ItemGroups
02.09 21:43:42 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 21:43:43 -<<-: core/server.query ok
02.09 21:43:43 DB: SELECT * FROM Bundles ORDER BY ID
02.09 21:43:43 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 21:43:43 -<<-: core/server.query ok
02.09 21:43:43 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 21:43:43 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 21:43:44 -<<-: core/server.query ok
02.09 21:43:44 SHOP: loading items...
02.09 21:43:44 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 21:43:44 -<<-: core/shop.getList ok
02.09 21:43:44 SHOP: 0 items loaded (0 sec)
02.09 21:43:44 DB: SELECT * FROM EffectAttributeTypes
02.09 21:43:44 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 21:43:44 -<<-: core/server.query ok
02.09 21:43:44 DB: SELECT * FROM Effects
02.09 21:43:44 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 21:43:45 -<<-: core/server.query ok
02.09 21:43:45 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
02.09 21:43:45 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
02.09 21:43:45 -<<-: core/server.query ok
02.09 21:43:45 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
02.09 21:43:45 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
