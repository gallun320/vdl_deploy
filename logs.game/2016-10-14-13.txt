14.10 13:01:00 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 13:01:00 -<<-: server.login ok
14.10 13:01:00 DB: SELECT * FROM LocalizationStrings
14.10 13:01:00 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:00 TIMER: Starting timer...
14.10 13:01:00 TIMER: Timer running...
14.10 13:01:00 DB: SELECT * FROM GameVars
14.10 13:01:00 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:00 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 13:01:00 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:00 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 13:01:00 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:00 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 13:01:00 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:00 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 13:01:00 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:00 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 13:01:00 -<<-: core/quest.getDaily ok
14.10 13:01:00 DB: SELECT * FROM UserAttributeTypes
14.10 13:01:00 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:00 DB: SELECT * FROM UserVariableTypes
14.10 13:01:00 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:00 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 13:01:00 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:00 DB: SELECT * FROM ItemGroups
14.10 13:01:00 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:00 DB: SELECT * FROM Bundles ORDER BY ID
14.10 13:01:00 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:00 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 13:01:00 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:00 SHOP: loading items...
14.10 13:01:00 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 13:01:00 -<<-: core/shop.getList ok
14.10 13:01:00 SHOP: 0 items loaded (0 sec)
14.10 13:01:00 DB: SELECT * FROM EffectAttributeTypes
14.10 13:01:00 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:00 DB: SELECT * FROM Effects
14.10 13:01:00 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:00 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 13:01:00 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:00 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 13:01:00 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:00 DB: SELECT * FROM Badges
14.10 13:01:00 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 13:01:00 -<<-: core/server.query ok
14.10 13:01:25 NET: Client (conid:192629) connected to vdl.0 (clients:1)
14.10 13:01:26 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzQ= }
14.10 13:01:26 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid34' AND Password = E'uid34'
14.10 13:01:26 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid34' AND Password = E'uid34', _type => core/server.query }
14.10 13:01:26 -<<-: core/server.query ok
14.10 13:01:26 ->>-: core/user.isOnlineID { id => 34, _type => core/user.isOnlineID }
14.10 13:01:26 -<<-: core/user.isOnlineID ok
14.10 13:01:26 ->>-: core/cache.get { type => user, v => -1, id => 34, _type => core/cache.get }
14.10 13:01:26 -<<-: core/cache.get ok
14.10 13:01:26 ->>-: core/cache.get { type => questdata, v => -1, id => 34, _type => core/cache.get }
14.10 13:01:26 -<<-: core/cache.get ok
14.10 13:01:26 NET: Client login (conid:192629, id:34, name:uid34)
14.10 13:01:26 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 34, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 13:01:26 -<<-: core/user.loginPost null
14.10 13:01:26 == NET: uid34 ret: user.login { name => uid34, type => user.login, errorCode => ok, id => 34 }
14.10 13:01:26 == NET: uid34 ret: user.join { name => uid34, type => user.join }
14.10 13:01:32 ++ NET: uid34 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 13:01:32 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 13:01:32 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => null, battleActive => null, startdate => 2016-14-10 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 13:01:32 == NET: uid34 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => null, battleActive => null, startdate => 2016-14-10 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 13:01:32 TIME: tournament.getAvailableTournament 4.56 ms
14.10 13:01:35 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 34, _type => core/cache.update }
14.10 13:01:35 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 13:02:00 TIMER: Check auto-disconnect...
14.10 13:02:00 STATS: vdl.0 cache, locks:2
14.10 13:02:00 TIMER: Check auto-disconnect...
14.10 13:02:00 STATS: vdl.0 cache, locks:2
14.10 13:02:00 TIMER: Check auto-disconnect...
14.10 13:02:00 STATS: vdl.0 cache, locks:2
14.10 13:02:00 TIMER: Check auto-disconnect...
14.10 13:02:00 NET: Client (name:uid34 conid:192629 TCP) disconnected from vdl.0 (clients:0)
14.10 13:02:00 DB: SELECT id FROM battle WHERE firstid=34 OR secondid=34 AND finished <> true
14.10 13:02:00 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=34 OR secondid=34 AND finished <> true, _type => core/server.query }
14.10 13:02:00 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
14.10 13:02:00 STATS: vdl.0 cache connection, 28 calls, total 0.0377850532531738 sec spent, avg 1.35 ms
14.10 13:02:00 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 13:02:00 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
14.10 13:02:00 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 13:02:00 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 214
Called from modules/VDLBattleModule.hx line 227
Called from snipe/slave/Server.hx line 994
14.10 13:02:00 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 34, _type => core/cache.update }
14.10 13:02:00 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
14.10 13:02:00 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 34, _type => core/cache.update }
14.10 13:02:00 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 13:02:00 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 34, _type => core/user.logoutPost }
14.10 13:02:00 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
14.10 13:02:00 STATS: vdl.0 cache, locks:0
14.10 13:02:00 TIMER: Check auto-disconnect...
14.10 13:02:00 STATS: vdl.0 cache, locks:0
14.10 13:02:00 TIMER: Check auto-disconnect...
14.10 13:02:00 STATS: vdl.0 cache, locks:0
14.10 13:07:47 NET: Client (conid:98459172) connected to vdl.0 (clients:1)
14.10 13:07:48 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzQ= }
14.10 13:07:48 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid34' AND Password = E'uid34'
14.10 13:07:48 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid34' AND Password = E'uid34', _type => core/server.query }
14.10 13:07:48 -<<-: core/server.query { list => {{ name => uid34, networkid => , isbanned => false, id => 34 }}, errorCode => ok, _type => core/server.query }
14.10 13:07:48 STATS: vdl.0 cache connection, 33 calls, total 0.0465781688690186 sec spent, avg 1.41 ms
14.10 13:07:48 ->>-: core/user.isOnlineID { id => 34, _type => core/user.isOnlineID }
14.10 13:07:48 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
14.10 13:07:48 ->>-: core/cache.get { type => user, v => -1, id => 34, _type => core/cache.get }
14.10 13:07:48 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid34, deleted => false, email => , networktype =>   , password => uid34, isbanned => false, regdate => 2016-10-14 12:39:51.725362+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476437991, lastLoginDate => 288, lastLoadDate => 1015 }, effects => { list => [] } }}, version => 0, id => 34 } }
14.10 13:07:48 ->>-: core/cache.get { type => questdata, v => -1, id => 34, _type => core/cache.get }
14.10 13:07:48 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 34 } }
14.10 13:07:48 NET: Client login (conid:98459172, id:34, name:uid34)
14.10 13:07:48 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 34, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 13:07:48 -<<-: core/user.loginPost { _type => core/user.loginPost }
14.10 13:07:48 == NET: uid34 ret: user.login { name => uid34, type => user.login, errorCode => ok, id => 34 }
14.10 13:07:48 == NET: uid34 ret: user.join { name => uid34, type => user.join }
14.10 13:07:55 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 34, _type => core/cache.update }
14.10 13:07:55 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 13:08:00 TIMER: Check auto-disconnect...
14.10 13:08:00 STATS: vdl.0 cache, locks:2
14.10 13:08:00 TIMER: Check auto-disconnect...
14.10 13:08:00 STATS: vdl.0 cache, locks:2
14.10 13:08:00 TIMER: Check auto-disconnect...
14.10 13:08:00 STATS: vdl.0 cache, locks:2
14.10 13:08:00 TIMER: Check auto-disconnect...
14.10 13:08:00 NET: Client (name:uid34 conid:98459172 TCP) disconnected from vdl.0 (clients:0)
14.10 13:08:00 DB: SELECT id FROM battle WHERE firstid=34 OR secondid=34 AND finished <> true
14.10 13:08:00 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=34 OR secondid=34 AND finished <> true, _type => core/server.query }
14.10 13:08:00 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
14.10 13:08:00 STATS: vdl.0 cache connection, 39 calls, total 0.0573632717132568 sec spent, avg 1.47 ms
14.10 13:08:00 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 13:08:00 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
14.10 13:08:00 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 13:08:00 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 214
Called from modules/VDLBattleModule.hx line 227
Called from snipe/slave/Server.hx line 994
14.10 13:08:00 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 34, _type => core/cache.update }
14.10 13:08:00 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
14.10 13:08:00 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 34, _type => core/cache.update }
14.10 13:08:00 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 13:08:00 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 34, _type => core/user.logoutPost }
14.10 13:08:00 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
14.10 13:08:00 STATS: vdl.0 cache, locks:0
14.10 13:08:00 TIMER: Check auto-disconnect...
14.10 13:08:00 STATS: vdl.0 cache, locks:0
14.10 13:08:00 TIMER: Check auto-disconnect...
14.10 13:08:00 STATS: vdl.0 cache, locks:0
14.10 13:08:00 TIMER: Check auto-disconnect...
14.10 13:08:00 STATS: vdl.0 cache, locks:0
14.10 13:08:00 TIMER: Check auto-disconnect...
14.10 13:08:00 STATS: vdl.0 cache, locks:0
14.10 13:08:00 TIMER: Check auto-disconnect...
14.10 13:08:00 STATS: vdl.0 cache, locks:0
14.10 13:08:00 TIMER: Check auto-disconnect...
14.10 13:08:00 STATS: vdl.0 cache, locks:0
14.10 13:08:00 TIMER: Check auto-disconnect...
14.10 13:08:00 STATS: vdl.0 cache, locks:0
14.10 13:18:20 NET: Client (conid:77666463) connected to vdl.0 (clients:1)
14.10 13:18:28 ++ NET: null req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 13:18:28 TRACE: User not logon yet.
14.10 13:19:00 TIMER: Check auto-disconnect...
14.10 13:19:00 STATS: vdl.0 cache, locks:0
14.10 13:19:00 TIMER: Check auto-disconnect...
14.10 13:19:00 STATS: vdl.0 cache, locks:0
14.10 13:19:00 TIMER: Check auto-disconnect...
14.10 13:19:00 STATS: vdl.0 cache, locks:0
14.10 13:19:00 TIMER: Check auto-disconnect...
14.10 13:19:00 NET: Client (name:null conid:77666463 TCP) disconnected from vdl.0 (clients:0)
14.10 13:19:00 STATS: vdl.0 cache, locks:0
14.10 13:19:00 TIMER: Check auto-disconnect...
14.10 13:19:00 STATS: vdl.0 cache, locks:0
14.10 13:19:00 TIMER: Check auto-disconnect...
14.10 13:19:00 STATS: vdl.0 cache, locks:0
14.10 13:19:00 TIMER: Check auto-disconnect...
14.10 13:19:00 STATS: vdl.0 cache, locks:0
14.10 13:19:00 TIMER: Check auto-disconnect...
14.10 13:19:00 STATS: vdl.0 cache, locks:0
14.10 13:19:00 TIMER: Check auto-disconnect...
14.10 13:19:00 STATS: vdl.0 cache, locks:0
14.10 13:19:00 TIMER: Check auto-disconnect...
14.10 13:19:00 STATS: vdl.0 cache, locks:0
14.10 13:19:00 TIMER: Check auto-disconnect...
14.10 13:19:00 STATS: vdl.0 cache, locks:0
14.10 13:29:43 NET: Client (conid:54585203) connected to vdl.0 (clients:1)
14.10 13:29:44 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzQ= }
14.10 13:29:44 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid34' AND Password = E'uid34'
14.10 13:29:44 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid34' AND Password = E'uid34', _type => core/server.query }
14.10 13:29:44 -<<-: core/server.query { list => {{ name => uid34, networkid => , isbanned => false, id => 34 }}, errorCode => ok, _type => core/server.query }
14.10 13:29:44 STATS: vdl.0 cache connection, 44 calls, total 0.0644114017486572 sec spent, avg 1.46 ms
14.10 13:29:44 ->>-: core/user.isOnlineID { id => 34, _type => core/user.isOnlineID }
14.10 13:29:44 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
14.10 13:29:44 ->>-: core/cache.get { type => user, v => -1, id => 34, _type => core/cache.get }
14.10 13:29:44 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid34, deleted => false, email => , networktype =>   , password => uid34, isbanned => false, regdate => 2016-10-14 12:39:51.725362+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476437991, lastLoginDate => 288, lastLoadDate => 1015 }, effects => { list => [] } }}, version => 0, id => 34 } }
14.10 13:29:44 ->>-: core/cache.get { type => questdata, v => -1, id => 34, _type => core/cache.get }
14.10 13:29:44 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 34 } }
14.10 13:29:44 NET: Client login (conid:54585203, id:34, name:uid34)
14.10 13:29:44 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 34, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 13:29:44 -<<-: core/user.loginPost { _type => core/user.loginPost }
14.10 13:29:44 == NET: uid34 ret: user.login { name => uid34, type => user.login, errorCode => ok, id => 34 }
14.10 13:29:44 == NET: uid34 ret: user.join { name => uid34, type => user.join }
14.10 13:29:50 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 34, _type => core/cache.update }
14.10 13:29:50 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 13:29:50 ++ NET: uid34 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 13:29:50 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 13:29:50 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => null, battleActive => null, startdate => 2016-14-10 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 13:29:50 TIME: tournament.getAvailableTournament 3.77 ms
14.10 13:29:50 == NET: uid34 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => null, battleActive => null, startdate => 2016-14-10 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 13:36:01 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 13:36:01 -<<-: server.login ok
14.10 13:36:01 DB: SELECT * FROM LocalizationStrings
14.10 13:36:01 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 TIMER: Starting timer...
14.10 13:36:01 TIMER: Timer running...
14.10 13:36:01 DB: SELECT * FROM GameVars
14.10 13:36:01 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 13:36:01 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 13:36:01 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 13:36:01 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 13:36:01 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 13:36:01 -<<-: core/quest.getDaily ok
14.10 13:36:01 DB: SELECT * FROM UserAttributeTypes
14.10 13:36:01 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 DB: SELECT * FROM UserVariableTypes
14.10 13:36:01 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 13:36:01 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 DB: SELECT * FROM ItemGroups
14.10 13:36:01 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 DB: SELECT * FROM Bundles ORDER BY ID
14.10 13:36:01 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 13:36:01 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 SHOP: loading items...
14.10 13:36:01 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 13:36:01 -<<-: core/shop.getList ok
14.10 13:36:01 SHOP: 0 items loaded (0 sec)
14.10 13:36:01 DB: SELECT * FROM EffectAttributeTypes
14.10 13:36:01 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 DB: SELECT * FROM Effects
14.10 13:36:01 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 13:36:01 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 13:36:01 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 DB: SELECT * FROM Badges
14.10 13:36:01 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 13:36:01 -<<-: core/server.query ok
14.10 13:36:01 TIMER: Check auto-disconnect...
14.10 13:36:01 STATS: vdl.0 cache, locks:0
14.10 13:37:35 NET: Client (conid:63523375) connected to vdl.0 (clients:1)
14.10 13:37:36 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzQ= }
14.10 13:37:36 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid34' AND Password = E'uid34'
14.10 13:37:36 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid34' AND Password = E'uid34', _type => core/server.query }
14.10 13:37:36 -<<-: core/server.query ok
14.10 13:37:36 STATS: vdl.0 cache connection, 21 calls, total 0.0255587100982666 sec spent, avg 1.22 ms
14.10 13:37:36 ->>-: core/user.isOnlineID { id => 34, _type => core/user.isOnlineID }
14.10 13:37:36 -<<-: core/user.isOnlineID ok
14.10 13:37:36 ->>-: core/cache.get { type => user, v => -1, id => 34, _type => core/cache.get }
14.10 13:37:36 -<<-: core/cache.get ok
14.10 13:37:36 ->>-: core/cache.get { type => questdata, v => -1, id => 34, _type => core/cache.get }
14.10 13:37:36 -<<-: core/cache.get ok
14.10 13:37:36 NET: Client login (conid:63523375, id:34, name:uid34)
14.10 13:37:36 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 34, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 13:37:36 -<<-: core/user.loginPost null
14.10 13:37:36 == NET: uid34 ret: user.login { name => uid34, type => user.login, errorCode => ok, id => 34 }
14.10 13:37:36 == NET: uid34 ret: user.join { name => uid34, type => user.join }
14.10 13:37:43 ++ NET: uid34 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 13:37:43 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 13:37:43 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => null, battleActive => null, startdate => 2016-14-10 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 13:37:43 TIME: tournament.getAvailableTournament 3.53 ms
14.10 13:37:43 == NET: uid34 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => null, battleActive => null, startdate => 2016-14-10 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 13:37:46 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 34, _type => core/cache.update }
14.10 13:37:46 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 13:46:31 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 13:46:31 -<<-: server.login ok
14.10 13:46:31 DB: SELECT * FROM LocalizationStrings
14.10 13:46:31 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 13:46:31 -<<-: core/server.query ok
14.10 13:46:31 TIMER: Starting timer...
14.10 13:46:31 TIMER: Timer running...
14.10 13:46:31 DB: SELECT * FROM GameVars
14.10 13:46:31 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 13:46:31 -<<-: core/server.query ok
14.10 13:46:31 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 13:46:31 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 13:46:31 -<<-: core/server.query ok
14.10 13:46:31 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 13:46:31 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 13:46:31 -<<-: core/server.query ok
14.10 13:46:31 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 13:46:31 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 13:46:31 -<<-: core/server.query ok
14.10 13:46:31 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 13:46:31 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 13:46:31 -<<-: core/server.query ok
14.10 13:46:31 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 13:46:31 -<<-: core/quest.getDaily ok
14.10 13:46:31 DB: SELECT * FROM UserAttributeTypes
14.10 13:46:31 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 13:46:31 -<<-: core/server.query ok
14.10 13:46:31 DB: SELECT * FROM UserVariableTypes
14.10 13:46:31 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 13:46:31 -<<-: core/server.query ok
14.10 13:46:31 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 13:46:31 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 13:46:31 -<<-: core/server.query ok
14.10 13:46:31 DB: SELECT * FROM ItemGroups
14.10 13:46:31 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 13:46:31 -<<-: core/server.query ok
14.10 13:46:31 DB: SELECT * FROM Bundles ORDER BY ID
14.10 13:46:31 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 13:46:31 -<<-: core/server.query ok
14.10 13:46:31 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 13:46:31 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 13:46:31 -<<-: core/server.query ok
14.10 13:46:31 SHOP: loading items...
14.10 13:46:31 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 13:46:31 -<<-: core/shop.getList ok
14.10 13:46:31 SHOP: 0 items loaded (0 sec)
14.10 13:46:31 DB: SELECT * FROM EffectAttributeTypes
14.10 13:46:31 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 13:46:31 -<<-: core/server.query ok
14.10 13:46:31 DB: SELECT * FROM Effects
14.10 13:46:31 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 13:46:31 -<<-: core/server.query ok
14.10 13:46:31 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(14.10 13:48:13 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 13:48:13 -<<-: server.login ok
14.10 13:48:13 DB: SELECT * FROM LocalizationStrings
14.10 13:48:13 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 13:48:13 -<<-: core/server.query ok
14.10 13:48:13 TIMER: Starting timer...
14.10 13:48:13 TIMER: Timer running...
14.10 13:48:13 DB: SELECT * FROM GameVars
14.10 13:48:13 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 13:48:13 -<<-: core/server.query ok
14.10 13:48:13 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 13:48:13 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 13:48:13 -<<-: core/server.query ok
14.10 13:48:13 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 13:48:13 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 13:48:13 -<<-: core/server.query ok
14.10 13:48:13 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 13:48:13 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 13:48:13 -<<-: core/server.query ok
14.10 13:48:13 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 13:48:13 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 13:48:13 -<<-: core/server.query ok
14.10 13:48:13 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 13:48:13 -<<-: core/quest.getDaily ok
14.10 13:48:13 DB: SELECT * FROM UserAttributeTypes
14.10 13:48:13 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 13:48:13 -<<-: core/server.query ok
14.10 13:48:13 DB: SELECT * FROM UserVariableTypes
14.10 13:48:13 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 13:48:13 -<<-: core/server.query ok
14.10 13:48:13 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 13:48:13 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 13:48:13 -<<-: core/server.query ok
14.10 13:48:13 DB: SELECT * FROM ItemGroups
14.10 13:48:13 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 13:48:13 -<<-: core/server.query ok
14.10 13:48:13 DB: SELECT * FROM Bundles ORDER BY ID
14.10 13:48:13 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 13:48:13 -<<-: core/server.query ok
14.10 13:48:13 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 13:48:13 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 13:48:13 -<<-: core/server.query ok
14.10 13:48:13 SHOP: loading items...
14.10 13:48:13 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 13:48:13 -<<-: core/shop.getList ok
14.10 13:48:13 SHOP: 0 items loaded (0 sec)
14.10 13:48:13 DB: SELECT * FROM EffectAttributeTypes
14.10 13:48:13 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 13:48:13 -<<-: core/server.query ok
14.10 13:48:13 DB: SELECT * FROM Effects
14.10 13:48:13 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 13:48:13 -<<-: core/server.query ok
14.10 13:48:13 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(14.10 13:48:22 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 13:48:22 -<<-: server.login ok
14.10 13:48:22 DB: SELECT * FROM LocalizationStrings
14.10 13:48:22 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 TIMER: Starting timer...
14.10 13:48:22 TIMER: Timer running...
14.10 13:48:22 DB: SELECT * FROM GameVars
14.10 13:48:22 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 13:48:22 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 13:48:22 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 13:48:22 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 13:48:22 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 13:48:22 -<<-: core/quest.getDaily ok
14.10 13:48:22 DB: SELECT * FROM UserAttributeTypes
14.10 13:48:22 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 DB: SELECT * FROM UserVariableTypes
14.10 13:48:22 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 13:48:22 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 DB: SELECT * FROM ItemGroups
14.10 13:48:22 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 DB: SELECT * FROM Bundles ORDER BY ID
14.10 13:48:22 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 13:48:22 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 SHOP: loading items...
14.10 13:48:22 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 13:48:22 -<<-: core/shop.getList ok
14.10 13:48:22 SHOP: 0 items loaded (0 sec)
14.10 13:48:22 DB: SELECT * FROM EffectAttributeTypes
14.10 13:48:22 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 DB: SELECT * FROM Effects
14.10 13:48:22 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 13:48:22 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 13:48:22 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 DB: SELECT * FROM Badges
14.10 13:48:22 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 13:48:22 -<<-: core/server.query ok
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
14.10 13:48:22 TIMER: Check auto-disconnect...
14.10 13:48:22 STATS: vdl.0 cache, locks:0
