04.11 02:00:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:00:03 TRACE: User not logon yet.
04.11 02:00:08 TIMER: Check auto-disconnect...
04.11 02:00:08 STATS: vdl.0 cache, locks:0
04.11 02:00:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:00:27 TRACE: User not logon yet.
04.11 02:00:51 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:00:51 TRACE: User not logon yet.
04.11 02:01:08 TIMER: Check auto-disconnect...
04.11 02:01:08 STATS: vdl.0 cache, locks:0
04.11 02:01:16 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:01:16 TRACE: User not logon yet.
04.11 02:01:40 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:01:40 TRACE: User not logon yet.
04.11 02:02:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:02:05 TRACE: User not logon yet.
04.11 02:02:08 TIMER: Check auto-disconnect...
04.11 02:02:08 STATS: vdl.0 cache, locks:0
04.11 02:02:29 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:02:29 TRACE: User not logon yet.
04.11 02:02:53 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:02:53 TRACE: User not logon yet.
04.11 02:03:05 NET: Client (conid:65844570) connected to vdl.0 (clients:2)
04.11 02:03:06 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
04.11 02:03:06 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
04.11 02:03:06 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
04.11 02:03:06 -<<-: core/server.query ok
04.11 02:03:06 STATS: vdl.0 cache connection, 21 calls, total 0.0599522590637207 sec spent, avg 2.85 ms
04.11 02:03:06 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
04.11 02:03:06 -<<-: core/user.isOnlineID ok
04.11 02:03:06 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
04.11 02:03:06 -<<-: core/cache.get ok
04.11 02:03:06 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
04.11 02:03:06 -<<-: core/cache.get ok
04.11 02:03:06 NET: Client login (conid:65844570, id:107, name:uid107)
04.11 02:03:06 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
04.11 02:03:06 -<<-: core/user.loginPost null
04.11 02:03:06 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
04.11 02:03:06 == NET: null ret: user.join { name => uid107, type => user.join }
04.11 02:03:06 == NET: uid107 ret: user.join { name => null, type => user.join }
04.11 02:03:06 == NET: uid107 ret: user.join { name => uid107, type => user.join }
04.11 02:03:07 NET: Client (name:null conid:95935755 TCP) disconnected from vdl.0 (clients:1)
04.11 02:03:08 TIMER: Check auto-disconnect...
04.11 02:03:08 STATS: vdl.0 cache, locks:2
04.11 02:03:11 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:03:11 TIME: user.ping 0.19 ms
04.11 02:03:11 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:03:13 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
04.11 02:03:13 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
04.11 02:03:20 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:03:20 TIME: user.ping 0.12 ms
04.11 02:03:20 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:03:29 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:03:29 TIME: user.ping 0.18 ms
04.11 02:03:29 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:03:32 NET: Client (conid:73689825) connected to vdl.0 (clients:2)
04.11 02:03:35 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE2 }
04.11 02:03:35 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116'
04.11 02:03:35 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116', _type => core/server.query }
04.11 02:03:35 -<<-: core/server.query { list => {{ name => uid116, networkid => , isbanned => false, id => 116 }}, errorCode => ok, _type => core/server.query }
04.11 02:03:35 ->>-: core/user.isOnlineID { id => 116, _type => core/user.isOnlineID }
04.11 02:03:35 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
04.11 02:03:35 ->>-: core/cache.get { type => user, v => -1, id => 116, _type => core/cache.get }
04.11 02:03:35 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid116, deleted => false, email => , networktype =>   , password => uid116, isbanned => false, regdate => 2016-11-03 21:26:31.138113+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1478199280, lastLoginDate => 309, lastLoadDate => 1105 }, effects => { list => [] } }}, version => 0, id => 116 } }
04.11 02:03:35 ->>-: core/cache.get { type => questdata, v => -1, id => 116, _type => core/cache.get }
04.11 02:03:35 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 116 } }
04.11 02:03:35 NET: Client login (conid:73689825, id:116, name:uid116)
04.11 02:03:35 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 116, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
04.11 02:03:35 -<<-: core/user.loginPost { _type => core/user.loginPost }
04.11 02:03:35 == NET: uid107 ret: user.join { name => uid116, type => user.join }
04.11 02:03:35 == NET: uid116 ret: user.login { name => uid116, type => user.login, errorCode => ok, id => 116 }
04.11 02:03:35 == NET: uid116 ret: user.join { name => uid107, type => user.join }
04.11 02:03:35 == NET: uid116 ret: user.join { name => uid116, type => user.join }
04.11 02:03:38 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:03:38 TIME: user.ping 0.16 ms
04.11 02:03:38 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:03:43 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 116, _type => core/cache.update }
04.11 02:03:43 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
04.11 02:03:46 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:03:46 TIME: user.ping 0.19 ms
04.11 02:03:46 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:03:49 ++ NET: uid116 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
04.11 02:03:49 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 116 }, _type => vdl/cache.battle.findRandom }
04.11 02:03:49 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
04.11 02:03:49 TIME: battle.find 0.56 ms
04.11 02:03:49 == NET: uid116 ret: battle.find { type => battle.find, errorCode => ok }
04.11 02:03:50 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:03:50 TIME: user.ping 0.14 ms
04.11 02:03:50 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:03:54 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
04.11 02:03:54 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 107 }, _type => vdl/cache.battle.findRandom }
04.11 02:03:54 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 2, battleId => 40, player => 1 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
04.11 02:03:54 -<<-: battle.enemyEvent { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 1, battleId => 40, player => 2 }, _isNotify => true, id => 116, _type => battle.enemyEvent }
04.11 02:03:54 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
04.11 02:03:54 TIME: battle.find 40.76 ms
04.11 02:03:54 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
04.11 02:03:54 == NET: uid116 ret: battle.enemy { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 1, battleId => 40, player => 2 }, type => battle.enemy }
04.11 02:03:54 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 2, battleId => 40, player => 1 }, type => battle.enemy }
04.11 02:03:57 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:03:57 TIME: user.ping 0.22 ms
04.11 02:03:57 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:04:02 ++ NET: uid107 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 40 }
04.11 02:04:02 ->>-: vdl/cache.battle.infoRoom { roomId => 40, _type => vdl/cache.battle.infoRoom }
04.11 02:04:02 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
04.11 02:04:02 TIME: battle.sendtask 0.63 ms
04.11 02:04:02 == NET: uid107 ret: battle.sendtask { name => throw, type => battle.task, dices => [1,5,2,2,5,2], errorCode => ok }
04.11 02:04:02 == NET: uid116 ret: battle.task { name => throw, type => battle.task, dices => [1,5,2,2,5,2], errorCode => ok }
04.11 02:04:02 == NET: uid107 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
04.11 02:04:07 ++ NET: uid107 req: battle.sendtask { dice => 5, from => [7,3], name => swap, side => 2, messageType => battle.sendtask, to => [8,3], battleId => 40 }
04.11 02:04:07 ->>-: vdl/cache.battle.infoRoom { roomId => 40, _type => vdl/cache.battle.infoRoom }
04.11 02:04:07 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
04.11 02:04:07 STATS: vdl.0 cache connection, 36 calls, total 0.118213653564453 sec spent, avg 3.28 ms
04.11 02:04:07 ->>-: vdl/cache.battle.setScores { scores => [0,0], _type => vdl/cache.battle.setScores, player1 => 107, player2 => 116, battleId => 40 }
04.11 02:04:07 -<<-: vdl/cache.battle.setScores { errorCode => ok, _type => vdl/cache.battle.setScores }
04.11 02:04:07 TIME: battle.sendtask 3.01 ms
04.11 02:04:07 == NET: uid107 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
04.11 02:04:07 == NET: uid116 ret: battle.task { dice => 5, from => [7,3], name => swap, side => 2, type => battle.task, dices => [1,2,2,5,2], messageType => battle.sendtask, to => [8,3], battleId => 40 }
04.11 02:04:08 TIMER: Check auto-disconnect...
04.11 02:04:08 STATS: vdl.0 cache, locks:4
04.11 02:04:11 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:04:11 TIME: user.ping 0.18 ms
04.11 02:04:11 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:04:16 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:04:16 TIME: user.ping 0.14 ms
04.11 02:04:16 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:04:26 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:04:26 TIME: user.ping 0.17 ms
04.11 02:04:26 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:04:28 ++ NET: uid107 req: battle.sendtask { dice => 5, from => [8,3], name => swap, side => 2, messageType => battle.sendtask, to => [9,3], battleId => 40 }
04.11 02:04:28 ->>-: vdl/cache.battle.infoRoom { roomId => 40, _type => vdl/cache.battle.infoRoom }
04.11 02:04:28 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
04.11 02:04:28 TIME: battle.sendtask 2.3 ms
04.11 02:04:28 == NET: uid107 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,0,5,5,5,10,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,2,2,5,2], errorCode => cannotSwap }
04.11 02:04:41 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:04:41 TIME: user.ping 0.19 ms
04.11 02:04:41 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:04:41 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:04:41 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:04:41 TIME: user.ping 0.18 ms
04.11 02:04:43 ++ NET: uid107 req: battle.sendtask { dice => 5, from => [8,3], name => swap, side => 2, messageType => battle.sendtask, to => [9,3], battleId => 40 }
04.11 02:04:43 ->>-: vdl/cache.battle.infoRoom { roomId => 40, _type => vdl/cache.battle.infoRoom }
04.11 02:04:43 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
04.11 02:04:43 TIME: battle.sendtask 2.83 ms
04.11 02:04:43 == NET: uid107 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,0,5,5,5,10,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,2,2,2], errorCode => cannotSwap }
04.11 02:04:56 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:04:56 TIME: user.ping 0.18 ms
04.11 02:04:56 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:05:05 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:05:05 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:05:05 TIME: user.ping 0.17 ms
04.11 02:05:08 TIMER: Check auto-disconnect...
04.11 02:05:08 STATS: vdl.0 cache, locks:4
04.11 02:05:30 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:05:30 TIME: user.ping 0.14 ms
04.11 02:05:30 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:06:06 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
04.11 02:06:06 -<<-: server.login ok
04.11 02:06:06 DB: SELECT * FROM LocalizationStrings
04.11 02:06:06 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 TIMER: Starting timer...
04.11 02:06:06 TIMER: Timer running...
04.11 02:06:06 DB: SELECT * FROM GameVars
04.11 02:06:06 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
04.11 02:06:06 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
04.11 02:06:06 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
04.11 02:06:06 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
04.11 02:06:06 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
04.11 02:06:06 -<<-: core/quest.getDaily ok
04.11 02:06:06 DB: SELECT * FROM UserAttributeTypes
04.11 02:06:06 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 DB: SELECT * FROM UserVariableTypes
04.11 02:06:06 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
04.11 02:06:06 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 DB: SELECT * FROM ItemGroups
04.11 02:06:06 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 DB: SELECT * FROM Bundles ORDER BY ID
04.11 02:06:06 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 DB: SELECT * FROM BundleItems ORDER BY ID
04.11 02:06:06 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 SHOP: loading items...
04.11 02:06:06 ->>-: core/shop.getList { _type => core/shop.getList }
04.11 02:06:06 -<<-: core/shop.getList ok
04.11 02:06:06 SHOP: 0 items loaded (0.001 sec)
04.11 02:06:06 DB: SELECT * FROM EffectAttributeTypes
04.11 02:06:06 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 DB: SELECT * FROM Effects
04.11 02:06:06 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
04.11 02:06:06 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
04.11 02:06:06 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 DB: SELECT * FROM Badges
04.11 02:06:06 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
04.11 02:06:06 -<<-: core/server.query ok
04.11 02:06:06 TIMER: Check auto-disconnect...
04.11 02:06:06 STATS: vdl.0 cache, locks:0
04.11 02:07:10 NET: Client (conid:97341803) connected to vdl.0 (clients:1)
04.11 02:07:17 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:07:17 TRACE: User not logon yet.
04.11 02:07:42 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:07:42 TRACE: User not logon yet.
04.11 02:07:50 NET: Client (name:null conid:97341803 TCP) disconnected from vdl.0 (clients:0)
04.11 02:08:03 NET: Client (conid:21899322) connected to vdl.0 (clients:1)
04.11 02:08:04 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
04.11 02:08:04 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
04.11 02:08:04 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
04.11 02:08:04 -<<-: core/server.query ok
04.11 02:08:04 STATS: vdl.0 cache connection, 21 calls, total 0.0687072277069092 sec spent, avg 3.27 ms
04.11 02:08:04 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
04.11 02:08:04 -<<-: core/user.isOnlineID ok
04.11 02:08:04 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
04.11 02:08:04 -<<-: core/cache.get ok
04.11 02:08:04 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
04.11 02:08:04 -<<-: core/cache.get ok
04.11 02:08:04 NET: Client login (conid:21899322, id:107, name:uid107)
04.11 02:08:04 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
04.11 02:08:04 -<<-: core/user.loginPost null
04.11 02:08:04 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
04.11 02:08:04 == NET: uid107 ret: user.join { name => uid107, type => user.join }
04.11 02:08:06 TIMER: Check auto-disconnect...
04.11 02:08:06 STATS: vdl.0 cache, locks:2
04.11 02:08:08 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:08:08 TIME: user.ping 0.17 ms
04.11 02:08:08 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:08:11 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
04.11 02:08:11 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
04.11 02:08:14 NET: Client (conid:80548993) connected to vdl.0 (clients:2)
04.11 02:08:17 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:08:17 TIME: user.ping 0.13 ms
04.11 02:08:17 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:08:19 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE2 }
04.11 02:08:19 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116'
04.11 02:08:19 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116', _type => core/server.query }
04.11 02:08:19 -<<-: core/server.query { list => {{ name => uid116, networkid => , isbanned => false, id => 116 }}, errorCode => ok, _type => core/server.query }
04.11 02:08:19 ->>-: core/user.isOnlineID { id => 116, _type => core/user.isOnlineID }
04.11 02:08:19 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
04.11 02:08:19 ->>-: core/cache.get { type => user, v => -1, id => 116, _type => core/cache.get }
04.11 02:08:19 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid116, deleted => false, email => , networktype =>   , password => uid116, isbanned => false, regdate => 2016-11-03 21:26:31.138113+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1478199280, lastLoginDate => 309, lastLoadDate => 1105 }, effects => { list => [] } }}, version => 0, id => 116 } }
04.11 02:08:19 ->>-: core/cache.get { type => questdata, v => -1, id => 116, _type => core/cache.get }
04.11 02:08:19 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 116 } }
04.11 02:08:19 NET: Client login (conid:80548993, id:116, name:uid116)
04.11 02:08:19 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 116, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
04.11 02:08:19 -<<-: core/user.loginPost { _type => core/user.loginPost }
04.11 02:08:19 == NET: uid107 ret: user.join { name => uid116, type => user.join }
04.11 02:08:19 == NET: uid116 ret: user.login { name => uid116, type => user.login, errorCode => ok, id => 116 }
04.11 02:08:19 == NET: uid116 ret: user.join { name => uid107, type => user.join }
04.11 02:08:19 == NET: uid116 ret: user.join { name => uid116, type => user.join }
04.11 02:08:26 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 116, _type => core/cache.update }
04.11 02:08:26 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
04.11 02:08:26 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:08:26 TIME: user.ping 0.19 ms
04.11 02:08:26 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:08:30 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
04.11 02:08:30 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 107 }, _type => vdl/cache.battle.findRandom }
04.11 02:08:30 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
04.11 02:08:30 TIME: battle.find 0.55 ms
04.11 02:08:30 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
04.11 02:08:32 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:08:32 TIME: user.ping 0.17 ms
04.11 02:08:32 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:08:36 ++ NET: uid116 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
04.11 02:08:36 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 116 }, _type => vdl/cache.battle.findRandom }
04.11 02:08:36 -<<-: battle.enemyEvent { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 2, battleId => 41, player => 1 }, _isNotify => true, id => 116, _type => battle.enemyEvent }
04.11 02:08:36 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 1, battleId => 41, player => 2 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
04.11 02:08:36 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
04.11 02:08:36 TIME: battle.find 118.56 ms
04.11 02:08:36 == NET: uid116 ret: battle.find { type => battle.find, errorCode => ok }
04.11 02:08:36 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 1, battleId => 41, player => 2 }, type => battle.enemy }
04.11 02:08:36 == NET: uid116 ret: battle.enemy { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 2, battleId => 41, player => 1 }, type => battle.enemy }
04.11 02:08:39 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:08:39 TIME: user.ping 0.13 ms
04.11 02:08:39 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:08:47 ++ NET: uid116 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 41 }
04.11 02:08:47 ->>-: vdl/cache.battle.infoRoom { roomId => 41, _type => vdl/cache.battle.infoRoom }
04.11 02:08:47 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:08:47 TIME: battle.sendtask 0.66 ms
04.11 02:08:47 == NET: uid116 ret: battle.sendtask { name => throw, type => battle.sendtask, dices => [3,1,2,4,3,2], errorCode => ok, _type => null }
04.11 02:08:47 == NET: uid107 ret: battle.task { name => throw, type => battle.task, dices => [3,1,2,4,3,2], errorCode => ok }
04.11 02:08:47 == NET: uid116 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
04.11 02:08:53 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:08:53 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:08:53 TIME: user.ping 0.19 ms
04.11 02:08:55 ++ NET: uid116 req: battle.sendtask { dice => 3, from => [7,3], name => swap, side => 2, messageType => battle.sendtask, to => [8,3], battleId => 41 }
04.11 02:08:55 ->>-: vdl/cache.battle.infoRoom { roomId => 41, _type => vdl/cache.battle.infoRoom }
04.11 02:08:55 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:08:55 ->>-: vdl/cache.battle.setScores { scores => [0,0], _type => vdl/cache.battle.setScores, player1 => 116, player2 => 107, battleId => 41 }
04.11 02:08:55 -<<-: vdl/cache.battle.setScores { errorCode => ok, _type => vdl/cache.battle.setScores }
04.11 02:08:55 TIME: battle.sendtask 2.63 ms
04.11 02:08:55 == NET: uid116 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
04.11 02:08:55 == NET: uid107 ret: battle.task { dice => 3, from => [7,3], name => swap, side => 2, type => battle.task, dices => [1,2,4,3,2], messageType => battle.sendtask, to => [8,3], battleId => 41 }
04.11 02:08:57 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:08:57 TIME: user.ping 0.18 ms
04.11 02:08:57 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:08:58 ++ NET: uid116 req: battle.sendtask { dice => 2, from => [7,3], name => swap, side => 2, messageType => battle.sendtask, to => [8,3], battleId => 41 }
04.11 02:08:58 ->>-: vdl/cache.battle.infoRoom { roomId => 41, _type => vdl/cache.battle.infoRoom }
04.11 02:08:58 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:08:58 TIME: battle.sendtask 2.31 ms
04.11 02:08:58 == NET: uid116 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,2,5,5,5,10,0,0],[0,0,0,3,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,2,4,3,2], errorCode => cannotSwap }
04.11 02:09:06 TIMER: Check auto-disconnect...
04.11 02:09:06 STATS: vdl.0 cache, locks:4
04.11 02:09:07 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:09:07 TIME: user.ping 0.15 ms
04.11 02:09:07 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:09:20 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:09:20 TIME: user.ping 0.17 ms
04.11 02:09:20 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:09:23 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:09:23 TIME: user.ping 0.12 ms
04.11 02:09:23 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:09:34 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:09:34 TIME: user.ping 0.15 ms
04.11 02:09:34 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:09:47 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:09:47 TIME: user.ping 0.18 ms
04.11 02:09:47 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:09:48 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:09:48 TIME: user.ping 0.17 ms
04.11 02:09:48 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:09:48 ++ NET: uid116 req: battle.sendtask { dice => 2, from => [7,3], name => swap, side => 2, messageType => battle.sendtask, to => [8,3], battleId => 41 }
04.11 02:09:48 ->>-: vdl/cache.battle.infoRoom { roomId => 41, _type => vdl/cache.battle.infoRoom }
04.11 02:09:48 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:09:48 STATS: vdl.0 cache connection, 39 calls, total 0.206934690475464 sec spent, avg 5.31 ms
04.11 02:09:48 TIME: battle.sendtask 3.23 ms
04.11 02:09:48 == NET: uid116 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,2,5,5,5,10,0,0],[0,0,0,3,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,4,3,2], errorCode => cannotSwap }
04.11 02:10:01 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:10:01 TIME: user.ping 0.16 ms
04.11 02:10:01 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:10:06 TIMER: Check auto-disconnect...
04.11 02:10:06 STATS: vdl.0 cache, locks:4
04.11 02:10:14 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:10:14 TIME: user.ping 0.15 ms
04.11 02:10:14 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:10:14 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:10:14 TIME: user.ping 0.19 ms
04.11 02:10:14 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:10:27 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:10:27 TIME: user.ping 0.15 ms
04.11 02:10:27 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:10:40 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:10:40 TIME: user.ping 0.18 ms
04.11 02:10:40 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:10:41 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:10:41 TIME: user.ping 0.13 ms
04.11 02:10:41 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:10:44 ++ NET: uid116 req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 41 }
04.11 02:10:44 ->>-: vdl/cache.battle.infoRoom { roomId => 41, _type => vdl/cache.battle.infoRoom }
04.11 02:10:44 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:10:44 ->>-: vdl/cache.battle.makeTurn { userId => 116, roomId => 41, _type => vdl/cache.battle.makeTurn }
04.11 02:10:44 -<<-: vdl/cache.battle.makeTurn { errorCode => true, _type => vdl/cache.battle.makeTurn, turnId => 116 }
04.11 02:10:44 TIME: battle.sendtask 1.72 ms
04.11 02:10:44 == NET: uid116 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
04.11 02:10:44 == NET: uid107 ret: battle.task { dice => 0, from => [0,0], name => skip, side => 2, type => battle.task, messageType => battle.sendtask, to => [0,0], battleId => 41 }
04.11 02:10:54 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:10:54 TIME: user.ping 0.16 ms
04.11 02:10:54 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:11:05 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:11:05 TIME: user.ping 0.15 ms
04.11 02:11:05 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:11:06 TIMER: Check auto-disconnect...
04.11 02:11:06 STATS: vdl.0 cache, locks:4
04.11 02:11:08 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:11:08 TIME: user.ping 0.13 ms
04.11 02:11:08 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:11:21 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:11:21 TIME: user.ping 0.18 ms
04.11 02:11:21 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:11:29 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:11:29 TIME: user.ping 0.2 ms
04.11 02:11:29 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:11:39 NET: Client (name:uid107 conid:21899322 TCP) disconnected from vdl.0 (clients:1)
04.11 02:11:39 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
04.11 02:11:39 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
04.11 02:11:39 -<<-: core/server.query { list => {{ id => 25 }, { id => 23 }, { id => 26 }, { id => 21 }, { id => 18 }, { id => 27 }, { id => 28 }, { id => 29 }, { id => 30 }, { id => 32 }, { id => 33 }, { id => 35 }, { id => 37 }, { id => 38 }, { id => 39 }, { id => 40 }, { id => 41 }}, errorCode => ok, _type => core/server.query }
04.11 02:11:39 STATS: vdl.0 cache connection, 42 calls, total 0.210353851318359 sec spent, avg 5.01 ms
04.11 02:11:39 ->>-: vdl/cache.battle.infoRoom { roomId => 41, _type => vdl/cache.battle.infoRoom }
04.11 02:11:39 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 107 }
04.11 02:11:39 ->>-: vdl/cache.battle.deleteRoom { roomId => 41, _type => vdl/cache.battle.deleteRoom }
04.11 02:11:39 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
04.11 02:11:39 ->>-: vdl/cache.battle.finishRoom { roomId => 41, _type => vdl/cache.battle.finishRoom }
04.11 02:11:39 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
04.11 02:11:39 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
04.11 02:11:39 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
04.11 02:11:39 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
04.11 02:11:39 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
04.11 02:11:39 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
04.11 02:11:39 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
04.11 02:11:39 == NET: uid116 ret: battle.leave { type => battle.leave }
04.11 02:11:59 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:11:59 TIME: user.ping 0.21 ms
04.11 02:11:59 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:12:06 TIMER: Check auto-disconnect...
04.11 02:12:06 STATS: vdl.0 cache, locks:2
04.11 02:12:36 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:12:36 TIME: user.ping 0.14 ms
04.11 02:12:36 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:13:06 TIMER: Check auto-disconnect...
04.11 02:13:06 STATS: vdl.0 cache, locks:2
04.11 02:13:14 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:13:14 TIME: user.ping 0.17 ms
04.11 02:13:14 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:13:47 NET: Client (name:uid116 conid:80548993 TCP) disconnected from vdl.0 (clients:0)
04.11 02:13:47 DB: SELECT id FROM battle WHERE firstid=116 OR secondid=116 AND finished <> true
04.11 02:13:47 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=116 OR secondid=116 AND finished <> true, _type => core/server.query }
04.11 02:13:47 -<<-: core/server.query { list => {{ id => 26 }, { id => 24 }, { id => 27 }, { id => 17 }, { id => 28 }, { id => 29 }, { id => 30 }, { id => 10 }, { id => 32 }, { id => 13 }, { id => 33 }, { id => 35 }, { id => 37 }, { id => 38 }, { id => 39 }, { id => 40 }}, errorCode => ok, _type => core/server.query }
04.11 02:13:47 STATS: vdl.0 cache connection, 49 calls, total 0.274712562561035 sec spent, avg 5.61 ms
04.11 02:13:47 ->>-: vdl/cache.battle.infoRoom { roomId => 40, _type => vdl/cache.battle.infoRoom }
04.11 02:13:47 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
04.11 02:13:47 ->>-: vdl/cache.battle.deleteRoom { roomId => 40, _type => vdl/cache.battle.deleteRoom }
04.11 02:13:47 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
04.11 02:13:47 ->>-: vdl/cache.battle.finishRoom { roomId => 40, _type => vdl/cache.battle.finishRoom }
04.11 02:13:47 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
04.11 02:13:47 ->>-: core/user.sendTo { id => 107, _type => core/user.sendTo, msg => { _type => battle.leave } }
04.11 02:13:47 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
04.11 02:13:47 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 116, _type => core/cache.update }
04.11 02:13:47 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
04.11 02:13:47 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 116, _type => core/cache.update }
04.11 02:13:47 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
04.11 02:13:47 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 116, _type => core/user.logoutPost }
04.11 02:13:47 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
04.11 02:14:06 TIMER: Check auto-disconnect...
04.11 02:14:06 STATS: vdl.0 cache, locks:0
04.11 02:14:13 NET: Client (conid:36572870) connected to vdl.0 (clients:1)
04.11 02:14:17 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE2 }
04.11 02:14:17 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116'
04.11 02:14:17 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116', _type => core/server.query }
04.11 02:14:17 -<<-: core/server.query { list => {{ name => uid116, networkid => , isbanned => false, id => 116 }}, errorCode => ok, _type => core/server.query }
04.11 02:14:17 ->>-: core/user.isOnlineID { id => 116, _type => core/user.isOnlineID }
04.11 02:14:17 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
04.11 02:14:17 ->>-: core/cache.get { type => user, v => -1, id => 116, _type => core/cache.get }
04.11 02:14:17 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid116, deleted => false, email => , networktype =>   , password => uid116, isbanned => false, regdate => 2016-11-03 21:26:31.138113+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1478199280, lastLoginDate => 309, lastLoadDate => 1105 }, effects => { list => [] } }}, version => 0, id => 116 } }
04.11 02:14:17 ->>-: core/cache.get { type => questdata, v => -1, id => 116, _type => core/cache.get }
04.11 02:14:17 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 116 } }
04.11 02:14:17 NET: Client login (conid:36572870, id:116, name:uid116)
04.11 02:14:17 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 116, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
04.11 02:14:17 -<<-: core/user.loginPost { _type => core/user.loginPost }
04.11 02:14:17 == NET: uid116 ret: user.login { name => uid116, type => user.login, errorCode => ok, id => 116 }
04.11 02:14:17 == NET: uid116 ret: user.join { name => uid116, type => user.join }
04.11 02:14:26 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 116, _type => core/cache.update }
04.11 02:14:26 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
04.11 02:14:30 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:14:30 TIME: user.ping 0.14 ms
04.11 02:14:30 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:14:50 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:14:50 TIME: user.ping 0.18 ms
04.11 02:14:50 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:15:06 TIMER: Check auto-disconnect...
04.11 02:15:06 STATS: vdl.0 cache, locks:2
04.11 02:15:10 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:15:10 TIME: user.ping 0.14 ms
04.11 02:15:10 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:15:30 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:15:30 TIME: user.ping 0.17 ms
04.11 02:15:30 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:15:50 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:15:50 TIME: user.ping 0.19 ms
04.11 02:15:50 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:16:06 TIMER: Check auto-disconnect...
04.11 02:16:06 STATS: vdl.0 cache, locks:2
04.11 02:16:10 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:16:10 TIME: user.ping 0.17 ms
04.11 02:16:10 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:16:30 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:16:30 TIME: user.ping 0.17 ms
04.11 02:16:30 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:16:50 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:16:50 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:16:50 TIME: user.ping 0.17 ms
04.11 02:17:16 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
04.11 02:17:16 -<<-: server.login ok
04.11 02:17:16 DB: SELECT * FROM LocalizationStrings
04.11 02:17:16 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:16 TIMER: Starting timer...
04.11 02:17:16 TIMER: Timer running...
04.11 02:17:16 DB: SELECT * FROM GameVars
04.11 02:17:16 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:16 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
04.11 02:17:16 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:16 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
04.11 02:17:16 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:16 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
04.11 02:17:16 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:16 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
04.11 02:17:16 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:16 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
04.11 02:17:16 -<<-: core/quest.getDaily ok
04.11 02:17:16 DB: SELECT * FROM UserAttributeTypes
04.11 02:17:16 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:16 DB: SELECT * FROM UserVariableTypes
04.11 02:17:16 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:16 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
04.11 02:17:16 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:16 DB: SELECT * FROM ItemGroups
04.11 02:17:16 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:16 DB: SELECT * FROM Bundles ORDER BY ID
04.11 02:17:16 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:16 DB: SELECT * FROM BundleItems ORDER BY ID
04.11 02:17:16 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:16 SHOP: loading items...
04.11 02:17:16 ->>-: core/shop.getList { _type => core/shop.getList }
04.11 02:17:16 -<<-: core/shop.getList ok
04.11 02:17:16 SHOP: 0 items loaded (0.001 sec)
04.11 02:17:16 DB: SELECT * FROM EffectAttributeTypes
04.11 02:17:16 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:16 DB: SELECT * FROM Effects
04.11 02:17:16 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:16 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
04.11 02:17:16 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:16 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
04.11 02:17:16 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:16 DB: SELECT * FROM Badges
04.11 02:17:16 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
04.11 02:17:16 -<<-: core/server.query ok
04.11 02:17:30 NET: Client (conid:57515497) connected to vdl.0 (clients:1)
04.11 02:17:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:17:35 TRACE: User not logon yet.
04.11 02:17:55 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:17:55 TRACE: User not logon yet.
04.11 02:18:12 NET: Client (conid:59624120) connected to vdl.0 (clients:2)
04.11 02:18:14 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
04.11 02:18:14 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
04.11 02:18:14 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
04.11 02:18:14 -<<-: core/server.query ok
04.11 02:18:14 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
04.11 02:18:14 -<<-: core/user.isOnlineID ok
04.11 02:18:14 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
04.11 02:18:14 -<<-: core/cache.get ok
04.11 02:18:14 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
04.11 02:18:14 -<<-: core/cache.get ok
04.11 02:18:14 NET: Client login (conid:59624120, id:107, name:uid107)
04.11 02:18:14 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
04.11 02:18:14 -<<-: core/user.loginPost null
04.11 02:18:14 == NET: null ret: user.join { name => uid107, type => user.join }
04.11 02:18:14 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
04.11 02:18:14 == NET: uid107 ret: user.join { name => null, type => user.join }
04.11 02:18:14 == NET: uid107 ret: user.join { name => uid107, type => user.join }
04.11 02:18:15 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:18:15 TRACE: User not logon yet.
04.11 02:18:16 TIMER: Check auto-disconnect...
04.11 02:18:16 STATS: vdl.0 cache, locks:2
04.11 02:18:17 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:18:17 TIME: user.ping 0.19 ms
04.11 02:18:17 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:18:21 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
04.11 02:18:21 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
04.11 02:18:21 STATS: vdl.0 cache connection, 26 calls, total 0.0639588832855225 sec spent, avg 2.46 ms
04.11 02:18:25 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:18:25 TIME: user.ping 0.15 ms
04.11 02:18:25 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:18:26 ++ NET: null req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
04.11 02:18:26 TRACE: User not logon yet.
04.11 02:18:31 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
04.11 02:18:31 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 107 }, _type => vdl/cache.battle.findRandom }
04.11 02:18:31 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
04.11 02:18:31 TIME: battle.find 0.66 ms
04.11 02:18:31 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
04.11 02:18:34 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:18:34 TIME: user.ping 0.19 ms
04.11 02:18:34 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:18:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:18:41 TRACE: User not logon yet.
04.11 02:18:46 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:18:46 TIME: user.ping 0.19 ms
04.11 02:18:46 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:18:51 NET: Client (name:null conid:57515497 TCP) disconnected from vdl.0 (clients:1)
04.11 02:18:58 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:18:58 TIME: user.ping 0.2 ms
04.11 02:18:58 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:19:09 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:19:09 TIME: user.ping 0.15 ms
04.11 02:19:09 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:19:14 NET: Client (conid:20497667) connected to vdl.0 (clients:2)
04.11 02:19:16 TIMER: Check auto-disconnect...
04.11 02:19:16 STATS: vdl.0 cache, locks:2
04.11 02:19:17 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE2 }
04.11 02:19:17 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116'
04.11 02:19:17 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116', _type => core/server.query }
04.11 02:19:17 -<<-: core/server.query { list => {{ name => uid116, networkid => , isbanned => false, id => 116 }}, errorCode => ok, _type => core/server.query }
04.11 02:19:17 ->>-: core/user.isOnlineID { id => 116, _type => core/user.isOnlineID }
04.11 02:19:17 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
04.11 02:19:17 ->>-: core/cache.get { type => user, v => -1, id => 116, _type => core/cache.get }
04.11 02:19:17 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid116, deleted => false, email => , networktype =>   , password => uid116, isbanned => false, regdate => 2016-11-03 21:26:31.138113+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1478199280, lastLoginDate => 309, lastLoadDate => 1105 }, effects => { list => [] } }}, version => 0, id => 116 } }
04.11 02:19:17 ->>-: core/cache.get { type => questdata, v => -1, id => 116, _type => core/cache.get }
04.11 02:19:17 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 116 } }
04.11 02:19:17 NET: Client login (conid:20497667, id:116, name:uid116)
04.11 02:19:17 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 116, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
04.11 02:19:17 -<<-: core/user.loginPost { _type => core/user.loginPost }
04.11 02:19:17 == NET: uid107 ret: user.join { name => uid116, type => user.join }
04.11 02:19:17 == NET: uid116 ret: user.login { name => uid116, type => user.login, errorCode => ok, id => 116 }
04.11 02:19:17 == NET: uid116 ret: user.join { name => uid107, type => user.join }
04.11 02:19:17 == NET: uid116 ret: user.join { name => uid116, type => user.join }
04.11 02:19:21 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:19:21 TIME: user.ping 0.14 ms
04.11 02:19:21 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:19:26 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 116, _type => core/cache.update }
04.11 02:19:26 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
04.11 02:19:26 STATS: vdl.0 cache connection, 33 calls, total 0.0728821754455566 sec spent, avg 2.21 ms
04.11 02:19:30 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:19:30 TIME: user.ping 0.17 ms
04.11 02:19:30 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:19:31 ++ NET: uid116 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
04.11 02:19:31 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 116 }, _type => vdl/cache.battle.findRandom }
04.11 02:19:31 -<<-: battle.enemyEvent { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 2, battleId => 42, player => 1 }, _isNotify => true, id => 116, _type => battle.enemyEvent }
04.11 02:19:31 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 1, battleId => 42, player => 2 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
04.11 02:19:31 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
04.11 02:19:31 TIME: battle.find 39.34 ms
04.11 02:19:31 == NET: uid116 ret: battle.find { type => battle.find, errorCode => ok }
04.11 02:19:31 == NET: uid116 ret: battle.enemy { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 2, battleId => 42, player => 1 }, type => battle.enemy }
04.11 02:19:31 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 1, battleId => 42, player => 2 }, type => battle.enemy }
04.11 02:19:33 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:19:33 TIME: user.ping 0.18 ms
04.11 02:19:33 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:19:38 ++ NET: uid116 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 42 }
04.11 02:19:38 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
04.11 02:19:38 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:19:38 TIME: battle.sendtask 0.49 ms
04.11 02:19:38 == NET: uid116 ret: battle.sendtask { name => throw, type => battle.sendtask, dices => [1,5,0,2,5,4], errorCode => ok, _type => battle.task }
04.11 02:19:38 == NET: uid107 ret: battle.task { name => throw, type => battle.task, dices => [1,5,0,2,5,4], errorCode => ok }
04.11 02:19:38 == NET: uid116 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
04.11 02:19:43 ++ NET: uid116 req: battle.sendtask { dice => 5, from => [7,3], name => swap, side => 2, messageType => battle.sendtask, to => [8,3], battleId => 42 }
04.11 02:19:43 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
04.11 02:19:43 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:19:43 ->>-: vdl/cache.battle.setScores { scores => [0,0], _type => vdl/cache.battle.setScores, player1 => 116, player2 => 107, battleId => 42 }
04.11 02:19:43 -<<-: vdl/cache.battle.setScores { errorCode => ok, _type => vdl/cache.battle.setScores }
04.11 02:19:43 TIME: battle.sendtask 3.59 ms
04.11 02:19:43 == NET: uid116 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
04.11 02:19:43 == NET: uid107 ret: battle.task { dice => 5, from => [7,3], name => swap, side => 2, type => battle.task, dices => [1,0,2,5,4], messageType => battle.sendtask, to => [8,3], battleId => 42 }
04.11 02:19:46 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:19:46 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:19:46 TIME: user.ping 0.16 ms
04.11 02:19:48 ++ NET: uid116 req: battle.sendtask { dice => 5, from => [8,3], name => swap, side => 2, messageType => battle.sendtask, to => [9,3], battleId => 42 }
04.11 02:19:48 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
04.11 02:19:48 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:19:48 TIME: battle.sendtask 1.88 ms
04.11 02:19:48 == NET: uid116 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,0,5,5,5,10,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,0,2,5,4], errorCode => cannotSwap }
04.11 02:19:55 ++ NET: uid116 req: battle.sendtask { dice => 5, from => [8,3], name => swap, side => 2, messageType => battle.sendtask, to => [9,3], battleId => 42 }
04.11 02:19:55 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
04.11 02:19:55 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:19:55 TIME: battle.sendtask 1.82 ms
04.11 02:19:55 == NET: uid116 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,0,5,5,5,10,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,0,2,5,4], errorCode => cannotSwap }
04.11 02:19:58 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:19:58 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:19:58 TIME: user.ping 0.15 ms
04.11 02:19:58 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:19:58 TIME: user.ping 0.17 ms
04.11 02:19:58 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:19:59 ++ NET: uid116 req: battle.sendtask { dice => 5, from => [8,3], name => swap, side => 2, messageType => battle.sendtask, to => [9,3], battleId => 42 }
04.11 02:19:59 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
04.11 02:19:59 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:19:59 TIME: battle.sendtask 1.73 ms
04.11 02:19:59 == NET: uid116 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,0,5,5,5,10,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,0,2,5,4], errorCode => cannotSwap }
04.11 02:20:02 ++ NET: uid116 req: battle.sendtask { dice => 5, from => [8,3], name => swap, side => 2, messageType => battle.sendtask, to => [9,3], battleId => 42 }
04.11 02:20:02 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
04.11 02:20:02 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:20:02 TIME: battle.sendtask 1.57 ms
04.11 02:20:02 == NET: uid116 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,0,5,5,5,10,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,0,2,5,4], errorCode => cannotSwap }
04.11 02:20:03 ++ NET: uid116 req: battle.sendtask { dice => 5, from => [8,3], name => swap, side => 2, messageType => battle.sendtask, to => [9,3], battleId => 42 }
04.11 02:20:03 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
04.11 02:20:03 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:20:03 TIME: battle.sendtask 1.93 ms
04.11 02:20:03 == NET: uid116 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,0,5,5,5,10,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,0,2,5,4], errorCode => cannotSwap }
04.11 02:20:05 ++ NET: uid116 req: battle.sendtask { dice => 5, from => [8,3], name => swap, side => 2, messageType => battle.sendtask, to => [9,3], battleId => 42 }
04.11 02:20:05 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
04.11 02:20:05 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:20:05 TIME: battle.sendtask 2.03 ms
04.11 02:20:05 == NET: uid116 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,0,5,5,5,10,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,0,2,5,4], errorCode => cannotSwap }
04.11 02:20:07 ++ NET: uid116 req: battle.sendtask { dice => 5, from => [8,3], name => swap, side => 2, messageType => battle.sendtask, to => [9,3], battleId => 42 }
04.11 02:20:07 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
04.11 02:20:07 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:20:07 TIME: battle.sendtask 1.81 ms
04.11 02:20:07 == NET: uid116 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,0,5,5,5,10,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,0,2,5,4], errorCode => cannotSwap }
04.11 02:20:08 ++ NET: uid116 req: battle.sendtask { dice => 5, from => [8,3], name => swap, side => 2, messageType => battle.sendtask, to => [9,3], battleId => 42 }
04.11 02:20:08 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
04.11 02:20:08 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:20:08 TIME: battle.sendtask 1.84 ms
04.11 02:20:08 == NET: uid116 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,0,5,5,5,10,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,0,2,5,4], errorCode => cannotSwap }
04.11 02:20:09 ++ NET: uid116 req: battle.sendtask { dice => 5, from => [8,3], name => swap, side => 2, messageType => battle.sendtask, to => [9,3], battleId => 42 }
04.11 02:20:09 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
04.11 02:20:09 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:20:09 TIME: battle.sendtask 1.55 ms
04.11 02:20:09 == NET: uid116 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,0,5,5,5,10,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,0,2,5,4], errorCode => cannotSwap }
04.11 02:20:09 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:20:09 TIME: user.ping 0.2 ms
04.11 02:20:09 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:20:11 ++ NET: uid116 req: battle.sendtask { dice => 5, from => [8,3], name => swap, side => 2, messageType => battle.sendtask, to => [9,3], battleId => 42 }
04.11 02:20:11 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
04.11 02:20:11 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:20:11 TIME: battle.sendtask 1.69 ms
04.11 02:20:11 == NET: uid116 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,0,5,5,5,10,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,0,2,5,4], errorCode => cannotSwap }
04.11 02:20:13 ++ NET: uid116 req: battle.sendtask { dice => 5, from => [8,3], name => swap, side => 2, messageType => battle.sendtask, to => [9,3], battleId => 42 }
04.11 02:20:13 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
04.11 02:20:13 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:20:13 TIME: battle.sendtask 1.94 ms
04.11 02:20:13 == NET: uid116 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,0,5,5,5,10,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,0,2,5,4], errorCode => cannotSwap }
04.11 02:20:16 TIMER: Check auto-disconnect...
04.11 02:20:16 STATS: vdl.0 cache, locks:4
04.11 02:20:21 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:20:21 TIME: user.ping 0.18 ms
04.11 02:20:21 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:20:25 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:20:25 TIME: user.ping 0.17 ms
04.11 02:20:25 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:20:33 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:20:33 TIME: user.ping 0.17 ms
04.11 02:20:33 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:20:45 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:20:45 TIME: user.ping 0.19 ms
04.11 02:20:45 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:20:49 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:20:49 TIME: user.ping 0.15 ms
04.11 02:20:49 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:21:00 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:21:00 TIME: user.ping 0.15 ms
04.11 02:21:00 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:21:12 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:21:12 TIME: user.ping 0.14 ms
04.11 02:21:12 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:21:14 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:21:14 TIME: user.ping 0.17 ms
04.11 02:21:14 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:21:16 TIMER: Check auto-disconnect...
04.11 02:21:16 STATS: vdl.0 cache, locks:4
04.11 02:21:24 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:21:24 TIME: user.ping 0.16 ms
04.11 02:21:24 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:21:36 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:21:36 TIME: user.ping 0.17 ms
04.11 02:21:36 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:21:38 ++ NET: uid116 req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 42 }
04.11 02:21:38 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
04.11 02:21:38 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
04.11 02:21:38 STATS: vdl.0 cache connection, 49 calls, total 0.119802236557007 sec spent, avg 2.44 ms
04.11 02:21:38 ->>-: vdl/cache.battle.makeTurn { userId => 116, roomId => 42, _type => vdl/cache.battle.makeTurn }
04.11 02:21:38 -<<-: vdl/cache.battle.makeTurn { errorCode => true, _type => vdl/cache.battle.makeTurn, turnId => 116 }
04.11 02:21:38 TIME: battle.sendtask 6.22 ms
04.11 02:21:38 == NET: uid116 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
04.11 02:21:38 == NET: uid107 ret: battle.task { dice => 0, from => [0,0], name => skip, side => 2, type => battle.task, messageType => battle.sendtask, to => [0,0], battleId => 42 }
04.11 02:21:39 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:21:39 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:21:39 TIME: user.ping 0.11 ms
04.11 02:21:48 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:21:48 TIME: user.ping 0.17 ms
04.11 02:21:48 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:22:00 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:22:00 TIME: user.ping 0.16 ms
04.11 02:22:00 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:22:02 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:22:02 TIME: user.ping 0.19 ms
04.11 02:22:02 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:22:11 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:22:11 TIME: user.ping 0.16 ms
04.11 02:22:11 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:22:16 TIMER: Check auto-disconnect...
04.11 02:22:16 STATS: vdl.0 cache, locks:4
04.11 02:22:23 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:22:23 TIME: user.ping 0.14 ms
04.11 02:22:23 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:22:26 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:22:26 TIME: user.ping 0.15 ms
04.11 02:22:26 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:22:35 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:22:35 TIME: user.ping 0.17 ms
04.11 02:22:35 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:22:47 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:22:47 TIME: user.ping 0.18 ms
04.11 02:22:47 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:22:50 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:22:50 TIME: user.ping 0.18 ms
04.11 02:22:50 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:22:59 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:22:59 TIME: user.ping 0.16 ms
04.11 02:22:59 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:23:10 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:23:10 TIME: user.ping 0.18 ms
04.11 02:23:10 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:23:14 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:23:14 TIME: user.ping 0.18 ms
04.11 02:23:14 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:23:16 TIMER: Check auto-disconnect...
04.11 02:23:16 STATS: vdl.0 cache, locks:4
04.11 02:23:22 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:23:22 TIME: user.ping 0.15 ms
04.11 02:23:22 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:23:34 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:23:34 TIME: user.ping 0.16 ms
04.11 02:23:34 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:23:37 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:23:37 TIME: user.ping 0.17 ms
04.11 02:23:37 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:23:41 ++ NET: uid107 req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 1, messageType => battle.sendtask, to => [0,0], battleId => 42 }
04.11 02:23:41 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
04.11 02:23:41 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 107 }
04.11 02:23:41 STATS: vdl.0 cache connection, 51 calls, total 0.124231100082397 sec spent, avg 2.44 ms
04.11 02:23:41 ->>-: vdl/cache.battle.makeTurn { userId => 107, roomId => 42, _type => vdl/cache.battle.makeTurn }
04.11 02:23:41 -<<-: vdl/cache.battle.makeTurn { errorCode => _requestException, _type => vdl/cache.battle.makeTurn }
04.11 02:23:41 TRACE: battle.sendtask : cacheRequest exception { userId => 107, roomId => 42, _type => vdl/cache.battle.makeTurn }
04.11 02:23:41 TRACE: battle.sendtask : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 425
Called from modules/VDLBattleModule.hx line 263
Called from modules/VDLBattleModule.hx line 61
Called from modules/VDLBattleModule.hx line 40
Called from snipe/slave/Server.hx line 1176
04.11 02:23:41 == NET: uid116 ret: battle.task { dice => 0, from => [0,0], name => skip, side => 1, type => battle.task, messageType => battle.sendtask, to => [0,0], battleId => 42 }
04.11 02:23:47 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:23:47 TIME: user.ping 0.2 ms
04.11 02:23:47 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:23:59 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:23:59 TIME: user.ping 0.21 ms
04.11 02:23:59 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:24:02 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:24:02 TIME: user.ping 0.17 ms
04.11 02:24:02 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:24:11 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:24:11 TIME: user.ping 0.17 ms
04.11 02:24:11 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:24:16 TIMER: Check auto-disconnect...
04.11 02:24:16 STATS: vdl.0 cache, locks:4
04.11 02:24:23 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:24:23 TIME: user.ping 0.16 ms
04.11 02:24:23 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:24:26 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:24:26 TIME: user.ping 0.17 ms
04.11 02:24:26 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:24:35 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:24:35 TIME: user.ping 0.15 ms
04.11 02:24:35 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:24:46 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:24:46 TIME: user.ping 0.17 ms
04.11 02:24:46 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:24:49 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:24:49 TIME: user.ping 0.14 ms
04.11 02:24:49 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:24:58 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:24:58 TIME: user.ping 0.2 ms
04.11 02:24:58 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:25:10 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:25:10 TIME: user.ping 0.13 ms
04.11 02:25:10 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:25:13 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:25:13 TIME: user.ping 0.13 ms
04.11 02:25:13 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:25:16 TIMER: Check auto-disconnect...
04.11 02:25:16 STATS: vdl.0 cache, locks:4
04.11 02:25:22 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:25:22 TIME: user.ping 0.14 ms
04.11 02:25:22 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:25:34 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:25:34 TIME: user.ping 0.17 ms
04.11 02:25:34 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:25:37 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:25:37 TIME: user.ping 0.13 ms
04.11 02:25:37 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:25:46 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:25:46 TIME: user.ping 0.18 ms
04.11 02:25:46 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:25:46 ++ NET: uid116 req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 42 }
04.11 02:25:46 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
04.11 02:25:46 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 107 }
04.11 02:25:46 STATS: vdl.0 cache connection, 53 calls, total 0.125531911849976 sec spent, avg 2.37 ms
04.11 02:25:46 TIME: battle.sendtask 0.91 ms
04.11 02:25:46 == NET: uid116 ret: battle.sendtask { type => battle.sendtask, errorCode => cannotSkip }
04.11 02:25:57 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:25:57 TIME: user.ping 0.19 ms
04.11 02:25:57 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:26:01 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:26:01 TIME: user.ping 0.16 ms
04.11 02:26:01 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:26:09 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:26:09 TIME: user.ping 0.21 ms
04.11 02:26:09 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:26:16 TIMER: Check auto-disconnect...
04.11 02:26:16 STATS: vdl.0 cache, locks:4
04.11 02:26:21 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:26:21 TIME: user.ping 0.15 ms
04.11 02:26:21 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:26:25 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:26:25 TIME: user.ping 0.19 ms
04.11 02:26:25 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:26:33 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:26:33 TIME: user.ping 0.16 ms
04.11 02:26:33 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:26:45 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:26:45 TIME: user.ping 0.19 ms
04.11 02:26:45 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:26:48 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:26:48 TIME: user.ping 0.14 ms
04.11 02:26:48 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:26:57 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:26:57 TIME: user.ping 0.19 ms
04.11 02:26:57 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:27:09 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:27:09 TIME: user.ping 0.18 ms
04.11 02:27:09 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:27:12 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:27:12 TIME: user.ping 0.16 ms
04.11 02:27:12 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:27:16 TIMER: Check auto-disconnect...
04.11 02:27:16 STATS: vdl.0 cache, locks:4
04.11 02:27:21 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:27:21 TIME: user.ping 0.15 ms
04.11 02:27:21 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:27:33 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:27:33 TIME: user.ping 0.14 ms
04.11 02:27:33 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:27:36 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:27:36 TIME: user.ping 0.17 ms
04.11 02:27:36 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:27:44 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:27:44 TIME: user.ping 0.15 ms
04.11 02:27:44 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:27:56 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:27:56 TIME: user.ping 0.16 ms
04.11 02:27:56 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:28:00 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:28:00 TIME: user.ping 0.17 ms
04.11 02:28:00 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:28:08 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:28:08 TIME: user.ping 0.19 ms
04.11 02:28:08 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:28:16 TIMER: Check auto-disconnect...
04.11 02:28:16 STATS: vdl.0 cache, locks:4
04.11 02:28:20 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:28:20 TIME: user.ping 0.17 ms
04.11 02:28:20 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:28:23 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:28:23 TIME: user.ping 0.18 ms
04.11 02:28:23 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:28:32 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:28:32 TIME: user.ping 0.16 ms
04.11 02:28:32 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:28:44 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:28:44 TIME: user.ping 0.15 ms
04.11 02:28:44 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:28:47 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:28:47 TIME: user.ping 0.18 ms
04.11 02:28:47 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:28:55 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:28:55 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:28:55 TIME: user.ping 0.17 ms
04.11 02:29:07 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:29:07 TIME: user.ping 0.18 ms
04.11 02:29:07 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:29:11 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:29:11 TIME: user.ping 0.13 ms
04.11 02:29:11 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:29:16 TIMER: Check auto-disconnect...
04.11 02:29:16 STATS: vdl.0 cache, locks:4
04.11 02:29:19 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:29:19 TIME: user.ping 0.16 ms
04.11 02:29:19 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:29:31 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:29:31 TIME: user.ping 0.15 ms
04.11 02:29:31 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:29:34 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:29:34 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:29:34 TIME: user.ping 0.18 ms
04.11 02:29:43 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:29:43 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:29:43 TIME: user.ping 0.19 ms
04.11 02:29:55 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:29:55 TIME: user.ping 0.17 ms
04.11 02:29:55 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:29:58 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:29:58 TIME: user.ping 0.19 ms
04.11 02:29:58 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:30:07 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:30:07 TIME: user.ping 0.18 ms
04.11 02:30:07 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:30:16 TIMER: Check auto-disconnect...
04.11 02:30:16 STATS: vdl.0 cache, locks:4
04.11 02:30:19 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:30:19 TIME: user.ping 0.17 ms
04.11 02:30:19 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:30:22 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:30:22 TIME: user.ping 0.14 ms
04.11 02:30:22 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:30:31 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:30:31 TIME: user.ping 0.14 ms
04.11 02:30:31 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:30:43 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:30:43 TIME: user.ping 0.16 ms
04.11 02:30:43 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:30:46 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:30:46 TIME: user.ping 0.17 ms
04.11 02:30:46 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:30:55 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:30:55 TIME: user.ping 0.13 ms
04.11 02:30:55 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:31:07 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:31:07 TIME: user.ping 0.13 ms
04.11 02:31:07 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:31:10 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:31:10 TIME: user.ping 0.14 ms
04.11 02:31:10 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:31:16 TIMER: Check auto-disconnect...
04.11 02:31:16 STATS: vdl.0 cache, locks:4
04.11 02:31:18 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:31:18 TIME: user.ping 0.19 ms
04.11 02:31:18 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:31:30 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:31:30 TIME: user.ping 0.18 ms
04.11 02:31:30 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:31:34 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:31:34 TIME: user.ping 0.18 ms
04.11 02:31:34 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:31:42 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:31:42 TIME: user.ping 0.18 ms
04.11 02:31:42 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:31:53 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:31:53 TIME: user.ping 0.17 ms
04.11 02:31:53 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:31:57 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:31:57 TIME: user.ping 0.14 ms
04.11 02:31:57 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:32:05 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:32:05 TIME: user.ping 0.18 ms
04.11 02:32:05 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:32:16 TIMER: Check auto-disconnect...
04.11 02:32:16 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:32:16 TIME: user.ping 0.18 ms
04.11 02:32:16 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:32:16 STATS: vdl.0 cache, locks:4
04.11 02:32:21 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:32:21 TIME: user.ping 0.17 ms
04.11 02:32:21 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:32:28 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:32:28 TIME: user.ping 0.18 ms
04.11 02:32:28 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:32:40 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:32:40 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:32:40 TIME: user.ping 0.21 ms
04.11 02:32:45 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:32:45 TIME: user.ping 0.18 ms
04.11 02:32:45 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:32:51 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:32:51 TIME: user.ping 0.14 ms
04.11 02:32:51 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:33:03 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:33:03 TIME: user.ping 0.15 ms
04.11 02:33:03 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:33:08 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:33:08 TIME: user.ping 0.2 ms
04.11 02:33:08 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:33:15 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:33:15 TIME: user.ping 0.17 ms
04.11 02:33:15 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:33:16 TIMER: Check auto-disconnect...
04.11 02:33:16 STATS: vdl.0 cache, locks:4
04.11 02:33:26 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:33:26 TIME: user.ping 0.18 ms
04.11 02:33:26 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:33:32 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:33:32 TIME: user.ping 0.14 ms
04.11 02:33:32 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:33:38 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:33:38 TIME: user.ping 0.18 ms
04.11 02:33:38 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:33:50 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:33:50 TIME: user.ping 0.17 ms
04.11 02:33:50 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:33:56 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:33:56 TIME: user.ping 0.17 ms
04.11 02:33:56 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:34:19 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
04.11 02:34:19 -<<-: server.login ok
04.11 02:34:19 DB: SELECT * FROM LocalizationStrings
04.11 02:34:19 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:19 TIMER: Starting timer...
04.11 02:34:19 TIMER: Timer running...
04.11 02:34:19 DB: SELECT * FROM GameVars
04.11 02:34:19 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:19 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
04.11 02:34:19 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:19 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
04.11 02:34:19 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:19 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
04.11 02:34:19 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:19 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
04.11 02:34:19 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:19 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
04.11 02:34:19 -<<-: core/quest.getDaily ok
04.11 02:34:19 DB: SELECT * FROM UserAttributeTypes
04.11 02:34:19 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:19 DB: SELECT * FROM UserVariableTypes
04.11 02:34:19 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:19 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
04.11 02:34:19 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:19 DB: SELECT * FROM ItemGroups
04.11 02:34:19 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:19 DB: SELECT * FROM Bundles ORDER BY ID
04.11 02:34:19 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:19 DB: SELECT * FROM BundleItems ORDER BY ID
04.11 02:34:19 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:19 SHOP: loading items...
04.11 02:34:19 ->>-: core/shop.getList { _type => core/shop.getList }
04.11 02:34:19 -<<-: core/shop.getList ok
04.11 02:34:19 SHOP: 0 items loaded (0 sec)
04.11 02:34:19 DB: SELECT * FROM EffectAttributeTypes
04.11 02:34:19 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:19 DB: SELECT * FROM Effects
04.11 02:34:19 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:19 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
04.11 02:34:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:19 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
04.11 02:34:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:19 DB: SELECT * FROM Badges
04.11 02:34:19 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
04.11 02:34:19 -<<-: core/server.query ok
04.11 02:34:25 NET: Client (conid:27736610) connected to vdl.0 (clients:1)
04.11 02:34:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:34:27 TRACE: User not logon yet.
04.11 02:34:39 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:34:39 TRACE: User not logon yet.
04.11 02:34:51 NET: Client (name:null conid:27736610 TCP) disconnected from vdl.0 (clients:0)
04.11 02:34:56 NET: Client (conid:56234611) connected to vdl.0 (clients:1)
04.11 02:34:57 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
04.11 02:34:57 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
04.11 02:34:57 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
04.11 02:34:57 -<<-: core/server.query ok
04.11 02:34:57 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
04.11 02:34:57 -<<-: core/user.isOnlineID ok
04.11 02:34:57 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
04.11 02:34:57 -<<-: core/cache.get ok
04.11 02:34:57 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
04.11 02:34:57 -<<-: core/cache.get ok
04.11 02:34:57 NET: Client login (conid:56234611, id:107, name:uid107)
04.11 02:34:57 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
04.11 02:34:57 -<<-: core/user.loginPost null
04.11 02:34:57 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
04.11 02:34:57 == NET: uid107 ret: user.join { name => uid107, type => user.join }
04.11 02:35:01 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:35:01 TIME: user.ping 0.17 ms
04.11 02:35:01 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:35:04 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
04.11 02:35:04 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
04.11 02:35:08 NET: Client (conid:50146504) connected to vdl.0 (clients:2)
04.11 02:35:09 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:35:09 TIME: user.ping 0.19 ms
04.11 02:35:09 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:35:12 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE2 }
04.11 02:35:12 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116'
04.11 02:35:12 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116', _type => core/server.query }
04.11 02:35:12 -<<-: core/server.query { list => {{ name => uid116, networkid => , isbanned => false, id => 116 }}, errorCode => ok, _type => core/server.query }
04.11 02:35:12 ->>-: core/user.isOnlineID { id => 116, _type => core/user.isOnlineID }
04.11 02:35:12 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
04.11 02:35:12 ->>-: core/cache.get { type => user, v => -1, id => 116, _type => core/cache.get }
04.11 02:35:12 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid116, deleted => false, email => , networktype =>   , password => uid116, isbanned => false, regdate => 2016-11-03 21:26:31.138113+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1478199280, lastLoginDate => 309, lastLoadDate => 1105 }, effects => { list => [] } }}, version => 0, id => 116 } }
04.11 02:35:12 ->>-: core/cache.get { type => questdata, v => -1, id => 116, _type => core/cache.get }
04.11 02:35:12 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 116 } }
04.11 02:35:12 NET: Client login (conid:50146504, id:116, name:uid116)
04.11 02:35:12 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 116, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
04.11 02:35:12 -<<-: core/user.loginPost { _type => core/user.loginPost }
04.11 02:35:12 == NET: uid107 ret: user.join { name => uid116, type => user.join }
04.11 02:35:12 == NET: uid116 ret: user.login { name => uid116, type => user.login, errorCode => ok, id => 116 }
04.11 02:35:12 == NET: uid116 ret: user.join { name => uid107, type => user.join }
04.11 02:35:12 == NET: uid116 ret: user.join { name => uid116, type => user.join }
04.11 02:35:17 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:35:17 TIME: user.ping 0.19 ms
04.11 02:35:17 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:35:19 TIMER: Check auto-disconnect...
04.11 02:35:19 STATS: vdl.0 cache, locks:4
04.11 02:35:19 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 116, _type => core/cache.update }
04.11 02:35:19 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
04.11 02:35:19 STATS: vdl.0 cache connection, 32 calls, total 0.0770258903503418 sec spent, avg 2.41 ms
04.11 02:35:25 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:35:25 TIME: user.ping 0.16 ms
04.11 02:35:25 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:35:26 ++ NET: uid116 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
04.11 02:35:26 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 116 }, _type => vdl/cache.battle.findRandom }
04.11 02:35:26 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
04.11 02:35:26 TIME: battle.find 0.57 ms
04.11 02:35:26 == NET: uid116 ret: battle.find { type => battle.find, errorCode => ok }
04.11 02:35:27 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:35:27 TIME: user.ping 0.1 ms
04.11 02:35:27 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:35:30 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
04.11 02:35:30 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 107 }, _type => vdl/cache.battle.findRandom }
04.11 02:35:30 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 2, battleId => 43, player => 1 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
04.11 02:35:30 -<<-: battle.enemyEvent { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 1, battleId => 43, player => 2 }, _isNotify => true, id => 116, _type => battle.enemyEvent }
04.11 02:35:30 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
04.11 02:35:30 TIME: battle.find 34.14 ms
04.11 02:35:30 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
04.11 02:35:30 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 2, battleId => 43, player => 1 }, type => battle.enemy }
04.11 02:35:30 == NET: uid116 ret: battle.enemy { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 1, battleId => 43, player => 2 }, type => battle.enemy }
04.11 02:35:34 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:35:34 TIME: user.ping 0.16 ms
04.11 02:35:34 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:35:38 ++ NET: uid107 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 43 }
04.11 02:35:38 ->>-: vdl/cache.battle.infoRoom { roomId => 43, _type => vdl/cache.battle.infoRoom }
04.11 02:35:38 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
04.11 02:35:38 TIME: battle.sendtask 0.51 ms
04.11 02:35:38 == NET: uid107 ret: battle.sendtask { name => throw, type => battle.sendtask, dices => [0,4,3,5,2,1], errorCode => ok, _type => battle.task }
04.11 02:35:38 == NET: uid116 ret: battle.task { name => throw, type => battle.task, dices => [0,4,3,5,2,1], errorCode => ok }
04.11 02:35:38 == NET: uid107 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
04.11 02:35:45 ++ NET: uid107 req: battle.sendtask { dice => 5, from => [7,3], name => swap, side => 2, messageType => battle.sendtask, to => [8,3], battleId => 43 }
04.11 02:35:45 ->>-: vdl/cache.battle.infoRoom { roomId => 43, _type => vdl/cache.battle.infoRoom }
04.11 02:35:45 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
04.11 02:35:45 ->>-: vdl/cache.battle.setScores { scores => [0,0], _type => vdl/cache.battle.setScores, player1 => 107, player2 => 116, battleId => 43 }
04.11 02:35:45 -<<-: vdl/cache.battle.setScores { errorCode => ok, _type => vdl/cache.battle.setScores }
04.11 02:35:45 TIME: battle.sendtask 2.36 ms
04.11 02:35:45 == NET: uid107 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
04.11 02:35:45 == NET: uid116 ret: battle.task { dice => 5, from => [7,3], name => swap, side => 2, type => battle.task, dices => [0,4,3,2,1], messageType => battle.sendtask, to => [8,3], battleId => 43 }
04.11 02:35:47 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:35:47 TIME: user.ping 0.11 ms
04.11 02:35:47 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:35:53 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:35:53 TIME: user.ping 0.17 ms
04.11 02:35:53 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:35:59 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:35:59 TIME: user.ping 0.18 ms
04.11 02:35:59 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:36:11 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:36:11 TIME: user.ping 0.19 ms
04.11 02:36:11 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:36:18 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:36:18 TIME: user.ping 0.19 ms
04.11 02:36:18 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:36:19 TIMER: Check auto-disconnect...
04.11 02:36:19 STATS: vdl.0 cache, locks:4
04.11 02:36:24 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:36:24 TIME: user.ping 0.18 ms
04.11 02:36:24 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:36:36 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:36:36 TIME: user.ping 0.19 ms
04.11 02:36:36 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:36:40 ++ NET: uid107 req: battle.sendtask { dice => 3, from => [8,3], name => swap, side => 2, messageType => battle.sendtask, to => [9,3], battleId => 43 }
04.11 02:36:40 ->>-: vdl/cache.battle.infoRoom { roomId => 43, _type => vdl/cache.battle.infoRoom }
04.11 02:36:40 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
04.11 02:36:40 STATS: vdl.0 cache connection, 38 calls, total 0.114631414413452 sec spent, avg 3.02 ms
04.11 02:36:40 TIME: battle.sendtask 3.32 ms
04.11 02:36:40 == NET: uid107 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,0,5,5,5,10,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [0,4,3,2,1], errorCode => cannotSwap }
04.11 02:36:42 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:36:42 TIME: user.ping 0.18 ms
04.11 02:36:42 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:36:48 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:36:48 TIME: user.ping 0.19 ms
04.11 02:36:48 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:37:00 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:37:00 TIME: user.ping 0.17 ms
04.11 02:37:00 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:37:06 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:37:06 TIME: user.ping 0.14 ms
04.11 02:37:06 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:37:19 TIMER: Check auto-disconnect...
04.11 02:37:19 STATS: vdl.0 cache, locks:4
04.11 02:37:31 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:37:31 TIME: user.ping 0.14 ms
04.11 02:37:31 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:37:56 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:37:56 TIME: user.ping 0.17 ms
04.11 02:37:56 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:38:19 TIMER: Check auto-disconnect...
04.11 02:38:19 STATS: vdl.0 cache, locks:4
04.11 02:38:20 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:38:20 TIME: user.ping 0.14 ms
04.11 02:38:20 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:38:54 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
04.11 02:38:54 -<<-: server.login ok
04.11 02:38:54 DB: SELECT * FROM LocalizationStrings
04.11 02:38:54 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:38:54 TIMER: Starting timer...
04.11 02:38:54 TIMER: Timer running...
04.11 02:38:54 DB: SELECT * FROM GameVars
04.11 02:38:54 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:38:54 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
04.11 02:38:54 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:38:54 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
04.11 02:38:54 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:38:54 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
04.11 02:38:54 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:38:54 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
04.11 02:38:54 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:38:54 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
04.11 02:38:54 -<<-: core/quest.getDaily ok
04.11 02:38:54 DB: SELECT * FROM UserAttributeTypes
04.11 02:38:54 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:38:54 DB: SELECT * FROM UserVariableTypes
04.11 02:38:54 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:38:54 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
04.11 02:38:54 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:38:54 DB: SELECT * FROM ItemGroups
04.11 02:38:54 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:38:54 DB: SELECT * FROM Bundles ORDER BY ID
04.11 02:38:54 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:38:54 DB: SELECT * FROM BundleItems ORDER BY ID
04.11 02:38:54 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:38:54 SHOP: loading items...
04.11 02:38:54 ->>-: core/shop.getList { _type => core/shop.getList }
04.11 02:38:54 -<<-: core/shop.getList ok
04.11 02:38:54 SHOP: 0 items loaded (0.001 sec)
04.11 02:38:54 DB: SELECT * FROM EffectAttributeTypes
04.11 02:38:54 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:38:54 DB: SELECT * FROM Effects
04.11 02:38:54 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:38:54 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
04.11 02:38:54 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:38:54 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
04.11 02:38:54 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:38:54 DB: SELECT * FROM Badges
04.11 02:38:54 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
04.11 02:38:54 -<<-: core/server.query ok
04.11 02:39:44 NET: Client (conid:28843708) connected to vdl.0 (clients:1)
04.11 02:39:45 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
04.11 02:39:45 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
04.11 02:39:45 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
04.11 02:39:45 -<<-: core/server.query ok
04.11 02:39:45 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
04.11 02:39:45 -<<-: core/user.isOnlineID ok
04.11 02:39:45 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
04.11 02:39:45 -<<-: core/cache.get ok
04.11 02:39:45 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
04.11 02:39:45 -<<-: core/cache.get ok
04.11 02:39:45 NET: Client login (conid:28843708, id:107, name:uid107)
04.11 02:39:45 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
04.11 02:39:45 -<<-: core/user.loginPost null
04.11 02:39:45 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
04.11 02:39:45 == NET: uid107 ret: user.join { name => uid107, type => user.join }
04.11 02:39:49 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:39:49 TIME: user.ping 0.18 ms
04.11 02:39:49 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:39:54 TIMER: Check auto-disconnect...
04.11 02:39:54 STATS: vdl.0 cache, locks:2
04.11 02:39:54 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
04.11 02:39:54 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
04.11 02:39:54 STATS: vdl.0 cache connection, 26 calls, total 0.0602247714996338 sec spent, avg 2.32 ms
04.11 02:39:57 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:39:57 TIME: user.ping 0.17 ms
04.11 02:39:57 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:39:58 NET: Client (conid:72953069) connected to vdl.0 (clients:2)
04.11 02:40:02 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE2 }
04.11 02:40:02 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116'
04.11 02:40:02 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116', _type => core/server.query }
04.11 02:40:02 -<<-: core/server.query { list => {{ name => uid116, networkid => , isbanned => false, id => 116 }}, errorCode => ok, _type => core/server.query }
04.11 02:40:02 ->>-: core/user.isOnlineID { id => 116, _type => core/user.isOnlineID }
04.11 02:40:02 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
04.11 02:40:02 ->>-: core/cache.get { type => user, v => -1, id => 116, _type => core/cache.get }
04.11 02:40:02 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid116, deleted => false, email => , networktype =>   , password => uid116, isbanned => false, regdate => 2016-11-03 21:26:31.138113+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1478199280, lastLoginDate => 309, lastLoadDate => 1105 }, effects => { list => [] } }}, version => 0, id => 116 } }
04.11 02:40:02 ->>-: core/cache.get { type => questdata, v => -1, id => 116, _type => core/cache.get }
04.11 02:40:02 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 116 } }
04.11 02:40:02 NET: Client login (conid:72953069, id:116, name:uid116)
04.11 02:40:02 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 116, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
04.11 02:40:02 -<<-: core/user.loginPost { _type => core/user.loginPost }
04.11 02:40:02 == NET: uid116 ret: user.login { name => uid116, type => user.login, errorCode => ok, id => 116 }
04.11 02:40:02 == NET: uid107 ret: user.join { name => uid116, type => user.join }
04.11 02:40:02 == NET: uid116 ret: user.join { name => uid107, type => user.join }
04.11 02:40:02 == NET: uid116 ret: user.join { name => uid116, type => user.join }
04.11 02:40:05 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:40:05 TIME: user.ping 0.3 ms
04.11 02:40:05 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:40:19 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
04.11 02:40:19 -<<-: server.login ok
04.11 02:40:19 DB: SELECT * FROM LocalizationStrings
04.11 02:40:19 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:19 TIMER: Starting timer...
04.11 02:40:19 TIMER: Timer running...
04.11 02:40:19 DB: SELECT * FROM GameVars
04.11 02:40:19 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:19 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
04.11 02:40:19 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:19 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
04.11 02:40:19 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:19 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
04.11 02:40:19 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:19 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
04.11 02:40:19 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:19 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
04.11 02:40:19 -<<-: core/quest.getDaily ok
04.11 02:40:19 DB: SELECT * FROM UserAttributeTypes
04.11 02:40:19 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:19 DB: SELECT * FROM UserVariableTypes
04.11 02:40:19 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:19 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
04.11 02:40:19 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:19 DB: SELECT * FROM ItemGroups
04.11 02:40:19 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:19 DB: SELECT * FROM Bundles ORDER BY ID
04.11 02:40:19 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:19 DB: SELECT * FROM BundleItems ORDER BY ID
04.11 02:40:19 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:19 SHOP: loading items...
04.11 02:40:19 ->>-: core/shop.getList { _type => core/shop.getList }
04.11 02:40:19 -<<-: core/shop.getList ok
04.11 02:40:19 SHOP: 0 items loaded (0.001 sec)
04.11 02:40:19 DB: SELECT * FROM EffectAttributeTypes
04.11 02:40:19 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:19 DB: SELECT * FROM Effects
04.11 02:40:19 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:19 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
04.11 02:40:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:19 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
04.11 02:40:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:19 DB: SELECT * FROM Badges
04.11 02:40:19 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
04.11 02:40:19 -<<-: core/server.query ok
04.11 02:40:20 NET: Client (conid:12958611) connected to vdl.0 (clients:1)
04.11 02:40:22 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:40:22 TRACE: User not logon yet.
04.11 02:40:30 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:40:30 TRACE: User not logon yet.
04.11 02:40:37 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
04.11 02:40:37 TRACE: User not logon yet.
04.11 02:40:41 NET: Client (name:null conid:12958611 TCP) disconnected from vdl.0 (clients:0)
04.11 02:40:47 NET: Client (conid:55305154) connected to vdl.0 (clients:1)
04.11 02:40:47 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
04.11 02:40:47 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
04.11 02:40:47 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
04.11 02:40:47 -<<-: core/server.query ok
04.11 02:40:47 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
04.11 02:40:47 -<<-: core/user.isOnlineID ok
04.11 02:40:47 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
04.11 02:40:47 -<<-: core/cache.get ok
04.11 02:40:47 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
04.11 02:40:47 -<<-: core/cache.get ok
04.11 02:40:47 NET: Client login (conid:55305154, id:107, name:uid107)
04.11 02:40:47 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
04.11 02:40:47 -<<-: core/user.loginPost null
04.11 02:40:47 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
04.11 02:40:47 == NET: uid107 ret: user.join { name => uid107, type => user.join }
04.11 02:40:51 NET: Client (conid:56642937) connected to vdl.0 (clients:2)
04.11 02:40:52 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:40:52 TIME: user.ping 0.17 ms
04.11 02:40:52 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:40:54 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
04.11 02:40:54 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
04.11 02:40:55 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE2 }
04.11 02:40:55 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116'
04.11 02:40:55 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116', _type => core/server.query }
04.11 02:40:55 -<<-: core/server.query { list => {{ name => uid116, networkid => , isbanned => false, id => 116 }}, errorCode => ok, _type => core/server.query }
04.11 02:40:55 ->>-: core/user.isOnlineID { id => 116, _type => core/user.isOnlineID }
04.11 02:40:55 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
04.11 02:40:55 ->>-: core/cache.get { type => user, v => -1, id => 116, _type => core/cache.get }
04.11 02:40:55 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid116, deleted => false, email => , networktype =>   , password => uid116, isbanned => false, regdate => 2016-11-03 21:26:31.138113+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1478199280, lastLoginDate => 309, lastLoadDate => 1105 }, effects => { list => [] } }}, version => 0, id => 116 } }
04.11 02:40:55 ->>-: core/cache.get { type => questdata, v => -1, id => 116, _type => core/cache.get }
04.11 02:40:55 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 116 } }
04.11 02:40:55 NET: Client login (conid:56642937, id:116, name:uid116)
04.11 02:40:55 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 116, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
04.11 02:40:55 -<<-: core/user.loginPost { _type => core/user.loginPost }
04.11 02:40:55 == NET: uid107 ret: user.join { name => uid116, type => user.join }
04.11 02:40:55 == NET: uid116 ret: user.login { name => uid116, type => user.login, errorCode => ok, id => 116 }
04.11 02:40:55 == NET: uid116 ret: user.join { name => uid107, type => user.join }
04.11 02:40:55 == NET: uid116 ret: user.join { name => uid116, type => user.join }
04.11 02:40:59 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:40:59 TIME: user.ping 0.17 ms
04.11 02:40:59 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:41:04 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 116, _type => core/cache.update }
04.11 02:41:04 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
04.11 02:41:07 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:41:07 TIME: user.ping 0.19 ms
04.11 02:41:07 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:41:08 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:41:08 TIME: user.ping 0.19 ms
04.11 02:41:08 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:41:15 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:41:15 TIME: user.ping 0.17 ms
04.11 02:41:15 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:41:19 TIMER: Check auto-disconnect...
04.11 02:41:19 STATS: vdl.0 cache, locks:4
04.11 02:41:21 ++ NET: uid116 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
04.11 02:41:21 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 116 }, _type => vdl/cache.battle.findRandom }
04.11 02:41:21 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
04.11 02:41:21 STATS: vdl.0 cache connection, 33 calls, total 0.0823736190795898 sec spent, avg 2.5 ms
04.11 02:41:21 TIME: battle.find 0.65 ms
04.11 02:41:21 == NET: uid116 ret: battle.find { type => battle.find, errorCode => ok }
04.11 02:41:23 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:41:23 TIME: user.ping 0.18 ms
04.11 02:41:23 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:41:23 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
04.11 02:41:23 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 107 }, _type => vdl/cache.battle.findRandom }
04.11 02:41:24 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 2, battleId => 44, player => 1 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
04.11 02:41:24 -<<-: battle.enemyEvent { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 1, battleId => 44, player => 2 }, _isNotify => true, id => 116, _type => battle.enemyEvent }
04.11 02:41:24 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
04.11 02:41:24 TIME: battle.find 39.43 ms
04.11 02:41:24 == NET: uid116 ret: battle.enemy { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 1, battleId => 44, player => 2 }, type => battle.enemy }
04.11 02:41:24 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
04.11 02:41:24 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 2, battleId => 44, player => 1 }, type => battle.enemy }
04.11 02:41:31 ++ NET: uid107 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 44 }
04.11 02:41:31 ->>-: vdl/cache.battle.infoRoom { roomId => 44, _type => vdl/cache.battle.infoRoom }
04.11 02:41:31 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
04.11 02:41:31 TIME: battle.sendtask 0.54 ms
04.11 02:41:31 == NET: uid107 ret: battle.sendtask { name => throw, type => battle.sendtask, dices => [1,3,2,4,5,4], errorCode => ok, _type => battle.task }
04.11 02:41:31 == NET: uid116 ret: battle.task { name => throw, type => battle.task, dices => [1,3,2,4,5,4], errorCode => ok }
04.11 02:41:31 == NET: uid107 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
04.11 02:41:32 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:41:32 TIME: user.ping 0.16 ms
04.11 02:41:32 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:41:35 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:41:35 TIME: user.ping 0.18 ms
04.11 02:41:35 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:41:38 ++ NET: uid107 req: battle.sendtask { dice => 5, from => [7,3], name => swap, side => 2, messageType => battle.sendtask, to => [8,3], battleId => 44 }
04.11 02:41:38 ->>-: vdl/cache.battle.infoRoom { roomId => 44, _type => vdl/cache.battle.infoRoom }
04.11 02:41:38 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
04.11 02:41:38 ->>-: vdl/cache.battle.setScores { scores => [0,0], _type => vdl/cache.battle.setScores, player1 => 107, player2 => 116, battleId => 44 }
04.11 02:41:38 -<<-: vdl/cache.battle.setScores { errorCode => ok, _type => vdl/cache.battle.setScores }
04.11 02:41:38 TIME: battle.sendtask 2.52 ms
04.11 02:41:38 == NET: uid107 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
04.11 02:41:38 == NET: uid116 ret: battle.task { dice => 5, from => [7,3], name => swap, side => 2, type => battle.task, dices => [1,3,2,4,4], messageType => battle.sendtask, to => [8,3], battleId => 44 }
04.11 02:41:48 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:41:48 TIME: user.ping 0.19 ms
04.11 02:41:48 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:41:53 ++ NET: uid107 req: battle.sendtask { dice => 3, from => [8,3], name => swap, side => 2, messageType => battle.sendtask, to => [9,3], battleId => 44 }
04.11 02:41:53 ->>-: vdl/cache.battle.infoRoom { roomId => 44, _type => vdl/cache.battle.infoRoom }
04.11 02:41:53 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
04.11 02:41:53 TIME: battle.sendtask 3.01 ms
04.11 02:41:53 == NET: uid107 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,0,5,5,5,10,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,3,2,4,4], errorCode => cannotSwap }
04.11 02:41:57 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:41:57 TIME: user.ping 0.18 ms
04.11 02:41:57 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:42:00 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:42:00 TIME: user.ping 0.14 ms
04.11 02:42:00 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:42:19 TIMER: Check auto-disconnect...
04.11 02:42:19 STATS: vdl.0 cache, locks:4
04.11 02:42:21 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:42:21 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:42:21 TIME: user.ping 0.18 ms
04.11 02:42:46 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:42:46 TIME: user.ping 0.17 ms
04.11 02:42:46 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:43:10 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:43:10 TIME: user.ping 0.19 ms
04.11 02:43:10 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:43:19 TIMER: Check auto-disconnect...
04.11 02:43:19 STATS: vdl.0 cache, locks:4
04.11 02:43:35 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:43:35 TIME: user.ping 0.25 ms
04.11 02:43:35 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:44:00 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:44:00 TIME: user.ping 0.14 ms
04.11 02:44:00 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:44:19 TIMER: Check auto-disconnect...
04.11 02:44:19 STATS: vdl.0 cache, locks:4
04.11 02:44:24 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:44:24 TIME: user.ping 0.19 ms
04.11 02:44:24 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:44:49 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
04.11 02:44:49 TIME: user.ping 0.13 ms
04.11 02:44:49 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
04.11 02:45:49 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
04.11 02:45:49 -<<-: server.login ok
04.11 02:45:49 DB: SELECT * FROM LocalizationStrings
04.11 02:45:49 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
04.11 02:45:49 -<<-: core/server.query ok
04.11 02:45:49 TIMER: Starting timer...
04.11 02:45:49 TIMER: Timer running...
04.11 02:45:49 DB: SELECT * FROM GameVars
04.11 02:45:49 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
04.11 02:45:49 -<<-: core/server.query ok
04.11 02:45:49 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
04.11 02:45:49 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
04.11 02:45:49 -<<-: core/server.query ok
04.11 02:45:49 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
04.11 02:45:49 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
04.11 02:45:49 -<<-: core/server.query ok
04.11 02:45:49 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
04.11 02:45:49 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
04.11 02:45:49 -<<-: core/server.query ok
04.11 02:45:49 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
04.11 02:45:49 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
04.11 02:45:49 -<<-: core/server.query ok
04.11 02:45:49 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
04.11 02:45:49 -<<-: core/quest.getDaily ok
04.11 02:45:49 DB: SELECT * FROM UserAttributeTypes
04.11 02:45:49 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
04.11 02:45:49 -<<-: core/server.query ok
04.11 02:45:49 DB: SELECT * FROM UserVariableTypes
04.11 02:45:49 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
04.11 02:45:49 -<<-: core/server.query ok
04.11 02:45:49 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
04.11 02:45:49 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
04.11 02:45:49 -<<-: core/server.query ok
04.11 02:45:49 DB: SELECT * FROM ItemGroups
04.11 02:45:49 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
04.11 02:45:49 -<<-: core/server.query ok
04.11 02:45:49 DB: SELECT * FROM Bundles ORDER BY ID
04.11 02:45:49 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
04.11 02:45:49 -<<-: core/server.query ok
04.11 02:45:49 DB: SELECT * FROM BundleItems ORDER BY ID
04.11 02:45:49 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
04.11 02:45:49 -<<-: core/server.query ok
04.11 02:45:49 SHOP: loading items...
04.11 02:45:49 ->>-: core/shop.getList { _type => core/shop.getList }
04.11 02:45:49 -<<-: core/shop.getList ok
04.11 02:45:49 SHOP: 0 items loaded (0.001 sec)
04.11 02:45:49 DB: SELECT * FROM EffectAttributeTypes
04.11 02:45:49 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
04.11 02:45:49 -<<-: core/server.query ok
04.11 02:45:49 DB: SELECT * FROM Effects
04.11 02:45:49 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
04.11 02:45:49 -<<-: core/server.query ok
04.11 02:45:49 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_p