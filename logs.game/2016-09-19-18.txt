19.09 18:55:24 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3010, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3010 }
19.09 18:55:24 -<<-: server.login ok
19.09 18:55:24 DB: SELECT * FROM LocalizationStrings
19.09 18:55:24 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 TIMER: Starting timer...
19.09 18:55:24 DB: SELECT * FROM GameVars
19.09 18:55:24 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
19.09 18:55:24 TIMER: Timer running...
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
19.09 18:55:24 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
19.09 18:55:24 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
19.09 18:55:24 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
19.09 18:55:24 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
19.09 18:55:24 -<<-: core/quest.getDaily ok
19.09 18:55:24 DB: SELECT * FROM UserAttributeTypes
19.09 18:55:24 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 DB: SELECT * FROM UserVariableTypes
19.09 18:55:24 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
19.09 18:55:24 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 DB: SELECT * FROM ItemGroups
19.09 18:55:24 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 DB: SELECT * FROM Bundles ORDER BY ID
19.09 18:55:24 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 DB: SELECT * FROM BundleItems ORDER BY ID
19.09 18:55:24 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 SHOP: loading items...
19.09 18:55:24 ->>-: core/shop.getList { _type => core/shop.getList }
19.09 18:55:24 -<<-: core/shop.getList ok
19.09 18:55:24 SHOP: 0 items loaded (0 sec)
19.09 18:55:24 DB: SELECT * FROM EffectAttributeTypes
19.09 18:55:24 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 DB: SELECT * FROM Effects
19.09 18:55:24 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
19.09 18:55:24 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
19.09 18:55:24 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 DB: SELECT * FROM Badges
19.09 18:55:24 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
19.09 18:55:24 -<<-: core/server.query ok
19.09 18:55:24 TIMER: Check auto-disconnect...
19.09 18:55:24 STATS: vdl.0 cache, locks:0
19.09 18:56:26 NET: Client (conid:4461846) connected to vdl.0 (clients:1)
19.09 18:57:17 ++ NET: null req: battle.end { roomId => 0, scoreSecondPlayer => 0, messageType => battle.end, scoreFirstPlayer => 0 }
19.09 18:57:17 TRACE: User not logon yet.
19.09 18:57:17 ++ NET: null req: user.logout { messageType => user.logout }
19.09 18:57:17 TRACE: User not logon yet.
19.09 18:57:17 NET: Client (name:null conid:4461846 TCP) disconnected from vdl.0 (clients:0)
19.09 18:57:24 TIMER: Check auto-disconnect...
19.09 18:57:24 STATS: vdl.0 cache, locks:0
19.09 18:57:27 NET: Client (conid:47007047) connected to vdl.0 (clients:1)
19.09 18:57:46 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
19.09 18:57:46 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
19.09 18:57:46 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
19.09 18:57:46 -<<-: core/server.query ok
19.09 18:57:46 STATS: vdl.0 cache connection, 21 calls, total 0.0313730239868164 sec spent, avg 1.49 ms
19.09 18:57:46 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
19.09 18:57:46 -<<-: core/user.isOnlineID ok
19.09 18:57:46 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
19.09 18:57:46 -<<-: core/cache.get ok
19.09 18:57:46 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
19.09 18:57:46 -<<-: core/cache.get ok
19.09 18:57:46 NET: Client login (conid:47007047, id:3, name:test1)
19.09 18:57:46 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 188.162.39.67 }
19.09 18:57:46 -<<-: core/user.loginPost null
19.09 18:57:46 DB: SELECT ID FROM TempUserLogins WHERE UserID = 3 AND Date = 'today'::timestamp
19.09 18:57:46 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 3 AND Date = 'today'::timestamp, _type => core/server.query }
19.09 18:57:46 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
19.09 18:57:46 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (3, 'today'::timestamp)
19.09 18:57:46 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 3 }
19.09 18:57:46 == NET: test1 ret: user.join { name => test1, type => user.join }
19.09 18:57:46 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (3, 'today'::timestamp), _type => core/server.pending }} }
19.09 18:57:46 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
19.09 18:57:48 ++ NET: test1 req: battle.find { messageType => battle.find }
19.09 18:57:48 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
19.09 18:57:48 -<<-: vdl/cache.battle.find { list => {}, count => 0, errorCode => not, _type => vdl/cache.battle.find }
19.09 18:57:48 ->>-: vdl/cache.battle.create { selfId => 3, _type => vdl/cache.battle.create }
19.09 18:57:48 -<<-: vdl/cache.battle.create { room => 53, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
19.09 18:57:48 TIME: battle.find 8.13 ms
19.09 18:57:48 == NET: test1 ret: battle.find { room => 53, type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
19.09 18:57:54 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1474311466, lastLoginDate => 263, lastLoadDate => 920 } }}, type => user, unlock => false, id => 3, _type => core/cache.update }
19.09 18:57:54 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.09 18:58:02 ++ NET: test1 req: battle.end { roomId => 53, scoreSecondPlayer => 0, messageType => battle.end, scoreFirstPlayer => 0 }
19.09 18:58:02 ->>-: vdl/cache.battle.infoRoom { roomId => 53, _type => vdl/cache.battle.infoRoom }
19.09 18:58:02 NET: Client (name:test1 conid:47007047 TCP) disconnected from vdl.0 (clients:0)
19.09 18:58:02 -<<-: vdl/cache.battle.infoRoom { secondId => 0, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
19.09 18:58:02 DB: INSERT INTO statistics (id, firstid,secondid, roomid, params) VALUES ('', 3,0,53,{ scoresSecond => null, scoresFirst => null })
19.09 18:58:02 ->>-: core/server.query { q => INSERT INTO statistics (id, firstid,secondid, roomid, params) VALUES ('', 3,0,53,{ scoresSecond => null, scoresFirst => null }), _type => core/server.query }
19.09 18:58:02 -<<-: core/server.query { errorCode => ok, _type => core/server.query }
19.09 18:58:02 ->>-: vdl/cache.battle.finishRoom { roomId => 53, _type => vdl/cache.battle.finishRoom }
19.09 18:58:02 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
19.09 18:58:02 ->>-: vdl/cache.battle.deleteRoom { roomId => 53, _type => vdl/cache.battle.deleteRoom }
19.09 18:58:02 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
19.09 18:58:02 ->>-: core/user.sendTo { id => 0, _type => core/user.sendTo, msg => { _type => battle.end } }
19.09 18:58:02 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
19.09 18:58:02 TIME: battle.end 16.8 ms
19.09 18:58:02 ++ NET: test1 req: user.logout { messageType => user.logout }
19.09 18:58:02 == NET: test1 ret: battle.end { type => battle.end, errorCode => ok }
19.09 18:58:02 TRACE: user.logout : No such module: user
19.09 18:58:02 TRACE: user.logout : 
Called from snipe/slave/Server.hx line 1186
19.09 18:58:02 DB: SELECT id FROM battle WHERE firstid=3 OR secondid=3 AND finished <> true
19.09 18:58:02 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=3 OR secondid=3 AND finished <> true, _type => core/server.query }
19.09 18:58:02 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
19.09 18:58:02 ->>-: vdl/cache.battle.deleteRoom { roomId => 0, _type => vdl/cache.battle.deleteRoom }
19.09 18:58:02 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
19.09 18:58:02 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 3, _type => core/cache.update }
19.09 18:58:02 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
19.09 18:58:02 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 3, _type => core/cache.update }
19.09 18:58:02 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.09 18:58:02 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 3, _type => core/user.logoutPost }
19.09 18:58:02 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
19.09 18:59:17 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3010, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3010 }
19.09 18:59:17 -<<-: server.login ok
19.09 18:59:17 DB: SELECT * FROM LocalizationStrings
19.09 18:59:17 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:17 TIMER: Starting timer...
19.09 18:59:17 TIMER: Timer running...
19.09 18:59:17 DB: SELECT * FROM GameVars
19.09 18:59:17 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:17 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
19.09 18:59:17 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:17 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
19.09 18:59:17 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:17 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
19.09 18:59:17 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:17 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
19.09 18:59:17 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:17 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
19.09 18:59:17 -<<-: core/quest.getDaily ok
19.09 18:59:17 DB: SELECT * FROM UserAttributeTypes
19.09 18:59:17 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:17 DB: SELECT * FROM UserVariableTypes
19.09 18:59:17 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:17 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
19.09 18:59:17 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:17 DB: SELECT * FROM ItemGroups
19.09 18:59:17 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:17 DB: SELECT * FROM Bundles ORDER BY ID
19.09 18:59:17 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:17 DB: SELECT * FROM BundleItems ORDER BY ID
19.09 18:59:17 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:17 SHOP: loading items...
19.09 18:59:17 ->>-: core/shop.getList { _type => core/shop.getList }
19.09 18:59:17 -<<-: core/shop.getList ok
19.09 18:59:17 SHOP: 0 items loaded (0 sec)
19.09 18:59:17 DB: SELECT * FROM EffectAttributeTypes
19.09 18:59:17 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:17 DB: SELECT * FROM Effects
19.09 18:59:17 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:17 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
19.09 18:59:17 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:17 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
19.09 18:59:17 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:17 DB: SELECT * FROM Badges
19.09 18:59:17 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
19.09 18:59:17 -<<-: core/server.query ok
19.09 18:59:54 NET: Client (conid:4493904) connected to vdl.0 (clients:1)
