07.09 16:44:28 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
07.09 16:44:28 -<<-: server.login ok
07.09 16:44:28 DB: SELECT * FROM LocalizationStrings
07.09 16:44:28 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 TIMER: Starting timer...
07.09 16:44:28 TIMER: Timer running...
07.09 16:44:28 DB: SELECT * FROM GameVars
07.09 16:44:28 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
07.09 16:44:28 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
07.09 16:44:28 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
07.09 16:44:28 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
07.09 16:44:28 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
07.09 16:44:28 -<<-: core/quest.getDaily ok
07.09 16:44:28 DB: SELECT * FROM UserAttributeTypes
07.09 16:44:28 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 DB: SELECT * FROM UserVariableTypes
07.09 16:44:28 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
07.09 16:44:28 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 DB: SELECT * FROM ItemGroups
07.09 16:44:28 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 DB: SELECT * FROM Bundles ORDER BY ID
07.09 16:44:28 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 DB: SELECT * FROM BundleItems ORDER BY ID
07.09 16:44:28 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 SHOP: loading items...
07.09 16:44:28 ->>-: core/shop.getList { _type => core/shop.getList }
07.09 16:44:28 -<<-: core/shop.getList ok
07.09 16:44:28 SHOP: 0 items loaded (0 sec)
07.09 16:44:28 DB: SELECT * FROM EffectAttributeTypes
07.09 16:44:28 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 DB: SELECT * FROM Effects
07.09 16:44:28 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
07.09 16:44:28 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
07.09 16:44:28 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 DB: SELECT * FROM Badges
07.09 16:44:28 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
07.09 16:44:28 -<<-: core/server.query ok
07.09 16:44:28 TIMER: Check auto-disconnect...
07.09 16:44:28 STATS: vdl.0 cache, locks:0
07.09 16:44:28 TIMER: Check auto-disconnect...
07.09 16:44:28 STATS: vdl.0 cache, locks:0
07.09 16:46:40 NET: Client (conid:98614904) connected to vdl.0 (clients:1)
07.09 16:46:43 ++ NET: null req: user.register { password => test, name => test7, params => {obj: 1}, messageType => user.register }
07.09 16:46:43 DB: SELECT ID FROM Users WHERE Name = E'test7'
07.09 16:46:43 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'test7', _type => core/server.query }
07.09 16:46:43 -<<-: core/server.query ok
07.09 16:46:43 STATS: vdl.0 cache connection, 21 calls, total 0.340571165084839 sec spent, avg 16.22 ms
07.09 16:46:43 DB: SELECT nextval('Users_id_seq') AS id
07.09 16:46:43 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
07.09 16:46:43 -<<-: core/server.query ok
07.09 16:46:43 ->>-: core/user.register { password => test, name => test7, fullParams => { password => test, name => test7, networkid => , params => {obj: 1}, networktype => , messageType => user.register, id => 8 }, networkid => , connectionID => 98614904, networktype => , email => , id => 8, _type => core/user.register }
07.09 16:46:43 -<<-: core/user.register ok
07.09 16:46:43 -<<-: core/user.registerResponse null
07.09 16:46:43 == NET: null ret: user.register { type => user.register, errorCode => ok }
