14.10 18:08:03 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 18:08:03 -<<-: server.login ok
14.10 18:08:03 DB: SELECT * FROM LocalizationStrings
14.10 18:08:03 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 18:08:03 -<<-: core/server.query ok
14.10 18:08:03 TIMER: Starting timer...
14.10 18:08:03 TIMER: Timer running...
14.10 18:08:03 DB: SELECT * FROM GameVars
14.10 18:08:03 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 18:08:03 -<<-: core/server.query ok
14.10 18:08:03 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 18:08:03 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 18:08:03 -<<-: core/server.query ok
14.10 18:08:03 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 18:08:03 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 18:08:03 -<<-: core/server.query ok
14.10 18:08:03 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 18:08:03 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 18:08:03 -<<-: core/server.query ok
14.10 18:08:03 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 18:08:03 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 18:08:03 -<<-: core/server.query ok
14.10 18:08:03 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 18:08:03 -<<-: core/quest.getDaily ok
14.10 18:08:03 DB: SELECT * FROM UserAttributeTypes
14.10 18:08:03 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 18:08:03 -<<-: core/server.query ok
14.10 18:08:03 DB: SELECT * FROM UserVariableTypes
14.10 18:08:03 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 18:08:03 -<<-: core/server.query ok
14.10 18:08:03 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 18:08:03 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 18:08:03 -<<-: core/server.query ok
14.10 18:08:03 DB: SELECT * FROM ItemGroups
14.10 18:08:03 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 18:09:30 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 18:09:30 -<<-: server.login ok
14.10 18:09:30 DB: SELECT * FROM LocalizationStrings
14.10 18:09:30 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 TIMER: Starting timer...
14.10 18:09:30 DB: SELECT * FROM GameVars
14.10 18:09:30 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 18:09:30 TIMER: Timer running...
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 18:09:30 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 18:09:30 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 18:09:30 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 18:09:30 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 18:09:30 -<<-: core/quest.getDaily ok
14.10 18:09:30 DB: SELECT * FROM UserAttributeTypes
14.10 18:09:30 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 DB: SELECT * FROM UserVariableTypes
14.10 18:09:30 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 18:09:30 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 DB: SELECT * FROM ItemGroups
14.10 18:09:30 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 DB: SELECT * FROM Bundles ORDER BY ID
14.10 18:09:30 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 18:09:30 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 SHOP: loading items...
14.10 18:09:30 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 18:09:30 -<<-: core/shop.getList ok
14.10 18:09:30 SHOP: 0 items loaded (0.001 sec)
14.10 18:09:30 DB: SELECT * FROM EffectAttributeTypes
14.10 18:09:30 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 DB: SELECT * FROM Effects
14.10 18:09:30 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 18:09:30 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 18:09:30 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 DB: SELECT * FROM Badges
14.10 18:09:30 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 18:09:30 -<<-: core/server.query ok
14.10 18:09:30 TIMER: Check auto-disconnect...
14.10 18:09:30 STATS: vdl.0 cache, locks:0
14.10 18:09:30 TIMER: Check auto-disconnect...
14.10 18:09:30 STATS: vdl.0 cache, locks:0
14.10 18:09:30 TIMER: Check auto-disconnect...
14.10 18:09:30 STATS: vdl.0 cache, locks:0
14.10 18:09:30 TIMER: Check auto-disconnect...
14.10 18:09:30 STATS: vdl.0 cache, locks:0
14.10 18:13:32 NET: Client (conid:54314788) connected to vdl.0 (clients:1)
14.10 18:13:33 ++ NET: null req: user.register { messageType => user.register }
14.10 18:13:33 DB: SELECT * FROM users
14.10 18:13:33 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
14.10 18:13:33 -<<-: core/server.query ok
14.10 18:13:33 STATS: vdl.0 cache connection, 21 calls, total 0.0549187660217285 sec spent, avg 2.62 ms
14.10 18:13:33 DB: SELECT ID FROM Users WHERE Name = E'uid35'
14.10 18:13:33 == NET: null ret: user.auth { type => user.auth, token => dWlkMzU= }
14.10 18:13:33 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid35', _type => core/server.query }
14.10 18:13:33 -<<-: core/server.query ok
14.10 18:13:33 DB: SELECT nextval('Users_id_seq') AS id
14.10 18:13:33 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
14.10 18:13:33 -<<-: core/server.query ok
14.10 18:13:33 ->>-: core/user.register { password => uid35, name => uid35, fullParams => { password => uid35, name => uid35, networkid => , networktype => , messageType => user.register, id => 35 }, networkid => , connectionID => 54314788, networktype => , email => , id => 35, _type => core/user.register }
14.10 18:13:33 -<<-: core/user.register ok
14.10 18:13:33 -<<-: core/user.registerResponse null
14.10 18:13:33 == NET: null ret: user.register { type => user.register, errorCode => ok }
14.10 18:13:34 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzU= }
14.10 18:13:34 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid35' AND Password = E'uid35'
14.10 18:13:34 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid35' AND Password = E'uid35', _type => core/server.query }
14.10 18:13:34 -<<-: core/server.query ok
14.10 18:13:34 ->>-: core/user.isOnlineID { id => 35, _type => core/user.isOnlineID }
14.10 18:13:34 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
14.10 18:13:34 ->>-: core/cache.get { type => user, v => -1, id => 35, _type => core/cache.get }
14.10 18:13:34 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid35, deleted => false, email => , networktype =>   , password => uid35, isbanned => false, regdate => 2016-10-14 18:13:33.360887+03, language =>   , networkid => , params => { inventory => { list => [] }, vars => {}, attrs => {}, effects => { list => [] } }}, version => 1, id => 35 } }
14.10 18:13:34 ->>-: core/cache.get { type => questdata, v => -1, id => 35, _type => core/cache.get }
14.10 18:13:34 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 35 } }
14.10 18:13:34 NET: Client login (conid:54314788, id:35, name:uid35)
14.10 18:13:34 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 35, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 18:13:34 -<<-: core/user.loginPost { _type => core/user.loginPost }
14.10 18:13:34 DB: SELECT ID FROM TempUserLogins WHERE UserID = 35 AND Date = 'today'::timestamp
14.10 18:13:34 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 35 AND Date = 'today'::timestamp, _type => core/server.query }
14.10 18:13:34 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
14.10 18:13:34 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (35, 'today'::timestamp)
14.10 18:13:34 == NET: uid35 ret: user.login { name => uid35, type => user.login, errorCode => ok, id => 35 }
14.10 18:13:34 == NET: uid35 ret: user.join { name => uid35, type => user.join }
14.10 18:13:34 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (35, 'today'::timestamp), _type => core/server.pending }} }
14.10 18:13:34 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
14.10 18:13:39 ++ NET: uid35 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 18:13:39 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:13:39 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 }], battleActive => null, startdate => 2016-14-10 18:20 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:13:39 TIME: tournament.getAvailableTournament 4.61 ms
14.10 18:13:39 == NET: uid35 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 }], battleActive => null, startdate => 2016-14-10 18:20 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:13:40 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1476458014, lastLoginDate => 288, lastLoadDate => 1015 } }}, type => user, unlock => false, id => 35, _type => core/cache.update }
14.10 18:13:40 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
14.10 18:13:44 ++ NET: uid35 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
14.10 18:13:44 ->>-: vdl/cache.tournament.addUsers { userId => 35, tournament => 1, _type => vdl/cache.tournament.addUsers }
14.10 18:13:44 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
14.10 18:13:44 TIME: tournament.addUsers 0.4 ms
14.10 18:13:44 == NET: uid35 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
14.10 18:13:44 ++ NET: uid35 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 18:13:44 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:13:44 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:20 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:13:44 TIME: tournament.getAvailableTournament 2.53 ms
14.10 18:13:44 == NET: uid35 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:20 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:14:30 TIMER: Check auto-disconnect...
14.10 18:14:30 STATS: vdl.0 cache, locks:2
14.10 18:14:39 ++ NET: uid35 req: user.logout { messageType => user.logout }
14.10 18:14:39 TRACE: user.logout : No such module: user
14.10 18:14:39 TRACE: user.logout : 
Called from snipe/slave/Server.hx line 1159
14.10 18:14:40 NET: Client (name:uid35 conid:54314788 TCP) disconnected from vdl.0 (clients:0)
14.10 18:14:40 DB: SELECT id FROM battle WHERE firstid=35 OR secondid=35 AND finished <> true
14.10 18:14:40 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=35 OR secondid=35 AND finished <> true, _type => core/server.query }
14.10 18:14:40 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
14.10 18:14:40 STATS: vdl.0 cache connection, 36 calls, total 0.0976662635803223 sec spent, avg 2.71 ms
14.10 18:14:40 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 18:14:40 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
14.10 18:14:40 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 18:14:40 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 214
Called from modules/VDLBattleModule.hx line 227
Called from snipe/slave/Server.hx line 994
14.10 18:14:40 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 35, _type => core/cache.update }
14.10 18:14:40 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
14.10 18:14:40 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 35, _type => core/cache.update }
14.10 18:14:40 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 18:14:40 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 35, _type => core/user.logoutPost }
14.10 18:14:40 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
14.10 18:14:44 NET: Client (conid:92804981) connected to vdl.0 (clients:1)
14.10 18:14:45 ++ NET: null req: user.register { messageType => user.register }
14.10 18:14:45 DB: SELECT * FROM users
14.10 18:14:45 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
14.10 18:14:45 -<<-: core/server.query { list => {{ password => , name => --- DEFAULT ATTRIBUTES ---, networkid => , params => {"attrs":{},"inventory":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:45:16.008574+03, language =>   , id => 1, deleted => false }, { password => test, name => test3, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:08.364133+03, language =>   , id => 4, deleted => false }, { password => test, name => test4, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:11.728197+03, language =>   , id => 5, deleted => false }, { password => test, name => test5, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:15.596579+03, language =>   , id => 6, deleted => false }, { password => test, name => test6, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:19.233499+03, language =>   , id => 7, deleted => false }, { password => uid24, name => uid24, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:36:42.292969+03, language =>   , id => 24, deleted => false }, { password => uid25, name => uid25, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:42:14.268266+03, language =>   , id => 25, deleted => false }, { password => test, name => test7, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-09-07 16:46:43.688817+03, language =>   , id => 8, deleted => false }, { password => uid26, name => uid26, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:52:51.409771+03, language =>   , id => 26, deleted => false }, { password => uid9, name => uid9, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-11 20:36:09.090394+03, language =>   , id => 9, deleted => false }, { password => uid32, name => uid32, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476271969,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 14:32:48.215636+03, language => en, id => 32, deleted => false }, { password => uid27, name => uid27, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476269621,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:53:40.789776+03, language => en, id => 27, deleted => false }, { password => uid10, name => uid10, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 11:12:48.168059+03, language =>   , id => 10, deleted => false }, { password => uid11, name => uid11, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:33:27.3109+03, language =>   , id => 11, deleted => false }, { password => uid12, name => uid12, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:47:26.670465+03, language =>   , id => 12, deleted => false }, { password => uid13, name => uid13, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:51:08.341292+03, language =>   , id => 13, deleted => false }, { password => uid14, name => uid14, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:53:34.360658+03, language =>   , id => 14, deleted => false }, { password => uid15, name => uid15, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:55:14.160619+03, language =>   , id => 15, deleted => false }, { password => uid28, name => uid28, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476269710,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:55:09.527211+03, language => en, id => 28, deleted => false }, { password => uid16, name => uid16, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:59:18.86185+03, language =>   , id => 16, deleted => false }, { password => test, name => test2, networkid => , params => {"attrs":{"_lastTime.24hr":1472825979,"lastLoginDate":246,"lastLoadDate":903},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, id => 3, deleted => false }, { password => uid29, name => uid29, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476271397,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 14:23:17.10609+03, language => en, id => 29, deleted => false }, { password => test, name => test1, networkid => , params => {"attrs":{"_lastTime.24hr":1476204122,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, id => 2, deleted => false }, { password => uid17, name => uid17, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:07:15.262858+03, language =>   , id => 17, deleted => false }, { password => uid18, name => uid18, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:10:03.885555+03, language =>   , id => 18, deleted => false }, { password => uid19, name => uid19, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:11:41.868111+03, language =>   , id => 19, deleted => false }, { password => uid20, name => uid20, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:13:57.605493+03, language =>   , id => 20, deleted => false }, { password => uid21, name => uid21, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:16:21.670662+03, language =>   , id => 21, deleted => false }, { password => uid22, name => uid22, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:18:13.422519+03, language =>   , id => 22, deleted => false }, { password => uid23, name => uid23, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:33:08.78413+03, language =>   , id => 23, deleted => false }, { password => uid34, name => uid34, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476437991,"lastLoginDate":288,"lastLoadDate":1015},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-14 12:39:51.725362+03, language => en, id => 34, deleted => false }, { password => uid30, name => uid30, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476271613,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 14:26:51.842745+03, language => en, id => 30, deleted => false }, { password => uid31, name => uid31, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476271703,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 14:28:22.51548+03, language => en, id => 31, deleted => false }, { password => uid35, name => uid35, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476458014,"lastLoginDate":288,"lastLoadDate":1015},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-14 18:13:33.360887+03, language => en, id => 35, deleted => false }, { password => uid33, name => uid33, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476272110,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, id => 33, deleted => false }}, errorCode => ok, _type => core/server.query }
14.10 18:14:45 DB: SELECT ID FROM Users WHERE Name = E'uid36'
14.10 18:14:45 == NET: null ret: user.auth { type => user.auth, token => dWlkMzY= }
14.10 18:14:45 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid36', _type => core/server.query }
14.10 18:14:45 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
14.10 18:14:45 DB: SELECT nextval('Users_id_seq') AS id
14.10 18:14:45 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
14.10 18:14:45 -<<-: core/server.query { list => {{ id => 36 }}, errorCode => ok, _type => core/server.query }
14.10 18:14:45 ->>-: core/user.register { password => uid36, name => uid36, fullParams => { password => uid36, name => uid36, networkid => , networktype => , messageType => user.register, id => 36 }, networkid => , connectionID => 92804981, networktype => , email => , id => 36, _type => core/user.register }
14.10 18:14:45 -<<-: core/user.register { errorCode => ok, _type => core/user.register }
14.10 18:14:45 -<<-: core/user.registerResponse { password => uid36, name => uid36, _isNotify => true, fullParams => { password => uid36, name => uid36, networkid => , networktype => , messageType => user.register, id => 36 }, networkid => , connectionID => 92804981, networktype => , email => , id => 36, _type => core/user.registerResponse }
14.10 18:14:45 == NET: null ret: user.register { type => user.register, errorCode => ok }
14.10 18:14:46 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
14.10 18:14:46 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
14.10 18:14:46 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
14.10 18:14:46 -<<-: core/server.query { list => {{ name => uid36, networkid => , isbanned => false, id => 36 }}, errorCode => ok, _type => core/server.query }
14.10 18:14:46 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
14.10 18:14:46 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
14.10 18:14:46 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
14.10 18:14:46 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid36, deleted => false, email => , networktype =>   , password => uid36, isbanned => false, regdate => 2016-10-14 18:14:45.120358+03, language =>   , networkid => , params => { inventory => { list => [] }, vars => {}, attrs => {}, effects => { list => [] } }}, version => 1, id => 36 } }
14.10 18:14:46 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
14.10 18:14:46 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 36 } }
14.10 18:14:46 NET: Client login (conid:92804981, id:36, name:uid36)
14.10 18:14:46 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 18:14:46 -<<-: core/user.loginPost { _type => core/user.loginPost }
14.10 18:14:46 DB: SELECT ID FROM TempUserLogins WHERE UserID = 36 AND Date = 'today'::timestamp
14.10 18:14:46 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 36 AND Date = 'today'::timestamp, _type => core/server.query }
14.10 18:14:46 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
14.10 18:14:46 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (36, 'today'::timestamp)
14.10 18:14:46 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
14.10 18:14:46 == NET: uid36 ret: user.join { name => uid36, type => user.join }
14.10 18:14:46 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (36, 'today'::timestamp), _type => core/server.pending }} }
14.10 18:14:46 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
14.10 18:14:49 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 18:14:49 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:14:49 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:20 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:14:49 TIME: tournament.getAvailableTournament 3.35 ms
14.10 18:14:49 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:20 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:14:54 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
14.10 18:14:54 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
14.10 18:14:54 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [34,35] }
14.10 18:14:54 TRACE: tournament.grid : Invalid field access : name
14.10 18:14:54 TRACE: tournament.grid : 
Called from modules/VDLTournamentModule.hx line 163
Called from modules/VDLTournamentModule.hx line 68
Called from snipe/slave/Server.hx line 1176
14.10 18:14:55 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1476458086, lastLoginDate => 288, lastLoadDate => 1015 } }}, type => user, unlock => false, id => 36, _type => core/cache.update }
14.10 18:14:55 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
14.10 18:15:22 ++ NET: uid36 req: user.logout { messageType => user.logout }
14.10 18:15:22 TRACE: user.logout : No such module: user
14.10 18:15:22 TRACE: user.logout : 
Called from snipe/slave/Server.hx line 1159
14.10 18:15:23 NET: Client (name:uid36 conid:92804981 TCP) disconnected from vdl.0 (clients:0)
14.10 18:15:23 DB: SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true
14.10 18:15:23 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true, _type => core/server.query }
14.10 18:15:23 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
14.10 18:15:23 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 18:15:23 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
14.10 18:15:23 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 18:15:23 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 214
Called from modules/VDLBattleModule.hx line 227
Called from snipe/slave/Server.hx line 994
14.10 18:15:23 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 36, _type => core/cache.update }
14.10 18:15:23 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
14.10 18:15:23 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 36, _type => core/cache.update }
14.10 18:15:23 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 18:15:23 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 36, _type => core/user.logoutPost }
14.10 18:15:23 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
14.10 18:15:30 TIMER: Check auto-disconnect...
14.10 18:15:30 STATS: vdl.0 cache, locks:0
14.10 18:15:30 TIMER: Check auto-disconnect...
14.10 18:15:30 STATS: vdl.0 cache, locks:0
14.10 18:17:00 NET: Client (conid:15145934) connected to vdl.0 (clients:1)
14.10 18:17:01 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
14.10 18:17:01 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
14.10 18:17:01 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
14.10 18:17:01 -<<-: core/server.query { list => {{ name => uid36, networkid => , isbanned => false, id => 36 }}, errorCode => ok, _type => core/server.query }
14.10 18:17:01 STATS: vdl.0 cache connection, 60 calls, total 0.123703002929688 sec spent, avg 2.06 ms
14.10 18:17:01 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
14.10 18:17:01 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
14.10 18:17:01 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
14.10 18:17:01 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid36, deleted => false, email => , networktype =>   , password => uid36, isbanned => false, regdate => 2016-10-14 18:14:45.120358+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476458086, lastLoginDate => 288, lastLoadDate => 1015 }, effects => { list => [] } }}, version => 0, id => 36 } }
14.10 18:17:01 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
14.10 18:17:01 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 36 } }
14.10 18:17:01 NET: Client login (conid:15145934, id:36, name:uid36)
14.10 18:17:01 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 18:17:01 -<<-: core/user.loginPost { _type => core/user.loginPost }
14.10 18:17:01 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
14.10 18:17:01 == NET: uid36 ret: user.join { name => uid36, type => user.join }
14.10 18:17:05 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 18:17:05 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:17:05 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:20 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:17:05 TIME: tournament.getAvailableTournament 3.47 ms
14.10 18:17:05 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:20 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:17:10 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
14.10 18:17:10 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
14.10 18:17:10 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [34,35] }
14.10 18:17:10 TRACE: tournament.grid : Invalid field access : name
14.10 18:17:10 TRACE: tournament.grid : 
Called from modules/VDLTournamentModule.hx line 163
Called from modules/VDLTournamentModule.hx line 68
Called from snipe/slave/Server.hx line 1176
14.10 18:17:10 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
14.10 18:17:10 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 18:17:30 TIMER: Check auto-disconnect...
14.10 18:17:30 STATS: vdl.0 cache, locks:2
14.10 18:18:49 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 18:18:49 -<<-: server.login ok
14.10 18:18:49 DB: SELECT * FROM LocalizationStrings
14.10 18:18:49 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 TIMER: Starting timer...
14.10 18:18:49 DB: SELECT * FROM GameVars
14.10 18:18:49 TIMER: Timer running...
14.10 18:18:49 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 18:18:49 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 18:18:49 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 18:18:49 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 18:18:49 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 18:18:49 -<<-: core/quest.getDaily ok
14.10 18:18:49 DB: SELECT * FROM UserAttributeTypes
14.10 18:18:49 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 DB: SELECT * FROM UserVariableTypes
14.10 18:18:49 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 18:18:49 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 DB: SELECT * FROM ItemGroups
14.10 18:18:49 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 DB: SELECT * FROM Bundles ORDER BY ID
14.10 18:18:49 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 18:18:49 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 SHOP: loading items...
14.10 18:18:49 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 18:18:49 -<<-: core/shop.getList ok
14.10 18:18:49 SHOP: 0 items loaded (0 sec)
14.10 18:18:49 DB: SELECT * FROM EffectAttributeTypes
14.10 18:18:49 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 DB: SELECT * FROM Effects
14.10 18:18:49 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 18:18:49 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 18:18:49 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 DB: SELECT * FROM Badges
14.10 18:18:49 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 18:18:49 -<<-: core/server.query ok
14.10 18:18:49 TIMER: Check auto-disconnect...
14.10 18:18:49 STATS: vdl.0 cache, locks:0
14.10 18:20:32 NET: Client (conid:95566564) connected to vdl.0 (clients:1)
14.10 18:20:33 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
14.10 18:20:33 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
14.10 18:20:33 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
14.10 18:20:33 -<<-: core/server.query ok
14.10 18:20:33 STATS: vdl.0 cache connection, 21 calls, total 0.05368971824646 sec spent, avg 2.56 ms
14.10 18:20:33 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
14.10 18:20:33 -<<-: core/user.isOnlineID ok
14.10 18:20:33 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
14.10 18:20:33 -<<-: core/cache.get ok
14.10 18:20:33 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
14.10 18:20:33 -<<-: core/cache.get ok
14.10 18:20:33 NET: Client login (conid:95566564, id:36, name:uid36)
14.10 18:20:33 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 18:20:33 -<<-: core/user.loginPost null
14.10 18:20:33 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
14.10 18:20:33 == NET: uid36 ret: user.join { name => uid36, type => user.join }
14.10 18:20:39 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
14.10 18:20:39 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 18:20:40 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 18:20:40 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:20:40 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:20 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:20:40 TIME: tournament.getAvailableTournament 5.42 ms
14.10 18:20:40 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:20 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:20:49 TIMER: Check auto-disconnect...
14.10 18:20:49 STATS: vdl.0 cache, locks:2
14.10 18:20:49 TIMER: Check auto-disconnect...
14.10 18:20:49 STATS: vdl.0 cache, locks:2
14.10 18:21:56 ++ NET: uid36 req: user.logout { messageType => user.logout }
14.10 18:21:56 NET: Client (name:uid36 conid:95566564 TCP) disconnected from vdl.0 (clients:0)
14.10 18:21:56 TRACE: user.logout : No such module: user
14.10 18:21:56 TRACE: user.logout : 
Called from snipe/slave/Server.hx line 1159
14.10 18:21:56 DB: SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true
14.10 18:21:56 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true, _type => core/server.query }
14.10 18:21:56 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
14.10 18:21:56 STATS: vdl.0 cache connection, 28 calls, total 0.0682766437530518 sec spent, avg 2.44 ms
14.10 18:21:56 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 18:21:56 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
14.10 18:21:56 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 18:21:56 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 214
Called from modules/VDLBattleModule.hx line 227
Called from snipe/slave/Server.hx line 994
14.10 18:21:56 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 36, _type => core/cache.update }
14.10 18:21:56 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
14.10 18:21:56 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 36, _type => core/cache.update }
14.10 18:21:56 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 18:21:56 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 36, _type => core/user.logoutPost }
14.10 18:21:56 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
14.10 18:22:00 NET: Client (conid:52587189) connected to vdl.0 (clients:1)
14.10 18:22:01 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
14.10 18:22:01 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
14.10 18:22:01 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
14.10 18:22:01 -<<-: core/server.query { list => {{ name => uid36, networkid => , isbanned => false, id => 36 }}, errorCode => ok, _type => core/server.query }
14.10 18:22:01 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
14.10 18:22:01 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
14.10 18:22:01 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
14.10 18:22:01 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid36, deleted => false, email => , networktype =>   , password => uid36, isbanned => false, regdate => 2016-10-14 18:14:45.120358+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476458086, lastLoginDate => 288, lastLoadDate => 1015 }, effects => { list => [] } }}, version => 2, id => 36 } }
14.10 18:22:01 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
14.10 18:22:01 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 36 } }
14.10 18:22:01 NET: Client login (conid:52587189, id:36, name:uid36)
14.10 18:22:01 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 18:22:01 -<<-: core/user.loginPost { _type => core/user.loginPost }
14.10 18:22:01 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
14.10 18:22:01 == NET: uid36 ret: user.join { name => uid36, type => user.join }
14.10 18:22:09 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
14.10 18:22:09 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
14.10 18:22:10 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 18:22:10 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:22:10 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:40 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:22:10 TIME: tournament.getAvailableTournament 4.64 ms
14.10 18:22:10 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:40 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:22:14 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
14.10 18:22:14 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
14.10 18:22:14 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [34,35] }
14.10 18:22:14 ->>-: vdl/cache.tournament.setGrid { battles => [{ round => 1, player1 => null, player2 => null }], _type => vdl/cache.tournament.setGrid }
14.10 18:22:14 -<<-: vdl/cache.tournament.setGrid { list => [{ round => 1, player1 => null, player2 => null }], errorCode => ok, _type => vdl/cache.tournament.setGrid }
14.10 18:22:14 TIME: tournament.grid 0.98 ms
14.10 18:22:14 == NET: uid36 ret: tournament.grid { list => [{ round => 1, player1 => null, player2 => null }], type => tournament.grid, errorCode => ok, _type => vdl/cache.tournament.setGrid }
14.10 18:24:14 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 18:24:14 -<<-: server.login ok
14.10 18:24:14 DB: SELECT * FROM LocalizationStrings
14.10 18:24:14 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 18:24:14 -<<-: core/server.query ok
14.10 18:24:14 TIMER: Starting timer...
14.10 18:24:14 TIMER: Timer running...
14.10 18:24:14 DB: SELECT * FROM GameVars
14.10 18:24:14 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 18:24:14 -<<-: core/server.query ok
14.10 18:24:14 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 18:24:14 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 18:24:14 -<<-: core/server.query ok
14.10 18:24:14 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 18:24:14 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 18:24:14 -<<-: core/server.query ok
14.10 18:24:14 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 18:24:14 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 18:24:14 -<<-: core/server.query ok
14.10 18:24:14 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 18:24:14 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 18:24:14 -<<-: core/server.query ok
14.10 18:24:14 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 18:24:14 -<<-: core/quest.getDaily ok
14.10 18:24:14 DB: SELECT * FROM UserAttributeTypes
14.10 18:24:14 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 18:24:14 -<<-: core/server.query ok
14.10 18:24:14 DB: SELECT * FROM UserVariableTypes
14.10 18:24:14 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 18:24:14 -<<-: core/server.query ok
14.10 18:24:14 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 18:24:14 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 18:24:14 -<<-: core/server.query ok
14.10 18:24:14 DB: SELECT * FROM ItemGroups
14.10 18:24:14 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 18:24:14 -<<-: core/server.query ok
14.10 18:24:14 DB: SELECT * FROM Bundles ORDER BY ID
14.10 18:24:14 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 18:24:14 -<<-: core/server.query ok
14.10 18:24:14 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 18:24:14 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 18:24:14 -<<-: core/server.query ok
14.10 18:24:14 SHOP: loading items...
14.10 18:24:14 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 18:24:14 -<<-: core/shop.getList ok
14.10 18:24:14 SHOP: 0 items loaded (0 sec)
14.10 18:24:14 DB: SELECT * FROM EffectAttributeTypes
14.10 18:24:14 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 18:24:14 -<<-: core/server.query ok
14.10 18:24:14 DB: SELECT * FROM Effects
14.10 18:24:14 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 18:24:14 -<<-: core/server.query ok
14.10 18:24:14 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(14.10 18:24:23 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 18:24:23 -<<-: server.login ok
14.10 18:24:23 DB: SELECT * FROM LocalizationStrings
14.10 18:24:23 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:23 TIMER: Starting timer...
14.10 18:24:23 TIMER: Timer running...
14.10 18:24:23 DB: SELECT * FROM GameVars
14.10 18:24:23 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:23 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 18:24:23 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:23 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 18:24:23 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:23 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 18:24:23 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:23 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 18:24:23 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:23 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 18:24:23 -<<-: core/quest.getDaily ok
14.10 18:24:23 DB: SELECT * FROM UserAttributeTypes
14.10 18:24:23 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:23 DB: SELECT * FROM UserVariableTypes
14.10 18:24:23 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:23 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 18:24:23 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:23 DB: SELECT * FROM ItemGroups
14.10 18:24:23 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:23 DB: SELECT * FROM Bundles ORDER BY ID
14.10 18:24:23 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:23 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 18:24:23 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:23 SHOP: loading items...
14.10 18:24:23 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 18:24:23 -<<-: core/shop.getList ok
14.10 18:24:23 SHOP: 0 items loaded (0.001 sec)
14.10 18:24:23 DB: SELECT * FROM EffectAttributeTypes
14.10 18:24:23 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:23 DB: SELECT * FROM Effects
14.10 18:24:23 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:23 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 18:24:23 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:23 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 18:24:23 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:23 DB: SELECT * FROM Badges
14.10 18:24:23 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 18:24:23 -<<-: core/server.query ok
14.10 18:24:41 NET: Client (conid:47771218) connected to vdl.0 (clients:1)
14.10 18:24:42 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
14.10 18:24:42 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
14.10 18:24:42 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
14.10 18:24:42 -<<-: core/server.query ok
14.10 18:24:42 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
14.10 18:24:42 -<<-: core/user.isOnlineID ok
14.10 18:24:42 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
14.10 18:24:42 -<<-: core/cache.get ok
14.10 18:24:42 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
14.10 18:24:42 -<<-: core/cache.get ok
14.10 18:24:42 NET: Client login (conid:47771218, id:36, name:uid36)
14.10 18:24:42 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 18:24:42 -<<-: core/user.loginPost null
14.10 18:24:42 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
14.10 18:24:42 == NET: uid36 ret: user.join { name => uid36, type => user.join }
14.10 18:24:46 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 18:24:46 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:24:46 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:40 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:24:46 TIME: tournament.getAvailableTournament 5.79 ms
14.10 18:24:46 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:40 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:24:48 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
14.10 18:24:48 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 18:24:50 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
14.10 18:24:50 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
14.10 18:24:50 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [34,35] }
14.10 18:24:50 ->>-: vdl/cache.tournament.setGrid { battles => [{ round => 1, player1 => null, player2 => null }], _type => vdl/cache.tournament.setGrid }
14.10 18:24:50 -<<-: vdl/cache.tournament.setGrid { list => [{ round => 1, player1 => null, player2 => null }], errorCode => ok, _type => vdl/cache.tournament.setGrid }
14.10 18:24:50 TIME: tournament.grid 0.81 ms
14.10 18:24:50 == NET: uid36 ret: tournament.grid { list => [{ round => 1, player1 => null, player2 => null }], type => tournament.grid, errorCode => ok, _type => vdl/cache.tournament.setGrid }
14.10 18:26:30 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 18:26:30 -<<-: server.login ok
14.10 18:26:30 DB: SELECT * FROM LocalizationStrings
14.10 18:26:30 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:30 TIMER: Starting timer...
14.10 18:26:30 TIMER: Timer running...
14.10 18:26:30 DB: SELECT * FROM GameVars
14.10 18:26:30 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:30 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 18:26:30 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:30 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 18:26:30 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:30 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 18:26:30 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:30 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 18:26:30 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:30 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 18:26:30 -<<-: core/quest.getDaily ok
14.10 18:26:30 DB: SELECT * FROM UserAttributeTypes
14.10 18:26:30 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:30 DB: SELECT * FROM UserVariableTypes
14.10 18:26:30 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:30 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 18:26:30 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:30 DB: SELECT * FROM ItemGroups
14.10 18:26:30 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:30 DB: SELECT * FROM Bundles ORDER BY ID
14.10 18:26:30 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:30 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 18:26:30 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:30 SHOP: loading items...
14.10 18:26:30 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 18:26:30 -<<-: core/shop.getList ok
14.10 18:26:30 SHOP: 0 items loaded (0 sec)
14.10 18:26:30 DB: SELECT * FROM EffectAttributeTypes
14.10 18:26:30 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:30 DB: SELECT * FROM Effects
14.10 18:26:30 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:30 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 18:26:30 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:30 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 18:26:30 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:30 DB: SELECT * FROM Badges
14.10 18:26:30 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 18:26:30 -<<-: core/server.query ok
14.10 18:26:46 NET: Client (conid:98711823) connected to vdl.0 (clients:1)
14.10 18:26:47 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
14.10 18:26:47 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
14.10 18:26:47 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
14.10 18:26:47 -<<-: core/server.query ok
14.10 18:26:47 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
14.10 18:26:47 -<<-: core/user.isOnlineID ok
14.10 18:26:47 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
14.10 18:26:47 -<<-: core/cache.get ok
14.10 18:26:47 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
14.10 18:26:47 -<<-: core/cache.get ok
14.10 18:26:47 NET: Client login (conid:98711823, id:36, name:uid36)
14.10 18:26:47 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 18:26:47 -<<-: core/user.loginPost null
14.10 18:26:47 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
14.10 18:26:47 == NET: uid36 ret: user.join { name => uid36, type => user.join }
14.10 18:26:52 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 18:26:52 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:26:52 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:40 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:26:52 TIME: tournament.getAvailableTournament 6.34 ms
14.10 18:26:52 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:40 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:26:55 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
14.10 18:26:55 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 18:26:56 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
14.10 18:26:56 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
14.10 18:26:56 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [34,35] }
14.10 18:26:56 ->>-: vdl/cache.tournament.setGrid { battles => [{ round => 1, player1 => null, player2 => null }], _type => vdl/cache.tournament.setGrid }
14.10 18:26:56 -<<-: vdl/cache.tournament.setGrid { list => [{ round => 1, player1 => null, player2 => null }], errorCode => ok, _type => vdl/cache.tournament.setGrid }
14.10 18:26:56 TIME: tournament.grid 0.87 ms
14.10 18:26:56 == NET: uid36 ret: tournament.grid { list => [{ round => 1, player1 => null, player2 => null }], type => tournament.grid, errorCode => ok, _type => vdl/cache.tournament.setGrid }
14.10 18:27:30 TIMER: Check auto-disconnect...
14.10 18:27:30 STATS: vdl.0 cache, locks:2
14.10 18:27:44 ++ NET: uid36 req: user.logout { messageType => user.logout }
14.10 18:27:44 TRACE: user.logout : No such module: user
14.10 18:27:44 TRACE: user.logout : 
Called from snipe/slave/Server.hx line 1159
14.10 18:27:44 NET: Client (name:uid36 conid:98711823 TCP) disconnected from vdl.0 (clients:0)
14.10 18:27:44 DB: SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true
14.10 18:27:44 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true, _type => core/server.query }
14.10 18:27:44 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
14.10 18:27:44 STATS: vdl.0 cache connection, 30 calls, total 0.0682270526885986 sec spent, avg 2.27 ms
14.10 18:27:44 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 18:27:44 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
14.10 18:27:44 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 18:27:44 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 214
Called from modules/VDLBattleModule.hx line 227
Called from snipe/slave/Server.hx line 994
14.10 18:27:44 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 36, _type => core/cache.update }
14.10 18:27:44 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
14.10 18:27:44 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 36, _type => core/cache.update }
14.10 18:27:44 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 18:27:44 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 36, _type => core/user.logoutPost }
14.10 18:27:44 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
14.10 18:27:49 NET: Client (conid:66218334) connected to vdl.0 (clients:1)
14.10 18:27:50 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
14.10 18:27:50 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
14.10 18:27:50 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
14.10 18:27:50 -<<-: core/server.query { list => {{ name => uid36, networkid => , isbanned => false, id => 36 }}, errorCode => ok, _type => core/server.query }
14.10 18:27:50 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
14.10 18:27:50 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
14.10 18:27:50 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
14.10 18:27:50 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid36, deleted => false, email => , networktype =>   , password => uid36, isbanned => false, regdate => 2016-10-14 18:14:45.120358+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476458086, lastLoginDate => 288, lastLoadDate => 1015 }, effects => { list => [] } }}, version => 2, id => 36 } }
14.10 18:27:50 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
14.10 18:27:50 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 36 } }
14.10 18:27:50 NET: Client login (conid:66218334, id:36, name:uid36)
14.10 18:27:50 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 18:27:50 -<<-: core/user.loginPost { _type => core/user.loginPost }
14.10 18:27:50 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
14.10 18:27:50 == NET: uid36 ret: user.join { name => uid36, type => user.join }
14.10 18:27:54 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 18:27:54 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:27:55 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:40 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:27:55 TIME: tournament.getAvailableTournament 3.88 ms
14.10 18:27:55 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:40 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:27:55 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
14.10 18:27:55 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
14.10 18:27:59 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
14.10 18:27:59 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
14.10 18:27:59 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [34,35] }
14.10 18:27:59 ->>-: vdl/cache.tournament.setGrid { battles => [{ round => 1, player1 => null, player2 => null }], _type => vdl/cache.tournament.setGrid }
14.10 18:27:59 -<<-: vdl/cache.tournament.setGrid { list => [{ round => 1, player1 => null, player2 => null },{ round => 1, player1 => null, player2 => null }], errorCode => ok, _type => vdl/cache.tournament.setGrid }
14.10 18:27:59 TIME: tournament.grid 0.9 ms
14.10 18:27:59 == NET: uid36 ret: tournament.grid { list => [{ round => 1, player1 => null, player2 => null },{ round => 1, player1 => null, player2 => null }], type => tournament.grid, errorCode => ok, _type => vdl/cache.tournament.setGrid }
14.10 18:29:13 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 18:29:13 -<<-: server.login ok
14.10 18:29:13 DB: SELECT * FROM LocalizationStrings
14.10 18:29:13 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:29:13 TIMER: Starting timer...
14.10 18:29:13 TIMER: Timer running...
14.10 18:29:13 DB: SELECT * FROM GameVars
14.10 18:29:13 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:29:13 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 18:29:13 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:29:13 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 18:29:13 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:29:13 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 18:29:13 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:29:13 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 18:29:13 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:29:13 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 18:29:13 -<<-: core/quest.getDaily ok
14.10 18:29:13 DB: SELECT * FROM UserAttributeTypes
14.10 18:29:13 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:29:13 DB: SELECT * FROM UserVariableTypes
14.10 18:29:13 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:29:13 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 18:29:13 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:29:13 DB: SELECT * FROM ItemGroups
14.10 18:29:13 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:29:13 DB: SELECT * FROM Bundles ORDER BY ID
14.10 18:29:13 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:29:13 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 18:29:13 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:29:13 SHOP: loading items...
14.10 18:29:13 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 18:29:13 -<<-: core/shop.getList ok
14.10 18:29:13 SHOP: 0 items loaded (0.001 sec)
14.10 18:29:13 DB: SELECT * FROM EffectAttributeTypes
14.10 18:29:13 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:29:13 DB: SELECT * FROM Effects
14.10 18:29:13 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:29:13 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 18:29:13 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:29:13 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 18:29:13 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:29:13 DB: SELECT * FROM Badges
14.10 18:29:13 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 18:29:13 -<<-: core/server.query ok
14.10 18:30:07 NET: Client (conid:66308789) connected to vdl.0 (clients:1)
14.10 18:30:08 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
14.10 18:30:08 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
14.10 18:30:08 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
14.10 18:30:08 -<<-: core/server.query ok
14.10 18:30:08 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
14.10 18:30:08 -<<-: core/user.isOnlineID ok
14.10 18:30:08 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
14.10 18:30:08 -<<-: core/cache.get ok
14.10 18:30:08 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
14.10 18:30:08 -<<-: core/cache.get ok
14.10 18:30:08 NET: Client login (conid:66308789, id:36, name:uid36)
14.10 18:30:08 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 18:30:08 -<<-: core/user.loginPost null
14.10 18:30:08 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
14.10 18:30:08 == NET: uid36 ret: user.join { name => uid36, type => user.join }
14.10 18:30:12 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 18:30:12 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:30:12 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:40 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:30:12 TIME: tournament.getAvailableTournament 5.31 ms
14.10 18:30:12 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:40 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:30:13 TIMER: Check auto-disconnect...
14.10 18:30:13 STATS: vdl.0 cache, locks:2
14.10 18:30:13 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
14.10 18:30:13 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 18:30:13 STATS: vdl.0 cache connection, 27 calls, total 0.0523788928985596 sec spent, avg 1.94 ms
14.10 18:31:20 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 18:31:20 -<<-: server.login ok
14.10 18:31:20 DB: SELECT * FROM LocalizationStrings
14.10 18:31:20 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:31:20 TIMER: Starting timer...
14.10 18:31:20 TIMER: Timer running...
14.10 18:31:20 DB: SELECT * FROM GameVars
14.10 18:31:20 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:31:20 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 18:31:20 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:31:20 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 18:31:20 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:31:20 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 18:31:20 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:31:20 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 18:31:20 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:31:20 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 18:31:20 -<<-: core/quest.getDaily ok
14.10 18:31:20 DB: SELECT * FROM UserAttributeTypes
14.10 18:31:20 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:31:20 DB: SELECT * FROM UserVariableTypes
14.10 18:31:20 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:31:20 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 18:31:20 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:31:20 DB: SELECT * FROM ItemGroups
14.10 18:31:20 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:31:20 DB: SELECT * FROM Bundles ORDER BY ID
14.10 18:31:20 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:31:20 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 18:31:20 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:31:20 SHOP: loading items...
14.10 18:31:20 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 18:31:20 -<<-: core/shop.getList ok
14.10 18:31:20 SHOP: 0 items loaded (0 sec)
14.10 18:31:20 DB: SELECT * FROM EffectAttributeTypes
14.10 18:31:20 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:31:20 DB: SELECT * FROM Effects
14.10 18:31:20 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:31:20 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 18:31:20 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:31:20 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 18:31:20 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:31:20 DB: SELECT * FROM Badges
14.10 18:31:20 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 18:31:20 -<<-: core/server.query ok
14.10 18:32:11 NET: Client (conid:51771771) connected to vdl.0 (clients:1)
14.10 18:32:12 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
14.10 18:32:12 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
14.10 18:32:12 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
14.10 18:32:12 -<<-: core/server.query ok
14.10 18:32:12 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
14.10 18:32:12 -<<-: core/user.isOnlineID ok
14.10 18:32:12 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
14.10 18:32:12 -<<-: core/cache.get ok
14.10 18:32:12 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
14.10 18:32:12 -<<-: core/cache.get ok
14.10 18:32:12 NET: Client login (conid:51771771, id:36, name:uid36)
14.10 18:32:12 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 18:32:12 -<<-: core/user.loginPost null
14.10 18:32:12 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
14.10 18:32:12 == NET: uid36 ret: user.join { name => uid36, type => user.join }
14.10 18:32:16 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 18:32:16 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:32:16 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:40 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:32:16 TIME: tournament.getAvailableTournament 6.66 ms
14.10 18:32:16 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:40 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:32:19 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
14.10 18:32:19 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
14.10 18:32:19 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [34,35] }
14.10 18:32:19 ->>-: vdl/cache.tournament.setGrid { battles => [{ round => 1, player1 => null, player2 => null }], _type => vdl/cache.tournament.setGrid }
14.10 18:32:19 -<<-: vdl/cache.tournament.setGrid { list => [{ round => 1, player1 => null, player2 => null }], errorCode => ok, _type => vdl/cache.tournament.setGrid }
14.10 18:32:19 TIME: tournament.grid 1.25 ms
14.10 18:32:19 == NET: uid36 ret: tournament.grid { list => [{ round => 1, player1 => null, player2 => null }], type => tournament.grid, errorCode => ok, _type => vdl/cache.tournament.setGrid }
14.10 18:46:32 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 18:46:32 -<<-: server.login ok
14.10 18:46:32 DB: SELECT * FROM LocalizationStrings
14.10 18:46:32 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:46:32 TIMER: Starting timer...
14.10 18:46:32 TIMER: Timer running...
14.10 18:46:32 DB: SELECT * FROM GameVars
14.10 18:46:32 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:46:32 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 18:46:32 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:46:32 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 18:46:32 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:46:32 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 18:46:32 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:46:32 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 18:46:32 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:46:32 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 18:46:32 -<<-: core/quest.getDaily ok
14.10 18:46:32 DB: SELECT * FROM UserAttributeTypes
14.10 18:46:32 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:46:32 DB: SELECT * FROM UserVariableTypes
14.10 18:46:32 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:46:32 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 18:46:32 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:46:32 DB: SELECT * FROM ItemGroups
14.10 18:46:32 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:46:32 DB: SELECT * FROM Bundles ORDER BY ID
14.10 18:46:32 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:46:32 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 18:46:32 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:46:32 SHOP: loading items...
14.10 18:46:32 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 18:46:32 -<<-: core/shop.getList ok
14.10 18:46:32 SHOP: 0 items loaded (0 sec)
14.10 18:46:32 DB: SELECT * FROM EffectAttributeTypes
14.10 18:46:32 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:46:32 DB: SELECT * FROM Effects
14.10 18:46:32 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:46:32 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 18:46:32 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:46:32 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 18:46:32 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:46:32 DB: SELECT * FROM Badges
14.10 18:46:32 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 18:46:32 -<<-: core/server.query ok
14.10 18:47:07 NET: Client (conid:81196754) connected to vdl.0 (clients:1)
14.10 18:47:08 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
14.10 18:47:08 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
14.10 18:47:08 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
14.10 18:47:08 -<<-: core/server.query ok
14.10 18:47:08 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
14.10 18:47:08 -<<-: core/user.isOnlineID ok
14.10 18:47:08 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
14.10 18:47:08 -<<-: core/cache.get ok
14.10 18:47:08 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
14.10 18:47:08 -<<-: core/cache.get ok
14.10 18:47:08 NET: Client login (conid:81196754, id:36, name:uid36)
14.10 18:47:08 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 18:47:08 -<<-: core/user.loginPost null
14.10 18:47:08 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
14.10 18:47:08 == NET: uid36 ret: user.join { name => uid36, type => user.join }
14.10 18:47:13 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 18:47:13 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:47:13 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:40 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:47:13 TIME: tournament.getAvailableTournament 6.04 ms
14.10 18:47:13 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 18:40 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:47:17 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
14.10 18:47:17 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 18:47:32 TIMER: Check auto-disconnect...
14.10 18:47:32 STATS: vdl.0 cache, locks:2
14.10 18:47:32 TIMER: Check auto-disconnect...
14.10 18:47:32 STATS: vdl.0 cache, locks:2
14.10 18:48:55 ++ NET: uid36 req: user.logout { messageType => user.logout }
14.10 18:48:55 TRACE: user.logout : No such module: user
14.10 18:48:55 TRACE: user.logout : 
Called from snipe/slave/Server.hx line 1159
14.10 18:48:55 NET: Client (name:uid36 conid:81196754 TCP) disconnected from vdl.0 (clients:0)
14.10 18:48:55 DB: SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true
14.10 18:48:55 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true, _type => core/server.query }
14.10 18:48:55 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
14.10 18:48:55 STATS: vdl.0 cache connection, 28 calls, total 0.0609874725341797 sec spent, avg 2.18 ms
14.10 18:48:55 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 18:48:55 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
14.10 18:48:55 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 18:48:55 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 214
Called from modules/VDLBattleModule.hx line 227
Called from snipe/slave/Server.hx line 994
14.10 18:48:55 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 36, _type => core/cache.update }
14.10 18:48:55 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
14.10 18:48:55 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 36, _type => core/cache.update }
14.10 18:48:55 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 18:48:55 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 36, _type => core/user.logoutPost }
14.10 18:48:55 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
14.10 18:48:58 NET: Client (conid:47033987) connected to vdl.0 (clients:1)
14.10 18:48:59 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
14.10 18:48:59 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
14.10 18:48:59 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
14.10 18:48:59 -<<-: core/server.query { list => {{ name => uid36, networkid => , isbanned => false, id => 36 }}, errorCode => ok, _type => core/server.query }
14.10 18:48:59 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
14.10 18:48:59 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
14.10 18:48:59 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
14.10 18:48:59 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid36, deleted => false, email => , networktype =>   , password => uid36, isbanned => false, regdate => 2016-10-14 18:14:45.120358+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476458086, lastLoginDate => 288, lastLoadDate => 1015 }, effects => { list => [] } }}, version => 2, id => 36 } }
14.10 18:48:59 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
14.10 18:48:59 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 36 } }
14.10 18:48:59 NET: Client login (conid:47033987, id:36, name:uid36)
14.10 18:48:59 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 18:48:59 -<<-: core/user.loginPost { _type => core/user.loginPost }
14.10 18:48:59 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
14.10 18:48:59 == NET: uid36 ret: user.join { name => uid36, type => user.join }
14.10 18:49:05 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 18:49:05 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:49:05 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 19:40 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:49:05 TIME: tournament.getAvailableTournament 6.3 ms
14.10 18:49:05 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 19:40 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:49:07 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
14.10 18:49:07 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
14.10 18:49:13 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
14.10 18:49:13 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
14.10 18:49:13 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [34,35] }
14.10 18:49:13 ->>-: vdl/cache.tournament.setGrid { battles => [{ player1 => 34, player2 => 35 }], _type => vdl/cache.tournament.setGrid }
14.10 18:49:13 -<<-: vdl/cache.tournament.setGrid { list => [{ player1 => 34, player2 => 35 }], errorCode => ok, _type => vdl/cache.tournament.setGrid }
14.10 18:49:13 TIME: tournament.grid 0.91 ms
14.10 18:49:13 == NET: uid36 ret: tournament.grid { list => [{ player1 => 34, player2 => 35 }], type => tournament.grid, errorCode => ok, _type => vdl/cache.tournament.setGrid }
14.10 18:53:09 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 18:53:09 -<<-: server.login ok
14.10 18:53:09 DB: SELECT * FROM LocalizationStrings
14.10 18:53:09 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 TIMER: Starting timer...
14.10 18:53:09 TIMER: Timer running...
14.10 18:53:09 DB: SELECT * FROM GameVars
14.10 18:53:09 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 18:53:09 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 18:53:09 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 18:53:09 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 18:53:09 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 18:53:09 -<<-: core/quest.getDaily ok
14.10 18:53:09 DB: SELECT * FROM UserAttributeTypes
14.10 18:53:09 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 DB: SELECT * FROM UserVariableTypes
14.10 18:53:09 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 18:53:09 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 DB: SELECT * FROM ItemGroups
14.10 18:53:09 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 DB: SELECT * FROM Bundles ORDER BY ID
14.10 18:53:09 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 18:53:09 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 SHOP: loading items...
14.10 18:53:09 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 18:53:09 -<<-: core/shop.getList ok
14.10 18:53:09 SHOP: 0 items loaded (0.001 sec)
14.10 18:53:09 DB: SELECT * FROM EffectAttributeTypes
14.10 18:53:09 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 DB: SELECT * FROM Effects
14.10 18:53:09 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 18:53:09 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 18:53:09 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 DB: SELECT * FROM Badges
14.10 18:53:09 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 18:53:09 -<<-: core/server.query ok
14.10 18:53:09 TIMER: Check auto-disconnect...
14.10 18:53:09 STATS: vdl.0 cache, locks:0
14.10 18:54:14 NET: Client (conid:90669256) connected to vdl.0 (clients:1)
14.10 18:54:15 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
14.10 18:54:15 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
14.10 18:54:15 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
14.10 18:54:15 -<<-: core/server.query ok
14.10 18:54:15 STATS: vdl.0 cache connection, 21 calls, total 0.0404882431030273 sec spent, avg 1.93 ms
14.10 18:54:15 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
14.10 18:54:15 -<<-: core/user.isOnlineID ok
14.10 18:54:15 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
14.10 18:54:15 -<<-: core/cache.get ok
14.10 18:54:15 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
14.10 18:54:15 -<<-: core/cache.get ok
14.10 18:54:15 NET: Client login (conid:90669256, id:36, name:uid36)
14.10 18:54:15 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
14.10 18:54:15 -<<-: core/user.loginPost null
14.10 18:54:15 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
14.10 18:54:15 == NET: uid36 ret: user.join { name => uid36, type => user.join }
14.10 18:54:20 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 18:54:20 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:54:20 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 19:40 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:54:20 TIME: tournament.getAvailableTournament 6.76 ms
14.10 18:54:20 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid34, id => 34 },{ name => uid35, id => 35 }], battleActive => null, startdate => 2016-14-10 19:40 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
14.10 18:54:24 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
14.10 18:54:24 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
14.10 18:54:24 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [34,35] }
14.10 18:54:24 ->>-: vdl/cache.tournament.setGrid { battles => [{ round => 1, player1 => 34, player2 => 35 }], _type => vdl/cache.tournament.setGrid }
14.10 18:54:24 -<<-: vdl/cache.tournament.setGrid { list => [{ round => 1, player1 => 34, player2 => 35 }], errorCode => ok, _type => vdl/cache.tournament.setGrid }
14.10 18:54:24 TIME: tournament.grid 1.03 ms
14.10 18:54:24 == NET: uid36 ret: tournament.grid { list => [{ round => 1, player1 => 34, player2 => 35 }], type => tournament.grid, errorCode => ok, _type => vdl/cache.tournament.setGrid }
14.10 18:54:24 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
14.10 18:54:24 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 18:55:09 TIMER: Check auto-disconnect...
14.10 18:55:09 STATS: vdl.0 cache, locks:2
14.10 18:55:09 TIMER: Check auto-disconnect...
14.10 18:55:09 STATS: vdl.0 cache, locks:2
14.10 18:55:09 TIMER: Check auto-disconnect...
14.10 18:55:09 STATS: vdl.0 cache, locks:2
14.10 18:55:09 TIMER: Check auto-disconnect...
14.10 18:55:09 NET: Client (name:uid36 conid:90669256 TCP) disconnected from vdl.0 (clients:0)
14.10 18:55:09 DB: SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true
14.10 18:55:09 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true, _type => core/server.query }
14.10 18:55:09 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
14.10 18:55:09 STATS: vdl.0 cache connection, 30 calls, total 0.0556468963623047 sec spent, avg 1.85 ms
14.10 18:55:09 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 18:55:09 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
14.10 18:55:09 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
14.10 18:55:09 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 214
Called from modules/VDLBattleModule.hx line 227
Called from snipe/slave/Server.hx line 994
14.10 18:55:09 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 36, _type => core/cache.update }
14.10 18:55:09 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
14.10 18:55:09 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 36, _type => core/cache.update }
14.10 18:55:09 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
14.10 18:55:09 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 36, _type => core/user.logoutPost }
14.10 18:55:09 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
14.10 18:55:09 STATS: vdl.0 cache, locks:0
14.10 18:55:09 TIMER: Check auto-disconnect...
14.10 18:55:09 STATS: vdl.0 cache, locks:0
