26.10 14:00:15 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:00:15 TIME: user.ping 0.08 ms
26.10 14:00:15 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:00:28 TIMER: Check auto-disconnect...
26.10 14:00:29 STATS: vdl.0 cache, locks:2
26.10 14:00:35 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:00:35 TIME: user.ping 0.08 ms
26.10 14:00:35 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:01:00 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:01:00 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:01:00 TIME: user.ping 0.08 ms
26.10 14:01:28 TIMER: Check auto-disconnect...
26.10 14:01:29 STATS: vdl.0 cache, locks:2
26.10 14:02:28 TIMER: Check auto-disconnect...
26.10 14:18:38 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
26.10 14:18:38 -<<-: server.login ok
26.10 14:18:38 DB: SELECT * FROM LocalizationStrings
26.10 14:18:38 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:38 TIMER: Starting timer...
26.10 14:18:38 TIMER: Timer running...
26.10 14:18:38 DB: SELECT * FROM GameVars
26.10 14:18:38 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:38 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
26.10 14:18:38 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:38 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
26.10 14:18:38 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:38 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
26.10 14:18:38 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:38 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
26.10 14:18:38 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:38 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
26.10 14:18:38 -<<-: core/quest.getDaily ok
26.10 14:18:38 DB: SELECT * FROM UserAttributeTypes
26.10 14:18:38 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:38 DB: SELECT * FROM UserVariableTypes
26.10 14:18:38 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:38 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
26.10 14:18:38 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:38 DB: SELECT * FROM ItemGroups
26.10 14:18:38 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:38 DB: SELECT * FROM Bundles ORDER BY ID
26.10 14:18:38 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:38 DB: SELECT * FROM BundleItems ORDER BY ID
26.10 14:18:38 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:38 SHOP: loading items...
26.10 14:18:38 ->>-: core/shop.getList { _type => core/shop.getList }
26.10 14:18:38 -<<-: core/shop.getList ok
26.10 14:18:38 SHOP: 0 items loaded (0 sec)
26.10 14:18:38 DB: SELECT * FROM EffectAttributeTypes
26.10 14:18:38 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:38 DB: SELECT * FROM Effects
26.10 14:18:38 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:38 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
26.10 14:18:38 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:38 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
26.10 14:18:38 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:38 DB: SELECT * FROM Badges
26.10 14:18:38 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
26.10 14:18:38 -<<-: core/server.query ok
26.10 14:18:39 NET: Client (conid:69785166) connected to vdl.0 (clients:1)
26.10 14:18:44 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:18:44 TRACE: User not logon yet.
26.10 14:19:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:19:05 TRACE: User not logon yet.
26.10 14:19:25 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:19:25 TRACE: User not logon yet.
26.10 14:19:38 TIMER: Check auto-disconnect...
26.10 14:19:38 STATS: vdl.0 cache, locks:0
26.10 14:19:45 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:19:45 TRACE: User not logon yet.
26.10 14:20:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:20:05 TRACE: User not logon yet.
26.10 14:20:10 NET: Client (name:null conid:69785166 TCP) disconnected from vdl.0 (clients:0)
26.10 14:20:30 NET: Client (conid:94113311) connected to vdl.0 (clients:1)
26.10 14:20:35 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
26.10 14:20:35 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
26.10 14:20:35 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
26.10 14:20:35 -<<-: core/server.query ok
26.10 14:20:35 STATS: vdl.0 cache connection, 21 calls, total 0.0255172252655029 sec spent, avg 1.22 ms
26.10 14:20:35 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
26.10 14:20:35 -<<-: core/user.isOnlineID ok
26.10 14:20:35 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
26.10 14:20:35 -<<-: core/cache.get ok
26.10 14:20:35 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
26.10 14:20:35 -<<-: core/cache.get ok
26.10 14:20:35 NET: Client login (conid:94113311, id:94, name:uid94)
26.10 14:20:35 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
26.10 14:20:35 -<<-: core/user.loginPost null
26.10 14:20:35 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
26.10 14:20:35 == NET: uid94 ret: user.join { name => uid94, type => user.join }
26.10 14:20:38 TIMER: Check auto-disconnect...
26.10 14:20:38 STATS: vdl.0 cache, locks:2
26.10 14:20:43 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
26.10 14:20:43 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 14:20:47 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:20:47 TIME: user.ping 0.13 ms
26.10 14:20:47 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:21:07 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:21:07 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:21:07 TIME: user.ping 0.19 ms
26.10 14:21:27 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:21:27 TIME: user.ping 0.15 ms
26.10 14:21:27 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:21:28 NET: Client (conid:8073892) connected to vdl.0 (clients:2)
26.10 14:21:28 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
26.10 14:21:28 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
26.10 14:21:28 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
26.10 14:21:28 -<<-: core/server.query { list => {{ name => uid95, networkid => , isbanned => false, id => 95 }}, errorCode => ok, _type => core/server.query }
26.10 14:21:28 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
26.10 14:21:28 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
26.10 14:21:28 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
26.10 14:21:28 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid95, deleted => false, email => , networktype =>   , password => uid95, isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402835, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 95 } }
26.10 14:21:28 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
26.10 14:21:28 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 95 } }
26.10 14:21:28 NET: Client login (conid:8073892, id:95, name:uid95)
26.10 14:21:28 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
26.10 14:21:28 -<<-: core/user.loginPost { _type => core/user.loginPost }
26.10 14:21:28 DB: SELECT ID FROM TempUserLogins WHERE UserID = 95 AND Date = 'today'::timestamp
26.10 14:21:28 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 95 AND Date = 'today'::timestamp, _type => core/server.query }
26.10 14:21:28 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
26.10 14:21:28 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (95, 'today'::timestamp)
26.10 14:21:28 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
26.10 14:21:28 == NET: uid94 ret: user.join { name => uid95, type => user.join }
26.10 14:21:28 == NET: uid95 ret: user.join { name => uid94, type => user.join }
26.10 14:21:28 == NET: uid95 ret: user.join { name => uid95, type => user.join }
26.10 14:21:28 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (95, 'today'::timestamp), _type => core/server.pending }} }
26.10 14:21:28 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
26.10 14:21:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:21:32 TIME: user.ping 0.19 ms
26.10 14:21:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:21:38 TIMER: Check auto-disconnect...
26.10 14:21:38 STATS: vdl.0 cache, locks:4
26.10 14:21:38 ->>-: core/cache.update { diff => {language => en, params => { attrs => { lastLoginDate => 300, lastLoadDate => 1027 } }}, type => user, unlock => false, id => 95, _type => core/cache.update }
26.10 14:21:38 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 14:21:38 STATS: vdl.0 cache connection, 34 calls, total 0.0462572574615479 sec spent, avg 1.36 ms
26.10 14:21:39 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:21:39 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:21:39 TIME: user.ping 0.17 ms
26.10 14:21:46 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:21:46 TIME: user.ping 0.21 ms
26.10 14:21:46 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:21:47 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:21:47 TIME: user.ping 0.17 ms
26.10 14:21:47 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:21:53 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:21:53 TIME: user.ping 0.25 ms
26.10 14:21:53 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:22:00 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:22:00 TIME: user.ping 0.18 ms
26.10 14:22:00 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:22:07 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:22:07 TIME: user.ping 0.08 ms
26.10 14:22:07 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:22:07 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:22:07 TIME: user.ping 0.14 ms
26.10 14:22:07 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:22:14 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:22:14 TIME: user.ping 0.11 ms
26.10 14:22:14 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:22:21 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:22:21 TIME: user.ping 0.11 ms
26.10 14:22:21 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:22:27 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:22:27 TIME: user.ping 0.08 ms
26.10 14:22:27 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:22:29 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:22:29 TIME: user.ping 0.11 ms
26.10 14:22:29 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:22:29 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.10 14:22:29 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:22:29 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-26-10 14:24, startdate => 2016-26-10 14:24 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:22:29 TIME: tournament.getAvailableTournament 6.83 ms
26.10 14:22:29 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-26-10 14:24, startdate => 2016-26-10 14:24 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:22:32 ++ NET: uid95 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
26.10 14:22:32 ->>-: vdl/cache.tournament.addUsers { userId => 95, tournament => 1, _type => vdl/cache.tournament.addUsers }
26.10 14:22:32 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
26.10 14:22:32 TIME: tournament.addUsers 0.72 ms
26.10 14:22:32 == NET: uid95 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
26.10 14:22:32 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.10 14:22:32 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:22:32 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-26-10 14:24, startdate => 2016-26-10 14:24 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:22:32 TIME: tournament.getAvailableTournament 2.58 ms
26.10 14:22:32 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-26-10 14:24, startdate => 2016-26-10 14:24 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:22:36 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:22:36 TIME: user.ping 0.11 ms
26.10 14:22:36 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:22:36 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.10 14:22:36 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:22:36 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-26-10 14:24, startdate => 2016-26-10 14:24 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:22:36 TIME: tournament.getAvailableTournament 2.68 ms
26.10 14:22:36 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-26-10 14:24, startdate => 2016-26-10 14:24 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:22:38 TIMER: Check auto-disconnect...
26.10 14:22:38 STATS: vdl.0 cache, locks:4
26.10 14:22:39 ++ NET: uid94 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
26.10 14:22:39 ->>-: vdl/cache.tournament.addUsers { userId => 94, tournament => 1, _type => vdl/cache.tournament.addUsers }
26.10 14:22:39 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
26.10 14:22:39 STATS: vdl.0 cache connection, 39 calls, total 0.0594825744628906 sec spent, avg 1.53 ms
26.10 14:22:39 TIME: tournament.addUsers 1 ms
26.10 14:22:39 == NET: uid94 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
26.10 14:22:43 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:22:43 TIME: user.ping 0.18 ms
26.10 14:22:43 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:22:48 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:22:48 TIME: user.ping 0.17 ms
26.10 14:22:48 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:22:50 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:22:50 TIME: user.ping 0.16 ms
26.10 14:22:50 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:22:51 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.10 14:22:51 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:22:51 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-26-10 14:24, startdate => 2016-26-10 14:24 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:22:51 TIME: tournament.getAvailableTournament 4.35 ms
26.10 14:22:51 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-26-10 14:24, startdate => 2016-26-10 14:24 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:22:57 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:22:57 TIME: user.ping 0.18 ms
26.10 14:22:57 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:23:04 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:23:04 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:23:04 TIME: user.ping 0.21 ms
26.10 14:23:08 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:23:08 TIME: user.ping 0.19 ms
26.10 14:23:08 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:23:11 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:23:11 TIME: user.ping 0.18 ms
26.10 14:23:11 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:23:19 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:23:19 TIME: user.ping 0.16 ms
26.10 14:23:19 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:23:26 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:23:26 TIME: user.ping 0.2 ms
26.10 14:23:26 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:23:28 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:23:28 TIME: user.ping 0.15 ms
26.10 14:23:28 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:23:33 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:23:33 TIME: user.ping 0.15 ms
26.10 14:23:33 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:23:34 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
26.10 14:23:34 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
26.10 14:23:34 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
26.10 14:23:34 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
26.10 14:23:34 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95,94] }
26.10 14:23:34 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 95, player2 => 94 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
26.10 14:23:34 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 95, player2 => 94 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
26.10 14:23:34 TIME: tournament.grid 1.54 ms
26.10 14:23:34 == NET: uid95 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 95, player2 => 94 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
26.10 14:23:38 TIMER: Check auto-disconnect...
26.10 14:23:38 STATS: vdl.0 cache, locks:4
26.10 14:23:40 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:23:40 TIME: user.ping 0.2 ms
26.10 14:23:40 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:23:47 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:23:47 TIME: user.ping 0.16 ms
26.10 14:23:47 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:23:48 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:23:48 TIME: user.ping 0.13 ms
26.10 14:23:48 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:23:54 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:23:54 TIME: user.ping 0.26 ms
26.10 14:23:54 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:24:01 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:24:01 TIME: user.ping 0.13 ms
26.10 14:24:01 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:24:08 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:24:08 TIME: user.ping 0.15 ms
26.10 14:24:08 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:24:08 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:24:08 TIME: user.ping 0.17 ms
26.10 14:24:08 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:24:15 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:24:15 TIME: user.ping 0.18 ms
26.10 14:24:15 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:24:22 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:24:22 TIME: user.ping 0.17 ms
26.10 14:24:22 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:24:28 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:24:28 TIME: user.ping 0.2 ms
26.10 14:24:28 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:24:30 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:24:30 TIME: user.ping 0.16 ms
26.10 14:24:30 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:24:37 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:24:37 TIME: user.ping 0.18 ms
26.10 14:24:37 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:24:38 TIMER: Check auto-disconnect...
26.10 14:24:38 -<<-: tournament.enemyEvent { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-26-10 14:24, id => 94, enemy.num => 2, battleId => 85, player => 1 }, _isNotify => true, id => 94, _type => tournament.enemyEvent }
26.10 14:24:38 -<<-: tournament.enemyEvent { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-26-10 14:24, id => 95, enemy.num => 1, battleId => 85, player => 2 }, _isNotify => true, id => 95, _type => tournament.enemyEvent }
26.10 14:24:38 == NET: uid94 ret: tournament.enemy { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-26-10 14:24, id => 94, enemy.num => 2, battleId => 85, player => 1 }, type => tournament.enemy }
26.10 14:24:38 == NET: uid95 ret: tournament.enemy { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-26-10 14:24, id => 95, enemy.num => 1, battleId => 85, player => 2 }, type => tournament.enemy }
26.10 14:24:38 STATS: vdl.0 cache, locks:4
26.10 14:24:43 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:24:43 TIME: user.ping 0.2 ms
26.10 14:24:43 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:24:49 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:24:49 TIME: user.ping 0.16 ms
26.10 14:24:49 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:24:51 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:24:51 TIME: user.ping 0.17 ms
26.10 14:24:51 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:24:56 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:24:56 TIME: user.ping 0.09 ms
26.10 14:24:56 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:25:02 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:25:02 TIME: user.ping 0.16 ms
26.10 14:25:02 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:25:09 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:25:09 TIME: user.ping 0.11 ms
26.10 14:25:09 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:25:14 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:25:14 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:25:14 TIME: user.ping 0.26 ms
26.10 14:25:15 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:25:15 TIME: user.ping 0.09 ms
26.10 14:25:15 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:25:21 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:25:21 TIME: user.ping 0.16 ms
26.10 14:25:21 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:25:28 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:25:28 TIME: user.ping 0.14 ms
26.10 14:25:28 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:25:34 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:25:34 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:25:34 TIME: user.ping 0.13 ms
26.10 14:25:37 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:25:37 TIME: user.ping 0.11 ms
26.10 14:25:37 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:25:38 TIMER: Check auto-disconnect...
26.10 14:25:38 STATS: vdl.0 cache, locks:4
26.10 14:25:40 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:25:40 TIME: user.ping 0.15 ms
26.10 14:25:40 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:25:46 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:25:46 TIME: user.ping 0.19 ms
26.10 14:25:46 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:25:53 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:25:53 TIME: user.ping 0.17 ms
26.10 14:25:53 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:25:59 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:25:59 TIME: user.ping 0.14 ms
26.10 14:25:59 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:26:00 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:26:00 TIME: user.ping 0.19 ms
26.10 14:26:00 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:26:05 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:26:05 TIME: user.ping 0.18 ms
26.10 14:26:05 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:26:12 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:26:12 TIME: user.ping 0.19 ms
26.10 14:26:12 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:26:18 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:26:18 TIME: user.ping 0.15 ms
26.10 14:26:18 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:26:23 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:26:23 TIME: user.ping 0.24 ms
26.10 14:26:23 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:26:24 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:26:24 TIME: user.ping 0.16 ms
26.10 14:26:24 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:26:30 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:26:30 TIME: user.ping 0.16 ms
26.10 14:26:30 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:26:37 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:26:37 TIME: user.ping 0.19 ms
26.10 14:26:37 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:26:38 TIMER: Check auto-disconnect...
26.10 14:26:38 STATS: vdl.0 cache, locks:4
26.10 14:26:43 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:26:43 TIME: user.ping 0.16 ms
26.10 14:26:43 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:26:46 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:26:46 TIME: user.ping 0.21 ms
26.10 14:26:46 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:26:49 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:26:49 TIME: user.ping 0.13 ms
26.10 14:26:49 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:26:56 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:26:56 TIME: user.ping 0.09 ms
26.10 14:26:56 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:27:02 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:27:02 TIME: user.ping 0.2 ms
26.10 14:27:02 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:27:09 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:27:09 TIME: user.ping 0.08 ms
26.10 14:27:09 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:27:09 ++ NET: uid94 req: battle.end { lose => 0, dateRound => 2016-26-10 14:24, type => loseGame, winner => 0, tournamentId => 1, battleType => tournament, round => 1, messageType => battle.end, player1 => 94, player2 => 95, battleId => 85 }
26.10 14:27:09 ->>-: vdl/cache.battle.infoRoom { roomId => 85, _type => vdl/cache.battle.infoRoom }
26.10 14:27:09 -<<-: vdl/cache.battle.infoRoom { secondId => 95, firstId => 94, _type => vdl/cache.battle.infoRoom, turnId => 94 }
26.10 14:27:09 STATS: vdl.0 cache connection, 44 calls, total 0.06711745262146 sec spent, avg 1.53 ms
26.10 14:27:09 TIME: battle.end 2.29 ms
26.10 14:27:09 == NET: uid94 ret: battle.end { type => battle.end, errorCode => ok }
26.10 14:27:09 == NET: uid95 ret: battle.leave { type => battle.leave }
26.10 14:27:09 ++ NET: uid95 req: battle.end { lose => 94, dateRound => 2016-26-10 14:24, type => winGame, winner => 95, tournamentId => 1, battleType => tournament, round => 1, messageType => battle.end, player1 => 94, player2 => 95, battleId => 85 }
26.10 14:27:09 ->>-: vdl/cache.battle.infoRoom { roomId => 85, _type => vdl/cache.battle.infoRoom }
26.10 14:27:09 -<<-: vdl/cache.battle.infoRoom { secondId => 95, firstId => 94, _type => vdl/cache.battle.infoRoom, turnId => 94 }
26.10 14:27:09 TIME: battle.end 0.56 ms
26.10 14:27:09 == NET: uid95 ret: battle.end { type => battle.end, errorCode => ok }
26.10 14:27:09 == NET: uid94 ret: battle.end { type => battle.end }
26.10 14:27:10 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:27:10 TIME: user.ping 0.13 ms
26.10 14:27:10 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:27:15 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:27:15 TIME: user.ping 0.08 ms
26.10 14:27:15 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:27:21 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:27:21 TIME: user.ping 0.09 ms
26.10 14:27:21 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:27:29 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:27:29 TIME: user.ping 0.14 ms
26.10 14:27:29 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:27:30 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:27:30 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:27:30 TIME: user.ping 0.14 ms
26.10 14:27:36 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:27:36 TIME: user.ping 0.19 ms
26.10 14:27:36 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:27:38 TIMER: Check auto-disconnect...
26.10 14:27:38 STATS: vdl.0 cache, locks:4
26.10 14:27:43 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:27:43 TIME: user.ping 0.16 ms
26.10 14:27:43 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:27:50 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:27:50 TIME: user.ping 0.17 ms
26.10 14:27:50 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:28:10 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:28:10 TIME: user.ping 0.2 ms
26.10 14:28:10 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:28:30 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:28:30 TIME: user.ping 0.17 ms
26.10 14:28:30 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:28:38 TIMER: Check auto-disconnect...
26.10 14:28:38 STATS: vdl.0 cache, locks:4
26.10 14:28:50 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:28:50 TIME: user.ping 0.19 ms
26.10 14:28:50 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:29:10 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:29:10 TIME: user.ping 0.17 ms
26.10 14:29:10 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:29:30 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:29:30 TIME: user.ping 0.18 ms
26.10 14:29:30 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:29:38 TIMER: Check auto-disconnect...
26.10 14:29:38 STATS: vdl.0 cache, locks:4
26.10 14:29:51 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:29:51 TIME: user.ping 0.11 ms
26.10 14:29:51 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:30:11 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:30:11 TIME: user.ping 0.29 ms
26.10 14:30:11 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:30:31 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:30:31 TIME: user.ping 0.17 ms
26.10 14:30:31 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:30:38 TIMER: Check auto-disconnect...
26.10 14:30:38 STATS: vdl.0 cache, locks:4
26.10 14:30:51 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:30:51 TIME: user.ping 0.22 ms
26.10 14:30:51 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:31:11 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:31:11 TIME: user.ping 0.1 ms
26.10 14:31:11 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:31:31 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:31:31 TIME: user.ping 0.19 ms
26.10 14:31:31 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:31:38 TIMER: Check auto-disconnect...
26.10 14:31:38 NET: Client (name:uid95 conid:8073892 TCP) disconnected from vdl.0 (clients:1)
26.10 14:31:38 DB: SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true
26.10 14:31:38 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true, _type => core/server.query }
26.10 14:31:38 -<<-: core/server.query { list => {{ id => 85 }}, errorCode => ok, _type => core/server.query }
26.10 14:31:38 STATS: vdl.0 cache connection, 46 calls, total 0.0702536106109619 sec spent, avg 1.53 ms
26.10 14:31:38 ->>-: vdl/cache.battle.infoRoom { roomId => 85, _type => vdl/cache.battle.infoRoom }
26.10 14:31:38 -<<-: vdl/cache.battle.infoRoom { secondId => 95, firstId => 94, _type => vdl/cache.battle.infoRoom, turnId => 94 }
26.10 14:31:38 ->>-: vdl/cache.battle.deleteRoom { roomId => 85, _type => vdl/cache.battle.deleteRoom }
26.10 14:31:38 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
26.10 14:31:38 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 95, _type => core/cache.update }
26.10 14:31:38 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
26.10 14:31:38 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 95, _type => core/cache.update }
26.10 14:31:38 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 14:31:38 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 95, _type => core/user.logoutPost }
26.10 14:31:38 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
26.10 14:31:38 == NET: uid94 ret: battle.end { type => battle.end }
26.10 14:31:38 STATS: vdl.0 cache, locks:2
26.10 14:32:10 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
26.10 14:32:10 -<<-: server.login ok
26.10 14:32:10 DB: SELECT * FROM LocalizationStrings
26.10 14:32:10 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:10 TIMER: Starting timer...
26.10 14:32:10 TIMER: Timer running...
26.10 14:32:10 DB: SELECT * FROM GameVars
26.10 14:32:10 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:10 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
26.10 14:32:10 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:10 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
26.10 14:32:10 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:10 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
26.10 14:32:10 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:10 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
26.10 14:32:10 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:10 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
26.10 14:32:10 -<<-: core/quest.getDaily ok
26.10 14:32:10 DB: SELECT * FROM UserAttributeTypes
26.10 14:32:10 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:10 DB: SELECT * FROM UserVariableTypes
26.10 14:32:10 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:10 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
26.10 14:32:10 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:10 DB: SELECT * FROM ItemGroups
26.10 14:32:10 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:10 DB: SELECT * FROM Bundles ORDER BY ID
26.10 14:32:10 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:10 DB: SELECT * FROM BundleItems ORDER BY ID
26.10 14:32:10 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:10 SHOP: loading items...
26.10 14:32:10 ->>-: core/shop.getList { _type => core/shop.getList }
26.10 14:32:10 -<<-: core/shop.getList ok
26.10 14:32:10 SHOP: 0 items loaded (0 sec)
26.10 14:32:10 DB: SELECT * FROM EffectAttributeTypes
26.10 14:32:10 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:10 DB: SELECT * FROM Effects
26.10 14:32:10 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:10 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
26.10 14:32:10 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:10 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
26.10 14:32:10 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:10 DB: SELECT * FROM Badges
26.10 14:32:10 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
26.10 14:32:10 -<<-: core/server.query ok
26.10 14:32:51 NET: Client (conid:73256407) connected to vdl.0 (clients:1)
26.10 14:32:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:32:56 TRACE: User not logon yet.
26.10 14:33:10 TIMER: Check auto-disconnect...
26.10 14:33:10 STATS: vdl.0 cache, locks:0
26.10 14:33:16 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:33:16 TRACE: User not logon yet.
26.10 14:33:36 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:33:36 TRACE: User not logon yet.
26.10 14:33:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:33:56 TRACE: User not logon yet.
26.10 14:34:10 TIMER: Check auto-disconnect...
26.10 14:34:10 STATS: vdl.0 cache, locks:0
26.10 14:34:17 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:34:17 TRACE: User not logon yet.
26.10 14:34:33 NET: Client (name:null conid:73256407 TCP) disconnected from vdl.0 (clients:0)
26.10 14:34:49 NET: Client (conid:38193030) connected to vdl.0 (clients:1)
26.10 14:34:50 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
26.10 14:34:50 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
26.10 14:34:50 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
26.10 14:34:50 -<<-: core/server.query ok
26.10 14:34:50 STATS: vdl.0 cache connection, 21 calls, total 0.0339899063110352 sec spent, avg 1.62 ms
26.10 14:34:50 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
26.10 14:34:50 -<<-: core/user.isOnlineID ok
26.10 14:34:50 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
26.10 14:34:50 -<<-: core/cache.get ok
26.10 14:34:50 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
26.10 14:34:50 -<<-: core/cache.get ok
26.10 14:34:50 NET: Client login (conid:38193030, id:95, name:uid95)
26.10 14:34:50 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
26.10 14:34:50 -<<-: core/user.loginPost null
26.10 14:34:50 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
26.10 14:34:50 == NET: uid95 ret: user.join { name => uid95, type => user.join }
26.10 14:34:53 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:34:53 TIME: user.ping 0.18 ms
26.10 14:34:53 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:34:54 NET: Client (conid:96345149) connected to vdl.0 (clients:2)
26.10 14:34:59 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
26.10 14:34:59 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
26.10 14:34:59 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
26.10 14:34:59 -<<-: core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
26.10 14:34:59 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
26.10 14:34:59 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
26.10 14:34:59 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
26.10 14:34:59 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 300, lastLoadDate => 1027 }, effects => { list => [] } }}, version => 0, id => 94 } }
26.10 14:34:59 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
26.10 14:34:59 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
26.10 14:34:59 NET: Client login (conid:96345149, id:94, name:uid94)
26.10 14:34:59 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
26.10 14:34:59 -<<-: core/user.loginPost { _type => core/user.loginPost }
26.10 14:34:59 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
26.10 14:34:59 == NET: uid95 ret: user.join { name => uid94, type => user.join }
26.10 14:34:59 == NET: uid94 ret: user.join { name => uid95, type => user.join }
26.10 14:34:59 == NET: uid94 ret: user.join { name => uid94, type => user.join }
26.10 14:35:00 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
26.10 14:35:00 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 14:35:00 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:35:00 TIME: user.ping 0.18 ms
26.10 14:35:00 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:35:03 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.10 14:35:03 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:35:03 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-26-10 14:36, startdate => 2016-26-10 14:36 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:35:03 TIME: tournament.getAvailableTournament 6.11 ms
26.10 14:35:03 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-26-10 14:36, startdate => 2016-26-10 14:36 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:35:05 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
26.10 14:35:05 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 14:35:07 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
26.10 14:35:07 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
26.10 14:35:07 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
26.10 14:35:07 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
26.10 14:35:07 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95,94] }
26.10 14:35:07 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 95, player2 => 94 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
26.10 14:35:07 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 95, player2 => 94 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
26.10 14:35:07 TIME: tournament.grid 2.42 ms
26.10 14:35:07 == NET: uid95 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 95, player2 => 94 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
26.10 14:35:07 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:35:07 TIME: user.ping 0.15 ms
26.10 14:35:07 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:35:10 TIMER: Check auto-disconnect...
26.10 14:35:10 STATS: vdl.0 cache, locks:4
26.10 14:35:10 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:35:10 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:35:10 TIME: user.ping 0.19 ms
26.10 14:35:11 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.10 14:35:11 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:35:11 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-26-10 14:36, startdate => 2016-26-10 14:36 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:35:11 TIME: tournament.getAvailableTournament 3.63 ms
26.10 14:35:11 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-26-10 14:36, startdate => 2016-26-10 14:36 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 14:35:15 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:35:15 TIME: user.ping 0.19 ms
26.10 14:35:15 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:35:22 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:35:22 TIME: user.ping 0.18 ms
26.10 14:35:22 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:35:29 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:35:29 TIME: user.ping 0.12 ms
26.10 14:35:29 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:35:30 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:35:30 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:35:30 TIME: user.ping 0.1 ms
26.10 14:35:36 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:35:36 TIME: user.ping 0.08 ms
26.10 14:35:36 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:35:44 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:35:44 TIME: user.ping 0.09 ms
26.10 14:35:44 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:35:50 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:35:50 TIME: user.ping 0.11 ms
26.10 14:35:50 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:35:51 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:35:51 TIME: user.ping 0.2 ms
26.10 14:35:51 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:35:58 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:35:58 TIME: user.ping 0.11 ms
26.10 14:35:58 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:36:05 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:36:05 TIME: user.ping 0.12 ms
26.10 14:36:05 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:36:10 TIMER: Check auto-disconnect...
26.10 14:36:10 -<<-: tournament.enemyEvent { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-26-10 14:36, id => 94, enemy.num => 2, battleId => 86, player => 1 }, _isNotify => true, id => 94, _type => tournament.enemyEvent }
26.10 14:36:10 -<<-: tournament.enemyEvent { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-26-10 14:36, id => 95, enemy.num => 1, battleId => 86, player => 2 }, _isNotify => true, id => 95, _type => tournament.enemyEvent }
26.10 14:36:10 == NET: uid94 ret: tournament.enemy { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-26-10 14:36, id => 94, enemy.num => 2, battleId => 86, player => 1 }, type => tournament.enemy }
26.10 14:36:10 == NET: uid95 ret: tournament.enemy { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-26-10 14:36, id => 95, enemy.num => 1, battleId => 86, player => 2 }, type => tournament.enemy }
26.10 14:36:10 STATS: vdl.0 cache, locks:4
26.10 14:36:11 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:36:11 TIME: user.ping 0.21 ms
26.10 14:36:11 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:36:13 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:36:13 TIME: user.ping 0.16 ms
26.10 14:36:13 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:36:19 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:36:19 TIME: user.ping 0.2 ms
26.10 14:36:19 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:36:26 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:36:26 TIME: user.ping 0.1 ms
26.10 14:36:26 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:36:27 ++ NET: uid94 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 86, name => throw, side => 2, dices => 542455, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
26.10 14:36:27 ->>-: vdl/cache.battle.infoRoom { roomId => 86, _type => vdl/cache.battle.infoRoom }
26.10 14:36:27 -<<-: vdl/cache.battle.infoRoom { secondId => 95, firstId => 94, _type => vdl/cache.battle.infoRoom, turnId => 94 }
26.10 14:36:27 STATS: vdl.0 cache connection, 38 calls, total 0.0627641677856445 sec spent, avg 1.65 ms
26.10 14:36:27 TIME: battle.sendtask 2.08 ms
26.10 14:36:27 == NET: uid94 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
26.10 14:36:27 == NET: uid95 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 86, name => throw, side => 2, type => battle.task, dices => 542455, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
26.10 14:36:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:36:32 TIME: user.ping 0.19 ms
26.10 14:36:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:36:33 ++ NET: uid94 req: battle.end { type => loseGame, typeBattle => tournament, tournamentId => 1, messageType => battle.end, battleId => 86 }
26.10 14:36:33 ->>-: vdl/cache.battle.infoRoom { roomId => 86, _type => vdl/cache.battle.infoRoom }
26.10 14:36:33 -<<-: vdl/cache.battle.infoRoom { secondId => 95, firstId => 94, _type => vdl/cache.battle.infoRoom, turnId => 94 }
26.10 14:36:33 TRACE: battle.end : Invalid field access : FinishCall
26.10 14:36:33 TRACE: battle.end : 
Called from modules/VDLBattleModule.hx line 82
Called from modules/VDLBattleModule.hx line 39
Called from snipe/slave/Server.hx line 1176
26.10 14:36:37 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:36:37 TIME: user.ping 0.18 ms
26.10 14:36:37 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:36:38 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:36:38 TIME: user.ping 0.46 ms
26.10 14:36:38 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:36:44 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:36:44 TIME: user.ping 0.18 ms
26.10 14:36:44 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:36:50 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:36:50 TIME: user.ping 0.16 ms
26.10 14:36:50 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:36:55 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:36:55 TIME: user.ping 0.18 ms
26.10 14:36:55 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:36:57 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:36:57 TIME: user.ping 0.13 ms
26.10 14:36:57 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:37:01 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:37:01 TIME: user.ping 0.18 ms
26.10 14:37:01 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:37:10 TIMER: Check auto-disconnect...
26.10 14:37:10 STATS: vdl.0 cache, locks:4
26.10 14:37:18 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:37:18 TIME: user.ping 0.18 ms
26.10 14:37:18 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:37:38 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:37:38 TIME: user.ping 0.11 ms
26.10 14:37:38 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:37:43 ++ NET: uid95 req: battle.end { type => loseGame, typeBattle => tournament, tournamentId => 1, messageType => battle.end, battleId => 86 }
26.10 14:37:43 NET: Client (name:uid95 conid:38193030 TCP) disconnected from vdl.0 (clients:1)
26.10 14:37:43 ->>-: vdl/cache.battle.infoRoom { roomId => 86, _type => vdl/cache.battle.infoRoom }
26.10 14:37:43 -<<-: vdl/cache.battle.infoRoom { secondId => 95, firstId => 94, _type => vdl/cache.battle.infoRoom, turnId => 94 }
26.10 14:37:43 STATS: vdl.0 cache connection, 40 calls, total 0.0653560161590576 sec spent, avg 1.63 ms
26.10 14:37:43 TRACE: battle.end : Invalid field access : FinishCall
26.10 14:37:43 TRACE: battle.end : 
Called from modules/VDLBattleModule.hx line 82
Called from modules/VDLBattleModule.hx line 39
Called from snipe/slave/Server.hx line 1176
26.10 14:37:43 DB: SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true
26.10 14:37:43 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true, _type => core/server.query }
26.10 14:37:43 -<<-: core/server.query { list => {{ id => 86 }}, errorCode => ok, _type => core/server.query }
26.10 14:37:43 ->>-: vdl/cache.battle.infoRoom { roomId => 86, _type => vdl/cache.battle.infoRoom }
26.10 14:37:43 -<<-: vdl/cache.battle.infoRoom { secondId => 95, firstId => 94, _type => vdl/cache.battle.infoRoom, turnId => 94 }
26.10 14:37:43 ->>-: vdl/cache.battle.deleteRoom { roomId => 86, _type => vdl/cache.battle.deleteRoom }
26.10 14:37:43 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
26.10 14:37:43 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 95, _type => core/cache.update }
26.10 14:37:43 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
26.10 14:37:43 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 95, _type => core/cache.update }
26.10 14:37:43 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 14:37:43 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 95, _type => core/user.logoutPost }
26.10 14:37:43 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
26.10 14:37:43 == NET: uid94 ret: battle.end { type => battle.end }
26.10 14:37:58 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:37:58 TIME: user.ping 0.13 ms
26.10 14:37:58 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:38:10 TIMER: Check auto-disconnect...
26.10 14:38:10 STATS: vdl.0 cache, locks:2
26.10 14:38:18 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:38:18 TIME: user.ping 0.1 ms
26.10 14:38:18 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:38:38 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:38:38 TIME: user.ping 0.09 ms
26.10 14:38:38 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:38:58 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:38:58 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:38:58 TIME: user.ping 0.19 ms
26.10 14:39:10 TIMER: Check auto-disconnect...
26.10 14:39:10 STATS: vdl.0 cache, locks:2
26.10 14:39:18 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 14:39:18 TIME: user.ping 0.19 ms
26.10 14:39:18 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 14:40:00 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
26.10 14:40:00 -<<-: server.login ok
26.10 14:40:00 DB: SELECT * FROM LocalizationStrings
26.10 14:40:00 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:00 TIMER: Starting timer...
26.10 14:40:00 TIMER: Timer running...
26.10 14:40:00 DB: SELECT * FROM GameVars
26.10 14:40:00 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:00 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
26.10 14:40:00 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:00 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
26.10 14:40:00 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:00 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
26.10 14:40:00 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:00 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
26.10 14:40:00 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:00 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
26.10 14:40:00 -<<-: core/quest.getDaily ok
26.10 14:40:00 DB: SELECT * FROM UserAttributeTypes
26.10 14:40:00 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:00 DB: SELECT * FROM UserVariableTypes
26.10 14:40:00 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:00 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
26.10 14:40:00 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:00 DB: SELECT * FROM ItemGroups
26.10 14:40:00 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:00 DB: SELECT * FROM Bundles ORDER BY ID
26.10 14:40:00 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:00 DB: SELECT * FROM BundleItems ORDER BY ID
26.10 14:40:00 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:00 SHOP: loading items...
26.10 14:40:00 ->>-: core/shop.getList { _type => core/shop.getList }
26.10 14:40:00 -<<-: core/shop.getList ok
26.10 14:40:00 SHOP: 0 items loaded (0 sec)
26.10 14:40:00 DB: SELECT * FROM EffectAttributeTypes
26.10 14:40:00 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:00 DB: SELECT * FROM Effects
26.10 14:40:00 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:00 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
26.10 14:40:00 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:00 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
26.10 14:40:00 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:00 DB: SELECT * FROM Badges
26.10 14:40:00 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
26.10 14:40:00 -<<-: core/server.query ok
26.10 14:40:18 NET: Client (conid:87582832) connected to vdl.0 (clients:1)
26.10 14:40:23 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:40:23 TRACE: User not logon yet.
26.10 14:40:43 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:40:43 TRACE: User not logon yet.
26.10 14:41:00 TIMER: Check auto-disconnect...
26.10 14:41:00 STATS: vdl.0 cache, locks:0
26.10 14:41:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:41:03 TRACE: User not logon yet.
26.10 14:41:23 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:41:23 TRACE: User not logon yet.
26.10 14:41:43 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:41:43 TRACE: User not logon yet.
26.10 14:42:00 TIMER: Check auto-disconnect...
26.10 14:42:00 STATS: vdl.0 cache, locks:0
26.10 14:42:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:42:03 TRACE: User not logon yet.
26.10 14:42:20 ++ NET: null req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.10 14:42:20 TRACE: User not logon yet.
26.10 14:42:24 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 14:42:24 TRACE: User not logon yet.
26.10 14:42:37 NET: Client (name:null conid:87582832 TCP) disconnected from vdl.0 (clients:0)
26.10 14:43:28 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
26.10 14:43:28 -<<-: server.login ok
26.10 14:43:28 DB: SELECT * FROM LocalizationStrings
26.10 14:43:28 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
26.10 14:43:28 -<<-: core/server.query ok
26.10 14:43:28 TIMER: Starting timer...
26.10 14:43:28 TIMER: Timer running...
26.10 14:43:28 DB: SELECT * FROM GameVars
26.10 14:43:28 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
26.10 14:43:28 -<<-: core/server.query ok
26.10 14:43:28 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
26.10 14:43:28 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
26.10 14:43:28 -<<-: core/server.query ok
26.10 14:43:28 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
26.10 14:43:28 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
26.10 14:43:28 -<<-: core/server.query ok
26.10 14:43:28 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
26.10 14:43:28 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
26.10 14:43:28 -<<-: core/server.query ok
26.10 14:43:28 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
26.10 14:43:28 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
26.10 14:43:28 -<<-: core/server.query ok
26.10 14:43:28 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
26.10 14:43:28 -<<-: core/quest.getDaily ok
26.10 14:43:28 DB: SELECT * FROM UserAttributeTypes
26.10 14:43:28 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
26.10 14:43:28 -<<-: core/server.query ok
26.10 14:43:28 DB: SELECT * FROM UserVariableTypes
26.10 14:43:28 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
26.10 14:43:28 -<<-: core/server.query ok
26.10 14:43:28 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
26.10 14:43:28 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
26.10 14:43:28 -<<-: core/server.query ok
26.10 14:43:28 DB: SELECT * FROM ItemGroups
26.10 14:43:28 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
26.10 14:43:28 -<<-: core/server.query ok
26.10 14:43:28 DB: SELECT * FROM Bundles ORDER BY ID
26.10 14:43:28 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
26.10 14:43:28 -<<-: core/server.query ok
26.10 14:43:28 DB: SELECT * FROM BundleItems ORDER BY ID
26.10 14:43:28 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
26.10 14:43:28 -<<-: core/server.query ok
26.10 14:43:28 SHOP: loading items...
26.10 14:43:28 ->>-: core/shop.getList { _type => core/shop.getList }
26.10 14:43:28 -<<-: core/shop.getList ok
26.10 14:43:28 SHOP: 0 items loaded (0 sec)
26.10 14:43:28 DB: SELECT * FROM EffectAttributeTypes
26.10 14:43:28 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
26.10 14:43:28 -<<-: core/server.query ok
26.10 14:43:28 DB: SELECT * FROM Effects
26.10 14:43:28 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
26.10 14:43:28 -<<-: core/server.query ok
26.10 14:43:28 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(26.10 14:55:29 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
26.10 14:55:29 -<<-: server.login ok
26.10 14:55:29 DB: SELECT * FROM LocalizationStrings
26.10 14:55:29 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 TIMER: Starting timer...
26.10 14:55:29 TIMER: Timer running...
26.10 14:55:29 DB: SELECT * FROM GameVars
26.10 14:55:29 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
26.10 14:55:29 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
26.10 14:55:29 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
26.10 14:55:29 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
26.10 14:55:29 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
26.10 14:55:29 -<<-: core/quest.getDaily ok
26.10 14:55:29 DB: SELECT * FROM UserAttributeTypes
26.10 14:55:29 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 DB: SELECT * FROM UserVariableTypes
26.10 14:55:29 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
26.10 14:55:29 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 DB: SELECT * FROM ItemGroups
26.10 14:55:29 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 DB: SELECT * FROM Bundles ORDER BY ID
26.10 14:55:29 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 DB: SELECT * FROM BundleItems ORDER BY ID
26.10 14:55:29 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 SHOP: loading items...
26.10 14:55:29 ->>-: core/shop.getList { _type => core/shop.getList }
26.10 14:55:29 -<<-: core/shop.getList ok
26.10 14:55:29 SHOP: 0 items loaded (0 sec)
26.10 14:55:29 DB: SELECT * FROM EffectAttributeTypes
26.10 14:55:29 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 DB: SELECT * FROM Effects
26.10 14:55:29 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
26.10 14:55:29 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
26.10 14:55:29 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 DB: SELECT * FROM Badges
26.10 14:55:29 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
26.10 14:55:29 -<<-: core/server.query ok
26.10 14:55:29 TIMER: Check auto-disconnect...
26.10 14:55:29 STATS: vdl.0 cache, locks:0
26.10 14:56:48 NET: Client (conid:77487803) connected to vdl.0 (clients:1)
26.10 14:56:48 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
26.10 14:56:48 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
26.10 14:56:48 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
26.10 14:56:48 -<<-: core/server.query ok
26.10 14:56:48 STATS: vdl.0 cache connection, 21 calls, total 0.0232527256011963 sec spent, avg 1.11 ms
26.10 14:56:48 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
26.10 14:56:48 -<<-: core/user.isOnlineID ok
26.10 14:56:48 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
26.10 14:56:48 -<<-: core/cache.get ok
26.10 14:56:48 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
26.10 14:56:48 -<<-: core/cache.get ok
26.10 14:56:48 NET: Client login (conid:77487803, id:76, name:Aimer)
26.10 14:56:48 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.35.23 }
26.10 14:56:48 -<<-: core/user.loginPost null
26.10 14:56:48 DB: SELECT ID FROM TempUserLogins WHERE UserID = 76 AND Date = 'today'::timestamp
26.10 14:56:48 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 76 AND Date = 'today'::timestamp, _type => core/server.query }
26.10 14:56:48 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
26.10 14:56:48 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (76, 'today'::timestamp)
26.10 14:56:48 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
26.10 14:56:48 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
26.10 14:56:48 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (76, 'today'::timestamp), _type => core/server.pending }} }
26.10 14:56:48 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
26.10 14:56:51 ++ NET: Aimer req: user.data { messageType => user.data }
26.10 14:56:51 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
26.10 14:56:51 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
26.10 14:56:51 TIME: user.data 0.24 ms
26.10 14:56:51 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
26.10 14:56:54 ->>-: core/cache.update { diff => {language => en, params => { attrs => { lastLoginDate => 300, lastLoadDate => 1027 } }}, type => user, unlock => false, id => 76, _type => core/cache.update }
26.10 14:56:54 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 14:58:32 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
26.10 14:58:32 -<<-: server.login ok
26.10 14:58:32 DB: SELECT * FROM LocalizationStrings
26.10 14:58:32 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:32 TIMER: Starting timer...
26.10 14:58:32 TIMER: Timer running...
26.10 14:58:32 DB: SELECT * FROM GameVars
26.10 14:58:32 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:32 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
26.10 14:58:32 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:32 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
26.10 14:58:32 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:32 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
26.10 14:58:32 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:32 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
26.10 14:58:32 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:32 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
26.10 14:58:32 -<<-: core/quest.getDaily ok
26.10 14:58:32 DB: SELECT * FROM UserAttributeTypes
26.10 14:58:32 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:32 DB: SELECT * FROM UserVariableTypes
26.10 14:58:32 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:32 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
26.10 14:58:32 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:32 DB: SELECT * FROM ItemGroups
26.10 14:58:32 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:32 DB: SELECT * FROM Bundles ORDER BY ID
26.10 14:58:32 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:32 DB: SELECT * FROM BundleItems ORDER BY ID
26.10 14:58:32 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:32 SHOP: loading items...
26.10 14:58:32 ->>-: core/shop.getList { _type => core/shop.getList }
26.10 14:58:32 -<<-: core/shop.getList ok
26.10 14:58:32 SHOP: 0 items loaded (0 sec)
26.10 14:58:32 DB: SELECT * FROM EffectAttributeTypes
26.10 14:58:32 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:32 DB: SELECT * FROM Effects
26.10 14:58:32 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:32 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
26.10 14:58:32 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:32 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
26.10 14:58:32 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:32 DB: SELECT * FROM Badges
26.10 14:58:32 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
26.10 14:58:32 -<<-: core/server.query ok
26.10 14:58:39 NET: Client (conid:22733351) connected to vdl.0 (clients:1)
26.10 14:58:39 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
26.10 14:58:39 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
26.10 14:58:39 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
26.10 14:58:39 -<<-: core/server.query ok
26.10 14:58:39 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
26.10 14:58:39 -<<-: core/user.isOnlineID ok
26.10 14:58:39 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
26.10 14:58:39 -<<-: core/cache.get ok
26.10 14:58:39 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
26.10 14:58:39 -<<-: core/cache.get ok
26.10 14:58:39 NET: Client login (conid:22733351, id:76, name:Aimer)
26.10 14:58:39 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.35.23 }
26.10 14:58:39 -<<-: core/user.loginPost null
26.10 14:58:39 ->>-: vdl/cache.battle.finishRoom { roomId => 1, _type => vdl/cache.battle.finishRoom }
26.10 14:58:39 -<<-: vdl/cache.battle.finishRoom { errorCode => _requestException, _type => vdl/cache.battle.finishRoom }
26.10 14:58:39 TRACE: cacheRequest exception { roomId => 1, _type => vdl/cache.battle.finishRoom }
26.10 14:58:39 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 218
Called from modules/VDLBattleModule.hx line 177
Called from modules/VDLBattleModule.hx line 58
Called from modules/VDLTournamentModule.hx line 468
Called from snipe/slave/Server.hx line 928
Called from snipe/slave/Server.hx line 898
Called from snipe/slave/Server.hx line 1124
26.10 14:58:39 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => true, id => 76, _type => core/cache.update }
26.10 14:58:39 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 14:58:39 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
26.10 14:58:39 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 14:58:39 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
26.10 14:58:39 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
26.10 14:58:39 TRACE: Could not login.
26.10 14:58:39 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
26.10 14:59:05 NET: Client (name:Aimer conid:22733351 TCP) disconnected from vdl.0 (clients:0)
