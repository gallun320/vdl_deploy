24.10 17:00:14 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
24.10 17:00:14 TIME: user.ping 0.12 ms
24.10 17:00:14 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:00:40 TIMER: Check auto-disconnect...
24.10 17:00:40 STATS: vdl.0 cache, locks:0
24.10 17:00:40 TIMER: Check auto-disconnect...
24.10 17:00:40 STATS: vdl.0 cache, locks:0
24.10 17:00:40 TIMER: Check auto-disconnect...
24.10 17:00:40 STATS: vdl.0 cache, locks:0
24.10 17:00:40 TIMER: Check auto-disconnect...
24.10 17:00:40 NET: Client (name:null conid:19027756 TCP) disconnected from vdl.0 (clients:0)
24.10 17:00:40 STATS: vdl.0 cache, locks:0
24.10 17:00:40 TIMER: Check auto-disconnect...
24.10 17:00:40 STATS: vdl.0 cache, locks:0
24.10 17:00:40 TIMER: Check auto-disconnect...
24.10 17:00:40 STATS: vdl.0 cache, locks:0
24.10 17:00:40 TIMER: Check auto-disconnect...
24.10 17:00:40 STATS: vdl.0 cache, locks:0
24.10 17:00:40 TIMER: Check auto-disconnect...
24.10 17:00:40 STATS: vdl.0 cache, locks:0
24.10 17:00:40 TIMER: Check auto-disconnect...
24.10 17:00:40 STATS: vdl.0 cache, locks:0
24.10 17:00:40 TIMER: Check auto-disconnect...
24.10 17:00:40 STATS: vdl.0 cache, locks:0
24.10 17:00:40 TIMER: Check auto-disconnect...
24.10 17:00:40 STATS: vdl.0 cache, locks:0
24.10 17:00:40 TIMER: Check auto-disconnect...
24.10 17:00:40 STATS: vdl.0 cache, locks:0
24.10 17:00:40 TIMER: Check auto-disconnect...
24.10 17:00:40 STATS: vdl.0 cache, locks:0
24.10 17:00:40 TIMER: Check auto-disconnect...
24.10 17:00:40 STATS: vdl.0 cache, locks:0
24.10 17:00:40 TIMER: Check auto-disconnect...
24.10 17:00:40 STATS: vdl.0 cache, locks:0
24.10 17:00:40 TIMER: Check auto-disconnect...
24.10 17:00:40 STATS: vdl.0 cache, locks:0
24.10 17:15:44 NET: Client (conid:81354877) connected to vdl.0 (clients:1)
24.10 17:15:45 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
24.10 17:15:45 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
24.10 17:15:45 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
24.10 17:15:45 -<<-: core/server.query ok
24.10 17:15:45 STATS: vdl.0 cache connection, 21 calls, total 0.0294649600982666 sec spent, avg 1.4 ms
24.10 17:15:45 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
24.10 17:15:45 -<<-: core/user.isOnlineID ok
24.10 17:15:45 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
24.10 17:15:45 -<<-: core/cache.get ok
24.10 17:15:45 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
24.10 17:15:45 -<<-: core/cache.get ok
24.10 17:15:45 NET: Client login (conid:81354877, id:76, name:Aimer)
24.10 17:15:45 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
24.10 17:15:45 -<<-: core/user.loginPost null
24.10 17:15:45 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
24.10 17:15:45 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
24.10 17:15:47 ++ NET: Aimer req: user.data { messageType => user.data }
24.10 17:15:47 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
24.10 17:15:47 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 17:15:47 TIME: user.data 0.44 ms
24.10 17:15:47 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 17:15:48 NET: Client (name:Aimer conid:81354877 TCP) disconnected from vdl.0 (clients:0)
24.10 17:15:48 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
24.10 17:15:48 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
24.10 17:15:48 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
24.10 17:15:48 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 17:15:48 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
24.10 17:15:48 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
24.10 17:15:48 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
24.10 17:15:48 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => true, id => 76, _type => core/cache.update }
24.10 17:15:48 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 17:15:48 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
24.10 17:15:48 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 17:15:48 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
24.10 17:15:48 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
24.10 17:16:40 TIMER: Check auto-disconnect...
24.10 17:16:40 STATS: vdl.0 cache, locks:0
24.10 17:16:40 TIMER: Check auto-disconnect...
24.10 17:16:40 STATS: vdl.0 cache, locks:0
24.10 17:16:40 TIMER: Check auto-disconnect...
24.10 17:16:40 STATS: vdl.0 cache, locks:0
24.10 17:16:40 TIMER: Check auto-disconnect...
24.10 17:16:40 STATS: vdl.0 cache, locks:0
24.10 17:16:40 TIMER: Check auto-disconnect...
24.10 17:16:40 STATS: vdl.0 cache, locks:0
24.10 17:16:40 TIMER: Check auto-disconnect...
24.10 17:16:40 STATS: vdl.0 cache, locks:0
24.10 17:16:40 TIMER: Check auto-disconnect...
24.10 17:16:40 STATS: vdl.0 cache, locks:0
24.10 17:16:40 TIMER: Check auto-disconnect...
24.10 17:16:40 STATS: vdl.0 cache, locks:0
24.10 17:16:40 TIMER: Check auto-disconnect...
24.10 17:16:40 STATS: vdl.0 cache, locks:0
24.10 17:16:40 TIMER: Check auto-disconnect...
24.10 17:16:40 STATS: vdl.0 cache, locks:0
24.10 17:16:40 TIMER: Check auto-disconnect...
24.10 17:16:40 STATS: vdl.0 cache, locks:0
24.10 17:26:57 NET: Client (conid:58960838) connected to vdl.0 (clients:1)
24.10 17:26:58 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
24.10 17:26:58 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
24.10 17:26:58 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
24.10 17:26:58 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
24.10 17:26:58 STATS: vdl.0 cache connection, 32 calls, total 0.0420207977294922 sec spent, avg 1.31 ms
24.10 17:26:58 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
24.10 17:26:58 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
24.10 17:26:58 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
24.10 17:26:58 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477308408, lastLoginDate => 298, lastLoadDate => 1025 }, effects => { list => [] } }}, version => 0, id => 76 } }
24.10 17:26:58 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
24.10 17:26:58 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 76 } }
24.10 17:26:58 NET: Client login (conid:58960838, id:76, name:Aimer)
24.10 17:26:58 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
24.10 17:26:58 -<<-: core/user.loginPost { _type => core/user.loginPost }
24.10 17:26:58 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
24.10 17:26:58 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
24.10 17:26:59 NET: Client (conid:6293034) connected to vdl.0 (clients:2)
24.10 17:26:59 ++ NET: Aimer req: user.data { messageType => user.data }
24.10 17:26:59 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
24.10 17:26:59 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 17:26:59 TIME: user.data 0.42 ms
24.10 17:26:59 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 17:27:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:27:01 TIME: user.ping 0.11 ms
24.10 17:27:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:27:03 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
24.10 17:27:03 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
24.10 17:27:03 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
24.10 17:27:03 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
24.10 17:27:03 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
24.10 17:27:03 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
24.10 17:27:03 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
24.10 17:27:03 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1477308461, lastLoginDate => 298, lastLoadDate => 1025 }, effects => { list => [] } }}, version => 0, id => 2 } }
24.10 17:27:03 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
24.10 17:27:03 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
24.10 17:27:03 NET: Client login (conid:6293034, id:2, name:test1)
24.10 17:27:03 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
24.10 17:27:03 -<<-: core/user.loginPost { _type => core/user.loginPost }
24.10 17:27:03 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
24.10 17:27:03 == NET: Aimer ret: user.join { name => test1, type => user.join }
24.10 17:27:03 == NET: test1 ret: user.join { name => Aimer, type => user.join }
24.10 17:27:03 == NET: test1 ret: user.join { name => test1, type => user.join }
24.10 17:27:05 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
24.10 17:27:05 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 17:27:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:27:09 TIME: user.ping 0.08 ms
24.10 17:27:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:27:09 ++ NET: test1 req: user.data { messageType => user.data }
24.10 17:27:09 ->>-: vdl/cache.user.getData { userId => 2, _type => vdl/cache.user.getData }
24.10 17:27:09 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 17:27:09 TIME: user.data 0.39 ms
24.10 17:27:09 == NET: test1 ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 17:27:10 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
24.10 17:27:10 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 17:27:14 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:27:14 TIME: user.ping 0.1 ms
24.10 17:27:14 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:27:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:27:16 TIME: user.ping 0.12 ms
24.10 17:27:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:27:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:27:23 TIME: user.ping 0.09 ms
24.10 17:27:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:27:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:27:30 TIME: user.ping 0.13 ms
24.10 17:27:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:27:34 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:27:34 TIME: user.ping 0.17 ms
24.10 17:27:34 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:27:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:27:38 TIME: user.ping 0.14 ms
24.10 17:27:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:27:40 TIMER: Check auto-disconnect...
24.10 17:27:40 STATS: vdl.0 cache, locks:4
24.10 17:27:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:27:45 TIME: user.ping 0.12 ms
24.10 17:27:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:27:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:27:52 TIME: user.ping 0.1 ms
24.10 17:27:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:27:54 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:27:54 TIME: user.ping 0.11 ms
24.10 17:27:54 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:28:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:28:00 TIME: user.ping 0.17 ms
24.10 17:28:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:28:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:28:07 TIME: user.ping 0.11 ms
24.10 17:28:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:28:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:28:14 TIME: user.ping 0.1 ms
24.10 17:28:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:28:14 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:28:14 TIME: user.ping 0.17 ms
24.10 17:28:14 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:28:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:28:21 TIME: user.ping 0.17 ms
24.10 17:28:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:28:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:28:29 TIME: user.ping 0.12 ms
24.10 17:28:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:28:34 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:28:34 TIME: user.ping 0.2 ms
24.10 17:28:34 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:28:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:28:36 TIME: user.ping 0.11 ms
24.10 17:28:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:28:40 TIMER: Check auto-disconnect...
24.10 17:28:40 STATS: vdl.0 cache, locks:4
24.10 17:28:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:28:43 TIME: user.ping 0.1 ms
24.10 17:28:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:28:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:28:50 TIME: user.ping 0.1 ms
24.10 17:28:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:28:54 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:28:54 TIME: user.ping 0.14 ms
24.10 17:28:54 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:28:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:28:58 TIME: user.ping 0.1 ms
24.10 17:28:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:29:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:29:12 TIME: user.ping 0.11 ms
24.10 17:29:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:29:14 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:29:14 TIME: user.ping 0.09 ms
24.10 17:29:14 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:29:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:29:19 TIME: user.ping 0.1 ms
24.10 17:29:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:29:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:29:26 TIME: user.ping 0.09 ms
24.10 17:29:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:29:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:29:33 TIME: user.ping 0.1 ms
24.10 17:29:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:29:34 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:29:34 TIME: user.ping 0.11 ms
24.10 17:29:34 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:29:40 TIMER: Check auto-disconnect...
24.10 17:29:40 STATS: vdl.0 cache, locks:4
24.10 17:29:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:29:41 TIME: user.ping 0.15 ms
24.10 17:29:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:29:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:29:48 TIME: user.ping 0.09 ms
24.10 17:29:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:29:55 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:29:55 TIME: user.ping 0.1 ms
24.10 17:29:55 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:29:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:29:55 TIME: user.ping 0.14 ms
24.10 17:29:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:30:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:30:02 TIME: user.ping 0.11 ms
24.10 17:30:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:30:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:30:10 TIME: user.ping 0.1 ms
24.10 17:30:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:30:15 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:30:15 TIME: user.ping 0.13 ms
24.10 17:30:15 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:30:17 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:30:17 TIME: user.ping 0.11 ms
24.10 17:30:17 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:30:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:30:24 TIME: user.ping 0.1 ms
24.10 17:30:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:30:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:30:31 TIME: user.ping 0.11 ms
24.10 17:30:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:30:35 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:30:35 TIME: user.ping 0.11 ms
24.10 17:30:35 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:30:39 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:30:39 TIME: user.ping 0.15 ms
24.10 17:30:39 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:30:40 TIMER: Check auto-disconnect...
24.10 17:30:40 STATS: vdl.0 cache, locks:4
24.10 17:30:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:30:46 TIME: user.ping 0.08 ms
24.10 17:30:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:30:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:30:53 TIME: user.ping 0.15 ms
24.10 17:30:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:30:55 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:30:55 TIME: user.ping 0.12 ms
24.10 17:30:55 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:31:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:31:00 TIME: user.ping 0.12 ms
24.10 17:31:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:31:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:31:07 TIME: user.ping 0.12 ms
24.10 17:31:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:31:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:31:15 TIME: user.ping 0.12 ms
24.10 17:31:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:31:15 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:31:15 TIME: user.ping 0.2 ms
24.10 17:31:15 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:31:22 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:31:22 TIME: user.ping 0.1 ms
24.10 17:31:22 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:31:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:31:29 TIME: user.ping 0.1 ms
24.10 17:31:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:31:35 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:31:35 TIME: user.ping 0.15 ms
24.10 17:31:35 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:31:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:31:36 TIME: user.ping 0.13 ms
24.10 17:31:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:31:40 TIMER: Check auto-disconnect...
24.10 17:31:40 STATS: vdl.0 cache, locks:4
24.10 17:31:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:31:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:31:44 TIME: user.ping 0.09 ms
24.10 17:31:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:31:51 TIME: user.ping 0.18 ms
24.10 17:31:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:31:55 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:31:55 TIME: user.ping 0.11 ms
24.10 17:31:55 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:31:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:31:58 TIME: user.ping 0.12 ms
24.10 17:31:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:32:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:32:05 TIME: user.ping 0.1 ms
24.10 17:32:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:32:09 ++ NET: Aimer req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
24.10 17:32:09 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
24.10 17:32:09 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [69], round => 1, id => 1, status => starting, userList => [{ name => test1, id => 2 }], battleActive => [], rounddate => 2016-24-10 17:34, startdate => 2016-24-10 17:34 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 17:32:09 STATS: vdl.0 cache connection, 46 calls, total 0.05466628074646 sec spent, avg 1.19 ms
24.10 17:32:09 TIME: tournament.getAvailableTournament 2.56 ms
24.10 17:32:09 == NET: Aimer ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [69], round => 1, id => 1, status => starting, userList => [{ name => test1, id => 2 }], battleActive => [], rounddate => 2016-24-10 17:34, startdate => 2016-24-10 17:34 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 17:32:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:32:13 TIME: user.ping 0.13 ms
24.10 17:32:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:32:15 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:32:15 TIME: user.ping 0.12 ms
24.10 17:32:15 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:32:15 ++ NET: Aimer req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
24.10 17:32:15 ->>-: vdl/cache.tournament.addUsers { userId => 76, tournament => 1, _type => vdl/cache.tournament.addUsers }
24.10 17:32:15 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
24.10 17:32:15 TIME: tournament.addUsers 0.35 ms
24.10 17:32:15 == NET: Aimer ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
24.10 17:32:15 ++ NET: Aimer req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
24.10 17:32:15 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
24.10 17:32:15 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [69], round => 1, id => 1, status => starting, userList => [{ name => test1, id => 2 },{ name => Aimer, id => 76 }], battleActive => [], rounddate => 2016-24-10 17:34, startdate => 2016-24-10 17:34 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 17:32:15 TIME: tournament.getAvailableTournament 1.91 ms
24.10 17:32:15 == NET: Aimer ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [69], round => 1, id => 1, status => starting, userList => [{ name => test1, id => 2 },{ name => Aimer, id => 76 }], battleActive => [], rounddate => 2016-24-10 17:34, startdate => 2016-24-10 17:34 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
24.10 17:32:16 ++ NET: Aimer req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
24.10 17:32:16 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
24.10 17:32:16 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [2,76] }
24.10 17:32:16 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 2, player2 => 76 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid }
24.10 17:32:16 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 2, player2 => 76 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
24.10 17:32:16 TIME: tournament.grid 0.93 ms
24.10 17:32:16 == NET: Aimer ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 2, player2 => 76 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
24.10 17:32:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:32:21 TIME: user.ping 0.1 ms
24.10 17:32:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:32:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:32:29 TIME: user.ping 0.1 ms
24.10 17:32:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:32:35 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:32:35 TIME: user.ping 0.13 ms
24.10 17:32:35 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:32:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:32:36 TIME: user.ping 0.12 ms
24.10 17:32:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:32:40 TIMER: Check auto-disconnect...
24.10 17:32:40 STATS: vdl.0 cache, locks:4
24.10 17:32:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:32:43 TIME: user.ping 0.15 ms
24.10 17:32:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:32:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:32:51 TIME: user.ping 0.1 ms
24.10 17:32:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:32:55 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:32:55 TIME: user.ping 0.11 ms
24.10 17:32:55 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:32:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:32:58 TIME: user.ping 0.15 ms
24.10 17:32:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:33:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:33:05 TIME: user.ping 0.09 ms
24.10 17:33:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:33:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:33:13 TIME: user.ping 0.09 ms
24.10 17:33:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:33:15 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:33:15 TIME: user.ping 0.11 ms
24.10 17:33:15 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:33:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:33:20 TIME: user.ping 0.09 ms
24.10 17:33:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:33:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:33:27 TIME: user.ping 0.11 ms
24.10 17:33:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:33:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:33:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:33:35 TIME: user.ping 0.12 ms
24.10 17:33:35 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:33:35 TIME: user.ping 0.13 ms
24.10 17:33:35 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:33:40 TIMER: Check auto-disconnect...
24.10 17:33:40 STATS: vdl.0 cache, locks:4
24.10 17:33:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:33:42 TIME: user.ping 0.13 ms
24.10 17:33:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:33:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:33:49 TIME: user.ping 0.1 ms
24.10 17:33:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:33:55 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:33:55 TIME: user.ping 0.11 ms
24.10 17:33:55 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:33:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:33:57 TIME: user.ping 0.12 ms
24.10 17:33:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:34:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:34:04 TIME: user.ping 0.13 ms
24.10 17:34:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:34:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:34:11 TIME: user.ping 0.11 ms
24.10 17:34:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:34:15 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:34:15 TIME: user.ping 0.12 ms
24.10 17:34:15 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:34:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:34:18 TIME: user.ping 0.17 ms
24.10 17:34:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:34:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:34:26 TIME: user.ping 0.13 ms
24.10 17:34:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:34:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:34:33 TIME: user.ping 0.11 ms
24.10 17:34:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:34:35 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:34:35 TIME: user.ping 0.14 ms
24.10 17:34:35 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:34:40 TIMER: Check auto-disconnect...
24.10 17:34:40 STATS: vdl.0 cache, locks:4
24.10 17:34:40 -<<-: tournament.enemyEvent { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 17:34, id => 76, enemy.num => 2, battleId => 72, player => 1 }, _isNotify => true, id => 76, _type => tournament.enemyEvent }
24.10 17:34:40 -<<-: tournament.enemyEvent { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 17:34, id => 2, enemy.num => 1, battleId => 72, player => 2 }, _isNotify => true, id => 2, _type => tournament.enemyEvent }
24.10 17:34:40 == NET: Aimer ret: tournament.enemy { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 17:34, id => 76, enemy.num => 2, battleId => 72, player => 1 }, type => tournament.enemy }
24.10 17:34:40 == NET: test1 ret: tournament.enemy { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 17:34, id => 2, enemy.num => 1, battleId => 72, player => 2 }, type => tournament.enemy }
24.10 17:34:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:34:41 TIME: user.ping 0.13 ms
24.10 17:34:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:34:51 ++ NET: Aimer req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 72, name => throw, side => 2, dices => 125354, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 17:34:51 ->>-: vdl/cache.battle.infoRoom { roomId => 72, _type => vdl/cache.battle.infoRoom }
24.10 17:34:51 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
24.10 17:34:51 STATS: vdl.0 cache connection, 51 calls, total 0.057974100112915 sec spent, avg 1.14 ms
24.10 17:34:51 TIME: battle.sendtask 0.47 ms
24.10 17:34:51 == NET: Aimer ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 17:34:51 == NET: test1 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 72, name => throw, side => 2, type => battle.task, dices => 125354, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
24.10 17:34:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:34:52 TIME: user.ping 0.08 ms
24.10 17:34:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:35:00 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:35:00 TIME: user.ping 0.16 ms
24.10 17:35:00 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:35:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:35:04 TIME: user.ping 0.11 ms
24.10 17:35:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:35:15 ++ NET: Aimer req: battle.sendtask { dice => 5, from => (7.0, 4.0), roomId => 72, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (8.0, 4.0), diceID => 0 }
24.10 17:35:15 ->>-: vdl/cache.battle.infoRoom { roomId => 72, _type => vdl/cache.battle.infoRoom }
24.10 17:35:15 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
24.10 17:35:15 TIME: battle.sendtask 1.53 ms
24.10 17:35:15 == NET: Aimer ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
24.10 17:35:15 == NET: test1 ret: battle.task { dice => 5, from => (7.0, 4.0), roomId => 72, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (8.0, 4.0), diceID => 0 }
24.10 17:35:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:35:18 TIME: user.ping 0.09 ms
24.10 17:35:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:35:25 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:35:25 TIME: user.ping 0.11 ms
24.10 17:35:25 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:35:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:35:31 TIME: user.ping 0.12 ms
24.10 17:35:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:35:40 TIMER: Check auto-disconnect...
24.10 17:35:40 STATS: vdl.0 cache, locks:4
24.10 17:35:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:35:44 TIME: user.ping 0.14 ms
24.10 17:35:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:35:50 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:35:50 TIME: user.ping 0.12 ms
24.10 17:35:50 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:35:53 ++ NET: Aimer req: tournament.lose { winner => 2, messageType => tournament.lose }
24.10 17:35:53 == NET: Aimer ret: tournament.lose { type => tournament.lose, errorCode => ok }
24.10 17:35:53 TIME: tournament.lose 0.07 ms
24.10 17:35:53 == NET: test1 ret: battle.end { type => battle.end }
24.10 17:35:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:35:56 TIME: user.ping 0.12 ms
24.10 17:35:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:36:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:36:05 TIME: user.ping 0.13 ms
24.10 17:36:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:36:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:36:13 TIME: user.ping 0.18 ms
24.10 17:36:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:36:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:36:21 TIME: user.ping 0.1 ms
24.10 17:36:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:36:25 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:36:25 TIME: user.ping 0.12 ms
24.10 17:36:25 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:36:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:36:30 TIME: user.ping 0.11 ms
24.10 17:36:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:36:40 TIMER: Check auto-disconnect...
24.10 17:36:40 STATS: vdl.0 cache, locks:4
24.10 17:36:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:36:52 TIME: user.ping 0.1 ms
24.10 17:36:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:37:03 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:37:03 TIME: user.ping 0.12 ms
24.10 17:37:03 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:37:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:37:20 TIME: user.ping 0.08 ms
24.10 17:37:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:37:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:37:35 TIME: user.ping 0.09 ms
24.10 17:37:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:37:40 TIMER: Check auto-disconnect...
24.10 17:37:40 STATS: vdl.0 cache, locks:4
24.10 17:37:40 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:37:40 TIME: user.ping 0.11 ms
24.10 17:37:40 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:37:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:37:47 TIME: user.ping 0.11 ms
24.10 17:37:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:38:18 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:38:18 TIME: user.ping 0.15 ms
24.10 17:38:18 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:38:53 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
24.10 17:38:53 -<<-: server.login ok
24.10 17:38:53 DB: SELECT * FROM LocalizationStrings
24.10 17:38:53 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:38:53 TIMER: Starting timer...
24.10 17:38:53 TIMER: Timer running...
24.10 17:38:53 DB: SELECT * FROM GameVars
24.10 17:38:53 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:38:53 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
24.10 17:38:53 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:38:53 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
24.10 17:38:53 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:38:53 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
24.10 17:38:53 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:38:53 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
24.10 17:38:53 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:38:53 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
24.10 17:38:53 -<<-: core/quest.getDaily ok
24.10 17:38:53 DB: SELECT * FROM UserAttributeTypes
24.10 17:38:53 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:38:53 DB: SELECT * FROM UserVariableTypes
24.10 17:38:53 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:38:53 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
24.10 17:38:53 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:38:53 DB: SELECT * FROM ItemGroups
24.10 17:38:53 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:38:53 DB: SELECT * FROM Bundles ORDER BY ID
24.10 17:38:53 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:38:53 DB: SELECT * FROM BundleItems ORDER BY ID
24.10 17:38:53 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:38:53 SHOP: loading items...
24.10 17:38:53 ->>-: core/shop.getList { _type => core/shop.getList }
24.10 17:38:53 -<<-: core/shop.getList ok
24.10 17:38:53 SHOP: 0 items loaded (0 sec)
24.10 17:38:53 DB: SELECT * FROM EffectAttributeTypes
24.10 17:38:53 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:38:53 DB: SELECT * FROM Effects
24.10 17:38:53 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:38:53 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
24.10 17:38:53 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:38:53 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
24.10 17:38:53 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:38:53 DB: SELECT * FROM Badges
24.10 17:38:53 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
24.10 17:38:53 -<<-: core/server.query ok
24.10 17:39:35 NET: Client (conid:69347227) connected to vdl.0 (clients:1)
24.10 17:39:36 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
24.10 17:39:36 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
24.10 17:39:36 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
24.10 17:39:36 -<<-: core/server.query ok
24.10 17:39:36 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
24.10 17:39:36 -<<-: core/user.isOnlineID ok
24.10 17:39:36 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
24.10 17:39:36 -<<-: core/cache.get ok
24.10 17:39:36 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
24.10 17:39:36 -<<-: core/cache.get ok
24.10 17:39:36 NET: Client login (conid:69347227, id:76, name:Aimer)
24.10 17:39:36 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
24.10 17:39:36 -<<-: core/user.loginPost null
24.10 17:39:36 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
24.10 17:39:36 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
24.10 17:39:38 ++ NET: Aimer req: user.data { messageType => user.data }
24.10 17:39:38 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
24.10 17:39:38 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 17:39:38 TIME: user.data 0.57 ms
24.10 17:39:38 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 17:39:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:39:40 TIME: user.ping 0.14 ms
24.10 17:39:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:39:43 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
24.10 17:39:43 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 17:39:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:39:47 TIME: user.ping 0.08 ms
24.10 17:39:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:39:53 TIMER: Check auto-disconnect...
24.10 17:39:53 STATS: vdl.0 cache, locks:2
24.10 17:39:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:39:55 TIME: user.ping 0.13 ms
24.10 17:39:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:40:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:40:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:40:02 TIME: user.ping 0.09 ms
24.10 17:40:05 NET: Client (conid:66683594) connected to vdl.0 (clients:2)
24.10 17:40:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:40:09 TIME: user.ping 0.2 ms
24.10 17:40:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:40:09 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
24.10 17:40:09 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
24.10 17:40:09 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
24.10 17:40:09 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
24.10 17:40:09 STATS: vdl.0 cache connection, 28 calls, total 0.0415666103363037 sec spent, avg 1.48 ms
24.10 17:40:09 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
24.10 17:40:09 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
24.10 17:40:09 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
24.10 17:40:09 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1477308461, lastLoginDate => 298, lastLoadDate => 1025 }, effects => { list => [] } }}, version => 0, id => 2 } }
24.10 17:40:09 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
24.10 17:40:09 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
24.10 17:40:09 NET: Client login (conid:66683594, id:2, name:test1)
24.10 17:40:09 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
24.10 17:40:09 -<<-: core/user.loginPost { _type => core/user.loginPost }
24.10 17:40:09 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
24.10 17:40:09 == NET: Aimer ret: user.join { name => test1, type => user.join }
24.10 17:40:09 == NET: test1 ret: user.join { name => Aimer, type => user.join }
24.10 17:40:09 == NET: test1 ret: user.join { name => test1, type => user.join }
24.10 17:40:15 ++ NET: test1 req: user.data { messageType => user.data }
24.10 17:40:15 ->>-: vdl/cache.user.getData { userId => 2, _type => vdl/cache.user.getData }
24.10 17:40:15 -<<-: vdl/cache.user.getData { info => { city => null, year => null, email => null }, errorCode => ok, _type => vdl/cache.user.getData }
24.10 17:40:15 TIME: user.data 0.42 ms
24.10 17:40:15 == NET: test1 ret: user.data { info => { city => null, year => null, email => null }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
24.10 17:40:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:40:16 TIME: user.ping 0.1 ms
24.10 17:40:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:40:18 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
24.10 17:40:18 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
24.10 17:40:20 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:40:20 TIME: user.ping 0.09 ms
24.10 17:40:20 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:40:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:40:24 TIME: user.ping 0.15 ms
24.10 17:40:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:40:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:40:31 TIME: user.ping 0.11 ms
24.10 17:40:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:40:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:40:38 TIME: user.ping 0.12 ms
24.10 17:40:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:40:40 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:40:40 TIME: user.ping 0.19 ms
24.10 17:40:40 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:40:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:40:46 TIME: user.ping 0.1 ms
24.10 17:40:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:40:53 TIMER: Check auto-disconnect...
24.10 17:40:53 -<<-: tournament.enemyEvent { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 17:40, id => 76, enemy.num => 2, battleId => 73, player => 1 }, _isNotify => true, id => 76, _type => tournament.enemyEvent }
24.10 17:40:53 -<<-: tournament.enemyEvent { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 17:40, id => 2, enemy.num => 1, battleId => 73, player => 2 }, _isNotify => true, id => 2, _type => tournament.enemyEvent }
24.10 17:40:53 == NET: test1 ret: tournament.enemy { data => { name => test1, tournamentId => 1, enemy.id => 76, enemy.name => Aimer, round => 1, roundDate => 2016-24-10 17:40, id => 2, enemy.num => 1, battleId => 73, player => 2 }, type => tournament.enemy }
24.10 17:40:53 == NET: Aimer ret: tournament.enemy { data => { name => Aimer, tournamentId => 1, enemy.id => 2, enemy.name => test1, round => 1, roundDate => 2016-24-10 17:40, id => 76, enemy.num => 2, battleId => 73, player => 1 }, type => tournament.enemy }
24.10 17:40:53 STATS: vdl.0 cache, locks:4
24.10 17:40:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:40:53 TIME: user.ping 0.13 ms
24.10 17:40:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:41:03 ++ NET: test1 req: tournament.lose { winner => 76, messageType => tournament.lose }
24.10 17:41:03 TIME: tournament.lose 0.07 ms
24.10 17:41:03 == NET: test1 ret: tournament.lose { type => tournament.lose, errorCode => ok }
24.10 17:41:03 == NET: Aimer ret: battle.leave { type => battle.leave }
24.10 17:41:03 ++ NET: Aimer req: tournament.end { lose => 2, dateRound => 2016-24-10 17:40, winner => 76, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 76, player2 => 2, battleId => 73 }
24.10 17:41:03 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
24.10 17:41:03 -<<-: vdl/cache.tournament.getBattlesTournaments [73]
24.10 17:41:03 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
24.10 17:41:03 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [2,76] }
24.10 17:41:03 ->>-: vdl/cache.battle.finishRoom { roomId => 73, _type => vdl/cache.battle.finishRoom }
24.10 17:41:03 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
24.10 17:41:03 ->>-: vdl/cache.battle.deleteRoom { roomId => 73, _type => vdl/cache.battle.deleteRoom }
24.10 17:41:03 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
24.10 17:41:03 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [73] }
24.10 17:41:03 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
24.10 17:41:03 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [76], _type => vdl/cache.tournament.setUsersTournament }
24.10 17:41:03 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
24.10 17:41:03 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 76, round => 1, player1 => 76, player2 => 2 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid }
24.10 17:41:03 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 76, round => 1, player1 => 76, player2 => 2 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
24.10 17:41:03 ->>-: vdl/cache.tournament.finish { tournamentId => 1, _type => vdl/cache.tournament.finish }
24.10 17:41:03 -<<-: vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
24.10 17:41:03 TIME: tournament.end 14.99 ms
24.10 17:41:03 == NET: Aimer ret: tournament.end { type => tournament.end, errorCode => TournamentEnd }
24.10 17:41:04 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:41:04 TIME: user.ping 0.14 ms
24.10 17:41:04 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:41:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:41:04 TIME: user.ping 0.13 ms
24.10 17:41:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:41:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:41:15 TIME: user.ping 0.1 ms
24.10 17:41:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:41:24 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:41:24 TIME: user.ping 0.11 ms
24.10 17:41:24 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:41:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:41:25 TIME: user.ping 0.15 ms
24.10 17:41:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:41:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:41:36 TIME: user.ping 0.17 ms
24.10 17:41:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:41:44 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:41:44 TIME: user.ping 0.15 ms
24.10 17:41:44 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:41:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:41:46 TIME: user.ping 0.13 ms
24.10 17:41:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:41:53 TIMER: Check auto-disconnect...
24.10 17:41:53 STATS: vdl.0 cache, locks:4
24.10 17:41:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:41:57 TIME: user.ping 0.11 ms
24.10 17:41:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:42:04 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:42:04 TIME: user.ping 0.25 ms
24.10 17:42:04 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:42:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:42:07 TIME: user.ping 0.1 ms
24.10 17:42:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:42:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:42:18 TIME: user.ping 0.12 ms
24.10 17:42:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:42:24 ++ NET: test1 req: user.ping { messageType => user.ping, msg => ok }
24.10 17:42:24 TIME: user.ping 0.12 ms
24.10 17:42:24 == NET: test1 ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:42:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
24.10 17:42:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
24.10 17:42:30 TIME: user.ping 0.1 ms
