27.01 18:26:54 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3020, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3020 }
27.01 18:26:54 -<<-: server.login ok
27.01 18:26:54 DB: SELECT * FROM LocalizationStrings
27.01 18:26:54 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:26:54 TIMER: Starting timer...
27.01 18:26:54 TIMER: Timer running...
27.01 18:26:54 DB: SELECT * FROM GameVars
27.01 18:26:54 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:26:54 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
27.01 18:26:54 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:26:54 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
27.01 18:26:54 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:26:54 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
27.01 18:26:54 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:26:54 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
27.01 18:26:54 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:26:54 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
27.01 18:26:54 -<<-: core/quest.getDaily ok
27.01 18:26:54 DB: SELECT * FROM UserAttributeTypes
27.01 18:26:54 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:26:54 DB: SELECT * FROM UserVariableTypes
27.01 18:26:54 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:26:54 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
27.01 18:26:54 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:26:54 DB: SELECT * FROM ItemGroups
27.01 18:26:54 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:26:54 DB: SELECT * FROM Bundles ORDER BY ID
27.01 18:26:54 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:26:54 DB: SELECT * FROM BundleItems ORDER BY ID
27.01 18:26:54 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:26:54 SHOP: loading items...
27.01 18:26:54 ->>-: core/shop.getList { _type => core/shop.getList }
27.01 18:26:54 -<<-: core/shop.getList ok
27.01 18:26:54 SHOP: 0 items loaded (0 sec)
27.01 18:26:54 DB: SELECT * FROM EffectAttributeTypes
27.01 18:26:54 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:26:54 DB: SELECT * FROM Effects
27.01 18:26:54 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:26:54 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
27.01 18:26:54 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:26:54 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
27.01 18:26:54 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:26:54 DB: SELECT * FROM Badges
27.01 18:26:54 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
27.01 18:26:54 -<<-: core/server.query ok
27.01 18:27:02 NET: Client (conid:17755724) connected to vdl.0 (clients:1)
27.01 18:27:02 ++ NET: null req: user.register { messageType => user.register }
27.01 18:27:02 DB: SELECT * FROM users
27.01 18:27:02 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
27.01 18:27:02 -<<-: core/server.query ok
27.01 18:27:02 == NET: null ret: user.auth { type => user.auth, token => dWlkMTcx }
27.01 18:27:02 DB: SELECT ID FROM Users WHERE Name = 'uid171'
27.01 18:27:02 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = 'uid171', _type => core/server.query }
27.01 18:27:02 -<<-: core/server.query ok
27.01 18:27:02 DB: SELECT nextval('Users_id_seq') AS id
27.01 18:27:02 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
27.01 18:27:02 -<<-: core/server.query ok
27.01 18:27:02 ->>-: core/user.register { password => uid171, name => uid171, fullParams => { password => uid171, name => uid171, networkid => , networktype => , messageType => user.register, id => 171 }, networkid => , connectionID => 17755724, networktype => , email => , id => 171, _type => core/user.register }
27.01 18:27:02 -<<-: core/user.register ok
27.01 18:27:03 -<<-: core/user.registerResponse null
27.01 18:27:03 DB: SELECT token FROM tokens WHERE userid = 171
27.01 18:27:03 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 171, _type => core/server.query }
27.01 18:27:03 -<<-: core/server.query ok
27.01 18:27:03 == NET: null ret: user.register { type => user.register, errorCode => ok, token => d11c835bd7ef199f614c201c49b6a8d5 }
27.01 18:27:54 TIMER: Check auto-disconnect...
27.01 18:27:54 STATS: vdl.0 cache, locks:0
27.01 18:28:12 NET: Client (name:null conid:17755724 TCP) disconnected from vdl.0 (clients:0)
27.01 18:28:54 TIMER: Check auto-disconnect...
27.01 18:28:54 STATS: vdl.0 cache, locks:0
27.01 18:28:54 TIMER: Check auto-disconnect...
27.01 18:28:54 STATS: vdl.0 cache, locks:0
27.01 18:28:54 TIMER: Check auto-disconnect...
27.01 18:28:54 STATS: vdl.0 cache, locks:0
27.01 18:28:54 TIMER: Check auto-disconnect...
27.01 18:28:54 STATS: vdl.0 cache, locks:0
27.01 18:28:54 TIMER: Check auto-disconnect...
27.01 18:28:54 STATS: vdl.0 cache, locks:0
27.01 18:28:54 TIMER: Check auto-disconnect...
27.01 18:28:54 STATS: vdl.0 cache, locks:0
27.01 18:28:54 TIMER: Check auto-disconnect...
27.01 18:28:54 STATS: vdl.0 cache, locks:0
27.01 18:28:54 TIMER: Check auto-disconnect...
27.01 18:28:54 STATS: vdl.0 cache, locks:0
27.01 18:28:54 TIMER: Check auto-disconnect...
27.01 18:28:54 STATS: vdl.0 cache, locks:0
27.01 18:28:54 TIMER: Check auto-disconnect...
27.01 18:28:54 STATS: vdl.0 cache, locks:0
27.01 18:28:54 TIMER: Check auto-disconnect...
27.01 18:28:54 STATS: vdl.0 cache, locks:0
27.01 18:28:54 TIMER: Check auto-disconnect...
27.01 18:28:54 STATS: vdl.0 cache, locks:0
27.01 18:28:54 TIMER: Check auto-disconnect...
27.01 18:28:54 STATS: vdl.0 cache, locks:0
27.01 18:28:54 TIMER: Check auto-disconnect...
27.01 18:28:54 STATS: vdl.0 cache, locks:0
27.01 18:28:54 TIMER: Check auto-disconnect...
27.01 18:28:54 STATS: vdl.0 cache, locks:0
27.01 18:28:54 TIMER: Check auto-disconnect...
27.01 18:28:54 STATS: vdl.0 cache, locks:0
27.01 18:28:54 TIMER: Check aut