26.10 15:01:45 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
26.10 15:01:45 -<<-: server.login ok
26.10 15:01:45 DB: SELECT * FROM LocalizationStrings
26.10 15:01:45 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:45 TIMER: Starting timer...
26.10 15:01:45 DB: SELECT * FROM GameVars
26.10 15:01:45 TIMER: Timer running...
26.10 15:01:45 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:45 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
26.10 15:01:45 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:45 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
26.10 15:01:45 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:45 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
26.10 15:01:45 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:45 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
26.10 15:01:45 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:45 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
26.10 15:01:45 -<<-: core/quest.getDaily ok
26.10 15:01:45 DB: SELECT * FROM UserAttributeTypes
26.10 15:01:45 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:45 DB: SELECT * FROM UserVariableTypes
26.10 15:01:45 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:45 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
26.10 15:01:45 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:45 DB: SELECT * FROM ItemGroups
26.10 15:01:45 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:45 DB: SELECT * FROM Bundles ORDER BY ID
26.10 15:01:45 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:45 DB: SELECT * FROM BundleItems ORDER BY ID
26.10 15:01:45 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:45 SHOP: loading items...
26.10 15:01:45 ->>-: core/shop.getList { _type => core/shop.getList }
26.10 15:01:45 -<<-: core/shop.getList ok
26.10 15:01:45 SHOP: 0 items loaded (0.004 sec)
26.10 15:01:45 DB: SELECT * FROM EffectAttributeTypes
26.10 15:01:45 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:45 DB: SELECT * FROM Effects
26.10 15:01:45 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:45 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
26.10 15:01:45 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:45 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
26.10 15:01:45 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:45 DB: SELECT * FROM Badges
26.10 15:01:45 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
26.10 15:01:45 -<<-: core/server.query ok
26.10 15:01:54 NET: Client (conid:96737321) connected to vdl.0 (clients:1)
26.10 15:01:54 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
26.10 15:01:54 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
26.10 15:01:54 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
26.10 15:01:54 -<<-: core/server.query ok
26.10 15:01:54 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
26.10 15:01:54 -<<-: core/user.isOnlineID ok
26.10 15:01:54 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
26.10 15:01:54 -<<-: core/cache.get ok
26.10 15:01:54 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
26.10 15:01:54 -<<-: core/cache.get ok
26.10 15:01:54 NET: Client login (conid:96737321, id:76, name:Aimer)
26.10 15:01:54 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.35.23 }
26.10 15:01:54 -<<-: core/user.loginPost null
26.10 15:01:54 ->>-: vdl/cache.battle.finishRoom { roomId => 87, _type => vdl/cache.battle.finishRoom }
26.10 15:01:54 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
26.10 15:01:54 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
26.10 15:01:54 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
26.10 15:01:54 ++ NET: Aimer req: user.data { messageType => user.data }
26.10 15:01:54 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
26.10 15:01:54 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
26.10 15:01:54 TIME: user.data 0.45 ms
26.10 15:01:54 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
26.10 15:02:00 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
26.10 15:02:00 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 15:02:45 TIMER: Check auto-disconnect...
26.10 15:02:45 STATS: vdl.0 cache, locks:2
26.10 15:02:52 NET: Client (name:Aimer conid:96737321 TCP) disconnected from vdl.0 (clients:0)
26.10 15:02:52 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
26.10 15:02:52 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
26.10 15:02:52 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
26.10 15:02:52 STATS: vdl.0 cache connection, 29 calls, total 0.0832674503326416 sec spent, avg 2.87 ms
26.10 15:02:52 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
26.10 15:02:52 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
26.10 15:02:52 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
26.10 15:02:52 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 242
Called from modules/VDLBattleModule.hx line 255
Called from snipe/slave/Server.hx line 994
26.10 15:02:52 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
26.10 15:02:52 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
26.10 15:02:52 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
26.10 15:02:52 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 15:02:52 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
26.10 15:02:52 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:03:45 TIMER: Check auto-disconnect...
26.10 15:03:45 STATS: vdl.0 cache, locks:0
26.10 15:31:58 NET: Client (conid:36152696) connected to vdl.0 (clients:1)
26.10 15:31:59 NET: Client (conid:72864195) connected to vdl.0 (clients:2)
26.10 15:32:00 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
26.10 15:32:00 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
26.10 15:32:00 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
26.10 15:32:00 -<<-: core/server.query { list => {{ name => uid95, networkid => , isbanned => false, id => 95 }}, errorCode => ok, _type => core/server.query }
26.10 15:32:00 STATS: vdl.0 cache connection, 34 calls, total 0.0883162021636963 sec spent, avg 2.6 ms
26.10 15:32:00 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
26.10 15:32:00 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
26.10 15:32:00 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
26.10 15:32:00 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid95, deleted => false, email => , networktype =>   , password => uid95, isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402835, lastLoginDate => 300, lastLoadDate => 1027 }, effects => { list => [] } }}, version => 0, id => 95 } }
26.10 15:32:00 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
26.10 15:32:00 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 95 } }
26.10 15:32:00 NET: Client login (conid:72864195, id:95, name:uid95)
26.10 15:32:00 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
26.10 15:32:00 -<<-: core/user.loginPost { _type => core/user.loginPost }
26.10 15:32:00 ->>-: vdl/cache.battle.finishRoom { roomId => 87, _type => vdl/cache.battle.finishRoom }
26.10 15:32:00 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
26.10 15:32:00 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
26.10 15:32:00 == NET: uid95 ret: user.join { name => null, type => user.join }
26.10 15:32:00 == NET: uid95 ret: user.join { name => uid95, type => user.join }
26.10 15:32:00 == NET: null ret: user.join { name => uid95, type => user.join }
26.10 15:32:03 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:32:03 TIME: user.ping 0.13 ms
26.10 15:32:03 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:32:03 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
26.10 15:32:03 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
26.10 15:32:03 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
26.10 15:32:03 -<<-: core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
26.10 15:32:03 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
26.10 15:32:03 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
26.10 15:32:03 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
26.10 15:32:03 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 300, lastLoadDate => 1027 }, effects => { list => [] } }}, version => 0, id => 94 } }
26.10 15:32:03 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
26.10 15:32:03 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
26.10 15:32:03 NET: Client login (conid:36152696, id:94, name:uid94)
26.10 15:32:03 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
26.10 15:32:03 -<<-: core/user.loginPost { _type => core/user.loginPost }
26.10 15:32:03 ->>-: vdl/cache.battle.finishRoom { roomId => 87, _type => vdl/cache.battle.finishRoom }
26.10 15:32:03 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
26.10 15:32:03 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
26.10 15:32:03 == NET: uid95 ret: user.join { name => uid94, type => user.join }
26.10 15:32:03 == NET: uid94 ret: user.join { name => uid94, type => user.join }
26.10 15:32:03 == NET: uid94 ret: user.join { name => uid95, type => user.join }
26.10 15:32:05 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
26.10 15:32:05 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 15:32:10 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:32:10 TIME: user.ping 0.18 ms
26.10 15:32:10 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:32:10 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
26.10 15:32:10 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 15:32:15 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:32:15 TIME: user.ping 0.16 ms
26.10 15:32:15 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:32:17 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:32:17 TIME: user.ping 0.19 ms
26.10 15:32:17 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:32:20 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.10 15:32:20 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
26.10 15:32:20 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-26-10 15:30, startdate => 2016-26-10 15:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 15:32:20 TIME: tournament.getAvailableTournament 2.65 ms
26.10 15:32:20 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-26-10 15:30, startdate => 2016-26-10 15:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 15:32:24 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:32:24 TIME: user.ping 0.14 ms
26.10 15:32:24 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:32:30 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.10 15:32:30 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
26.10 15:32:30 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-26-10 15:30, startdate => 2016-26-10 15:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 15:32:30 TIME: tournament.getAvailableTournament 1.68 ms
26.10 15:32:30 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-26-10 15:30, startdate => 2016-26-10 15:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 15:32:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:32:32 TIME: user.ping 0.11 ms
26.10 15:32:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:32:35 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:32:35 TIME: user.ping 0.17 ms
26.10 15:32:35 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:32:39 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:32:39 TIME: user.ping 0.45 ms
26.10 15:32:39 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:32:45 TIMER: Check auto-disconnect...
26.10 15:32:45 STATS: vdl.0 cache, locks:4
26.10 15:32:46 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:32:46 TIME: user.ping 0.3 ms
26.10 15:32:46 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:32:53 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:32:53 TIME: user.ping 0.14 ms
26.10 15:32:53 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:32:56 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:32:56 TIME: user.ping 0.19 ms
26.10 15:32:56 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:33:00 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:33:00 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:33:00 TIME: user.ping 0.22 ms
26.10 15:33:16 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:33:16 TIME: user.ping 0.17 ms
26.10 15:33:16 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:33:36 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:33:36 TIME: user.ping 0.15 ms
26.10 15:33:36 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:33:45 TIMER: Check auto-disconnect...
26.10 15:33:45 STATS: vdl.0 cache, locks:4
26.10 15:33:56 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:33:56 TIME: user.ping 0.17 ms
26.10 15:33:56 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:34:16 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:34:16 TIME: user.ping 0.13 ms
26.10 15:34:16 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:34:36 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:34:36 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:34:36 TIME: user.ping 0.14 ms
26.10 15:34:45 TIMER: Check auto-disconnect...
26.10 15:34:45 STATS: vdl.0 cache, locks:4
26.10 15:34:56 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:34:56 TIME: user.ping 0.14 ms
26.10 15:34:56 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:35:16 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:35:16 TIME: user.ping 0.19 ms
26.10 15:35:16 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:35:22 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:35:22 TIME: user.ping 0.17 ms
26.10 15:35:22 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:35:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:35:32 TIME: user.ping 0.13 ms
26.10 15:35:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:35:36 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:35:36 TIME: user.ping 0.15 ms
26.10 15:35:36 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:35:41 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:35:41 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:35:41 TIME: user.ping 0.16 ms
26.10 15:35:45 TIMER: Check auto-disconnect...
26.10 15:35:45 STATS: vdl.0 cache, locks:4
26.10 15:35:50 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:35:50 TIME: user.ping 0.12 ms
26.10 15:35:50 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:35:56 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:35:56 TIME: user.ping 0.15 ms
26.10 15:35:56 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:36:00 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:36:00 TIME: user.ping 0.13 ms
26.10 15:36:00 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:36:09 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:36:09 TIME: user.ping 0.13 ms
26.10 15:36:09 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:36:16 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:36:16 TIME: user.ping 0.12 ms
26.10 15:36:16 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:36:19 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:36:19 TIME: user.ping 0.14 ms
26.10 15:36:19 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:36:28 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:36:28 TIME: user.ping 0.14 ms
26.10 15:36:28 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:36:36 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:36:36 TIME: user.ping 0.17 ms
26.10 15:36:36 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:36:45 TIMER: Check auto-disconnect...
26.10 15:36:45 STATS: vdl.0 cache, locks:4
26.10 15:36:47 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:36:47 TIME: user.ping 0.13 ms
26.10 15:36:47 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:36:55 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:36:55 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:36:55 TIME: user.ping 0.13 ms
26.10 15:36:56 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:36:56 TIME: user.ping 0.19 ms
26.10 15:36:56 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:37:04 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:37:04 TIME: user.ping 0.35 ms
26.10 15:37:04 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:37:13 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:37:13 TIME: user.ping 0.16 ms
26.10 15:37:13 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:37:16 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:37:16 TIME: user.ping 0.17 ms
26.10 15:37:16 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:37:22 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:37:22 TIME: user.ping 0.16 ms
26.10 15:37:22 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:37:31 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:37:31 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:37:31 TIME: user.ping 0.12 ms
26.10 15:37:36 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:37:36 TIME: user.ping 0.16 ms
26.10 15:37:36 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:37:40 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:37:40 TIME: user.ping 0.14 ms
26.10 15:37:40 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:37:45 TIMER: Check auto-disconnect...
26.10 15:37:45 STATS: vdl.0 cache, locks:4
26.10 15:37:49 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:37:49 TIME: user.ping 0.15 ms
26.10 15:37:49 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:37:57 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:37:57 TIME: user.ping 0.41 ms
26.10 15:37:57 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:37:58 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:37:58 TIME: user.ping 0.15 ms
26.10 15:37:58 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:38:07 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:38:07 TIME: user.ping 0.11 ms
26.10 15:38:07 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:38:16 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:38:16 TIME: user.ping 0.16 ms
26.10 15:38:16 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:38:17 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:38:17 TIME: user.ping 0.17 ms
26.10 15:38:17 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:38:26 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:38:26 TIME: user.ping 0.17 ms
26.10 15:38:26 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:38:35 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:38:35 TIME: user.ping 0.17 ms
26.10 15:38:35 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:38:37 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:38:37 TIME: user.ping 0.17 ms
26.10 15:38:37 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:38:45 TIMER: Check auto-disconnect...
26.10 15:38:45 STATS: vdl.0 cache, locks:4
26.10 15:38:57 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:38:57 TIME: user.ping 0.15 ms
26.10 15:38:57 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:39:17 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:39:17 TIME: user.ping 0.14 ms
26.10 15:39:17 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:39:37 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:39:37 TIME: user.ping 0.17 ms
26.10 15:39:37 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:39:45 TIMER: Check auto-disconnect...
26.10 15:39:45 STATS: vdl.0 cache, locks:4
26.10 15:39:57 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:39:57 TIME: user.ping 0.16 ms
26.10 15:39:57 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:40:17 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:40:17 TIME: user.ping 0.14 ms
26.10 15:40:17 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:40:37 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:40:37 TIME: user.ping 0.16 ms
26.10 15:40:37 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:40:45 TIMER: Check auto-disconnect...
26.10 15:40:45 STATS: vdl.0 cache, locks:4
26.10 15:40:57 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:40:57 TIME: user.ping 0.15 ms
26.10 15:40:57 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:41:17 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:41:17 TIME: user.ping 0.14 ms
26.10 15:41:17 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:41:37 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:41:37 TIME: user.ping 0.41 ms
26.10 15:41:37 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:41:45 TIMER: Check auto-disconnect...
26.10 15:41:45 NET: Client (name:uid95 conid:72864195 TCP) disconnected from vdl.0 (clients:1)
26.10 15:41:45 DB: SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true
26.10 15:41:45 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true, _type => core/server.query }
26.10 15:41:45 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
26.10 15:41:45 STATS: vdl.0 cache connection, 50 calls, total 0.109810829162598 sec spent, avg 2.2 ms
26.10 15:41:45 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
26.10 15:41:45 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
26.10 15:41:45 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
26.10 15:41:45 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 242
Called from modules/VDLBattleModule.hx line 255
Called from snipe/slave/Server.hx line 994
26.10 15:41:45 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 95, _type => core/cache.update }
26.10 15:41:45 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
26.10 15:41:45 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 95, _type => core/cache.update }
26.10 15:41:45 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 15:41:45 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 95, _type => core/user.logoutPost }
26.10 15:41:45 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
26.10 15:41:45 STATS: vdl.0 cache, locks:2
26.10 15:41:57 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:41:57 TIME: user.ping 0.15 ms
26.10 15:41:57 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:42:17 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:42:17 TIME: user.ping 0.13 ms
26.10 15:42:17 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:42:37 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:42:37 TIME: user.ping 0.17 ms
26.10 15:42:37 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:42:45 TIMER: Check auto-disconnect...
26.10 15:42:45 STATS: vdl.0 cache, locks:2
26.10 15:42:58 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:42:58 TIME: user.ping 0.16 ms
26.10 15:42:58 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:43:18 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:43:18 TIME: user.ping 0.17 ms
26.10 15:43:18 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:43:38 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:43:38 TIME: user.ping 0.17 ms
26.10 15:43:38 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:43:45 TIMER: Check auto-disconnect...
26.10 15:43:46 STATS: vdl.0 cache, locks:2
26.10 15:43:58 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:43:58 TIME: user.ping 0.14 ms
26.10 15:43:58 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:44:18 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:44:18 TIME: user.ping 0.19 ms
26.10 15:44:18 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:44:38 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:44:38 TIME: user.ping 0.15 ms
26.10 15:44:38 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:44:45 TIMER: Check auto-disconnect...
26.10 15:44:46 STATS: vdl.0 cache, locks:2
26.10 15:44:58 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:44:58 TIME: user.ping 0.16 ms
26.10 15:44:58 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:45:18 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:45:18 TIME: user.ping 0.14 ms
26.10 15:45:18 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:45:30 NET: Client (conid:84004655) connected to vdl.0 (clients:2)
26.10 15:45:32 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:45:32 TRACE: User not logon yet.
26.10 15:45:33 ++ NET: null req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.10 15:45:33 TRACE: User not logon yet.
26.10 15:45:38 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:45:38 TIME: user.ping 0.18 ms
26.10 15:45:38 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:45:42 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:45:42 TRACE: User not logon yet.
26.10 15:45:45 TIMER: Check auto-disconnect...
26.10 15:45:46 STATS: vdl.0 cache, locks:2
26.10 15:45:50 ++ NET: null req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.10 15:45:50 TRACE: User not logon yet.
26.10 15:45:52 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:45:52 TRACE: User not logon yet.
26.10 15:45:58 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:45:58 TIME: user.ping 0.19 ms
26.10 15:45:58 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:46:02 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:46:02 TRACE: User not logon yet.
26.10 15:46:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:46:11 TRACE: User not logon yet.
26.10 15:46:18 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:46:18 TIME: user.ping 0.14 ms
26.10 15:46:18 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:46:21 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:46:21 TRACE: User not logon yet.
26.10 15:46:31 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:46:31 TRACE: User not logon yet.
26.10 15:46:38 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:46:38 TIME: user.ping 0.14 ms
26.10 15:46:38 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:46:40 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:46:40 TRACE: User not logon yet.
26.10 15:46:45 TIMER: Check auto-disconnect...
26.10 15:46:46 STATS: vdl.0 cache, locks:2
26.10 15:46:50 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:46:50 TRACE: User not logon yet.
26.10 15:46:58 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:46:58 TIME: user.ping 0.14 ms
26.10 15:46:58 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:47:00 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:47:00 TRACE: User not logon yet.
26.10 15:47:10 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:47:10 TRACE: User not logon yet.
26.10 15:47:18 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:47:18 TIME: user.ping 0.19 ms
26.10 15:47:18 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:47:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:47:19 TRACE: User not logon yet.
26.10 15:47:29 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:47:29 TRACE: User not logon yet.
26.10 15:47:39 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:47:39 TIME: user.ping 0.16 ms
26.10 15:47:39 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:47:39 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:47:39 TRACE: User not logon yet.
26.10 15:47:45 TIMER: Check auto-disconnect...
26.10 15:47:46 STATS: vdl.0 cache, locks:2
26.10 15:47:48 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:47:48 TRACE: User not logon yet.
26.10 15:47:57 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:47:57 TRACE: User not logon yet.
26.10 15:47:59 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:47:59 TIME: user.ping 0.17 ms
26.10 15:47:59 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:48:07 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:48:07 TRACE: User not logon yet.
26.10 15:48:16 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:48:16 TRACE: User not logon yet.
26.10 15:48:19 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:48:19 TIME: user.ping 0.18 ms
26.10 15:48:19 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:48:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:48:26 TRACE: User not logon yet.
26.10 15:48:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:48:35 TRACE: User not logon yet.
26.10 15:48:38 ++ NET: null req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.10 15:48:38 TRACE: User not logon yet.
26.10 15:48:39 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:48:39 TIME: user.ping 0.15 ms
26.10 15:48:39 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:48:45 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:48:45 TRACE: User not logon yet.
26.10 15:48:45 TIMER: Check auto-disconnect...
26.10 15:48:46 STATS: vdl.0 cache, locks:2
26.10 15:48:55 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
26.10 15:48:55 TRACE: User not logon yet.
26.10 15:48:59 NET: Client (name:null conid:84004655 TCP) disconnected from vdl.0 (clients:1)
26.10 15:48:59 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:48:59 TIME: user.ping 0.17 ms
26.10 15:48:59 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:49:03 NET: Client (conid:75389967) connected to vdl.0 (clients:2)
26.10 15:49:04 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
26.10 15:49:04 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
26.10 15:49:04 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
26.10 15:49:04 -<<-: core/server.query { list => {{ name => uid95, networkid => , isbanned => false, id => 95 }}, errorCode => ok, _type => core/server.query }
26.10 15:49:04 STATS: vdl.0 cache connection, 55 calls, total 0.117183685302734 sec spent, avg 2.13 ms
26.10 15:49:04 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
26.10 15:49:04 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
26.10 15:49:04 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
26.10 15:49:04 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid95, deleted => false, email => , networktype =>   , password => uid95, isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402835, lastLoginDate => 300, lastLoadDate => 1027 }, effects => { list => [] } }}, version => 0, id => 95 } }
26.10 15:49:04 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
26.10 15:49:04 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 95 } }
26.10 15:49:04 NET: Client login (conid:75389967, id:95, name:uid95)
26.10 15:49:04 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
26.10 15:49:04 -<<-: core/user.loginPost { _type => core/user.loginPost }
26.10 15:49:04 ->>-: vdl/cache.battle.finishRoom { roomId => 87, _type => vdl/cache.battle.finishRoom }
26.10 15:49:04 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
26.10 15:49:04 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
26.10 15:49:04 == NET: uid94 ret: user.join { name => uid95, type => user.join }
26.10 15:49:04 == NET: uid95 ret: user.join { name => uid94, type => user.join }
26.10 15:49:04 == NET: uid95 ret: user.join { name => uid95, type => user.join }
26.10 15:49:08 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:49:08 TIME: user.ping 0.15 ms
26.10 15:49:08 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:49:11 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
26.10 15:49:11 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 15:49:17 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:49:17 TIME: user.ping 0.15 ms
26.10 15:49:17 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:49:19 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:49:19 TIME: user.ping 0.19 ms
26.10 15:49:19 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:49:26 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:49:26 TIME: user.ping 0.19 ms
26.10 15:49:26 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:49:36 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:49:36 TIME: user.ping 0.12 ms
26.10 15:49:36 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:49:37 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.10 15:49:37 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
26.10 15:49:37 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-26-10 15:30, startdate => 2016-26-10 15:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 15:49:37 TIME: tournament.getAvailableTournament 2.44 ms
26.10 15:49:37 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-26-10 15:30, startdate => 2016-26-10 15:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 15:49:39 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:49:39 TIME: user.ping 0.18 ms
26.10 15:49:39 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:49:45 TIMER: Check auto-disconnect...
26.10 15:49:46 STATS: vdl.0 cache, locks:4
26.10 15:49:46 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:49:46 TIME: user.ping 0.17 ms
26.10 15:49:46 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:49:52 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
26.10 15:49:52 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
26.10 15:49:52 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-26-10 15:30, startdate => 2016-26-10 15:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 15:49:52 TIME: tournament.getAvailableTournament 2.52 ms
26.10 15:49:52 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [], battleActive => null, rounddate => 2016-26-10 15:30, startdate => 2016-26-10 15:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
26.10 15:49:56 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:49:56 TIME: user.ping 0.12 ms
26.10 15:49:56 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:49:59 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:49:59 TIME: user.ping 0.16 ms
26.10 15:49:59 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:50:19 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:50:19 TIME: user.ping 0.14 ms
26.10 15:50:19 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:50:31 NET: Client (name:uid95 conid:75389967 TCP) disconnected from vdl.0 (clients:1)
26.10 15:50:31 DB: SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true
26.10 15:50:31 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true, _type => core/server.query }
26.10 15:50:31 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
26.10 15:50:31 STATS: vdl.0 cache connection, 64 calls, total 0.130680799484253 sec spent, avg 2.04 ms
26.10 15:50:31 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
26.10 15:50:31 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
26.10 15:50:31 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
26.10 15:50:31 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 242
Called from modules/VDLBattleModule.hx line 255
Called from snipe/slave/Server.hx line 994
26.10 15:50:31 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 95, _type => core/cache.update }
26.10 15:50:31 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
26.10 15:50:31 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 95, _type => core/cache.update }
26.10 15:50:31 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 15:50:31 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 95, _type => core/user.logoutPost }
26.10 15:50:31 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
26.10 15:50:39 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:50:39 TIME: user.ping 0.16 ms
26.10 15:50:39 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:50:45 TIMER: Check auto-disconnect...
26.10 15:50:46 STATS: vdl.0 cache, locks:2
26.10 15:50:59 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:50:59 TIME: user.ping 0.16 ms
26.10 15:50:59 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:51:20 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:51:20 TIME: user.ping 0.17 ms
26.10 15:51:20 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:51:40 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:51:40 TIME: user.ping 0.16 ms
26.10 15:51:40 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:51:45 TIMER: Check auto-disconnect...
26.10 15:51:46 STATS: vdl.0 cache, locks:2
26.10 15:52:00 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:52:00 TIME: user.ping 0.19 ms
26.10 15:52:00 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:52:20 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:52:20 TIME: user.ping 0.17 ms
26.10 15:52:20 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:52:40 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:52:40 TIME: user.ping 0.18 ms
26.10 15:52:40 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:52:45 TIMER: Check auto-disconnect...
26.10 15:52:46 STATS: vdl.0 cache, locks:2
26.10 15:53:00 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:53:00 TIME: user.ping 0.16 ms
26.10 15:53:00 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:53:20 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:53:20 TIME: user.ping 0.14 ms
26.10 15:53:20 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:53:40 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:53:40 TIME: user.ping 0.16 ms
26.10 15:53:40 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:53:45 TIMER: Check auto-disconnect...
26.10 15:53:46 STATS: vdl.0 cache, locks:2
26.10 15:54:00 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:54:00 TIME: user.ping 0.13 ms
26.10 15:54:00 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:54:20 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:54:20 TIME: user.ping 0.19 ms
26.10 15:54:20 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:54:40 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:54:40 TIME: user.ping 0.16 ms
26.10 15:54:40 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:54:45 TIMER: Check auto-disconnect...
26.10 15:54:46 STATS: vdl.0 cache, locks:2
26.10 15:55:00 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:55:00 TIME: user.ping 0.16 ms
26.10 15:55:00 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:55:20 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:55:20 TIME: user.ping 0.17 ms
26.10 15:55:20 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:55:40 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:55:40 TIME: user.ping 0.27 ms
26.10 15:55:40 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:55:45 TIMER: Check auto-disconnect...
26.10 15:55:46 STATS: vdl.0 cache, locks:2
26.10 15:56:01 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:56:01 TIME: user.ping 0.17 ms
26.10 15:56:01 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:56:21 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:56:21 TIME: user.ping 0.18 ms
26.10 15:56:21 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:56:41 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:56:41 TIME: user.ping 0.18 ms
26.10 15:56:41 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:56:45 TIMER: Check auto-disconnect...
26.10 15:56:46 STATS: vdl.0 cache, locks:2
26.10 15:57:01 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:57:01 TIME: user.ping 0.15 ms
26.10 15:57:01 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:57:21 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:57:21 TIME: user.ping 0.13 ms
26.10 15:57:21 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:57:41 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:57:41 TIME: user.ping 0.18 ms
26.10 15:57:41 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:57:45 TIMER: Check auto-disconnect...
26.10 15:57:46 STATS: vdl.0 cache, locks:2
26.10 15:57:46 NET: Client (conid:20015748) connected to vdl.0 (clients:2)
26.10 15:57:46 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
26.10 15:57:46 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
26.10 15:57:46 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
26.10 15:57:46 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
26.10 15:57:46 STATS: vdl.0 cache connection, 69 calls, total 0.136743783950806 sec spent, avg 1.98 ms
26.10 15:57:46 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
26.10 15:57:46 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
26.10 15:57:46 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
26.10 15:57:46 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477399027, lastLoginDate => 300, lastLoadDate => 1027 }, effects => { list => [] } }}, version => 0, id => 76 } }
26.10 15:57:46 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
26.10 15:57:46 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 76 } }
26.10 15:57:46 NET: Client login (conid:20015748, id:76, name:Aimer)
26.10 15:57:46 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.35.23 }
26.10 15:57:46 -<<-: core/user.loginPost { _type => core/user.loginPost }
26.10 15:57:46 ->>-: vdl/cache.battle.finishRoom { roomId => 87, _type => vdl/cache.battle.finishRoom }
26.10 15:57:46 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
26.10 15:57:46 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
26.10 15:57:46 == NET: uid94 ret: user.join { name => Aimer, type => user.join }
26.10 15:57:46 == NET: Aimer ret: user.join { name => uid94, type => user.join }
26.10 15:57:46 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
26.10 15:57:47 ++ NET: Aimer req: user.data { messageType => user.data }
26.10 15:57:47 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
26.10 15:57:47 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
26.10 15:57:47 TIME: user.data 0.49 ms
26.10 15:57:47 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
26.10 15:57:49 NET: Client (name:Aimer conid:20015748 TCP) disconnected from vdl.0 (clients:1)
26.10 15:57:49 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
26.10 15:57:49 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
26.10 15:57:49 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
26.10 15:57:49 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
26.10 15:57:49 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
26.10 15:57:49 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
26.10 15:57:49 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 242
Called from modules/VDLBattleModule.hx line 255
Called from snipe/slave/Server.hx line 994
26.10 15:57:49 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1477486666 } }}, type => user, unlock => true, id => 76, _type => core/cache.update }
26.10 15:57:49 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 15:57:49 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
26.10 15:57:49 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
26.10 15:57:49 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
26.10 15:57:49 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
26.10 15:58:01 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:58:01 TIME: user.ping 0.16 ms
26.10 15:58:01 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:58:21 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:58:21 TIME: user.ping 0.14 ms
26.10 15:58:21 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:58:41 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
26.10 15:58:41 TIME: user.ping 0.18 ms
26.10 15:58:41 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
26.10 15:58:45 TIMER: Check auto-disconnect...
26.10 15:59:30 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
26.10 15:59:30 -<<-: server.login ok
26.10 15:59:30 DB: SELECT * FROM LocalizationStrings
26.10 15:59:30 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
26.10 15:59:30 TIMER: Starting timer...
26.10 15:59:30 TIMER: Timer running...
26.10 15:59:30 DB: SELECT * FROM GameVars
26.10 15:59:30 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
26.10 15:59:30 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
26.10 15:59:30 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
26.10 15:59:30 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
26.10 15:59:30 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
26.10 15:59:30 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
26.10 15:59:30 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
26.10 15:59:30 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
26.10 15:59:30 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
26.10 15:59:30 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
26.10 15:59:30 -<<-: core/quest.getDaily ok
26.10 15:59:30 DB: SELECT * FROM UserAttributeTypes
26.10 15:59:30 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
26.10 15:59:30 DB: SELECT * FROM UserVariableTypes
26.10 15:59:30 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
26.10 15:59:30 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
26.10 15:59:30 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
26.10 15:59:30 DB: SELECT * FROM ItemGroups
26.10 15:59:30 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
26.10 15:59:30 DB: SELECT * FROM Bundles ORDER BY ID
26.10 15:59:30 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
26.10 15:59:30 DB: SELECT * FROM BundleItems ORDER BY ID
26.10 15:59:30 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
26.10 15:59:30 SHOP: loading items...
26.10 15:59:30 ->>-: core/shop.getList { _type => core/shop.getList }
26.10 15:59:30 -<<-: core/shop.getList ok
26.10 15:59:30 SHOP: 0 items loaded (0 sec)
26.10 15:59:30 DB: SELECT * FROM EffectAttributeTypes
26.10 15:59:30 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
26.10 15:59:30 DB: SELECT * FROM Effects
26.10 15:59:30 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
26.10 15:59:30 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
26.10 15:59:30 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
26.10 15:59:30 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
26.10 15:59:30 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
26.10 15:59:30 DB: SELECT * FROM Badges
26.10 15:59:30 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
26.10 15:59:30 -<<-: core/server.query ok
