03.11 16:04:25 NET: Client (conid:82907655) connected to vdl.0 (clients:1)
03.11 16:04:26 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 16:04:26 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 16:04:26 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 16:04:27 -<<-: core/server.query ok
03.11 16:04:27 STATS: vdl.0 cache connection, 21 calls, total 0.273673057556152 sec spent, avg 13.03 ms
03.11 16:04:27 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 16:04:27 -<<-: core/user.isOnlineID ok
03.11 16:04:27 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 16:04:27 -<<-: core/cache.get ok
03.11 16:04:27 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 16:04:27 -<<-: core/cache.get ok
03.11 16:04:27 NET: Client login (conid:82907655, id:107, name:uid107)
03.11 16:04:27 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 16:04:27 -<<-: core/user.loginPost null
03.11 16:04:27 DB: SELECT ID FROM TempUserLogins WHERE UserID = 107 AND Date = 'today'::timestamp
03.11 16:04:27 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 107 AND Date = 'today'::timestamp, _type => core/server.query }
03.11 16:04:27 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
03.11 16:04:27 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (107, 'today'::timestamp)
03.11 16:04:27 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 16:04:27 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 16:04:27 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (107, 'today'::timestamp), _type => core/server.pending }} }
03.11 16:04:27 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
03.11 16:04:34 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1478178267, lastLoginDate => 308, lastLoadDate => 1104 } }}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 16:04:34 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 16:04:36 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 16:04:36 TIME: user.ping 0.18 ms
03.11 16:04:36 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 16:04:45 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 30 }
03.11 16:04:45 ->>-: vdl/cache.battle.findRandom { user => { time => null, player => 107 }, _type => vdl/cache.battle.findRandom }
03.11 16:04:45 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 16:04:45 TIME: battle.find 0.67 ms
03.11 16:04:45 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
03.11 16:04:48 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 16:04:48 TIME: user.ping 0.18 ms
03.11 16:04:48 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 16:05:01 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 16:05:01 TIME: user.ping 0.18 ms
03.11 16:05:01 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 16:05:19 TIMER: Check auto-disconnect...
03.11 16:05:19 STATS: vdl.0 cache, locks:2
03.11 16:05:20 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 16:05:20 TIME: user.ping 0.17 ms
03.11 16:05:20 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 16:05:49 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 16:05:49 TIME: user.ping 0.16 ms
03.11 16:05:49 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 16:06:19 TIMER: Check auto-disconnect...
03.11 16:06:19 STATS: vdl.0 cache, locks:2
03.11 16:07:17 NET: Client (name:uid107 conid:82907655 TCP) disconnected from vdl.0 (clients:0)
03.11 16:07:17 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
03.11 16:07:17 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
03.11 16:07:17 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
03.11 16:07:17 STATS: vdl.0 cache connection, 30 calls, total 0.35662579536438 sec spent, avg 11.89 ms
03.11 16:07:17 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
03.11 16:07:17 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
03.11 16:07:17 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
03.11 16:07:17 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 392
Called from modules/VDLBattleModule.hx line 405
Called from snipe/slave/Server.hx line 994
03.11 16:07:17 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
03.11 16:07:17 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
03.11 16:07:17 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
03.11 16:07:17 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 16:07:17 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
03.11 16:07:17 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 16:07:19 TIMER: Check auto-disconnect...
03.11 16:07:19 STATS: vdl.0 cache, locks:0
03.11 16:07:24 NET: Client (conid:80604502) connected to vdl.0 (clients:1)
03.11 16:07:25 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 16:07:25 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 16:07:25 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 16:07:25 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
03.11 16:07:25 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 16:07:25 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 16:07:25 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 16:07:25 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1478178267, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 2, id => 107 } }
03.11 16:07:25 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 16:07:25 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 107 } }
03.11 16:07:25 NET: Client login (conid:80604502, id:107, name:uid107)
03.11 16:07:25 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 16:07:25 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 16:07:25 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 16:07:25 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 16:07:31 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 16:07:31 TIME: user.ping 0.19 ms
03.11 16:07:31 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 16:07:33 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 30 }
03.11 16:07:33 ->>-: vdl/cache.battle.findRandom { user => { time => null, player => 107 }, _type => vdl/cache.battle.findRandom }
03.11 16:07:33 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 107, enemy.name => uid107, id => 107, enemy.num => 2, battleId => 1 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
03.11 16:07:33 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 107, enemy.name => uid107, id => 107, enemy.num => 1, battleId => 1 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
03.11 16:07:33 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 16:07:33 TIME: battle.find 38.47 ms
03.11 16:07:33 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
03.11 16:07:33 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 107, enemy.name => uid107, id => 107, enemy.num => 2, battleId => 1 }, type => battle.enemy }
03.11 16:07:33 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 107, enemy.name => uid107, id => 107, enemy.num => 1, battleId => 1 }, type => battle.enemy }
03.11 16:07:34 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 16:07:34 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
03.11 16:07:45 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 16:07:45 TIME: user.ping 0.17 ms
03.11 16:07:45 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 16:07:59 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 16:07:59 TIME: user.ping 0.15 ms
03.11 16:07:59 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 16:08:12 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 16:08:12 TIME: user.ping 0.1 ms
03.11 16:08:12 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 16:08:19 TIMER: Check auto-disconnect...
03.11 16:08:19 STATS: vdl.0 cache, locks:2
03.11 16:08:25 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 16:08:25 TIME: user.ping 0.19 ms
03.11 16:08:25 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 16:09:19 TIMER: Check auto-disconnect...
03.11 16:09:19 STATS: vdl.0 cache, locks:2
03.11 16:09:44 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 16:09:44 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 16:09:44 TIME: user.ping 0.12 ms
03.11 16:10:19 TIMER: Check auto-disconnect...
03.11 16:10:19 STATS: vdl.0 cache, locks:2
03.11 16:10:19 TIMER: Check auto-disconnect...
03.11 16:10:19 STATS: vdl.0 cache, locks:2
03.11 16:10:19 TIMER: Check auto-disconnect...
03.11 16:10:19 STATS: vdl.0 cache, locks:2
03.11 16:10:19 TIMER: Check auto-disconnect...
03.11 16:10:19 NET: Client (name:uid107 conid:80604502 TCP) disconnected from vdl.0 (clients:0)
03.11 16:10:19 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
03.11 16:10:19 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
03.11 16:10:19 -<<-: core/server.query { list => {{ id => 1 }}, errorCode => ok, _type => core/server.query }
03.11 16:10:19 STATS: vdl.0 cache connection, 42 calls, total 0.405496597290039 sec spent, avg 9.65 ms
03.11 16:10:19 ->>-: vdl/cache.battle.infoRoom { roomId => 1, _type => vdl/cache.battle.infoRoom }
03.11 16:10:19 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
03.11 16:10:19 ->>-: vdl/cache.battle.deleteRoom { roomId => 1, _type => vdl/cache.battle.deleteRoom }
03.11 16:10:19 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
03.11 16:10:19 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
03.11 16:10:19 -<<-: core/cache.update { errorCode => ok, version => 4, _type => core/cache.update }
03.11 16:10:19 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
03.11 16:10:19 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
03.11 16:10:19 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
03.11 16:10:19 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 16:10:19 STATS: vdl.0 cache, locks:0
03.11 16:10:19 TIMER: Check auto-disconnect...
03.11 16:10:19 STATS: vdl.0 cache, locks:0
03.11 16:14:28 NET: Client (conid:86561773) connected to vdl.0 (clients:1)
03.11 16:14:29 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 16:14:29 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 16:14:29 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 16:14:29 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
03.11 16:14:29 STATS: vdl.0 cache connection, 48 calls, total 0.438275814056396 sec spent, avg 9.13 ms
03.11 16:14:29 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 16:14:29 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 16:14:29 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 16:14:29 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1478178267, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 107 } }
03.11 16:14:29 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 16:14:29 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
03.11 16:14:29 NET: Client login (conid:86561773, id:107, name:uid107)
03.11 16:14:29 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 16:14:29 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 16:14:29 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 16:14:29 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 16:14:35 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 16:14:35 TIME: user.ping 0.09 ms
03.11 16:14:35 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 16:14:39 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 16:14:39 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 16:14:46 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 16:14:46 TIME: user.ping 0.12 ms
03.11 16:14:46 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 16:14:48 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 30 }
03.11 16:14:48 ->>-: vdl/cache.battle.findRandom { user => { time => null, player => 107 }, _type => vdl/cache.battle.findRandom }
03.11 16:14:48 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 16:14:48 TIME: battle.find 0.76 ms
03.11 16:14:48 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
03.11 16:14:59 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 16:14:59 TIME: user.ping 0.16 ms
03.11 16:14:59 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 16:15:01 NET: Client (name:uid107 conid:86561773 TCP) disconnected from vdl.0 (clients:0)
03.11 16:15:01 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
03.11 16:15:01 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
03.11 16:15:01 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
03.11 16:15:01 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
03.11 16:15:01 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
03.11 16:15:01 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
03.11 16:15:01 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 392
Called from modules/VDLBattleModule.hx line 405
Called from snipe/slave/Server.hx line 994
03.11 16:15:01 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
03.11 16:15:01 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
03.11 16:15:01 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
03.11 16:15:01 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 16:15:01 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
03.11 16:15:01 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 16:17:59 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
03.11 16:17:59 -<<-: server.login ok
03.11 16:17:59 DB: SELECT * FROM LocalizationStrings
03.11 16:17:59 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
03.11 16:17:59 -<<-: core/server.query ok
03.11 16:17:59 TIMER: Starting timer...
03.11 16:17:59 TIMER: Timer running...
03.11 16:17:59 DB: SELECT * FROM GameVars
03.11 16:17:59 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
03.11 16:17:59 -<<-: core/server.query ok
03.11 16:17:59 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
03.11 16:17:59 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
03.11 16:17:59 -<<-: core/server.query ok
03.11 16:17:59 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
03.11 16:17:59 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
03.11 16:17:59 -<<-: core/server.query ok
03.11 16:17:59 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
03.11 16:17:59 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
03.11 16:17:59 -<<-: core/server.query ok
03.11 16:17:59 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
03.11 16:17:59 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
03.11 16:17:59 -<<-: core/server.query ok
03.11 16:17:59 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
03.11 16:17:59 -<<-: core/quest.getDaily ok
03.11 16:17:59 DB: SELECT * FROM UserAttributeTypes
03.11 16:17:59 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
03.11 16:17:59 -<<-: core/server.query ok
03.11 16:17:59 DB: SELECT * FROM UserVariableTypes
03.11 16:17:59 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
03.11 16:17:59 -<<-: core/server.query ok
03.11 16:17:59 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
03.11 16:17:59 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
03.11 16:17:59 -<<-: core/server.query ok
03.11 16:17:59 DB: SELECT * FROM ItemGroups
03.11 16:17:59 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
03.11 16:17:59 -<<-: core/server.query ok
03.11 16:17:59 DB: SELECT * FROM Bundles ORDER BY ID
03.11 16:17:59 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
03.11 16:17:59 -<<-: core/server.query ok
03.11 16:17:59 DB: SELECT * FROM BundleItems ORDER BY ID
03.11 16:17:59 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
03.11 16:17:59 -<<-: core/server.query ok
03.11 16:17:59 SHOP: loading items...
03.11 16:17:59 ->>-: core/shop.getList { _type => core/shop.getList }
03.11 16:17:59 -<<-: core/shop.getList ok
03.11 16:17:59 SHOP: 0 items loaded (0 sec)
03.11 16:17:59 DB: SELECT * FROM EffectAttributeTypes
03.11 16:17:59 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
03.11 16:17:59 -<<-: core/server.query ok
03.11 16:17:59 DB: SELECT * FROM Effects
03.11 16:17:59 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
03.11 16:17:59 -<<-: core/server.query ok
03.11 16:17:59 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(03.11 16:24:11 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
03.11 16:24:11 -<<-: server.login ok
03.11 16:24:11 DB: SELECT * FROM LocalizationStrings
03.11 16:24:11 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 TIMER: Starting timer...
03.11 16:24:11 TIMER: Timer running...
03.11 16:24:11 DB: SELECT * FROM GameVars
03.11 16:24:11 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
03.11 16:24:11 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
03.11 16:24:11 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
03.11 16:24:11 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
03.11 16:24:11 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
03.11 16:24:11 -<<-: core/quest.getDaily ok
03.11 16:24:11 DB: SELECT * FROM UserAttributeTypes
03.11 16:24:11 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 DB: SELECT * FROM UserVariableTypes
03.11 16:24:11 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
03.11 16:24:11 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 DB: SELECT * FROM ItemGroups
03.11 16:24:11 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 DB: SELECT * FROM Bundles ORDER BY ID
03.11 16:24:11 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 DB: SELECT * FROM BundleItems ORDER BY ID
03.11 16:24:11 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 SHOP: loading items...
03.11 16:24:11 ->>-: core/shop.getList { _type => core/shop.getList }
03.11 16:24:11 -<<-: core/shop.getList ok
03.11 16:24:11 SHOP: 0 items loaded (0 sec)
03.11 16:24:11 DB: SELECT * FROM EffectAttributeTypes
03.11 16:24:11 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 DB: SELECT * FROM Effects
03.11 16:24:11 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
03.11 16:24:11 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
03.11 16:24:11 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 DB: SELECT * FROM Badges
03.11 16:24:11 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
03.11 16:24:11 -<<-: core/server.query ok
03.11 16:24:11 TIMER: Check auto-disconnect...
03.11 16:24:11 STATS: vdl.0 cache, locks:0
03.11 16:24:11 TIMER: Check auto-disconnect...
03.11 16:24:11 STATS: vdl.0 cache, locks:0
03.11 16:24:11 TIMER: Check auto-disconnect...
03.11 16:24:11 STATS: vdl.0 cache, locks:0
03.11 16:24:11 TIMER: Check auto-disconnect...
03.11 16:24:11 STATS: vdl.0 cache, locks:0
03.11 16:24:11 TIMER: Check auto-disconnect...
03.11 16:24:11 STATS: vdl.0 cache, locks:0
03.11 16:24:11 TIMER: Check auto-disconnect...
03.11 16:30:12 STATS: vdl.0 cache, locks:0
03.11 16:31:11 TIMER: Check auto-disconnect...
03.11 16:31:12 STATS: vdl.0 cache, locks:0
03.11 16:32:11 TIMER: Check auto-disconnect...
03.11 16:32:12 STATS: vdl.0 cache, locks:0
03.11 16:33:11 TIMER: Check auto-disconnect...
03.11 16:33:12 STATS: vdl.0 cache, locks:0
03.11 16:34:11 TIMER: Check auto-disconnect...
03.11 16:34:12 STATS: vdl.0 cache, locks:0
03.11 16:35:11 TIMER: Check auto-disconnect...
03.11 16:35:12 STATS: vdl.0 cache, locks:0
03.11 16:36:11 TIMER: Check auto-disconnect...
03.11 16:36:12 STATS: vdl.0 cache, locks:0
03.11 16:37:11 TIMER: Check auto-disconnect...
03.11 16:37:12 STATS: vdl.0 cache, locks:0
03.11 16:38:11 TIMER: Check auto-disconnect...
03.11 16:38:12 STATS: vdl.0 cache, locks:0
03.11 16:39:11 TIMER: Check auto-disconnect...
03.11 16:39:12 STATS: vdl.0 cache, locks:0
03.11 16:40:11 TIMER: Check auto-disconnect...
03.11 16:40:12 STATS: vdl.0 cache, locks:0
03.11 16:41:11 TIMER: Check auto-disconnect...
03.11 16:41:12 STATS: vdl.0 cache, locks:0
03.11 16:42:11 TIMER: Check auto-disconnect...
03.11 16:42:12 STATS: vdl.0 cache, locks:0
03.11 16:43:11 TIMER: Check auto-disconnect...
03.11 16:43:12 STATS: vdl.0 cache, locks:0
03.11 16:44:11 TIMER: Check auto-disconnect...
03.11 16:44:12 STATS: vdl.0 cache, locks:0
03.11 16:45:11 TIMER: Check auto-disconnect...
03.11 16:45:12 STATS: vdl.0 cache, locks:0
03.11 16:46:11 TIMER: Check auto-disconnect...
03.11 16:46:12 STATS: vdl.0 cache, locks:0
03.11 16:47:11 TIMER: Check auto-disconnect...
03.11 16:47:12 STATS: vdl.0 cache, locks:0
03.11 16:48:11 TIMER: Check auto-disconnect...
03.11 16:48:12 STATS: vdl.0 cache, locks:0
03.11 16:49:11 TIMER: Check auto-disconnect...
03.11 16:49:12 STATS: vdl.0 cache, locks:0
03.11 16:50:11 TIMER: Check auto-disconnect...
03.11 16:50:12 STATS: vdl.0 cache, locks:0
03.11 16:51:11 TIMER: Check auto-disconnect...
03.11 16:51:12 STATS: vdl.0 cache, locks:0
03.11 16:52:11 TIMER: Check auto-disconnect...
03.11 16:52:12 STATS: vdl.0 cache, locks:0
03.11 16:53:11 TIMER: Check auto-disconnect...
03.11 16:53:12 STATS: vdl.0 cache, locks:0
03.11 16:54:11 TIMER: Check auto-disconnect...
03.11 16:54:12 STATS: vdl.0 cache, locks:0
03.11 16:55:11 TIMER: Check auto-disconnect...
03.11 16:55:12 STATS: vdl.0 cache, locks:0
03.11 16:56:11 TIMER: Check auto-disconnect...
03.11 16:56:12 STATS: vdl.0 cache, locks:0
03.11 16:57:11 TIMER: Check auto-disconnect...
03.11 16:57:12 STATS: vdl.0 cache, locks:0
03.11 16:58:11 TIMER: Check auto-disconnect...
03.11 16:58:12 STATS: vdl.0 cache, locks:0
03.11 16:59:11 TIMER: Check auto-disconnect...
03.11 16:59:12 STATS: vdl.0 cache, locks:0
