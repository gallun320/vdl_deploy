18.01 19:00:09 TIMER: Check auto-disconnect...
18.01 19:00:09 STATS: vdl.0 cache, locks:2
18.01 19:00:09 TIMER: Check auto-disconnect...
18.01 19:00:09 STATS: vdl.0 cache, locks:2
18.01 19:00:09 TIMER: Check auto-disconnect...
18.01 19:00:09 STATS: vdl.0 cache, locks:2
18.01 19:02:41 NET: Client (name:uid162 conid:48967691 TCP) disconnected from vdl.0 (clients:0)
18.01 19:02:41 DB: SELECT id FROM battle WHERE firstid=162 OR secondid=162 AND finished <> true
18.01 19:02:41 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=162 OR secondid=162 AND finished <> true, _type => core/server.query }
18.01 19:02:41 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.01 19:02:41 STATS: vdl.0 cache connection, 53 calls, total 0.0627138614654541 sec spent, avg 1.18 ms
18.01 19:02:41 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.01 19:02:41 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
18.01 19:02:41 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.01 19:02:41 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 994
18.01 19:02:41 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 162, _type => core/cache.update }
18.01 19:02:41 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
18.01 19:02:41 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 162, _type => core/cache.update }
18.01 19:02:41 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.01 19:02:41 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 162, _type => core/user.logoutPost }
18.01 19:02:41 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.01 19:03:09 TIMER: Check auto-disconnect...
18.01 19:03:09 STATS: vdl.0 cache, locks:0
18.01 19:03:47 NET: Client (conid:34386475) connected to vdl.0 (clients:1)
18.01 19:03:48 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTYy }
18.01 19:03:48 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid162' AND Password = E'uid162'
18.01 19:03:48 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid162' AND Password = E'uid162', _type => core/server.query }
18.01 19:03:48 -<<-: core/server.query { list => {{ name => uid162, networkid => , isbanned => false, id => 162 }}, errorCode => ok, _type => core/server.query }
18.01 19:03:48 STATS: vdl.0 cache connection, 58 calls, total 0.0691580772399902 sec spent, avg 1.19 ms
18.01 19:03:48 ->>-: core/user.isOnlineID { id => 162, _type => core/user.isOnlineID }
18.01 19:03:48 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.01 19:03:48 ->>-: core/cache.get { type => user, v => -1, id => 162, _type => core/cache.get }
18.01 19:03:48 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid162, deleted => false, email => , networktype =>   , password => uid162, isbanned => false, regdate => 2017-01-18 17:10:44.031496+03, language => en, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484748644, lastLoginDate => 18, lastLoadDate => 119 }, effects => { list => [] } }}, version => 0, id => 162 } }
18.01 19:03:48 ->>-: core/cache.get { type => questdata, v => -1, id => 162, _type => core/cache.get }
18.01 19:03:48 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 162 } }
18.01 19:03:48 NET: Client login (conid:34386475, id:162, name:uid162)
18.01 19:03:48 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 162, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
18.01 19:03:48 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.01 19:03:48 == NET: uid162 ret: user.login { name => uid162, type => user.login, errorCode => ok, id => 162 }
18.01 19:03:48 == NET: uid162 ret: user.join { name => uid162, type => user.join }
18.01 19:03:50 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:03:50 TIME: user.ping 0.21 ms
18.01 19:03:50 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:03:52 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:03:52 TIME: user.ping 0.58 ms
18.01 19:03:52 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:03:52 NET: Client (conid:89236640) connected to vdl.0 (clients:2)
18.01 19:03:53 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTYy }
18.01 19:03:53 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid162' AND Password = E'uid162'
18.01 19:03:53 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid162' AND Password = E'uid162', _type => core/server.query }
18.01 19:03:53 -<<-: core/server.query { list => {{ name => uid162, networkid => , isbanned => false, id => 162 }}, errorCode => ok, _type => core/server.query }
18.01 19:03:53 ->>-: core/user.isOnlineID { id => 162, _type => core/user.isOnlineID }
18.01 19:03:53 -<<-: core/user.isOnlineID { isOnline => true, errorCode => ok, _type => core/user.isOnlineID }
18.01 19:03:53 -<<- LOCAL: core/user.disconnectEvent { _fromServerID => 1, _type => core/user.disconnectEvent, _id => 162 }
18.01 19:03:53 == NET: null ret: user.login { type => user.login, errorCode => userDisconnecting }
18.01 19:03:53 NET: Client (name:uid162 conid:34386475 TCP) disconnected from vdl.0 (clients:1)
18.01 19:03:53 DB: SELECT id FROM battle WHERE firstid=162 OR secondid=162 AND finished <> true
18.01 19:03:53 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=162 OR secondid=162 AND finished <> true, _type => core/server.query }
18.01 19:03:53 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.01 19:03:53 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.01 19:03:53 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
18.01 19:03:53 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.01 19:03:53 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 994
18.01 19:03:53 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => true, id => 162, _type => core/cache.update }
18.01 19:03:53 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.01 19:03:53 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 162, _type => core/cache.update }
18.01 19:03:53 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.01 19:03:53 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 162, _type => core/user.logoutPost }
18.01 19:03:53 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.01 19:03:58 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
18.01 19:03:58 TRACE: User not logon yet.
18.01 19:04:09 TIMER: Check auto-disconnect...
18.01 19:04:09 NET: Client (conid:50817010) connected to vdl.0 (clients:2)
18.01 19:04:09 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTYy }
18.01 19:04:09 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid162' AND Password = E'uid162'
18.01 19:04:09 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid162' AND Password = E'uid162', _type => core/server.query }
18.01 19:04:09 -<<-: core/server.query { list => {{ name => uid162, networkid => , isbanned => false, id => 162 }}, errorCode => ok, _type => core/server.query }
18.01 19:04:09 ->>-: core/user.isOnlineID { id => 162, _type => core/user.isOnlineID }
18.01 19:04:09 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.01 19:04:09 ->>-: core/cache.get { type => user, v => -1, id => 162, _type => core/cache.get }
18.01 19:04:09 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid162, deleted => false, email => , networktype =>   , password => uid162, isbanned => false, regdate => 2017-01-18 17:10:44.031496+03, language => en, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484748644, lastLoginDate => 18, lastLoadDate => 119 }, effects => { list => [] } }}, version => 0, id => 162 } }
18.01 19:04:09 ->>-: core/cache.get { type => questdata, v => -1, id => 162, _type => core/cache.get }
18.01 19:04:09 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 162 } }
18.01 19:04:09 NET: Client login (conid:50817010, id:162, name:uid162)
18.01 19:04:09 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 162, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
18.01 19:04:09 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.01 19:04:09 == NET: uid162 ret: user.login { name => uid162, type => user.login, errorCode => ok, id => 162 }
18.01 19:04:09 == NET: null ret: user.join { name => uid162, type => user.join }
18.01 19:04:09 == NET: uid162 ret: user.join { name => null, type => user.join }
18.01 19:04:09 == NET: uid162 ret: user.join { name => uid162, type => user.join }
18.01 19:04:09 STATS: vdl.0 cache, locks:2
18.01 19:04:10 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:04:10 TIME: user.ping 0.2 ms
18.01 19:04:10 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:04:13 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:04:13 TIME: user.ping 0.18 ms
18.01 19:04:13 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:04:14 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 162, _type => core/cache.update }
18.01 19:04:14 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.01 19:04:14 NET: Client (name:null conid:89236640 TCP) disconnected from vdl.0 (clients:1)
18.01 19:04:14 NET: Client (conid:2450679) connected to vdl.0 (clients:2)
18.01 19:04:14 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.01 19:04:14 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.01 19:04:14 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.01 19:04:14 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
18.01 19:04:14 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.01 19:04:14 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.01 19:04:14 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.01 19:04:14 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1482845166, lastLoginDate => 362, money => 3, lastLoadDate => 1228 }, effects => { list => [] } }}, version => 0, id => 76 } }
18.01 19:04:14 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.01 19:04:14 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 76 } }
18.01 19:04:14 NET: Client login (conid:2450679, id:76, name:Aimer)
18.01 19:04:14 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
18.01 19:04:14 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.01 19:04:14 DB: SELECT ID FROM TempUserLogins WHERE UserID = 76 AND Date = 'today'::timestamp
18.01 19:04:14 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 76 AND Date = 'today'::timestamp, _type => core/server.query }
18.01 19:04:14 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.01 19:04:14 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (76, 'today'::timestamp)
18.01 19:04:14 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.01 19:04:14 == NET: uid162 ret: user.join { name => Aimer, type => user.join }
18.01 19:04:14 == NET: Aimer ret: user.join { name => uid162, type => user.join }
18.01 19:04:14 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.01 19:04:15 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (76, 'today'::timestamp), _type => core/server.pending }} }
18.01 19:04:15 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
18.01 19:04:15 ++ NET: Aimer req: user.data { messageType => user.data }
18.01 19:04:15 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
18.01 19:04:15 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
18.01 19:04:15 TIME: user.data 0.41 ms
18.01 19:04:15 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
18.01 19:04:16 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:04:16 TIME: user.ping 0.17 ms
18.01 19:04:16 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:04:17 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:04:17 TIME: user.ping 0.21 ms
18.01 19:04:17 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:04:18 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:04:18 TIME: user.ping 0.24 ms
18.01 19:04:18 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:04:21 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:04:21 TIME: user.ping 0.17 ms
18.01 19:04:21 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:04:24 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:04:24 TIME: user.ping 0.19 ms
18.01 19:04:24 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:04:24 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1484755454, lastLoginDate => 18, lastLoadDate => 119 } }}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.01 19:04:24 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.01 19:04:27 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:04:27 TIME: user.ping 0.3 ms
18.01 19:04:27 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:04:29 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:04:29 TIME: user.ping 0.17 ms
18.01 19:04:29 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:04:32 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:04:32 TIME: user.ping 0.1 ms
18.01 19:04:32 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:04:35 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:04:35 TIME: user.ping 0.24 ms
18.01 19:04:35 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:04:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:04:35 TIME: user.ping 0.08 ms
18.01 19:04:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:04:35 ++ NET: Aimer req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
18.01 19:04:35 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 76 }, _type => vdl/cache.battle.findRandom }
18.01 19:04:35 -<<-: battle.enemyEvent { data => { name => Aimer, enemy.id => 162, enemy.name => uid162, id => 76, enemy.num => 2, battleId => 33, player => 1 }, _isNotify => true, id => 76, _type => battle.enemyEvent }
18.01 19:04:35 -<<-: battle.enemyEvent { data => { name => uid162, enemy.id => 76, enemy.name => Aimer, id => 162, enemy.num => 1, battleId => 33, player => 2 }, _isNotify => true, id => 162, _type => battle.enemyEvent }
18.01 19:04:35 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
18.01 19:04:35 == NET: Aimer ret: battle.find { type => battle.find, errorCode => ok }
18.01 19:04:35 TIME: battle.find 14.4 ms
18.01 19:04:35 == NET: Aimer ret: battle.enemy { data => { name => Aimer, enemy.id => 162, enemy.name => uid162, id => 76, enemy.num => 2, battleId => 33, player => 1 }, type => battle.enemy }
18.01 19:04:35 == NET: uid162 ret: battle.enemy { data => { name => uid162, enemy.id => 76, enemy.name => Aimer, id => 162, enemy.num => 1, battleId => 33, player => 2 }, type => battle.enemy }
18.01 19:04:51 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:04:51 TIME: user.ping 0.31 ms
18.01 19:04:51 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:04:53 ++ NET: uid162 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
18.01 19:04:53 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 162 }, _type => vdl/cache.battle.findRandom }
18.01 19:04:53 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
18.01 19:04:53 STATS: vdl.0 cache connection, 86 calls, total 0.114134788513184 sec spent, avg 1.33 ms
18.01 19:04:53 TIME: battle.find 1.62 ms
18.01 19:04:53 == NET: uid162 ret: battle.find { type => battle.find, errorCode => ok }
18.01 19:04:55 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:04:55 TIME: user.ping 0.51 ms
18.01 19:04:55 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:00 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:00 TIME: user.ping 0.17 ms
18.01 19:05:00 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:02 TIME: user.ping 0.21 ms
18.01 19:05:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:04 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:04 TIME: user.ping 0.18 ms
18.01 19:05:04 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:09 TIMER: Check auto-disconnect...
18.01 19:05:09 STATS: vdl.0 cache, locks:4
18.01 19:05:10 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:10 TIME: user.ping 0.15 ms
18.01 19:05:10 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:15 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:15 TIME: user.ping 0.08 ms
18.01 19:05:15 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:18 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:18 TIME: user.ping 0.17 ms
18.01 19:05:18 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:21 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:21 TIME: user.ping 0.17 ms
18.01 19:05:21 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:24 ++ NET: uid162 req: battle.end { type => closeGame, typeBattle => battle, tournamentId => 0, messageType => battle.end, battleId => 33 }
18.01 19:05:24 ->>-: vdl/cache.battle.closeFind { userId => 162, _type => vdl/cache.battle.closeFind }
18.01 19:05:24 -<<-: vdl/cache.battle.closeFind { errorCode => ok, _type => vdl/cache.battle.closeFind }
18.01 19:05:24 TIME: battle.end 0.62 ms
18.01 19:05:24 == NET: uid162 ret: battle.end { type => battle.end, errorCode => ok }
18.01 19:05:25 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:25 TIME: user.ping 0.17 ms
18.01 19:05:25 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:31 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:31 TIME: user.ping 0.22 ms
18.01 19:05:31 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:34 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:34 TIME: user.ping 0.18 ms
18.01 19:05:34 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:35 TIME: user.ping 0.22 ms
18.01 19:05:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:36 ++ NET: Aimer req: battle.end { type => leaveGame, typeBattle => battle, tournamentId => 0, messageType => battle.end, battleId => 33 }
18.01 19:05:36 ->>-: vdl/cache.battle.infoRoom { roomId => 33, _type => vdl/cache.battle.infoRoom }
18.01 19:05:36 -<<-: vdl/cache.battle.infoRoom { secondId => 162, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
18.01 19:05:36 ->>-: vdl/cache.battle.finishRoom { roomId => 33, _type => vdl/cache.battle.finishRoom }
18.01 19:05:36 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
18.01 19:05:36 TIME: battle.end 1.66 ms
18.01 19:05:36 == NET: Aimer ret: battle.end { type => battle.end, errorCode => ok }
18.01 19:05:36 == NET: uid162 ret: battle.leave { type => battle.leave }
18.01 19:05:36 == NET: Aimer ret: battle.leave { type => battle.leave }
18.01 19:05:37 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:37 TIME: user.ping 0.19 ms
18.01 19:05:37 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:40 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:40 TIME: user.ping 0.28 ms
18.01 19:05:40 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:43 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:43 TIME: user.ping 0.26 ms
18.01 19:05:43 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:46 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:46 TIME: user.ping 0.15 ms
18.01 19:05:46 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:49 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:49 TIME: user.ping 0.33 ms
18.01 19:05:49 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:52 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:52 TIME: user.ping 0.16 ms
18.01 19:05:52 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:53 TIME: user.ping 0.22 ms
18.01 19:05:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:05:56 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:05:56 TIME: user.ping 0.2 ms
18.01 19:05:56 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:06:02 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:06:02 TIME: user.ping 0.18 ms
18.01 19:06:02 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:06:05 ++ NET: uid162 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
18.01 19:06:05 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 162 }, _type => vdl/cache.battle.findRandom }
18.01 19:06:05 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
18.01 19:06:05 STATS: vdl.0 cache connection, 90 calls, total 0.116560697555542 sec spent, avg 1.3 ms
18.01 19:06:05 TIME: battle.find 0.8 ms
18.01 19:06:05 == NET: uid162 ret: battle.find { type => battle.find, errorCode => ok }
18.01 19:06:05 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:06:05 TIME: user.ping 0.14 ms
18.01 19:06:05 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:06:08 ++ NET: Aimer req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
18.01 19:06:08 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 76 }, _type => vdl/cache.battle.findRandom }
18.01 19:06:08 -<<-: battle.enemyEvent { data => { name => Aimer, enemy.id => 162, enemy.name => uid162, id => 76, enemy.num => 2, battleId => 34, player => 1 }, _isNotify => true, id => 76, _type => battle.enemyEvent }
18.01 19:06:08 -<<-: battle.enemyEvent { data => { name => uid162, enemy.id => 76, enemy.name => Aimer, id => 162, enemy.num => 1, battleId => 34, player => 2 }, _isNotify => true, id => 162, _type => battle.enemyEvent }
18.01 19:06:08 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
18.01 19:06:08 == NET: Aimer ret: battle.find { type => battle.find, errorCode => ok }
18.01 19:06:08 TIME: battle.find 10.36 ms
18.01 19:06:08 == NET: Aimer ret: battle.enemy { data => { name => Aimer, enemy.id => 162, enemy.name => uid162, id => 76, enemy.num => 2, battleId => 34, player => 1 }, type => battle.enemy }
18.01 19:06:08 == NET: uid162 ret: battle.enemy { data => { name => uid162, enemy.id => 76, enemy.name => Aimer, id => 162, enemy.num => 1, battleId => 34, player => 2 }, type => battle.enemy }
18.01 19:06:09 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:06:09 TIME: user.ping 0.23 ms
18.01 19:06:09 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:06:09 TIMER: Check auto-disconnect...
18.01 19:06:09 STATS: vdl.0 cache, locks:4
18.01 19:06:13 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:06:13 TIME: user.ping 0.21 ms
18.01 19:06:13 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:06:19 ++ NET: Aimer req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 34 }
18.01 19:06:19 ->>-: vdl/cache.battle.infoRoom { roomId => 34, _type => vdl/cache.battle.infoRoom }
18.01 19:06:19 -<<-: vdl/cache.battle.infoRoom { secondId => 162, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
18.01 19:06:19 == NET: Aimer ret: battle.sendtask { name => throw, type => battle.sendtask, dices => [3,0,3,3,0,5], errorCode => ok, _type => battle.task }
18.01 19:06:19 TIME: battle.sendtask 0.66 ms
18.01 19:06:19 == NET: Aimer ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
18.01 19:06:19 == NET: uid162 ret: battle.task { name => throw, type => battle.task, dices => [3,0,3,3,0,5], errorCode => ok }
18.01 19:06:21 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:06:21 TIME: user.ping 0.21 ms
18.01 19:06:21 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:06:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:06:24 TIME: user.ping 0.2 ms
18.01 19:06:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:06:27 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:06:27 TIME: user.ping 0.24 ms
18.01 19:06:27 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:06:32 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:06:32 TIME: user.ping 0.2 ms
18.01 19:06:32 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:06:36 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:06:36 TIME: user.ping 0.18 ms
18.01 19:06:36 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:06:39 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:06:39 TIME: user.ping 0.18 ms
18.01 19:06:39 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:06:42 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:06:42 TIME: user.ping 0.28 ms
18.01 19:06:42 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:06:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:06:47 TIME: user.ping 0.25 ms
18.01 19:06:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:06:49 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:06:49 TIME: user.ping 0.34 ms
18.01 19:06:49 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:06:54 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:06:54 TIME: user.ping 0.16 ms
18.01 19:06:54 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:06:57 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:06:57 TIME: user.ping 0.19 ms
18.01 19:06:57 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:07:01 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:07:01 TIME: user.ping 0.96 ms
18.01 19:07:01 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:07:04 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:07:04 TIME: user.ping 0.25 ms
18.01 19:07:04 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:07:08 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:07:08 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:07:08 TIME: user.ping 0.23 ms
18.01 19:07:09 TIMER: Check auto-disconnect...
18.01 19:07:09 STATS: vdl.0 cache, locks:4
18.01 19:07:17 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:07:17 TIME: user.ping 0.07 ms
18.01 19:07:17 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:07:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:07:18 TIME: user.ping 0.14 ms
18.01 19:07:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:07:20 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:07:20 TIME: user.ping 0.1 ms
18.01 19:07:20 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:07:24 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:07:24 TIME: user.ping 0.14 ms
18.01 19:07:24 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:07:27 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:07:27 TIME: user.ping 0.28 ms
18.01 19:07:27 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:07:31 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:07:31 TIME: user.ping 0.23 ms
18.01 19:07:31 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:07:39 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:07:39 TIME: user.ping 0.28 ms
18.01 19:07:39 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:07:43 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:07:43 TIME: user.ping 0.35 ms
18.01 19:07:43 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:07:47 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:07:47 TIME: user.ping 0.22 ms
18.01 19:07:47 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:07:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:07:47 TIME: user.ping 0.35 ms
18.01 19:07:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:07:49 ++ NET: Aimer req: battle.message { messageType => battle.message, message => sdasdasd, battleId => 34 }
18.01 19:07:49 ->>-: vdl/cache.battle.infoRoom { roomId => 34, _type => vdl/cache.battle.infoRoom }
18.01 19:07:49 -<<-: vdl/cache.battle.infoRoom { secondId => 162, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
18.01 19:07:49 STATS: vdl.0 cache connection, 93 calls, total 0.12946081161499 sec spent, avg 1.39 ms
18.01 19:07:49 TIME: battle.message 2.58 ms
18.01 19:07:49 == NET: Aimer ret: battle.message { type => battle.message, errorCode => ok }
18.01 19:07:49 == NET: uid162 ret: battle.message { type => battle.message, message => sdasdasd, player => 1 }
18.01 19:07:50 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:07:50 TIME: user.ping 0.26 ms
18.01 19:07:50 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:07:54 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:07:54 TIME: user.ping 0.21 ms
18.01 19:07:54 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:08:00 ++ NET: uid162 req: battle.message { messageType => battle.message, message => cfv gblh, battleId => 34 }
18.01 19:08:00 ->>-: vdl/cache.battle.infoRoom { roomId => 34, _type => vdl/cache.battle.infoRoom }
18.01 19:08:00 -<<-: vdl/cache.battle.infoRoom { secondId => 162, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
18.01 19:08:00 TIME: battle.message 2.64 ms
18.01 19:08:00 == NET: uid162 ret: battle.message { type => battle.message, errorCode => ok }
18.01 19:08:00 == NET: Aimer ret: battle.message { type => battle.message, message => cfv gblh, player => 2 }
18.01 19:08:04 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:08:04 TIME: user.ping 0.26 ms
18.01 19:08:04 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:08:09 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:08:09 TIME: user.ping 0.22 ms
18.01 19:08:09 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:08:09 TIMER: Check auto-disconnect...
18.01 19:08:09 STATS: vdl.0 cache, locks:4
18.01 19:08:13 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:08:13 TIME: user.ping 0.16 ms
18.01 19:08:13 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:08:15 ++ NET: Aimer req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 34 }
18.01 19:08:15 ->>-: vdl/cache.battle.infoRoom { roomId => 34, _type => vdl/cache.battle.infoRoom }
18.01 19:08:15 -<<-: vdl/cache.battle.infoRoom { secondId => 162, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
18.01 19:08:15 ->>-: vdl/cache.battle.makeTurn { userId => 76, roomId => 34, _type => vdl/cache.battle.makeTurn }
18.01 19:08:15 -<<-: vdl/cache.battle.makeTurn { errorCode => ok, _type => vdl/cache.battle.makeTurn, turnId => 76 }
18.01 19:08:15 TIME: battle.sendtask 2.73 ms
18.01 19:08:15 == NET: Aimer ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
18.01 19:08:15 == NET: uid162 ret: battle.task { dice => 0, from => [0,0], name => skip, side => 2, type => battle.task, messageType => battle.sendtask, to => [0,0], battleId => 34 }
18.01 19:08:22 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:08:22 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:08:22 TIME: user.ping 0.19 ms
18.01 19:08:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:08:24 TIME: user.ping 0.12 ms
18.01 19:08:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:08:26 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:08:26 TIME: user.ping 0.29 ms
18.01 19:08:26 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:08:30 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:08:30 TIME: user.ping 0.17 ms
18.01 19:08:30 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:08:36 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:08:36 TIME: user.ping 0.15 ms
18.01 19:08:36 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:08:43 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:08:43 TIME: user.ping 0.08 ms
18.01 19:08:43 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:08:47 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:08:47 TIME: user.ping 0.14 ms
18.01 19:08:47 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:08:51 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:08:51 TIME: user.ping 0.29 ms
18.01 19:08:51 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:08:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:08:57 TIME: user.ping 0.22 ms
18.01 19:08:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:08:59 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:08:59 TIME: user.ping 0.26 ms
18.01 19:08:59 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:09:05 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:09:05 TIME: user.ping 0.2 ms
18.01 19:09:05 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:09:09 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:09:09 TIME: user.ping 0.22 ms
18.01 19:09:09 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:09:09 TIMER: Check auto-disconnect...
18.01 19:09:09 STATS: vdl.0 cache, locks:4
18.01 19:09:14 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:09:14 TIME: user.ping 0.14 ms
18.01 19:09:14 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:09:24 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:09:24 TIME: user.ping 0.2 ms
18.01 19:09:24 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:09:27 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:09:27 TIME: user.ping 0.23 ms
18.01 19:09:27 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:09:31 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:09:31 TIME: user.ping 0.29 ms
18.01 19:09:31 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:09:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:09:31 TIME: user.ping 0.28 ms
18.01 19:09:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:09:34 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:09:34 TIME: user.ping 0.27 ms
18.01 19:09:34 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:09:43 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:09:43 TIME: user.ping 0.16 ms
18.01 19:09:43 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:09:47 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:09:47 TIME: user.ping 0.2 ms
18.01 19:09:47 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:09:51 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:09:51 TIME: user.ping 0.24 ms
18.01 19:09:51 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:09:56 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:09:56 TIME: user.ping 0.22 ms
18.01 19:09:56 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:10:05 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:10:05 TIME: user.ping 0.3 ms
18.01 19:10:05 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:10:09 TIMER: Check auto-disconnect...
18.01 19:10:09 STATS: vdl.0 cache, locks:4
18.01 19:10:10 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:10:10 TIME: user.ping 0.21 ms
18.01 19:10:10 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:10:14 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:10:14 TIME: user.ping 0.11 ms
18.01 19:10:14 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:10:18 ++ NET: uid162 req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 1, messageType => battle.sendtask, to => [0,0], battleId => 34 }
18.01 19:10:18 ->>-: vdl/cache.battle.infoRoom { roomId => 34, _type => vdl/cache.battle.infoRoom }
18.01 19:10:18 -<<-: vdl/cache.battle.infoRoom { secondId => 162, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 162 }
18.01 19:10:18 STATS: vdl.0 cache connection, 97 calls, total 0.136040925979614 sec spent, avg 1.4 ms
18.01 19:10:18 ->>-: vdl/cache.battle.makeTurn { userId => 162, roomId => 34, _type => vdl/cache.battle.makeTurn }
18.01 19:10:18 -<<-: vdl/cache.battle.makeTurn { errorCode => ok, _type => vdl/cache.battle.makeTurn, turnId => 76 }
18.01 19:10:18 TIME: battle.sendtask 2.38 ms
18.01 19:10:18 == NET: uid162 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
18.01 19:10:18 == NET: Aimer ret: battle.task { dice => 0, from => [0,0], name => skip, side => 1, type => battle.task, messageType => battle.sendtask, to => [0,0], battleId => 34 }
18.01 19:10:25 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:10:25 TIME: user.ping 0.23 ms
18.01 19:10:25 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:10:28 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:10:28 TIME: user.ping 0.27 ms
18.01 19:10:28 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:10:29 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:10:29 TIME: user.ping 0.22 ms
18.01 19:10:29 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:10:32 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:10:32 TIME: user.ping 0.42 ms
18.01 19:10:32 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:10:36 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:10:36 TIME: user.ping 0.17 ms
18.01 19:10:36 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:10:45 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:10:45 TIME: user.ping 0.26 ms
18.01 19:10:45 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:10:49 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:10:49 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:10:49 TIME: user.ping 0.11 ms
18.01 19:10:53 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:10:53 TIME: user.ping 0.19 ms
18.01 19:10:53 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:10:56 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:10:56 TIME: user.ping 0.2 ms
18.01 19:10:56 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:11:05 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:11:05 TIME: user.ping 0.11 ms
18.01 19:11:05 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:11:09 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:11:09 TIME: user.ping 0.11 ms
18.01 19:11:09 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:11:09 TIMER: Check auto-disconnect...
18.01 19:11:09 STATS: vdl.0 cache, locks:4
18.01 19:11:19 ->>-: core/server.login { host => 172.16.20.171, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.20.171, externalPort => 2030 }
18.01 19:11:19 -<<-: server.login ok
18.01 19:11:19 DB: SELECT * FROM LocalizationStrings
18.01 19:11:19 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:19 TIMER: Starting timer...
18.01 19:11:19 TIMER: Timer running...
18.01 19:11:19 DB: SELECT * FROM GameVars
18.01 19:11:19 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:19 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.01 19:11:19 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:19 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.01 19:11:19 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:19 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.01 19:11:19 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:19 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.01 19:11:19 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:19 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.01 19:11:19 -<<-: core/quest.getDaily ok
18.01 19:11:19 DB: SELECT * FROM UserAttributeTypes
18.01 19:11:19 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:19 DB: SELECT * FROM UserVariableTypes
18.01 19:11:19 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:19 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.01 19:11:19 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:19 DB: SELECT * FROM ItemGroups
18.01 19:11:19 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:19 DB: SELECT * FROM Bundles ORDER BY ID
18.01 19:11:19 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:19 DB: SELECT * FROM BundleItems ORDER BY ID
18.01 19:11:19 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:19 SHOP: loading items...
18.01 19:11:19 ->>-: core/shop.getList { _type => core/shop.getList }
18.01 19:11:19 -<<-: core/shop.getList ok
18.01 19:11:19 SHOP: 0 items loaded (0 sec)
18.01 19:11:19 DB: SELECT * FROM EffectAttributeTypes
18.01 19:11:19 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:19 DB: SELECT * FROM Effects
18.01 19:11:19 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:19 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.01 19:11:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:19 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.01 19:11:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:19 DB: SELECT * FROM Badges
18.01 19:11:19 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.01 19:11:19 -<<-: core/server.query ok
18.01 19:11:34 NET: Client (conid:71831937) connected to vdl.0 (clients:1)
18.01 19:11:34 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTYy }
18.01 19:11:34 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid162' AND Password = E'uid162'
18.01 19:11:34 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid162' AND Password = E'uid162', _type => core/server.query }
18.01 19:11:34 -<<-: core/server.query ok
18.01 19:11:34 ->>-: core/user.isOnlineID { id => 162, _type => core/user.isOnlineID }
18.01 19:11:34 -<<-: core/user.isOnlineID ok
18.01 19:11:34 ->>-: core/cache.get { type => user, v => -1, id => 162, _type => core/cache.get }
18.01 19:11:34 -<<-: core/cache.get ok
18.01 19:11:34 ->>-: core/cache.get { type => questdata, v => -1, id => 162, _type => core/cache.get }
18.01 19:11:34 -<<-: core/cache.get ok
18.01 19:11:34 NET: Client login (conid:71831937, id:162, name:uid162)
18.01 19:11:34 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 162, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
18.01 19:11:34 -<<-: core/user.loginPost null
18.01 19:11:34 == NET: uid162 ret: user.login { name => uid162, type => user.login, errorCode => ok, id => 162 }
18.01 19:11:34 == NET: uid162 ret: user.join { name => uid162, type => user.join }
18.01 19:11:36 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:11:36 TIME: user.ping 0.3 ms
18.01 19:11:36 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:11:39 NET: Client (conid:40666064) connected to vdl.0 (clients:2)
18.01 19:11:39 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 162, _type => core/cache.update }
18.01 19:11:39 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.01 19:11:39 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.01 19:11:39 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.01 19:11:39 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.01 19:11:40 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
18.01 19:11:40 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.01 19:11:40 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.01 19:11:40 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.01 19:11:40 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484755454, lastLoginDate => 18, money => 3, lastLoadDate => 119 }, effects => { list => [] } }}, version => 0, id => 76 } }
18.01 19:11:40 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.01 19:11:40 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 76 } }
18.01 19:11:40 NET: Client login (conid:40666064, id:76, name:Aimer)
18.01 19:11:40 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
18.01 19:11:40 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.01 19:11:40 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.01 19:11:40 == NET: uid162 ret: user.join { name => Aimer, type => user.join }
18.01 19:11:40 == NET: Aimer ret: user.join { name => uid162, type => user.join }
18.01 19:11:40 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.01 19:11:40 ++ NET: Aimer req: user.data { messageType => user.data }
18.01 19:11:40 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
18.01 19:11:40 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
18.01 19:11:40 TIME: user.data 0.28 ms
18.01 19:11:40 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
18.01 19:11:46 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:11:46 TIME: user.ping 0.26 ms
18.01 19:11:46 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:11:49 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.01 19:11:49 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.01 19:11:50 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:11:50 TIME: user.ping 0.2 ms
18.01 19:11:50 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:11:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:11:54 TIME: user.ping 0.32 ms
18.01 19:11:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:11:54 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:11:54 TIME: user.ping 0.17 ms
18.01 19:11:54 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:12:00 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:12:00 TIME: user.ping 0.24 ms
18.01 19:12:00 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:12:08 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:12:08 TIME: user.ping 0.06 ms
18.01 19:12:08 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:12:12 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:12:12 TIME: user.ping 0.09 ms
18.01 19:12:12 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:12:16 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:12:16 TIME: user.ping 0.19 ms
18.01 19:12:16 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:12:19 TIMER: Check auto-disconnect...
18.01 19:12:19 STATS: vdl.0 cache, locks:4
18.01 19:12:22 ++ NET: uid162 req: battle.end { type => leaveGame, typeBattle => battle, tournamentId => 0, messageType => battle.end, battleId => 34 }
18.01 19:12:22 ->>-: vdl/cache.battle.infoRoom { roomId => 34, _type => vdl/cache.battle.infoRoom }
18.01 19:12:22 -<<-: vdl/cache.battle.infoRoom { secondId => 162, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
18.01 19:12:22 STATS: vdl.0 cache connection, 34 calls, total 0.0328295230865479 sec spent, avg 0.97 ms
18.01 19:12:22 ->>-: vdl/cache.battle.finishRoom { roomId => 34, _type => vdl/cache.battle.finishRoom }
18.01 19:12:22 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
18.01 19:12:22 TIME: battle.end 3.08 ms
18.01 19:12:22 == NET: uid162 ret: battle.end { type => battle.end, errorCode => ok }
18.01 19:12:22 == NET: Aimer ret: battle.leave { type => battle.leave }
18.01 19:12:22 == NET: uid162 ret: battle.leave { type => battle.leave }
18.01 19:12:23 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:12:23 TIME: user.ping 0.17 ms
18.01 19:12:23 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:12:27 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:12:27 TIME: user.ping 0.18 ms
18.01 19:12:27 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:12:28 ++ NET: Aimer req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
18.01 19:12:28 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 76 }, _type => vdl/cache.battle.findRandom }
18.01 19:12:28 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
18.01 19:12:28 TIME: battle.find 0.48 ms
18.01 19:12:28 == NET: Aimer ret: battle.find { type => battle.find, errorCode => ok }
18.01 19:12:30 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:12:30 TIME: user.ping 0.14 ms
18.01 19:12:30 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:12:33 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:12:33 TIME: user.ping 0.24 ms
18.01 19:12:33 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:12:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:12:34 TIME: user.ping 0.15 ms
18.01 19:12:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:12:36 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:12:36 TIME: user.ping 0.17 ms
18.01 19:12:36 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:12:39 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:12:39 TIME: user.ping 0.22 ms
18.01 19:12:39 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:12:42 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:12:42 TIME: user.ping 0.29 ms
18.01 19:12:42 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:12:50 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:12:50 TIME: user.ping 0.14 ms
18.01 19:12:50 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:12:53 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:12:53 TIME: user.ping 0.18 ms
18.01 19:12:53 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:12:56 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:12:56 TIME: user.ping 0.14 ms
18.01 19:12:56 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:12:59 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:12:59 TIME: user.ping 0.16 ms
18.01 19:12:59 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:13:02 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:13:02 TIME: user.ping 0.2 ms
18.01 19:13:02 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:13:05 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:13:05 TIME: user.ping 0.16 ms
18.01 19:13:05 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:13:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:13:06 TIME: user.ping 0.23 ms
18.01 19:13:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:13:08 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:13:08 TIME: user.ping 0.24 ms
18.01 19:13:08 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:13:11 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:13:11 TIME: user.ping 0.16 ms
18.01 19:13:11 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:13:17 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:13:17 TIME: user.ping 0.17 ms
18.01 19:13:17 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:13:19 TIMER: Check auto-disconnect...
18.01 19:13:19 STATS: vdl.0 cache, locks:4
18.01 19:13:20 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:13:20 TIME: user.ping 0.09 ms
18.01 19:13:20 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:13:24 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:13:24 TIME: user.ping 0.26 ms
18.01 19:13:24 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:13:25 ++ NET: uid162 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
18.01 19:13:25 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 162 }, _type => vdl/cache.battle.findRandom }
18.01 19:13:25 -<<-: battle.enemyEvent { data => { name => uid162, enemy.id => 76, enemy.name => Aimer, id => 162, enemy.num => 2, battleId => 35, player => 1 }, _isNotify => true, id => 162, _type => battle.enemyEvent }
18.01 19:13:25 -<<-: battle.enemyEvent { data => { name => Aimer, enemy.id => 162, enemy.name => uid162, id => 76, enemy.num => 1, battleId => 35, player => 2 }, _isNotify => true, id => 76, _type => battle.enemyEvent }
18.01 19:13:25 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
18.01 19:13:25 STATS: vdl.0 cache connection, 37 calls, total 0.0444715023040771 sec spent, avg 1.2 ms
18.01 19:13:25 TIME: battle.find 10.9 ms
18.01 19:13:25 == NET: uid162 ret: battle.find { type => battle.find, errorCode => ok }
18.01 19:13:25 == NET: Aimer ret: battle.enemy { data => { name => Aimer, enemy.id => 162, enemy.name => uid162, id => 76, enemy.num => 1, battleId => 35, player => 2 }, type => battle.enemy }
18.01 19:13:25 == NET: uid162 ret: battle.enemy { data => { name => uid162, enemy.id => 76, enemy.name => Aimer, id => 162, enemy.num => 2, battleId => 35, player => 1 }, type => battle.enemy }
18.01 19:13:32 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:13:32 TIME: user.ping 0.18 ms
18.01 19:13:32 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:13:35 ++ NET: uid162 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 35 }
18.01 19:13:35 ->>-: vdl/cache.battle.infoRoom { roomId => 35, _type => vdl/cache.battle.infoRoom }
18.01 19:13:35 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 162, _type => vdl/cache.battle.infoRoom, turnId => 162 }
18.01 19:13:35 TIME: battle.sendtask 0.94 ms
18.01 19:13:35 == NET: uid162 ret: battle.sendtask { name => throw, type => battle.task, dices => [5,1,0,1,1,2], errorCode => ok }
18.01 19:13:35 == NET: Aimer ret: battle.task { name => throw, type => battle.task, dices => [5,1,0,1,1,2], errorCode => ok }
18.01 19:13:35 == NET: uid162 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
18.01 19:13:36 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:13:36 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:13:36 TIME: user.ping 0.18 ms
18.01 19:13:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:13:37 TIME: user.ping 0.27 ms
18.01 19:13:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:13:43 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:13:43 TIME: user.ping 0.23 ms
18.01 19:13:43 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:13:48 ++ NET: uid162 req: battle.sendtask { dice => 5, from => [2,6], name => swap, side => 2, messageType => battle.sendtask, to => [1,6], battleId => 35 }
18.01 19:13:48 ->>-: vdl/cache.battle.infoRoom { roomId => 35, _type => vdl/cache.battle.infoRoom }
18.01 19:13:48 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 162, _type => vdl/cache.battle.infoRoom, turnId => 162 }
18.01 19:13:48 ->>-: vdl/cache.battle.setScores { scores => [0,0], _type => vdl/cache.battle.setScores, player1 => 162, player2 => 76, battleId => 35 }
18.01 19:13:48 -<<-: vdl/cache.battle.setScores { errorCode => ok, _type => vdl/cache.battle.setScores }
18.01 19:13:48 TIME: battle.sendtask 4.64 ms
18.01 19:13:48 == NET: uid162 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
18.01 19:13:48 == NET: Aimer ret: battle.task { dice => 5, from => [2,6], name => swap, side => 2, type => battle.task, dices => [1,0,1,1,2], messageType => battle.sendtask, to => [1,6], battleId => 35 }
18.01 19:13:49 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:13:49 TIME: user.ping 0.16 ms
18.01 19:13:49 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:13:50 ++ NET: uid162 req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 35 }
18.01 19:13:50 ->>-: vdl/cache.battle.infoRoom { roomId => 35, _type => vdl/cache.battle.infoRoom }
18.01 19:13:50 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 162, _type => vdl/cache.battle.infoRoom, turnId => 162 }
18.01 19:13:50 ->>-: vdl/cache.battle.makeTurn { userId => 162, roomId => 35, _type => vdl/cache.battle.makeTurn }
18.01 19:13:50 -<<-: vdl/cache.battle.makeTurn { errorCode => ok, _type => vdl/cache.battle.makeTurn, turnId => 162 }
18.01 19:13:50 TIME: battle.sendtask 0.84 ms
18.01 19:13:50 == NET: uid162 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
18.01 19:13:50 == NET: Aimer ret: battle.task { dice => 0, from => [0,0], name => skip, side => 2, type => battle.task, messageType => battle.sendtask, to => [0,0], battleId => 35 }
18.01 19:13:53 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:13:53 TIME: user.ping 0.2 ms
18.01 19:13:53 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:13:57 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:13:57 TIME: user.ping 0.28 ms
18.01 19:13:57 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:06 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:06 TIME: user.ping 0.14 ms
18.01 19:14:06 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:10 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:10 TIME: user.ping 0.14 ms
18.01 19:14:10 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:14 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:14 TIME: user.ping 0.21 ms
18.01 19:14:14 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:19 TIMER: Check auto-disconnect...
18.01 19:14:19 -<<-: battle.endEvent { type => winGame, typeBattle => battle, _isNotify => true, _type => battle.endEvent, win => 76, battleId => 35 }
18.01 19:14:19 ->>-: core/cache.get { type => user, v => -1, id => 1, _type => core/cache.get }
18.01 19:14:19 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => --- DEFAULT ATTRIBUTES ---, deleted => false, email => , networktype =>   , password => , isbanned => false, regdate => 2016-08-30 15:45:16.008574+03, language =>   , networkid => , params => { inventory => { list => [] }, attrs => {}, effects => { list => [] } }}, version => 0, id => 1 } }
18.01 19:14:19 ->>-: core/cache.get { type => questdata, v => -1, id => 1, _type => core/cache.get }
18.01 19:14:19 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 1 } }
18.01 19:14:19 ->>-: vdl/cache.battle.infoRoom { roomId => 35, _type => vdl/cache.battle.infoRoom }
18.01 19:14:19 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 162, _type => vdl/cache.battle.infoRoom, turnId => 76 }
18.01 19:14:19 ->>-: vdl/cache.battle.finishRoom { roomId => 35, _type => vdl/cache.battle.finishRoom }
18.01 19:14:19 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
18.01 19:14:19 STATS: vdl.0 cache, locks:6
18.01 19:14:19 == NET: uid162 ret: battle.end { type => battle.end }
18.01 19:14:19 == NET: Aimer ret: battle.end { type => battle.end }
18.01 19:14:21 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:21 TIME: user.ping 0.15 ms
18.01 19:14:21 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:24 TIME: user.ping 0.17 ms
18.01 19:14:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:26 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:26 TIME: user.ping 0.17 ms
18.01 19:14:26 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:28 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:28 TIME: user.ping 0.22 ms
18.01 19:14:28 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:31 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:31 TIME: user.ping 0.23 ms
18.01 19:14:31 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:34 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:34 TIME: user.ping 0.14 ms
18.01 19:14:34 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:36 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:36 TIME: user.ping 0.2 ms
18.01 19:14:36 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:39 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:39 TIME: user.ping 0.24 ms
18.01 19:14:39 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:42 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:42 TIME: user.ping 0.08 ms
18.01 19:14:42 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:43 TIME: user.ping 0.23 ms
18.01 19:14:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:45 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:45 TIME: user.ping 0.17 ms
18.01 19:14:45 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:50 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:50 TIME: user.ping 0.17 ms
18.01 19:14:50 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:53 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:53 TIME: user.ping 0.27 ms
18.01 19:14:53 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:55 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:55 TIME: user.ping 0.24 ms
18.01 19:14:55 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:14:58 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:14:58 TIME: user.ping 0.33 ms
18.01 19:14:58 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:01 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:01 TIME: user.ping 0.2 ms
18.01 19:15:01 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:03 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:03 TIME: user.ping 0.27 ms
18.01 19:15:04 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:04 TIME: user.ping 0.21 ms
18.01 19:15:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:06 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:06 TIME: user.ping 0.27 ms
18.01 19:15:06 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:09 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:09 TIME: user.ping 0.23 ms
18.01 19:15:09 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:13 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:13 TIME: user.ping 0.22 ms
18.01 19:15:13 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:17 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:17 TIME: user.ping 0.33 ms
18.01 19:15:17 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:19 TIMER: Check auto-disconnect...
18.01 19:15:19 STATS: vdl.0 cache, locks:6
18.01 19:15:20 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:20 TIME: user.ping 0.2 ms
18.01 19:15:20 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:23 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:23 TIME: user.ping 0.23 ms
18.01 19:15:23 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:25 TIME: user.ping 0.24 ms
18.01 19:15:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:25 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:25 TIME: user.ping 0.1 ms
18.01 19:15:25 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:28 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:28 TIME: user.ping 0.23 ms
18.01 19:15:28 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:31 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:31 TIME: user.ping 0.2 ms
18.01 19:15:31 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:33 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:33 TIME: user.ping 0.14 ms
18.01 19:15:33 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:38 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:38 TIME: user.ping 0.17 ms
18.01 19:15:38 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:42 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:42 TIME: user.ping 0.18 ms
18.01 19:15:42 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:45 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:45 TIME: user.ping 0.19 ms
18.01 19:15:45 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:47 TIME: user.ping 0.34 ms
18.01 19:15:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:47 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:47 TIME: user.ping 0.21 ms
18.01 19:15:47 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:50 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:50 TIME: user.ping 0.2 ms
18.01 19:15:50 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:53 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:53 TIME: user.ping 0.19 ms
18.01 19:15:53 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:55 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:55 TIME: user.ping 0.19 ms
18.01 19:15:55 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:15:58 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:15:58 TIME: user.ping 0.3 ms
18.01 19:15:58 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:01 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:01 TIME: user.ping 0.18 ms
18.01 19:16:01 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:03 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:03 TIME: user.ping 0.17 ms
18.01 19:16:03 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:04 TIME: user.ping 0.07 ms
18.01 19:16:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:08 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:08 TIME: user.ping 0.18 ms
18.01 19:16:08 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:12 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:12 TIME: user.ping 0.07 ms
18.01 19:16:12 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:15 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:15 TIME: user.ping 0.2 ms
18.01 19:16:15 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:17 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:17 TIME: user.ping 0.08 ms
18.01 19:16:17 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:19 TIMER: Check auto-disconnect...
18.01 19:16:19 STATS: vdl.0 cache, locks:6
18.01 19:16:20 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:20 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:20 TIME: user.ping 0.15 ms
18.01 19:16:23 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:23 TIME: user.ping 0.19 ms
18.01 19:16:23 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:25 TIME: user.ping 0.18 ms
18.01 19:16:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:25 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:25 TIME: user.ping 0.14 ms
18.01 19:16:25 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:28 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:28 TIME: user.ping 0.19 ms
18.01 19:16:28 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:34 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:34 TIME: user.ping 0.17 ms
18.01 19:16:34 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:37 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:37 TIME: user.ping 0.16 ms
18.01 19:16:37 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:40 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:40 TIME: user.ping 0.07 ms
18.01 19:16:40 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:43 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:43 TIME: user.ping 0.12 ms
18.01 19:16:43 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:53 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:53 TIME: user.ping 0.17 ms
18.01 19:16:53 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:56 TIME: user.ping 0.16 ms
18.01 19:16:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:16:59 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:16:59 TIME: user.ping 0.07 ms
18.01 19:16:59 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:03 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:03 TIME: user.ping 0.2 ms
18.01 19:17:03 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:12 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:12 TIME: user.ping 0.15 ms
18.01 19:17:12 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:16 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:16 TIME: user.ping 0.1 ms
18.01 19:17:16 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:19 TIMER: Check auto-disconnect...
18.01 19:17:19 STATS: vdl.0 cache, locks:6
18.01 19:17:22 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:22 TIME: user.ping 0.18 ms
18.01 19:17:22 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:24 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:24 TIME: user.ping 0.13 ms
18.01 19:17:24 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:27 TIME: user.ping 0.14 ms
18.01 19:17:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:27 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:27 TIME: user.ping 0.08 ms
18.01 19:17:27 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:30 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:30 TIME: user.ping 0.07 ms
18.01 19:17:30 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:33 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:33 TIME: user.ping 0.19 ms
18.01 19:17:33 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:35 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:35 TIME: user.ping 0.14 ms
18.01 19:17:35 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:39 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:39 TIME: user.ping 0.23 ms
18.01 19:17:39 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:44 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:44 TIME: user.ping 0.19 ms
18.01 19:17:44 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:47 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:47 TIME: user.ping 0.32 ms
18.01 19:17:47 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:48 TIME: user.ping 0.29 ms
18.01 19:17:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:49 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:49 TIME: user.ping 0.21 ms
18.01 19:17:49 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:52 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:52 TIME: user.ping 0.15 ms
18.01 19:17:52 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:55 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:55 TIME: user.ping 0.2 ms
18.01 19:17:55 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:17:58 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:17:58 TIME: user.ping 0.13 ms
18.01 19:17:58 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:07 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:07 TIME: user.ping 0.32 ms
18.01 19:18:07 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:10 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:10 TIME: user.ping 0.19 ms
18.01 19:18:10 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:13 TIME: user.ping 0.08 ms
18.01 19:18:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:13 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:13 TIME: user.ping 0.07 ms
18.01 19:18:13 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:16 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:16 TIME: user.ping 0.17 ms
18.01 19:18:16 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:19 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:19 TIME: user.ping 0.21 ms
18.01 19:18:19 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:19 TIMER: Check auto-disconnect...
18.01 19:18:19 STATS: vdl.0 cache, locks:6
18.01 19:18:23 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:23 TIME: user.ping 0.2 ms
18.01 19:18:23 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:30 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:30 TIME: user.ping 0.21 ms
18.01 19:18:30 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:33 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:33 TIME: user.ping 0.18 ms
18.01 19:18:33 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:36 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:36 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:36 TIME: user.ping 0.18 ms
18.01 19:18:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:37 TIME: user.ping 0.26 ms
18.01 19:18:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:39 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:39 TIME: user.ping 0.1 ms
18.01 19:18:39 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:41 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:41 TIME: user.ping 0.21 ms
18.01 19:18:41 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:44 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:44 TIME: user.ping 0.16 ms
18.01 19:18:44 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:47 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:47 TIME: user.ping 0.19 ms
18.01 19:18:47 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:49 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:49 TIME: user.ping 0.24 ms
18.01 19:18:49 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:54 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:54 TIME: user.ping 0.22 ms
18.01 19:18:54 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:58 TIME: user.ping 0.19 ms
18.01 19:18:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:18:58 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:18:58 TIME: user.ping 0.23 ms
18.01 19:18:58 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:01 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:01 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:01 TIME: user.ping 0.16 ms
18.01 19:19:04 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:04 TIME: user.ping 0.23 ms
18.01 19:19:04 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:06 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:06 TIME: user.ping 0.17 ms
18.01 19:19:06 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:09 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:09 TIME: user.ping 0.07 ms
18.01 19:19:09 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:12 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:12 TIME: user.ping 0.19 ms
18.01 19:19:12 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:14 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:14 TIME: user.ping 0.16 ms
18.01 19:19:14 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:14 TIME: user.ping 0.16 ms
18.01 19:19:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:19 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:19 TIME: user.ping 0.25 ms
18.01 19:19:19 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:19 TIMER: Check auto-disconnect...
18.01 19:19:19 STATS: vdl.0 cache, locks:6
18.01 19:19:23 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:23 TIME: user.ping 0.15 ms
18.01 19:19:23 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:25 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:25 TIME: user.ping 0.17 ms
18.01 19:19:25 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:28 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:28 TIME: user.ping 0.2 ms
18.01 19:19:28 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:31 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:31 TIME: user.ping 0.22 ms
18.01 19:19:31 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:33 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:33 TIME: user.ping 0.23 ms
18.01 19:19:33 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:35 TIME: user.ping 0.17 ms
18.01 19:19:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:36 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:36 TIME: user.ping 0.27 ms
18.01 19:19:36 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:40 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:40 TIME: user.ping 0.22 ms
18.01 19:19:40 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:45 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:45 TIME: user.ping 0.1 ms
18.01 19:19:45 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:47 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:47 TIME: user.ping 0.16 ms
18.01 19:19:47 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:50 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:50 TIME: user.ping 0.18 ms
18.01 19:19:50 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:53 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:53 TIME: user.ping 0.22 ms
18.01 19:19:53 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:55 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:55 TIME: user.ping 0.15 ms
18.01 19:19:55 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:56 TIME: user.ping 0.21 ms
18.01 19:19:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:19:58 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:19:58 TIME: user.ping 0.18 ms
18.01 19:19:58 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:01 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:01 TIME: user.ping 0.15 ms
18.01 19:20:01 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:06 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:06 TIME: user.ping 0.18 ms
18.01 19:20:06 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:10 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:10 TIME: user.ping 0.17 ms
18.01 19:20:10 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:12 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:12 TIME: user.ping 0.17 ms
18.01 19:20:12 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:15 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:15 TIME: user.ping 0.29 ms
18.01 19:20:15 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:18 TIME: user.ping 0.26 ms
18.01 19:20:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:18 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:18 TIME: user.ping 0.24 ms
18.01 19:20:18 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:19 TIMER: Check auto-disconnect...
18.01 19:20:19 STATS: vdl.0 cache, locks:6
18.01 19:20:20 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:20 TIME: user.ping 0.17 ms
18.01 19:20:20 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:23 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:23 TIME: user.ping 0.17 ms
18.01 19:20:23 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:26 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:26 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:26 TIME: user.ping 0.17 ms
18.01 19:20:30 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:30 TIME: user.ping 0.25 ms
18.01 19:20:30 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:34 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:34 TIME: user.ping 0.2 ms
18.01 19:20:34 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:37 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:37 TIME: user.ping 0.22 ms
18.01 19:20:37 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:38 TIME: user.ping 0.33 ms
18.01 19:20:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:40 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:40 TIME: user.ping 0.21 ms
18.01 19:20:40 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:42 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:42 TIME: user.ping 0.25 ms
18.01 19:20:42 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:45 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:45 TIME: user.ping 0.2 ms
18.01 19:20:45 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:48 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:48 TIME: user.ping 0.19 ms
18.01 19:20:48 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:20:49 ++ NET: uid162 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
18.01 19:20:49 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 162 }, _type => vdl/cache.battle.findRandom }
18.01 19:20:49 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
18.01 19:20:49 STATS: vdl.0 cache connection, 47 calls, total 0.0529541969299316 sec spent, avg 1.13 ms
18.01 19:20:49 TIME: battle.find 0.63 ms
18.01 19:20:49 == NET: uid162 ret: battle.find { type => battle.find, errorCode => ok }
18.01 19:20:55 ++ NET: Aimer req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
18.01 19:20:55 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 76 }, _type => vdl/cache.battle.findRandom }
18.01 19:20:55 -<<-: battle.enemyEvent { data => { name => Aimer, enemy.id => 162, enemy.name => uid162, id => 76, enemy.num => 2, battleId => 36, player => 1 }, _isNotify => true, id => 76, _type => battle.enemyEvent }
18.01 19:20:55 -<<-: battle.enemyEvent { data => { name => uid162, enemy.id => 76, enemy.name => Aimer, id => 162, enemy.num => 1, battleId => 36, player => 2 }, _isNotify => true, id => 162, _type => battle.enemyEvent }
18.01 19:20:55 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
18.01 19:20:55 TIME: battle.find 11.03 ms
18.01 19:20:55 == NET: Aimer ret: battle.find { type => battle.find, errorCode => ok }
18.01 19:20:55 == NET: Aimer ret: battle.enemy { data => { name => Aimer, enemy.id => 162, enemy.name => uid162, id => 76, enemy.num => 2, battleId => 36, player => 1 }, type => battle.enemy }
18.01 19:20:55 == NET: uid162 ret: battle.enemy { data => { name => uid162, enemy.id => 76, enemy.name => Aimer, id => 162, enemy.num => 1, battleId => 36, player => 2 }, type => battle.enemy }
18.01 19:20:58 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:20:58 TIME: user.ping 0.28 ms
18.01 19:20:58 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:21:02 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:21:02 TIME: user.ping 0.21 ms
18.01 19:21:02 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:21:05 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:21:05 TIME: user.ping 0.13 ms
18.01 19:21:05 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:21:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:21:07 TIME: user.ping 0.39 ms
18.01 19:21:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:21:08 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:21:08 TIME: user.ping 0.17 ms
18.01 19:21:08 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:21:15 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:21:15 TIME: user.ping 0.33 ms
18.01 19:21:15 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:21:19 TIMER: Check auto-disconnect...
18.01 19:21:19 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:21:19 TIME: user.ping 0.07 ms
18.01 19:21:19 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:21:19 STATS: vdl.0 cache, locks:6
18.01 19:21:23 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:21:23 TIME: user.ping 0.2 ms
18.01 19:21:23 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:21:26 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:21:26 TIME: user.ping 0.22 ms
18.01 19:21:26 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:21:30 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:21:30 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:21:30 TIME: user.ping 0.57 ms
18.01 19:21:38 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:21:38 TIME: user.ping 0.2 ms
18.01 19:21:38 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:21:42 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:21:42 TIME: user.ping 0.16 ms
18.01 19:21:42 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:21:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:21:45 TIME: user.ping 0.16 ms
18.01 19:21:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:21:45 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:21:45 TIME: user.ping 0.15 ms
18.01 19:21:45 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:21:48 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:21:48 TIME: user.ping 0.17 ms
18.01 19:21:48 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:21:53 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:21:53 TIME: user.ping 0.17 ms
18.01 19:21:53 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:22:00 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:22:00 TIME: user.ping 0.42 ms
18.01 19:22:00 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:22:04 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:22:04 TIME: user.ping 0.17 ms
18.01 19:22:04 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:22:07 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:22:07 TIME: user.ping 0.24 ms
18.01 19:22:07 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:22:10 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:22:10 TIME: user.ping 0.07 ms
18.01 19:22:10 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:22:16 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:22:16 TIME: user.ping 0.24 ms
18.01 19:22:16 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:22:19 TIMER: Check auto-disconnect...
18.01 19:22:19 STATS: vdl.0 cache, locks:6
18.01 19:22:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:22:23 TIME: user.ping 0.18 ms
18.01 19:22:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:22:23 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:22:23 TIME: user.ping 0.08 ms
18.01 19:22:23 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:22:26 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:22:26 TIME: user.ping 0.14 ms
18.01 19:22:26 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:22:29 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:22:29 TIME: user.ping 0.22 ms
18.01 19:22:29 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:22:33 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:22:33 TIME: user.ping 0.17 ms
18.01 19:22:33 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:22:40 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:22:40 TIME: user.ping 0.3 ms
18.01 19:22:40 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:22:45 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:22:45 TIME: user.ping 0.12 ms
18.01 19:22:45 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:22:48 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:22:48 TIME: user.ping 0.19 ms
18.01 19:22:48 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:22:52 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:22:52 TIME: user.ping 0.18 ms
18.01 19:22:52 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:22:59 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:22:59 TIME: user.ping 0.19 ms
18.01 19:22:59 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:23:00 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:23:00 TIME: user.ping 0.18 ms
18.01 19:23:00 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:23:03 ++ NET: Aimer req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 36 }
18.01 19:23:03 ->>-: vdl/cache.battle.infoRoom { roomId => 36, _type => vdl/cache.battle.infoRoom }
18.01 19:23:03 -<<-: vdl/cache.battle.infoRoom { secondId => 162, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
18.01 19:23:03 STATS: vdl.0 cache connection, 49 calls, total 0.0653252601623535 sec spent, avg 1.33 ms
18.01 19:23:03 ->>-: vdl/cache.battle.makeTurn { userId => 76, roomId => 36, _type => vdl/cache.battle.makeTurn }
18.01 19:23:03 -<<-: vdl/cache.battle.makeTurn { errorCode => ok, _type => vdl/cache.battle.makeTurn, turnId => 76 }
18.01 19:23:03 TIME: battle.sendtask 1.94 ms
18.01 19:23:03 == NET: Aimer ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
18.01 19:23:03 == NET: uid162 ret: battle.task { dice => 0, from => [0,0], name => skip, side => 2, type => battle.task, messageType => battle.sendtask, to => [0,0], battleId => 36 }
18.01 19:23:04 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:23:04 TIME: user.ping 0.08 ms
18.01 19:23:04 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:23:08 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:23:08 TIME: user.ping 0.2 ms
18.01 19:23:08 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:23:11 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:23:11 TIME: user.ping 0.18 ms
18.01 19:23:11 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:23:17 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:23:17 TIME: user.ping 0.09 ms
18.01 19:23:17 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:23:19 TIMER: Check auto-disconnect...
18.01 19:23:20 STATS: vdl.0 cache, locks:6
18.01 19:23:23 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:23:23 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:23:23 TIME: user.ping 0.2 ms
18.01 19:23:26 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:23:26 TIME: user.ping 0.24 ms
18.01 19:23:26 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:23:29 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:23:29 TIME: user.ping 0.24 ms
18.01 19:23:29 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:23:33 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:23:33 TIME: user.ping 0.31 ms
18.01 19:23:33 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:23:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:23:33 TIME: user.ping 0.22 ms
18.01 19:23:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:23:38 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:23:38 TIME: user.ping 0.27 ms
18.01 19:23:38 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:23:45 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:23:45 TIME: user.ping 0.2 ms
18.01 19:23:45 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:23:48 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:23:48 TIME: user.ping 0.16 ms
18.01 19:23:48 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:23:51 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:23:51 TIME: user.ping 0.15 ms
18.01 19:23:51 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:23:55 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:23:55 TIME: user.ping 0.23 ms
18.01 19:23:55 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:23:59 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:23:59 TIME: user.ping 0.22 ms
18.01 19:23:59 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:24:06 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:24:06 TIME: user.ping 0.12 ms
18.01 19:24:06 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:24:10 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:24:10 TIME: user.ping 0.23 ms
18.01 19:24:10 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:24:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:24:11 TIME: user.ping 0.37 ms
18.01 19:24:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:24:13 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:24:13 TIME: user.ping 0.07 ms
18.01 19:24:13 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:24:16 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:24:16 TIME: user.ping 0.14 ms
18.01 19:24:16 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:24:19 TIMER: Check auto-disconnect...
18.01 19:24:20 STATS: vdl.0 cache, locks:6
18.01 19:24:21 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:24:21 TIME: user.ping 0.26 ms
18.01 19:24:21 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:24:29 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:24:29 TIME: user.ping 0.14 ms
18.01 19:24:29 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:24:32 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:24:32 TIME: user.ping 0.18 ms
18.01 19:24:32 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:24:35 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:24:35 TIME: user.ping 0.14 ms
18.01 19:24:35 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:24:39 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:24:39 TIME: user.ping 0.07 ms
18.01 19:24:39 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:24:42 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:24:42 TIME: user.ping 0.19 ms
18.01 19:24:42 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:24:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:24:47 TIME: user.ping 0.18 ms
18.01 19:24:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:24:51 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:24:51 TIME: user.ping 0.16 ms
18.01 19:24:51 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:24:54 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:24:54 TIME: user.ping 0.15 ms
18.01 19:24:54 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:24:58 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:24:58 TIME: user.ping 0.19 ms
18.01 19:24:58 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:25:01 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:25:01 TIME: user.ping 0.21 ms
18.01 19:25:01 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:25:06 ++ NET: uid162 req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 1, messageType => battle.sendtask, to => [0,0], battleId => 36 }
18.01 19:25:06 ->>-: vdl/cache.battle.infoRoom { roomId => 36, _type => vdl/cache.battle.infoRoom }
18.01 19:25:06 -<<-: vdl/cache.battle.infoRoom { secondId => 162, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 162 }
18.01 19:25:06 STATS: vdl.0 cache connection, 51 calls, total 0.0671632289886475 sec spent, avg 1.32 ms
18.01 19:25:06 ->>-: vdl/cache.battle.makeTurn { userId => 162, roomId => 36, _type => vdl/cache.battle.makeTurn }
18.01 19:25:06 -<<-: vdl/cache.battle.makeTurn { errorCode => ok, _type => vdl/cache.battle.makeTurn, turnId => 76 }
18.01 19:25:06 TIME: battle.sendtask 2.19 ms
18.01 19:25:06 == NET: uid162 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
18.01 19:25:06 == NET: Aimer ret: battle.task { dice => 0, from => [0,0], name => skip, side => 1, type => battle.task, messageType => battle.sendtask, to => [0,0], battleId => 36 }
18.01 19:25:09 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:25:09 TIME: user.ping 0.07 ms
18.01 19:25:09 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:25:13 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:25:13 TIME: user.ping 0.21 ms
18.01 19:25:13 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:25:17 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:25:17 TIME: user.ping 0.24 ms
18.01 19:25:17 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:25:19 TIMER: Check auto-disconnect...
18.01 19:25:20 STATS: vdl.0 cache, locks:6
18.01 19:25:20 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:25:20 TIME: user.ping 0.15 ms
18.01 19:25:20 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:25:22 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:25:22 TIME: user.ping 0.12 ms
18.01 19:25:22 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:25:23 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:25:23 TIME: user.ping 0.18 ms
18.01 19:25:23 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:25:38 ->>-: core/server.login { host => 172.16.20.171, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.20.171, externalPort => 2030 }
18.01 19:25:38 -<<-: server.login ok
18.01 19:25:38 DB: SELECT * FROM LocalizationStrings
18.01 19:25:38 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:38 TIMER: Starting timer...
18.01 19:25:38 TIMER: Timer running...
18.01 19:25:38 DB: SELECT * FROM GameVars
18.01 19:25:38 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:38 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.01 19:25:38 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:38 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.01 19:25:38 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:38 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.01 19:25:38 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:38 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.01 19:25:38 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:38 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.01 19:25:38 -<<-: core/quest.getDaily ok
18.01 19:25:38 DB: SELECT * FROM UserAttributeTypes
18.01 19:25:38 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:38 DB: SELECT * FROM UserVariableTypes
18.01 19:25:38 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:38 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.01 19:25:38 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:38 DB: SELECT * FROM ItemGroups
18.01 19:25:38 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:38 DB: SELECT * FROM Bundles ORDER BY ID
18.01 19:25:38 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:38 DB: SELECT * FROM BundleItems ORDER BY ID
18.01 19:25:38 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:38 SHOP: loading items...
18.01 19:25:38 ->>-: core/shop.getList { _type => core/shop.getList }
18.01 19:25:38 -<<-: core/shop.getList ok
18.01 19:25:38 SHOP: 0 items loaded (0 sec)
18.01 19:25:38 DB: SELECT * FROM EffectAttributeTypes
18.01 19:25:38 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:38 DB: SELECT * FROM Effects
18.01 19:25:38 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:38 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.01 19:25:38 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:38 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.01 19:25:38 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:38 DB: SELECT * FROM Badges
18.01 19:25:38 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.01 19:25:38 -<<-: core/server.query ok
18.01 19:25:51 NET: Client (conid:90610316) connected to vdl.0 (clients:1)
18.01 19:25:51 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTYy }
18.01 19:25:51 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid162' AND Password = E'uid162'
18.01 19:25:51 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid162' AND Password = E'uid162', _type => core/server.query }
18.01 19:25:51 -<<-: core/server.query ok
18.01 19:25:51 ->>-: core/user.isOnlineID { id => 162, _type => core/user.isOnlineID }
18.01 19:25:51 -<<-: core/user.isOnlineID ok
18.01 19:25:51 ->>-: core/cache.get { type => user, v => -1, id => 162, _type => core/cache.get }
18.01 19:25:51 -<<-: core/cache.get ok
18.01 19:25:51 ->>-: core/cache.get { type => questdata, v => -1, id => 162, _type => core/cache.get }
18.01 19:25:51 -<<-: core/cache.get ok
18.01 19:25:51 NET: Client login (conid:90610316, id:162, name:uid162)
18.01 19:25:51 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 162, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
18.01 19:25:51 -<<-: core/user.loginPost null
18.01 19:25:51 == NET: uid162 ret: user.login { name => uid162, type => user.login, errorCode => ok, id => 162 }
18.01 19:25:51 == NET: uid162 ret: user.join { name => uid162, type => user.join }
18.01 19:25:53 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:25:53 TIME: user.ping 0.09 ms
18.01 19:25:53 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:25:57 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 19:25:57 TIME: user.ping 0.22 ms
18.01 19:25:57 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:25:58 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 162, _type => core/cache.update }
18.01 19:25:58 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.01 19:25:59 NET: Client (name:uid162 conid:90610316 TCP) disconnected from vdl.0 (clients:0)
18.01 19:25:59 DB: SELECT id FROM battle WHERE firstid=162 OR secondid=162 AND finished <> true
18.01 19:25:59 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=162 OR secondid=162 AND finished <> true, _type => core/server.query }
18.01 19:25:59 -<<-: core/server.query { list => {{ id => 35 }, { id => 36 }}, errorCode => ok, _type => core/server.query }
18.01 19:25:59 ->>-: vdl/cache.battle.infoRoom { roomId => 36, _type => vdl/cache.battle.infoRoom }
18.01 19:25:59 -<<-: vdl/cache.battle.infoRoom { secondId => 162, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
18.01 19:25:59 ->>-: vdl/cache.battle.deleteRoom { roomId => 36, _type => vdl/cache.battle.deleteRoom }
18.01 19:25:59 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
18.01 19:25:59 ->>-: vdl/cache.battle.finishRoom { roomId => 36, _type => vdl/cache.battle.finishRoom }
18.01 19:25:59 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
18.01 19:25:59 ->>-: core/user.sendTo { id => 76, _type => core/user.sendTo, msg => { _type => battle.leave } }
18.01 19:25:59 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
18.01 19:25:59 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 162, _type => core/cache.update }
18.01 19:25:59 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
18.01 19:25:59 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 162, _type => core/cache.update }
18.01 19:25:59 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.01 19:25:59 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 162, _type => core/user.logoutPost }
18.01 19:25:59 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.01 19:26:31 NET: Client (conid:27595229) connected to vdl.0 (clients:1)
18.01 19:26:31 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.01 19:26:31 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.01 19:26:31 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.01 19:26:31 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
18.01 19:26:31 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.01 19:26:31 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.01 19:26:31 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.01 19:26:31 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484755454, lastLoginDate => 18, money => 3, lastLoadDate => 119 }, effects => { list => [] } }}, version => 0, id => 76 } }
18.01 19:26:31 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.01 19:26:31 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 76 } }
18.01 19:26:31 NET: Client login (conid:27595229, id:76, name:Aimer)
18.01 19:26:31 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
18.01 19:26:31 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.01 19:26:31 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.01 19:26:31 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.01 19:26:31 ++ NET: Aimer req: user.data { messageType => user.data }
18.01 19:26:31 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
18.01 19:26:31 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
18.01 19:26:31 TIME: user.data 0.36 ms
18.01 19:26:31 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
18.01 19:26:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.01 19:26:33 TIME: user.ping 0.17 ms
18.01 19:26:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.01 19:26:38 TIMER: Check auto-disconnect...
18.01 19:26:38 STATS: vdl.0 cache, locks:2
18.01 19:26:38 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.01 19:26:38 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.01 19:26:38 STATS: vdl.0 cache connection, 41 calls, total 0.0496456623077393 sec spent, avg 1.21 ms
18.01 19:26:55 NET: Client (name:Aimer conid:27595229 TCP) disconnected from vdl.0 (clients:0)
18.01 19:26:55 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
18.01 19:26:55 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
18.01 19:26:55 -<<-: core/server.query { list => {{ id => 33 }, { id => 34 }}, errorCode => ok, _type => core/server.query }
18.01 19:26:55 ->>-: vdl/cache.battle.infoRoom { roomId => 34, _type => vdl/cache.battle.infoRoom }
18.01 19:26:55 -<<-: vdl/cache.battle.infoRoom { secondId => 162, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
18.01 19:26:55 ->>-: vdl/cache.battle.deleteRoom { roomId => 34, _type => vdl/cache.battle.deleteRoom }
18.01 19:26:55 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
18.01 19:26:55 ->>-: vdl/cache.battle.finishRoom { roomId => 34, _type => vdl/cache.battle.finishRoom }
18.01 19:26:55 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
18.01 19:26:55 ->>-: core/user.sendTo { id => 162, _type => core/user.sendTo, msg => { _type => battle.leave } }
18.01 19:26:55 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
18.01 19:26:55 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
18.01 19:26:55 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
18.01 19:26:55 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
18.01 19:26:55 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.01 19:26:55 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
18.01 19:26:55 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
