01.08 12:00:14 TIMER: Check auto-disconnect...
01.08 12:00:15 STATS: testProject.0 cache, locks:0
01.08 12:01:14 TIMER: Check auto-disconnect...
01.08 12:01:15 STATS: testProject.0 cache, locks:0
01.08 12:02:14 TIMER: Check auto-disconnect...
01.08 12:02:15 STATS: testProject.0 cache, locks:0
01.08 12:03:14 TIMER: Check auto-disconnect...
01.08 12:03:15 STATS: testProject.0 cache, locks:0
01.08 12:04:14 TIMER: Check auto-disconnect...
01.08 12:04:15 STATS: testProject.0 cache, locks:0
01.08 12:05:14 TIMER: Check auto-disconnect...
01.08 12:05:15 STATS: testProject.0 cache, locks:0
01.08 12:06:14 TIMER: Check auto-disconnect...
01.08 12:06:15 STATS: testProject.0 cache, locks:0
01.08 12:07:14 TIMER: Check auto-disconnect...
01.08 12:07:15 STATS: testProject.0 cache, locks:0
01.08 12:08:14 TIMER: Check auto-disconnect...
01.08 12:08:15 STATS: testProject.0 cache, locks:0
01.08 12:09:14 TIMER: Check auto-disconnect...
01.08 12:09:15 STATS: testProject.0 cache, locks:0
01.08 12:10:14 TIMER: Check auto-disconnect...
01.08 12:10:15 STATS: testProject.0 cache, locks:0
01.08 12:11:14 TIMER: Check auto-disconnect...
01.08 12:11:15 STATS: testProject.0 cache, locks:0
01.08 12:12:14 TIMER: Check auto-disconnect...
01.08 12:12:15 STATS: testProject.0 cache, locks:0
01.08 12:13:14 TIMER: Check auto-disconnect...
01.08 12:13:15 STATS: testProject.0 cache, locks:0
01.08 12:14:14 TIMER: Check auto-disconnect...
01.08 12:14:22 ->>-: core/server.login { host => 192.168.10.204, name => testProject.0, port => 2010, type => game, _type => core/server.login, externalHost => 192.168.10.204, externalPort => 2010 }
01.08 12:14:22 -<<-: server.login ok
01.08 12:14:22 DB: SELECT * FROM LocalizationStrings
01.08 12:14:22 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.08 12:14:22 -<<-: core/server.query ok
01.08 12:14:22 TIMER: Starting timer...
01.08 12:14:22 TIMER: Timer running...
01.08 12:14:22 DB: SELECT * FROM GameVars
01.08 12:14:22 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.08 12:14:22 -<<-: core/server.query ok
01.08 12:14:22 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.08 12:14:22 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.08 12:14:22 -<<-: core/server.query ok
01.08 12:14:22 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.08 12:14:22 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.08 12:14:22 -<<-: core/server.query ok
01.08 12:14:22 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.08 12:14:22 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.08 12:14:22 -<<-: core/server.query ok
01.08 12:14:22 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.08 12:14:22 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.08 12:14:22 -<<-: core/server.query ok
01.08 12:14:22 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.08 12:14:22 -<<-: core/quest.getDaily ok
01.08 12:14:22 DB: SELECT * FROM UserAttributeTypes
01.08 12:14:22 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.08 12:14:22 -<<-: core/server.query ok
01.08 12:14:22 DB: SELECT * FROM UserVariableTypes
01.08 12:14:22 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.08 12:14:22 -<<-: core/server.query ok
01.08 12:14:22 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.08 12:14:22 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.08 12:14:22 -<<-: core/server.query ok
01.08 12:14:22 DB: SELECT * FROM ItemGroups
01.08 12:14:22 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.08 12:14:22 -<<-: core/server.query ok
01.08 12:14:22 DB: SELECT * FROM Bundles ORDER BY ID
01.08 12:14:22 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.08 12:14:22 -<<-: core/server.query ok
01.08 12:14:22 DB: SELECT * FROM BundleItems ORDER BY ID
01.08 12:14:22 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.08 12:14:22 -<<-: core/server.query ok
01.08 12:14:22 SHOP: loading items...
01.08 12:14:22 ->>-: core/shop.getList { _type => core/shop.getList }
01.08 12:14:22 -<<-: core/shop.getList ok
01.08 12:14:22 SHOP: 0 items loaded (0 sec)
01.08 12:14:22 DB: SELECT * FROM EffectAttributeTypes
01.08 12:14:22 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.08 12:14:22 -<<-: core/server.query ok
01.08 12:14:22 DB: SELECT * FROM Effects
01.08 12:14:22 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.08 12:14:22 -<<-: core/server.query ok
01.08 12:14:22 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart01.08 12:14:59 ->>-: core/server.login { host => 192.168.10.204, name => testProject.0, port => 2010, type => game, _type => core/server.login, externalHost => 192.168.10.204, externalPort => 2010 }
01.08 12:14:59 -<<-: server.login ok
01.08 12:14:59 DB: SELECT * FROM LocalizationStrings
01.08 12:14:59 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.08 12:14:59 -<<-: core/server.query ok
01.08 12:14:59 TIMER: Starting timer...
01.08 12:14:59 TIMER: Timer running...
01.08 12:14:59 DB: SELECT * FROM GameVars
01.08 12:14:59 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.08 12:14:59 -<<-: core/server.query ok
01.08 12:14:59 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.08 12:14:59 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.08 12:14:59 -<<-: core/server.query ok
01.08 12:14:59 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.08 12:14:59 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.08 12:14:59 -<<-: core/server.query ok
01.08 12:14:59 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.08 12:14:59 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.08 12:14:59 -<<-: core/server.query ok
01.08 12:14:59 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.08 12:14:59 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.08 12:14:59 -<<-: core/server.query ok
01.08 12:14:59 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.08 12:14:59 -<<-: core/quest.getDaily ok
01.08 12:14:59 DB: SELECT * FROM UserAttributeTypes
01.08 12:14:59 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.08 12:14:59 -<<-: core/server.query ok
01.08 12:14:59 DB: SELECT * FROM UserVariableTypes
01.08 12:14:59 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.08 12:14:59 -<<-: core/server.query ok
01.08 12:14:59 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.08 12:14:59 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.08 12:14:59 -<<-: core/server.query ok
01.08 12:14:59 DB: SELECT * FROM ItemGroups
01.08 12:14:59 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.08 12:14:59 -<<-: core/server.query ok
01.08 12:14:59 DB: SELECT * FROM Bundles ORDER BY ID
01.08 12:14:59 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.08 12:14:59 -<<-: core/server.query ok
01.08 12:14:59 DB: SELECT * FROM BundleItems ORDER BY ID
01.08 12:14:59 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.08 12:14:59 -<<-: core/server.query ok
01.08 12:14:59 SHOP: loading items...
01.08 12:14:59 ->>-: core/shop.getList { _type => core/shop.getList }
01.08 12:14:59 -<<-: core/shop.getList ok
01.08 12:14:59 SHOP: 0 items loaded (0 sec)
01.08 12:14:59 DB: SELECT * FROM EffectAttributeTypes
01.08 12:14:59 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.08 12:14:59 -<<-: core/server.query ok
01.08 12:14:59 DB: SELECT * FROM Effects
01.08 12:14:59 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.08 12:14:59 -<<-: core/server.query ok
01.08 12:14:59 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart01.08 12:14:15 STATS: testProject.0 cache, locks:0
01.08 12:15:11 NET: Client (conid:53686573) connected to testProject.0 (clients:1)
01.08 12:15:11 TRACE: Invalid message 'GET / HTTP/1.1
User-Agent: websocket-sharp/1.0
Host: 192.168.10.204:2010
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: O7yQDfIeEKaJkOyHpGTDSQ==
Sec-WebSocket-Version: 13

'
01.08 12:15:11 TRACE: 
Called from snipe/slave/MetaServer.hx line 494
Called from snipe/slave/ThreadServerModified.hx line 135
Called from snipe/slave/ThreadServerModified.hx line 160
01.08 12:15:11 NET: Client (name:null conid:53686573 TCP) disconnected from testProject.0 (clients:0)
01.08 12:15:14 TIMER: Check auto-disconnect...
01.08 12:15:15 STATS: testProject.0 cache, locks:0
01.08 12:16:14 TIMER: Check auto-disconnect...
01.08 12:17:13 ->>-: core/server.login { host => 192.168.10.204, name => testProject.0, port => 2010, type => game, _type => core/server.login, externalHost => 192.168.10.204, externalPort => 2010 }
01.08 12:17:13 -<<-: server.login ok
01.08 12:17:13 DB: SELECT * FROM LocalizationStrings
01.08 12:17:13 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:13 TIMER: Starting timer...
01.08 12:17:13 TIMER: Timer running...
01.08 12:17:13 DB: SELECT * FROM GameVars
01.08 12:17:13 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:13 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.08 12:17:13 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:13 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.08 12:17:13 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:13 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.08 12:17:13 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:13 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.08 12:17:13 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:13 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.08 12:17:13 -<<-: core/quest.getDaily ok
01.08 12:17:13 DB: SELECT * FROM UserAttributeTypes
01.08 12:17:13 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:13 DB: SELECT * FROM UserVariableTypes
01.08 12:17:13 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:13 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.08 12:17:13 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:13 DB: SELECT * FROM ItemGroups
01.08 12:17:13 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:13 DB: SELECT * FROM Bundles ORDER BY ID
01.08 12:17:13 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:13 DB: SELECT * FROM BundleItems ORDER BY ID
01.08 12:17:13 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:13 SHOP: loading items...
01.08 12:17:13 ->>-: core/shop.getList { _type => core/shop.getList }
01.08 12:17:13 -<<-: core/shop.getList ok
01.08 12:17:13 SHOP: 0 items loaded (0 sec)
01.08 12:17:13 DB: SELECT * FROM EffectAttributeTypes
01.08 12:17:13 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:13 DB: SELECT * FROM Effects
01.08 12:17:13 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:13 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
01.08 12:17:13 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:13 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
01.08 12:17:13 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:13 DB: SELECT * FROM Badges
01.08 12:17:13 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
01.08 12:17:13 -<<-: core/server.query ok
01.08 12:17:23 NET: Client (conid:58019165) connected to testProject.0 (clients:1)
01.08 12:17:23 TRACE: Invalid message 'GET / HTTP/1.1
User-Agent: websocket-sharp/1.0
Host: 192.168.10.204:2010
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: 1S1JFYf858H5XU/7q2rlGw==
Sec-WebSocket-Version: 13

'
01.08 12:17:23 TRACE: 
Called from snipe/slave/MetaServer.hx line 494
Called from snipe/slave/ThreadServerModified.hx line 135
Called from snipe/slave/ThreadServerModified.hx line 160
01.08 12:17:23 NET: Client (name:null conid:58019165 TCP) disconnected from testProject.0 (clients:0)
01.08 12:18:08 NET: Client (conid:87000332) connected to testProject.0 (clients:1)
01.08 12:18:08 TRACE: Invalid message 'GET / HTTP/1.1
User-Agent: websocket-sharp/1.0
Host: 192.168.10.204:2010
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: 1ioXJNnDWkhRn3+IYk6nDg==
Sec-WebSocket-Version: 13

'
01.08 12:18:08 TRACE: 
Called from snipe/slave/MetaServer.hx line 494
Called from snipe/slave/ThreadServerModified.hx line 135
Called from snipe/slave/ThreadServerModified.hx line 160
01.08 12:18:08 NET: Client (name:null conid:87000332 TCP) disconnected from testProject.0 (clients:0)
01.08 12:18:13 TIMER: Check auto-disconnect...
01.08 12:18:13 STATS: testProject.0 cache, locks:0
01.08 12:18:56 ->>-: core/server.login { host => 192.168.10.204, name => testProject.0, port => 2010, type => game, _type => core/server.login, externalHost => 192.168.10.204, externalPort => 2010 }
01.08 12:18:56 -<<-: server.login ok
01.08 12:18:56 DB: SELECT * FROM LocalizationStrings
01.08 12:18:56 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:18:56 TIMER: Starting timer...
01.08 12:18:56 TIMER: Timer running...
01.08 12:18:56 DB: SELECT * FROM GameVars
01.08 12:18:56 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:18:56 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.08 12:18:56 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:18:56 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.08 12:18:56 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:18:56 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.08 12:18:56 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:18:56 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.08 12:18:56 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:18:56 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.08 12:18:56 -<<-: core/quest.getDaily ok
01.08 12:18:56 DB: SELECT * FROM UserAttributeTypes
01.08 12:18:56 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:18:56 DB: SELECT * FROM UserVariableTypes
01.08 12:18:56 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:18:56 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.08 12:18:56 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:18:56 DB: SELECT * FROM ItemGroups
01.08 12:18:56 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:18:56 DB: SELECT * FROM Bundles ORDER BY ID
01.08 12:18:56 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:18:56 DB: SELECT * FROM BundleItems ORDER BY ID
01.08 12:18:56 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:18:56 SHOP: loading items...
01.08 12:18:56 ->>-: core/shop.getList { _type => core/shop.getList }
01.08 12:18:56 -<<-: core/shop.getList ok
01.08 12:18:56 SHOP: 0 items loaded (0 sec)
01.08 12:18:56 DB: SELECT * FROM EffectAttributeTypes
01.08 12:18:56 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:18:56 DB: SELECT * FROM Effects
01.08 12:18:56 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:18:56 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
01.08 12:18:56 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:18:56 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
01.08 12:18:56 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:18:56 DB: SELECT * FROM Badges
01.08 12:18:56 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
01.08 12:18:56 -<<-: core/server.query ok
01.08 12:19:00 NET: Client (conid:93965002) connected to testProject.0 (clients:1)
01.08 12:19:00 TRACE: Invalid message 'GET / HTTP/1.1
User-Agent: websocket-sharp/1.0
Host: 192.168.10.204:2010
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: JHDZlHfJq1sDwY/IUDmxpA==
Sec-WebSocket-Version: 13

'
01.08 12:19:00 TRACE: 
Called from snipe/slave/MetaServer.hx line 494
Called from snipe/slave/ThreadServerModified.hx line 135
Called from snipe/slave/ThreadServerModified.hx line 160
01.08 12:19:00 NET: Client (name:null conid:93965002 TCP) disconnected from testProject.0 (clients:0)
01.08 12:19:55 NET: Client (conid:25292699) connected to testProject.0 (clients:1)
01.08 12:19:55 ++ NET: null req: user.login { password => , name => testname, messageType => user.login }
01.08 12:19:55 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'testname' AND Password = E''
01.08 12:19:55 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'testname' AND Password = E'', _type => core/server.query }
01.08 12:19:55 -<<-: core/server.query ok
01.08 12:19:55 == NET: null ret: user.login { type => user.login, errorCode => userNotFound }
01.08 12:19:56 TIMER: Check auto-disconnect...
01.08 12:19:56 STATS: testProject.0 cache, locks:0
01.08 12:20:55 NET: Client (name:null conid:25292699 TCP) disconnected from testProject.0 (clients:0)
