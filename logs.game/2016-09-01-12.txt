01.09 12:00:24 TIMER: Check auto-disconnect...
01.09 12:00:25 STATS: vdl.0 cache, locks:0
01.09 12:01:24 TIMER: Check auto-disconnect...
01.09 12:01:25 STATS: vdl.0 cache, locks:0
01.09 12:02:24 TIMER: Check auto-disconnect...
01.09 12:02:24 NET: Client (name:null conid:50735639 TCP) disconnected from vdl.0 (clients:0)
01.09 12:03:01 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
01.09 12:03:01 -<<-: server.login ok
01.09 12:03:01 DB: SELECT * FROM LocalizationStrings
01.09 12:03:01 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 TIMER: Starting timer...
01.09 12:03:01 TIMER: Timer running...
01.09 12:03:01 DB: SELECT * FROM GameVars
01.09 12:03:01 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.09 12:03:01 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.09 12:03:01 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.09 12:03:01 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.09 12:03:01 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.09 12:03:01 -<<-: core/quest.getDaily ok
01.09 12:03:01 DB: SELECT * FROM UserAttributeTypes
01.09 12:03:01 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 DB: SELECT * FROM UserVariableTypes
01.09 12:03:01 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.09 12:03:01 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 DB: SELECT * FROM ItemGroups
01.09 12:03:01 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 DB: SELECT * FROM Bundles ORDER BY ID
01.09 12:03:01 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 DB: SELECT * FROM BundleItems ORDER BY ID
01.09 12:03:01 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 SHOP: loading items...
01.09 12:03:01 ->>-: core/shop.getList { _type => core/shop.getList }
01.09 12:03:01 -<<-: core/shop.getList ok
01.09 12:03:01 SHOP: 0 items loaded (0 sec)
01.09 12:03:01 DB: SELECT * FROM EffectAttributeTypes
01.09 12:03:01 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 DB: SELECT * FROM Effects
01.09 12:03:01 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
01.09 12:03:01 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
01.09 12:03:01 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 DB: SELECT * FROM Badges
01.09 12:03:01 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
01.09 12:03:01 -<<-: core/server.query ok
01.09 12:03:01 TIMER: Check auto-disconnect...
01.09 12:03:01 STATS: vdl.0 cache, locks:0
01.09 12:04:23 NET: Client (conid:44894315) connected to vdl.0 (clients:1)
01.09 12:04:47 NET: Client (name:null conid:44894315 TCP) disconnected from vdl.0 (clients:0)
01.09 12:05:01 TIMER: Check auto-disconnect...
01.09 12:05:01 STATS: vdl.0 cache, locks:0
01.09 12:05:01 TIMER: Check auto-disconnect...
01.09 12:05:01 STATS: vdl.0 cache, locks:0
01.09 12:05:01 TIMER: Check auto-disconnect...
01.09 12:05:01 STATS: vdl.0 cache, locks:0
01.09 12:07:33 NET: Client (conid:55489850) connected to vdl.0 (clients:1)
01.09 12:08:01 TIMER: Check auto-disconnect...
01.09 12:08:01 STATS: vdl.0 cache, locks:0
01.09 12:08:01 TIMER: Check auto-disconnect...
01.09 12:08:01 STATS: vdl.0 cache, locks:0
01.09 12:08:01 TIMER: Check auto-disconnect...
01.09 12:08:01 STATS: vdl.0 cache, locks:0
01.09 12:10:57 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
01.09 12:10:57 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
01.09 12:10:57 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
01.09 12:10:57 -<<-: core/server.query ok
01.09 12:10:57 STATS: vdl.0 cache connection, 21 calls, total 0.095944881439209 sec spent, avg 4.57 ms
01.09 12:10:57 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
01.09 12:10:57 -<<-: core/user.isOnlineID ok
01.09 12:10:57 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
01.09 12:10:57 -<<-: core/cache.get ok
01.09 12:10:57 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
01.09 12:10:57 -<<-: core/cache.get ok
01.09 12:10:57 NET: Client login (conid:55489850, id:2, name:test1)
01.09 12:10:57 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
01.09 12:10:57 -<<-: core/user.loginPost null
01.09 12:10:57 DB: SELECT ID FROM TempUserLogins WHERE UserID = 2 AND Date = 'today'::timestamp
01.09 12:10:57 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 2 AND Date = 'today'::timestamp, _type => core/server.query }
01.09 12:10:57 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
01.09 12:10:57 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (2, 'today'::timestamp)
01.09 12:10:57 ++ NET: test1 req: battle.test { messageType => battle.test }
01.09 12:10:57 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
01.09 12:10:57 ->>-: vdl/cache.test { _type => vdl/cache.test, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (2, 'today'::timestamp), _type => core/server.pending }} }
01.09 12:10:57 == NET: test1 ret: user.join { name => test1, type => user.join }
01.09 12:10:57 -<<-: vdl/cache.test { errorCode => ok, _type => vdl/cache.test, res => { head => [{ count => 1 },null], val => null } }
01.09 12:10:57 TIME: battle.test 1.11 ms
01.09 12:10:57 == NET: test1 ret: battle.test { type => battle.test, errorCode => ok, _type => vdl/cache.test, res => { head => [{ count => 1 },null], val => null } }
01.09 12:10:57 TRACE: runSerialize EXCEPTION Cannot serialize [{ count => 1 },null]
01.09 12:11:01 TIMER: Check auto-disconnect...
01.09 12:11:01 STATS: vdl.0 cache, locks:2
01.09 12:11:06 ->>-: core/cache.update { diff => {language => en, params => { attrs => { lastLoginDate => 245, lastLoadDate => 902 } }}, type => user, unlock => false, id => 2, _type => core/cache.update }
01.09 12:11:06 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 12:15:07 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
01.09 12:15:07 -<<-: server.login ok
01.09 12:15:07 DB: SELECT * FROM LocalizationStrings
01.09 12:15:07 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 TIMER: Starting timer...
01.09 12:15:07 TIMER: Timer running...
01.09 12:15:07 DB: SELECT * FROM GameVars
01.09 12:15:07 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.09 12:15:07 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.09 12:15:07 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.09 12:15:07 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.09 12:15:07 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.09 12:15:07 -<<-: core/quest.getDaily ok
01.09 12:15:07 DB: SELECT * FROM UserAttributeTypes
01.09 12:15:07 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 DB: SELECT * FROM UserVariableTypes
01.09 12:15:07 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.09 12:15:07 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 DB: SELECT * FROM ItemGroups
01.09 12:15:07 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 DB: SELECT * FROM Bundles ORDER BY ID
01.09 12:15:07 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 DB: SELECT * FROM BundleItems ORDER BY ID
01.09 12:15:07 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 SHOP: loading items...
01.09 12:15:07 ->>-: core/shop.getList { _type => core/shop.getList }
01.09 12:15:07 -<<-: core/shop.getList ok
01.09 12:15:07 SHOP: 0 items loaded (0 sec)
01.09 12:15:07 DB: SELECT * FROM EffectAttributeTypes
01.09 12:15:07 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 DB: SELECT * FROM Effects
01.09 12:15:07 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
01.09 12:15:07 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
01.09 12:15:07 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 DB: SELECT * FROM Badges
01.09 12:15:07 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
01.09 12:15:07 -<<-: core/server.query ok
01.09 12:15:07 TIMER: Check auto-disconnect...
01.09 12:15:07 STATS: vdl.0 cache, locks:0
01.09 12:15:07 TIMER: Check auto-disconnect...
01.09 12:15:07 STATS: vdl.0 cache, locks:0
01.09 12:17:18 NET: Client (conid:97516511) connected to vdl.0 (clients:1)
01.09 12:17:21 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
01.09 12:17:21 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
01.09 12:17:21 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
01.09 12:17:21 -<<-: core/server.query ok
01.09 12:17:21 STATS: vdl.0 cache connection, 21 calls, total 0.0255427360534668 sec spent, avg 1.22 ms
01.09 12:17:21 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
01.09 12:17:21 -<<-: core/user.isOnlineID ok
01.09 12:17:21 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
01.09 12:17:21 -<<-: core/cache.get ok
01.09 12:17:21 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
01.09 12:17:21 -<<-: core/cache.get ok
01.09 12:17:21 NET: Client login (conid:97516511, id:2, name:test1)
01.09 12:17:21 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
01.09 12:17:21 -<<-: core/user.loginPost null
01.09 12:17:21 ++ NET: test1 req: battle.test { messageType => battle.test }
01.09 12:17:21 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
01.09 12:17:21 ->>-: vdl/cache.test { _type => vdl/cache.test }
01.09 12:17:21 == NET: test1 ret: user.join { name => test1, type => user.join }
01.09 12:17:21 -<<-: vdl/cache.test { errorCode => ok, _type => vdl/cache.test, res => 1 }
01.09 12:17:21 TIME: battle.test 1.48 ms
01.09 12:17:21 == NET: test1 ret: battle.test { type => battle.test, errorCode => ok, _type => vdl/cache.test, res => 1 }
01.09 12:17:27 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
01.09 12:17:27 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 12:17:52 NET: Client (name:test1 conid:97516511 TCP) disconnected from vdl.0 (clients:0)
01.09 12:17:52 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
01.09 12:17:52 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
01.09 12:17:52 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
01.09 12:17:52 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 12:17:52 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
01.09 12:17:52 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
01.09 12:18:07 TIMER: Check auto-disconnect...
01.09 12:18:07 STATS: vdl.0 cache, locks:0
01.09 12:18:07 TIMER: Check auto-disconnect...
01.09 12:18:07 STATS: vdl.0 cache, locks:0
01.09 12:18:07 TIMER: Check auto-disconnect...
01.09 12:18:07 STATS: vdl.0 cache, locks:0
01.09 12:18:07 TIMER: Check auto-disconnect...
01.09 12:18:07 STATS: vdl.0 cache, locks:0
01.09 12:21:49 NET: Client (conid:66360718) connected to vdl.0 (clients:1)
01.09 12:21:51 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
01.09 12:21:51 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
01.09 12:21:51 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
01.09 12:21:51 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
01.09 12:21:51 STATS: vdl.0 cache connection, 31 calls, total 0.0358180999755859 sec spent, avg 1.16 ms
01.09 12:21:51 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
01.09 12:21:51 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
01.09 12:21:51 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
01.09 12:21:51 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472654256, lastLoginDate => 245, lastLoadDate => 902 }, effects => { list => [] } }}, version => 0, id => 2 } }
01.09 12:21:51 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
01.09 12:21:51 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
01.09 12:21:51 NET: Client login (conid:66360718, id:2, name:test1)
01.09 12:21:51 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
01.09 12:21:51 -<<-: core/user.loginPost { _type => core/user.loginPost }
01.09 12:21:51 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
01.09 12:21:51 ++ NET: test1 req: battle.test { messageType => battle.test }
01.09 12:21:51 == NET: test1 ret: user.join { name => test1, type => user.join }
01.09 12:21:51 ->>-: vdl/cache.test { _type => vdl/cache.test }
01.09 12:21:51 -<<-: vdl/cache.test { errorCode => ok, _type => vdl/cache.test, res => 1 }
01.09 12:21:51 TIME: battle.test 2.13 ms
01.09 12:21:51 == NET: test1 ret: battle.test { type => battle.test, errorCode => ok, _type => vdl/cache.test, res => 1 }
01.09 12:21:57 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
01.09 12:21:57 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 12:22:07 TIMER: Check auto-disconnect...
01.09 12:22:07 STATS: vdl.0 cache, locks:2
01.09 12:22:07 TIMER: Check auto-disconnect...
01.09 12:22:07 STATS: vdl.0 cache, locks:2
01.09 12:24:03 NET: Client (name:test1 conid:66360718 TCP) disconnected from vdl.0 (clients:0)
01.09 12:24:03 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
01.09 12:24:03 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
01.09 12:24:03 STATS: vdl.0 cache connection, 38 calls, total 0.0445382595062256 sec spent, avg 1.17 ms
01.09 12:24:03 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
01.09 12:24:03 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 12:24:03 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
01.09 12:24:03 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
01.09 12:24:07 TIMER: Check auto-disconnect...
01.09 12:24:07 STATS: vdl.0 cache, locks:0
01.09 12:24:07 TIMER: Check auto-disconnect...
01.09 12:24:07 STATS: vdl.0 cache, locks:0
01.09 12:24:07 TIMER: Check auto-disconnect...
01.09 12:26:08 STATS: vdl.0 cache, locks:0
01.09 12:27:07 TIMER: Check auto-disconnect...
01.09 12:27:08 STATS: vdl.0 cache, locks:0
01.09 12:27:35 NET: Client (conid:72108597) connected to vdl.0 (clients:1)
01.09 12:28:07 TIMER: Check auto-disconnect...
01.09 12:28:08 STATS: vdl.0 cache, locks:0
01.09 12:29:07 TIMER: Check auto-disconnect...
01.09 12:29:08 STATS: vdl.0 cache, locks:0
01.09 12:29:12 NET: Client (name:null conid:72108597 TCP) disconnected from vdl.0 (clients:0)
01.09 12:29:27 NET: Client (conid:93474009) connected to vdl.0 (clients:1)
01.09 12:30:03 NET: Client (name:null conid:93474009 TCP) disconnected from vdl.0 (clients:0)
01.09 12:30:07 TIMER: Check auto-disconnect...
01.09 12:30:08 STATS: vdl.0 cache, locks:0
01.09 12:31:07 TIMER: Check auto-disconnect...
01.09 12:31:08 STATS: vdl.0 cache, locks:0
01.09 12:32:07 TIMER: Check auto-disconnect...
01.09 12:32:08 STATS: vdl.0 cache, locks:0
01.09 12:33:05 NET: Client (conid:77969401) connected to vdl.0 (clients:1)
01.09 12:33:07 TIMER: Check auto-disconnect...
01.09 12:33:09 STATS: vdl.0 cache, locks:0
01.09 12:33:33 NET: Client (name:null conid:77969401 TCP) disconnected from vdl.0 (clients:0)
01.09 12:34:07 TIMER: Check auto-disconnect...
01.09 12:34:09 STATS: vdl.0 cache, locks:0
01.09 12:35:07 TIMER: Check auto-disconnect...
01.09 12:37:00 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
01.09 12:37:00 -<<-: server.login ok
01.09 12:37:00 DB: SELECT * FROM LocalizationStrings
01.09 12:37:00 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:00 TIMER: Starting timer...
01.09 12:37:00 TIMER: Timer running...
01.09 12:37:00 DB: SELECT * FROM GameVars
01.09 12:37:00 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:00 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.09 12:37:00 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:00 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.09 12:37:00 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:00 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.09 12:37:00 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:00 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.09 12:37:00 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:00 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.09 12:37:00 -<<-: core/quest.getDaily ok
01.09 12:37:00 DB: SELECT * FROM UserAttributeTypes
01.09 12:37:00 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:00 DB: SELECT * FROM UserVariableTypes
01.09 12:37:00 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:00 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.09 12:37:00 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:00 DB: SELECT * FROM ItemGroups
01.09 12:37:00 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:00 DB: SELECT * FROM Bundles ORDER BY ID
01.09 12:37:00 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:00 DB: SELECT * FROM BundleItems ORDER BY ID
01.09 12:37:00 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:00 SHOP: loading items...
01.09 12:37:00 ->>-: core/shop.getList { _type => core/shop.getList }
01.09 12:37:00 -<<-: core/shop.getList ok
01.09 12:37:00 SHOP: 0 items loaded (0 sec)
01.09 12:37:00 DB: SELECT * FROM EffectAttributeTypes
01.09 12:37:00 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:00 DB: SELECT * FROM Effects
01.09 12:37:00 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:00 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
01.09 12:37:00 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:00 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
01.09 12:37:00 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:00 DB: SELECT * FROM Badges
01.09 12:37:00 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
01.09 12:37:00 -<<-: core/server.query ok
01.09 12:37:02 NET: Client (conid:51662240) connected to vdl.0 (clients:1)
01.09 12:37:15 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
01.09 12:37:15 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
01.09 12:37:15 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
01.09 12:37:15 -<<-: core/server.query ok
01.09 12:37:15 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
01.09 12:37:15 -<<-: core/user.isOnlineID ok
01.09 12:37:15 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
01.09 12:37:15 -<<-: core/cache.get ok
01.09 12:37:15 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
01.09 12:37:15 -<<-: core/cache.get ok
01.09 12:37:15 NET: Client login (conid:51662240, id:2, name:test1)
01.09 12:37:15 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
01.09 12:37:15 -<<-: core/user.loginPost null
01.09 12:37:15 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
01.09 12:37:15 == NET: test1 ret: user.join { name => test1, type => user.join }
01.09 12:37:15 ++ NET: test1 req: battle.test { messageType => battle.test }
01.09 12:37:15 ->>-: vdl/cache.test { _type => vdl/cache.test }
01.09 12:37:15 -<<-: vdl/cache.test { errorCode => ok, _type => vdl/cache.test, res => 0 }
01.09 12:37:15 TIME: battle.test 0.24 ms
01.09 12:37:15 == NET: test1 ret: battle.test { type => battle.test, errorCode => ok, _type => vdl/cache.test, res => 0 }
01.09 12:37:25 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
01.09 12:37:25 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 12:46:01 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
01.09 12:46:01 -<<-: server.login ok
01.09 12:46:01 DB: SELECT * FROM LocalizationStrings
01.09 12:46:01 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 TIMER: Starting timer...
01.09 12:46:01 TIMER: Timer running...
01.09 12:46:01 DB: SELECT * FROM GameVars
01.09 12:46:01 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.09 12:46:01 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.09 12:46:01 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.09 12:46:01 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.09 12:46:01 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.09 12:46:01 -<<-: core/quest.getDaily ok
01.09 12:46:01 DB: SELECT * FROM UserAttributeTypes
01.09 12:46:01 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 DB: SELECT * FROM UserVariableTypes
01.09 12:46:01 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.09 12:46:01 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 DB: SELECT * FROM ItemGroups
01.09 12:46:01 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 DB: SELECT * FROM Bundles ORDER BY ID
01.09 12:46:01 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 DB: SELECT * FROM BundleItems ORDER BY ID
01.09 12:46:01 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 SHOP: loading items...
01.09 12:46:01 ->>-: core/shop.getList { _type => core/shop.getList }
01.09 12:46:01 -<<-: core/shop.getList ok
01.09 12:46:01 SHOP: 0 items loaded (0 sec)
01.09 12:46:01 DB: SELECT * FROM EffectAttributeTypes
01.09 12:46:01 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 DB: SELECT * FROM Effects
01.09 12:46:01 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
01.09 12:46:01 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
01.09 12:46:01 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 DB: SELECT * FROM Badges
01.09 12:46:01 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
01.09 12:46:01 -<<-: core/server.query ok
01.09 12:46:01 TIMER: Check auto-disconnect...
01.09 12:46:01 STATS: vdl.0 cache, locks:0
01.09 12:46:01 TIMER: Check auto-disconnect...
01.09 12:46:01 STATS: vdl.0 cache, locks:0
01.09 12:46:01 TIMER: Check auto-disconnect...
01.09 12:46:01 STATS: vdl.0 cache, locks:0
01.09 12:49:38 NET: Client (conid:95578684) connected to vdl.0 (clients:1)
01.09 12:49:51 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
01.09 12:49:51 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
01.09 12:49:51 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
01.09 12:49:51 -<<-: core/server.query ok
01.09 12:49:51 STATS: vdl.0 cache connection, 21 calls, total 0.0263187885284424 sec spent, avg 1.25 ms
01.09 12:49:51 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
01.09 12:49:51 -<<-: core/user.isOnlineID ok
01.09 12:49:51 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
01.09 12:49:51 -<<-: core/cache.get ok
01.09 12:49:51 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
01.09 12:49:51 -<<-: core/cache.get ok
01.09 12:49:51 NET: Client login (conid:95578684, id:2, name:test1)
01.09 12:49:51 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
01.09 12:49:51 -<<-: core/user.loginPost null
01.09 12:49:51 ++ NET: test1 req: battle.test { messageType => battle.test }
01.09 12:49:51 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
01.09 12:49:51 ->>-: vdl/cache.test { _type => vdl/cache.test }
01.09 12:49:51 == NET: test1 ret: user.join { name => test1, type => user.join }
01.09 12:49:51 -<<-: vdl/cache.test { errorCode => ok, _type => vdl/cache.test, res => 0 }
01.09 12:49:51 TIME: battle.test 0.57 ms
01.09 12:49:51 == NET: test1 ret: battle.test { type => battle.test, errorCode => ok, _type => vdl/cache.test, res => 0 }
01.09 12:50:01 TIMER: Check auto-disconnect...
01.09 12:50:01 STATS: vdl.0 cache, locks:2
01.09 12:50:01 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
01.09 12:50:01 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 12:50:36 NET: Client (name:test1 conid:95578684 TCP) disconnected from vdl.0 (clients:0)
01.09 12:50:36 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
01.09 12:50:36 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
01.09 12:50:36 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
01.09 12:50:36 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 12:50:36 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
01.09 12:50:36 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
01.09 12:50:44 NET: Client (conid:4927488) connected to vdl.0 (clients:1)
01.09 12:50:46 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
01.09 12:50:46 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
01.09 12:50:46 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
01.09 12:50:46 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
01.09 12:50:46 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
01.09 12:50:46 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
01.09 12:50:46 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
01.09 12:50:46 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472654256, lastLoginDate => 245, lastLoadDate => 902 }, effects => { list => [] } }}, version => 0, id => 2 } }
01.09 12:50:46 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
01.09 12:50:46 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
01.09 12:50:46 NET: Client login (conid:4927488, id:2, name:test1)
01.09 12:50:46 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
01.09 12:50:46 -<<-: core/user.loginPost { _type => core/user.loginPost }
01.09 12:50:46 ++ NET: test1 req: battle.test { messageType => battle.test }
01.09 12:50:46 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
01.09 12:50:46 ->>-: vdl/cache.test { _type => vdl/cache.test }
01.09 12:50:46 == NET: test1 ret: user.join { name => test1, type => user.join }
01.09 12:50:46 -<<-: vdl/cache.test { errorCode => ok, _type => vdl/cache.test, res => 0 }
01.09 12:50:46 TIME: battle.test 0.28 ms
01.09 12:50:46 == NET: test1 ret: battle.test { type => battle.test, errorCode => ok, _type => vdl/cache.test, res => 0 }
01.09 12:50:51 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
01.09 12:50:51 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 12:51:01 TIMER: Check auto-disconnect...
01.09 12:51:01 STATS: vdl.0 cache, locks:2
01.09 12:51:01 TIMER: Check auto-disconnect...
01.09 12:51:01 STATS: vdl.0 cache, locks:2
01.09 12:52:04 NET: Client (name:test1 conid:4927488 TCP) disconnected from vdl.0 (clients:0)
01.09 12:52:04 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
01.09 12:52:04 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
01.09 12:52:04 STATS: vdl.0 cache connection, 38 calls, total 0.0416147708892822 sec spent, avg 1.1 ms
01.09 12:52:04 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
01.09 12:52:04 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 12:52:04 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
01.09 12:52:04 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
01.09 12:55:31 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
01.09 12:55:31 -<<-: server.login ok
01.09 12:55:31 DB: SELECT * FROM LocalizationStrings
01.09 12:55:31 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:55:31 TIMER: Starting timer...
01.09 12:55:31 TIMER: Timer running...
01.09 12:55:31 DB: SELECT * FROM GameVars
01.09 12:55:31 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:55:31 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.09 12:55:31 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:55:31 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.09 12:55:31 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:55:31 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.09 12:55:31 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:55:31 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.09 12:55:31 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:55:31 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.09 12:55:31 -<<-: core/quest.getDaily ok
01.09 12:55:31 DB: SELECT * FROM UserAttributeTypes
01.09 12:55:31 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:55:31 DB: SELECT * FROM UserVariableTypes
01.09 12:55:31 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:55:31 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.09 12:55:31 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:55:31 DB: SELECT * FROM ItemGroups
01.09 12:55:31 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:55:31 DB: SELECT * FROM Bundles ORDER BY ID
01.09 12:55:31 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:55:31 DB: SELECT * FROM BundleItems ORDER BY ID
01.09 12:55:31 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:55:31 SHOP: loading items...
01.09 12:55:31 ->>-: core/shop.getList { _type => core/shop.getList }
01.09 12:55:31 -<<-: core/shop.getList ok
01.09 12:55:31 SHOP: 0 items loaded (0 sec)
01.09 12:55:31 DB: SELECT * FROM EffectAttributeTypes
01.09 12:55:31 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:55:31 DB: SELECT * FROM Effects
01.09 12:55:31 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:55:31 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
01.09 12:55:31 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:55:31 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
01.09 12:55:31 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:55:31 DB: SELECT * FROM Badges
01.09 12:55:31 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
01.09 12:55:31 -<<-: core/server.query ok
01.09 12:56:04 NET: Client (conid:71481643) connected to vdl.0 (clients:1)
01.09 12:56:08 NET: Client (name:null conid:71481643 TCP) disconnected from vdl.0 (clients:0)
01.09 12:56:31 NET: Client (conid:74204794) connected to vdl.0 (clients:1)
01.09 12:56:31 TIMER: Check auto-disconnect...
01.09 12:56:31 STATS: vdl.0 cache, locks:0
01.09 12:56:35 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
01.09 12:56:35 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
01.09 12:56:35 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
01.09 12:56:35 -<<-: core/server.query ok
01.09 12:56:35 STATS: vdl.0 cache connection, 21 calls, total 0.0429472923278809 sec spent, avg 2.05 ms
01.09 12:56:35 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
01.09 12:56:35 -<<-: core/user.isOnlineID ok
01.09 12:56:35 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
01.09 12:56:35 -<<-: core/cache.get ok
01.09 12:56:35 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
01.09 12:56:35 -<<-: core/cache.get ok
01.09 12:56:35 NET: Client login (conid:74204794, id:2, name:test1)
01.09 12:56:35 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
01.09 12:56:35 -<<-: core/user.loginPost null
01.09 12:56:35 ++ NET: test1 req: battle.find { messageType => battle.find }
01.09 12:56:35 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
01.09 12:56:35 == NET: test1 ret: user.join { name => test1, type => user.join }
01.09 12:56:35 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
01.09 12:56:35 -<<-: vdl/cache.battle.find { list => { r => #abstract }, errorCode => ok, _type => vdl/cache.battle.find }
01.09 12:56:35 TRACE: battle.find : std@random_int
01.09 12:56:35 TRACE: battle.find : 
Called from /usr/share/haxe/std/neko/_std/Std.hx line 61
Called from modules/VDLBattleModule.hx line 58
Called from modules/VDLBattleModule.hx line 40
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
01.09 12:56:41 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
01.09 12:56:41 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 12:58:33 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
01.09 12:58:33 -<<-: server.login ok
01.09 12:58:33 DB: SELECT * FROM LocalizationStrings
01.09 12:58:33 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:58:33 TIMER: Starting timer...
01.09 12:58:33 TIMER: Timer running...
01.09 12:58:33 DB: SELECT * FROM GameVars
01.09 12:58:33 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:58:33 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.09 12:58:33 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:58:33 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.09 12:58:33 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:58:33 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.09 12:58:33 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:58:33 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.09 12:58:33 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:58:33 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.09 12:58:33 -<<-: core/quest.getDaily ok
01.09 12:58:33 DB: SELECT * FROM UserAttributeTypes
01.09 12:58:33 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:58:33 DB: SELECT * FROM UserVariableTypes
01.09 12:58:33 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:58:33 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.09 12:58:33 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:58:33 DB: SELECT * FROM ItemGroups
01.09 12:58:33 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:58:33 DB: SELECT * FROM Bundles ORDER BY ID
01.09 12:58:33 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:58:33 DB: SELECT * FROM BundleItems ORDER BY ID
01.09 12:58:33 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:58:33 SHOP: loading items...
01.09 12:58:33 ->>-: core/shop.getList { _type => core/shop.getList }
01.09 12:58:33 -<<-: core/shop.getList ok
01.09 12:58:33 SHOP: 0 items loaded (0 sec)
01.09 12:58:33 DB: SELECT * FROM EffectAttributeTypes
01.09 12:58:33 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:58:33 DB: SELECT * FROM Effects
01.09 12:58:33 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:58:33 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
01.09 12:58:33 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:58:33 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
01.09 12:58:33 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:58:33 DB: SELECT * FROM Badges
01.09 12:58:33 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
01.09 12:58:33 -<<-: core/server.query ok
01.09 12:59:03 NET: Client (conid:18823640) connected to vdl.0 (clients:1)
01.09 12:59:08 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
01.09 12:59:08 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
01.09 12:59:08 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
01.09 12:59:08 -<<-: core/server.query ok
01.09 12:59:08 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
01.09 12:59:08 -<<-: core/user.isOnlineID ok
01.09 12:59:08 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
01.09 12:59:08 -<<-: core/cache.get ok
01.09 12:59:08 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
01.09 12:59:08 -<<-: core/cache.get ok
01.09 12:59:08 NET: Client login (conid:18823640, id:2, name:test1)
01.09 12:59:08 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
01.09 12:59:08 -<<-: core/user.loginPost null
01.09 12:59:08 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
01.09 12:59:08 ++ NET: test1 req: battle.find { messageType => battle.find }
01.09 12:59:08 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
01.09 12:59:08 == NET: test1 ret: user.join { name => test1, type => user.join }
01.09 12:59:08 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
01.09 12:59:08 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
01.09 12:59:08 -<<-: vdl/cache.battle.create { errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
01.09 12:59:08 TIME: battle.find 66.1 ms
01.09 12:59:08 == NET: test1 ret: battle.find { type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
01.09 12:59:13 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
01.09 12:59:13 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 12:59:33 TIMER: Check auto-disconnect...
01.09 12:59:33 STATS: vdl.0 cache, locks:2
01.09 12:59:33 TIMER: Check auto-disconnect...
01.09 12:59:33 STATS: vdl.0 cache, locks:2
01.09 12:59:33 TIMER: Check auto-disconnect...
01.09 12:59:33 STATS: vdl.0 cache, locks:2
01.09 12:59:33 TIMER: Check auto-disconnect...
01.09 12:59:33 NET: Client (name:test1 conid:18823640 TCP) disconnected from vdl.0 (clients:0)
01.09 12:59:33 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
01.09 12:59:33 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
01.09 12:59:33 STATS: vdl.0 cache connection, 29 calls, total 0.0984752178192139 sec spent, avg 3.4 ms
01.09 12:59:33 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
01.09 12:59:33 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 12:59:33 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
01.09 12:59:33 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
01.09 12:59:33 STATS: vdl.0 cache, locks:0
01.09 12:59:33 TIMER: Check auto-disconnect...
01.09 12:59:33 STATS: vdl.0 cache, locks:0
