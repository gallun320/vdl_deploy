02.09 16:13:18 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 16:13:18 -<<-: server.login ok
02.09 16:13:18 DB: SELECT * FROM LocalizationStrings
02.09 16:13:18 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 16:13:18 -<<-: core/server.query ok
02.09 16:13:18 TIMER: Starting timer...
02.09 16:13:18 TIMER: Timer running...
02.09 16:13:18 DB: SELECT * FROM GameVars
02.09 16:13:18 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 16:13:18 -<<-: core/server.query ok
02.09 16:13:18 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 16:13:18 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 16:13:18 -<<-: core/server.query ok
02.09 16:13:18 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 16:13:18 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 16:13:18 -<<-: core/server.query ok
02.09 16:13:18 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 16:13:18 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 16:13:18 -<<-: core/server.query ok
02.09 16:13:18 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 16:13:18 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 16:13:18 -<<-: core/server.query ok
02.09 16:13:18 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 16:13:18 -<<-: core/quest.getDaily ok
02.09 16:13:18 DB: SELECT * FROM UserAttributeTypes
02.09 16:13:18 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 16:13:18 -<<-: core/server.query ok
02.09 16:13:18 DB: SELECT * FROM UserVariableTypes
02.09 16:13:18 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 16:13:18 -<<-: core/server.query ok
02.09 16:13:18 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 16:13:18 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 16:13:18 -<<-: core/server.query ok
02.09 16:13:18 DB: SELECT * FROM ItemGroups
02.09 16:13:18 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 16:13:18 -<<-: core/server.query ok
02.09 16:13:18 DB: SELECT * FROM Bundles ORDER BY ID
02.09 16:13:18 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 16:13:18 -<<-: core/server.query ok
02.09 16:13:18 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 16:13:18 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 16:13:18 -<<-: core/server.query ok
02.09 16:13:18 SHOP: loading items...
02.09 16:13:18 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 16:13:18 -<<-: core/shop.getList ok
02.09 16:13:18 SHOP: 0 items loaded (0 sec)
02.09 16:13:18 DB: SELECT * FROM EffectAttributeTypes
02.09 16:13:18 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 16:13:18 -<<-: core/server.query ok
02.09 16:13:18 DB: SELECT * FROM Effects
02.09 16:13:18 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 16:13:18 -<<-: core/server.query ok
02.09 16:13:18 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(02.09 16:15:03 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 16:15:03 -<<-: server.login ok
02.09 16:15:03 DB: SELECT * FROM LocalizationStrings
02.09 16:15:03 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 TIMER: Starting timer...
02.09 16:15:03 TIMER: Timer running...
02.09 16:15:03 DB: SELECT * FROM GameVars
02.09 16:15:03 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 16:15:03 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 16:15:03 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 16:15:03 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 16:15:03 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 16:15:03 -<<-: core/quest.getDaily ok
02.09 16:15:03 DB: SELECT * FROM UserAttributeTypes
02.09 16:15:03 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 DB: SELECT * FROM UserVariableTypes
02.09 16:15:03 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 16:15:03 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 DB: SELECT * FROM ItemGroups
02.09 16:15:03 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 DB: SELECT * FROM Bundles ORDER BY ID
02.09 16:15:03 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 16:15:03 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 SHOP: loading items...
02.09 16:15:03 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 16:15:03 -<<-: core/shop.getList ok
02.09 16:15:03 SHOP: 0 items loaded (0 sec)
02.09 16:15:03 DB: SELECT * FROM EffectAttributeTypes
02.09 16:15:03 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 DB: SELECT * FROM Effects
02.09 16:15:03 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
02.09 16:15:03 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
02.09 16:15:03 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 DB: SELECT * FROM Badges
02.09 16:15:03 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
02.09 16:15:03 -<<-: core/server.query ok
02.09 16:15:03 TIMER: Check auto-disconnect...
02.09 16:15:03 STATS: vdl.0 cache, locks:0
02.09 16:16:11 NET: Client (conid:13398124) connected to vdl.0 (clients:1)
02.09 16:16:12 NET: Client (name:null conid:13398124 TCP) disconnected from vdl.0 (clients:0)
02.09 16:16:13 NET: Client (conid:38086717) connected to vdl.0 (clients:1)
02.09 16:16:15 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
02.09 16:16:15 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
02.09 16:16:15 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
02.09 16:16:15 -<<-: core/server.query ok
02.09 16:16:15 STATS: vdl.0 cache connection, 21 calls, total 0.0254325866699219 sec spent, avg 1.21 ms
02.09 16:16:15 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
02.09 16:16:15 -<<-: core/user.isOnlineID ok
02.09 16:16:15 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
02.09 16:16:16 -<<-: core/cache.get ok
02.09 16:16:16 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
02.09 16:16:16 -<<-: core/cache.get ok
02.09 16:16:16 NET: Client login (conid:38086717, id:2, name:test1)
02.09 16:16:16 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
02.09 16:16:16 -<<-: core/user.loginPost null
02.09 16:16:16 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
02.09 16:16:16 == NET: test1 ret: user.join { name => test1, type => user.join }
02.09 16:16:16 ++ NET: test1 req: battle.find { messageType => battle.find }
02.09 16:16:16 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 16:16:16 -<<-: vdl/cache.battle.find { list => {}, count => 0, errorCode => not, _type => vdl/cache.battle.find }
02.09 16:16:16 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
02.09 16:16:16 -<<-: vdl/cache.battle.create { room => 24, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 16:16:16 TIME: battle.find 43.79 ms
02.09 16:16:16 == NET: test1 ret: battle.find { room => 24, type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 16:16:23 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
02.09 16:16:23 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 16:17:03 TIMER: Check auto-disconnect...
02.09 16:17:03 STATS: vdl.0 cache, locks:2
02.09 16:17:07 NET: Client (name:test1 conid:38086717 TCP) disconnected from vdl.0 (clients:0)
02.09 16:17:07 DB: SELECT id FROM battle WHERE firstid=2OR secondid=2
02.09 16:17:07 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=2OR secondid=2, _type => core/server.query }
02.09 16:17:07 -<<-: core/server.query { list => {{ id => 24 }}, errorCode => ok, _type => core/server.query }
02.09 16:17:07 DB: SELECT firstid FROM battle WHERE id=24
02.09 16:17:07 ->>-: core/server.query { q => SELECT firstid FROM battle WHERE id=24, _type => core/server.query }
02.09 16:17:07 -<<-: core/server.query { list => {{ firstid => 2 }}, errorCode => ok, _type => core/server.query }
02.09 16:17:07 DB: SELECT secondid FROM battle WHERE id=24
02.09 16:17:07 ->>-: core/server.query { q => SELECT secondid FROM battle WHERE id=24, _type => core/server.query }
02.09 16:17:07 -<<-: core/server.query { list => {{ secondid => 0 }}, errorCode => ok, _type => core/server.query }
02.09 16:17:07 ->>-: core/user.sendTo { id => 0, _type => core/user.sendTo, msg => { type => battle.endGame } }
02.09 16:17:07 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
02.09 16:17:07 ->>-: vdl/cache.battle.deleteRoom { roomId => 24, _type => vdl/cache.battle.deleteRoom }
02.09 16:17:07 -<<-: vdl/cache.battle.deleteRoom { errorCode => true, _type => vdl/cache.battle.deleteRoom }
02.09 16:17:07 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
02.09 16:17:07 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
02.09 16:17:07 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
02.09 16:17:07 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 16:17:07 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
02.09 16:17:07 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
02.09 16:17:33 NET: Client (conid:64623238) connected to vdl.0 (clients:1)
02.09 16:17:51 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
02.09 16:17:51 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
02.09 16:17:51 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
02.09 16:17:51 -<<-: core/server.query { list => {{ name => test2, networkid => , isbanned => false, id => 3 }}, errorCode => ok, _type => core/server.query }
02.09 16:17:51 STATS: vdl.0 cache connection, 37 calls, total 0.125598192214966 sec spent, avg 3.39 ms
02.09 16:17:51 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
02.09 16:17:51 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
02.09 16:17:51 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
02.09 16:17:51 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test2, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472738532, lastLoginDate => 245, lastLoadDate => 902 }, effects => { list => [] } }}, version => 0, id => 3 } }
02.09 16:17:51 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
02.09 16:17:51 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 3 } }
02.09 16:17:51 NET: Client login (conid:64623238, id:3, name:test2)
02.09 16:17:51 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
02.09 16:17:51 -<<-: core/user.loginPost { _type => core/user.loginPost }
02.09 16:17:51 DB: SELECT ID FROM TempUserLogins WHERE UserID = 3 AND Date = 'today'::timestamp
02.09 16:17:51 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 3 AND Date = 'today'::timestamp, _type => core/server.query }
02.09 16:17:51 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
02.09 16:17:51 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (3, 'today'::timestamp)
02.09 16:17:51 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
02.09 16:17:51 == NET: test2 ret: user.join { name => test2, type => user.join }
02.09 16:17:52 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (3, 'today'::timestamp), _type => core/server.pending }} }
02.09 16:17:52 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
02.09 16:17:55 ++ NET: test2 req: battle.find { messageType => battle.find }
02.09 16:17:55 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 16:17:55 -<<-: vdl/cache.battle.find { list => {}, count => 0, errorCode => not, _type => vdl/cache.battle.find }
02.09 16:17:55 ->>-: vdl/cache.battle.create { selfId => 3, _type => vdl/cache.battle.create }
02.09 16:17:55 -<<-: vdl/cache.battle.create { room => 25, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 16:17:55 TIME: battle.find 18.34 ms
02.09 16:17:55 == NET: test2 ret: battle.find { room => 25, type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 16:17:58 ->>-: core/cache.update { diff => {language => en, params => { attrs => { lastLoginDate => 246, lastLoadDate => 903 } }}, type => user, unlock => false, id => 3, _type => core/cache.update }
02.09 16:17:58 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 16:18:03 TIMER: Check auto-disconnect...
02.09 16:18:03 STATS: vdl.0 cache, locks:2
02.09 16:18:38 NET: Client (name:test2 conid:64623238 TCP) disconnected from vdl.0 (clients:0)
02.09 16:18:38 DB: SELECT id FROM battle WHERE firstid=3OR secondid=3
02.09 16:18:38 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=3OR secondid=3, _type => core/server.query }
02.09 16:18:38 -<<-: core/server.query { list => {{ id => 25 }}, errorCode => ok, _type => core/server.query }
02.09 16:18:38 DB: SELECT firstid FROM battle WHERE id=25
02.09 16:18:38 ->>-: core/server.query { q => SELECT firstid FROM battle WHERE id=25, _type => core/server.query }
02.09 16:18:38 -<<-: core/server.query { list => {{ firstid => 3 }}, errorCode => ok, _type => core/server.query }
02.09 16:18:38 DB: SELECT secondid FROM battle WHERE id=25
02.09 16:18:38 ->>-: core/server.query { q => SELECT secondid FROM battle WHERE id=25, _type => core/server.query }
02.09 16:18:38 -<<-: core/server.query { list => {{ secondid => 0 }}, errorCode => ok, _type => core/server.query }
02.09 16:18:38 ->>-: core/user.sendTo { id => 0, _type => core/user.sendTo, msg => { type => battle.endGame } }
02.09 16:18:38 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
02.09 16:18:38 ->>-: vdl/cache.battle.deleteRoom { roomId => 25, _type => vdl/cache.battle.deleteRoom }
02.09 16:18:38 -<<-: vdl/cache.battle.deleteRoom { errorCode => true, _type => vdl/cache.battle.deleteRoom }
02.09 16:18:38 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 3, _type => core/cache.update }
02.09 16:18:38 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
02.09 16:18:38 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 3, _type => core/cache.update }
02.09 16:18:38 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 16:18:38 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 3, _type => core/user.logoutPost }
02.09 16:18:38 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
02.09 16:23:31 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 16:23:31 -<<-: server.login ok
02.09 16:23:31 DB: SELECT * FROM LocalizationStrings
02.09 16:23:31 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 TIMER: Starting timer...
02.09 16:23:31 TIMER: Timer running...
02.09 16:23:31 DB: SELECT * FROM GameVars
02.09 16:23:31 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 16:23:31 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 16:23:31 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 16:23:31 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 16:23:31 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 16:23:31 -<<-: core/quest.getDaily ok
02.09 16:23:31 DB: SELECT * FROM UserAttributeTypes
02.09 16:23:31 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 DB: SELECT * FROM UserVariableTypes
02.09 16:23:31 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 16:23:31 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 DB: SELECT * FROM ItemGroups
02.09 16:23:31 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 DB: SELECT * FROM Bundles ORDER BY ID
02.09 16:23:31 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 16:23:31 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 SHOP: loading items...
02.09 16:23:31 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 16:23:31 -<<-: core/shop.getList ok
02.09 16:23:31 SHOP: 0 items loaded (0 sec)
02.09 16:23:31 DB: SELECT * FROM EffectAttributeTypes
02.09 16:23:31 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 DB: SELECT * FROM Effects
02.09 16:23:31 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
02.09 16:23:31 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
02.09 16:23:31 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 DB: SELECT * FROM Badges
02.09 16:23:31 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
02.09 16:23:31 -<<-: core/server.query ok
02.09 16:23:31 TIMER: Check auto-disconnect...
02.09 16:23:31 STATS: vdl.0 cache, locks:0
02.09 16:23:31 TIMER: Check auto-disconnect...
02.09 16:23:31 STATS: vdl.0 cache, locks:0
02.09 16:23:31 TIMER: Check auto-disconnect...
02.09 16:23:31 STATS: vdl.0 cache, locks:0
02.09 16:26:35 NET: Client (conid:68734444) connected to vdl.0 (clients:1)
02.09 16:26:35 NET: Client (name:null conid:68734444 TCP) disconnected from vdl.0 (clients:0)
02.09 16:26:35 NET: Client (conid:33079229) connected to vdl.0 (clients:1)
02.09 16:26:45 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
02.09 16:26:45 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
02.09 16:26:45 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
02.09 16:26:45 -<<-: core/server.query ok
02.09 16:26:45 STATS: vdl.0 cache connection, 21 calls, total 0.0218758583068848 sec spent, avg 1.04 ms
02.09 16:26:45 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
02.09 16:26:45 -<<-: core/user.isOnlineID ok
02.09 16:26:45 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
02.09 16:26:45 -<<-: core/cache.get ok
02.09 16:26:45 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
02.09 16:26:45 -<<-: core/cache.get ok
02.09 16:26:45 NET: Client login (conid:33079229, id:2, name:test1)
02.09 16:26:45 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
02.09 16:26:45 -<<-: core/user.loginPost null
02.09 16:26:45 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
02.09 16:26:45 == NET: test1 ret: user.join { name => test1, type => user.join }
02.09 16:26:45 ++ NET: test1 req: battle.find { messageType => battle.find }
02.09 16:26:45 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 16:26:45 -<<-: vdl/cache.battle.find { list => {}, count => 0, errorCode => not, _type => vdl/cache.battle.find }
02.09 16:26:45 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
02.09 16:26:45 -<<-: vdl/cache.battle.create { room => 26, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 16:26:45 TIME: battle.find 43.08 ms
02.09 16:26:45 == NET: test1 ret: battle.find { room => 26, type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 16:26:51 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
02.09 16:26:51 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 16:27:07 NET: Client (conid:866566) connected to vdl.0 (clients:2)
02.09 16:27:19 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
02.09 16:27:19 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
02.09 16:27:19 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
02.09 16:27:19 -<<-: core/server.query { list => {{ name => test2, networkid => , isbanned => false, id => 3 }}, errorCode => ok, _type => core/server.query }
02.09 16:27:19 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
02.09 16:27:19 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
02.09 16:27:19 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
02.09 16:27:19 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test2, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472738532, lastLoginDate => 246, lastLoadDate => 903 }, effects => { list => [] } }}, version => 0, id => 3 } }
02.09 16:27:19 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
02.09 16:27:19 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 3 } }
02.09 16:27:19 NET: Client login (conid:866566, id:3, name:test2)
02.09 16:27:19 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
02.09 16:27:19 -<<-: core/user.loginPost { _type => core/user.loginPost }
02.09 16:27:19 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
02.09 16:27:19 == NET: test1 ret: user.join { name => test2, type => user.join }
02.09 16:27:19 == NET: test2 ret: user.join { name => test1, type => user.join }
02.09 16:27:19 == NET: test2 ret: user.join { name => test2, type => user.join }
02.09 16:27:20 ++ NET: test2 req: battle.find { messageType => battle.find }
02.09 16:27:20 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 16:27:20 -<<-: vdl/cache.battle.find { list => [{ id => 26, first => 2 }], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
02.09 16:27:20 ->>-: vdl/cache.battle.join { roomId => 26, selfId => 3, _type => vdl/cache.battle.join }
02.09 16:27:20 -<<-: vdl/cache.battle.join { room => 26, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 16:27:20 DB: SELECT name FROM users WHERE id=3
02.09 16:27:20 ->>-: core/server.query { q => SELECT name FROM users WHERE id=3, _type => core/server.query }
02.09 16:27:20 -<<-: core/server.query { list => {{ name => test2 }}, errorCode => ok, _type => core/server.query }
02.09 16:27:20 DB: SELECT name FROM users WHERE id=2
02.09 16:27:20 ->>-: core/server.query { q => SELECT name FROM users WHERE id=2, _type => core/server.query }
02.09 16:27:20 -<<-: core/server.query { list => {{ name => test1 }}, errorCode => ok, _type => core/server.query }
02.09 16:27:20 == NET: test2 ret: battle.enemy { name => test2, type => battle.enemy, enemy.id => 1, enemy.name => test1 }
02.09 16:27:20 TIME: battle.find 10.73 ms
02.09 16:27:20 == NET: test1 ret: null { name => test1, type => null, enemy.id => 2, enemy.name => test2 }
02.09 16:27:20 == NET: test2 ret: battle.find { room => 26, type => battle.find, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 16:27:26 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 3, _type => core/cache.update }
02.09 16:27:26 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 16:27:31 TIMER: Check auto-disconnect...
02.09 16:27:31 STATS: vdl.0 cache, locks:4
02.09 16:27:31 TIMER: Check auto-disconnect...
02.09 16:27:31 STATS: vdl.0 cache, locks:4
02.09 16:29:05 NET: Client (name:test2 conid:866566 TCP) disconnected from vdl.0 (clients:1)
02.09 16:29:05 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 3, _type => core/cache.update }
02.09 16:29:05 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
02.09 16:29:05 STATS: vdl.0 cache connection, 39 calls, total 0.0914168357849121 sec spent, avg 2.34 ms
02.09 16:29:05 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 3, _type => core/cache.update }
02.09 16:29:05 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 16:29:05 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 3, _type => core/user.logoutPost }
02.09 16:29:05 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
02.09 16:29:56 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 16:29:56 -<<-: server.login ok
02.09 16:29:56 DB: SELECT * FROM LocalizationStrings
02.09 16:29:56 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 TIMER: Starting timer...
02.09 16:29:56 TIMER: Timer running...
02.09 16:29:56 DB: SELECT * FROM GameVars
02.09 16:29:56 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 16:29:56 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 16:29:56 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 16:29:56 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 16:29:56 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 16:29:56 -<<-: core/quest.getDaily ok
02.09 16:29:56 DB: SELECT * FROM UserAttributeTypes
02.09 16:29:56 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 DB: SELECT * FROM UserVariableTypes
02.09 16:29:56 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 16:29:56 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 DB: SELECT * FROM ItemGroups
02.09 16:29:56 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 DB: SELECT * FROM Bundles ORDER BY ID
02.09 16:29:56 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 16:29:56 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 SHOP: loading items...
02.09 16:29:56 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 16:29:56 -<<-: core/shop.getList ok
02.09 16:29:56 SHOP: 0 items loaded (0 sec)
02.09 16:29:56 DB: SELECT * FROM EffectAttributeTypes
02.09 16:29:56 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 DB: SELECT * FROM Effects
02.09 16:29:56 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
02.09 16:29:56 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
02.09 16:29:56 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 DB: SELECT * FROM Badges
02.09 16:29:56 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
02.09 16:29:56 -<<-: core/server.query ok
02.09 16:29:56 TIMER: Check auto-disconnect...
02.09 16:29:56 STATS: vdl.0 cache, locks:0
02.09 16:29:56 TIMER: Check auto-disconnect...
02.09 16:29:56 STATS: vdl.0 cache, locks:0
02.09 16:29:56 TIMER: Check auto-disconnect...
02.09 16:29:56 STATS: vdl.0 cache, locks:0
02.09 16:29:56 TIMER: Check auto-disconnect...
02.09 16:29:56 STATS: vdl.0 cache, locks:0
02.09 16:29:56 TIMER: Check auto-disconnect...
02.09 16:29:56 STATS: vdl.0 cache, locks:0
02.09 16:29:56 TIMER: Check auto-disconnect...
02.09 16:29:56 STATS: vdl.0 cache, locks:0
02.09 16:29:56 TIMER: Check auto-disconnect...
02.09 16:29:56 STATS: vdl.0 cache, locks:0
02.09 16:29:56 TIMER: Check auto-disconnect...
02.09 16:29:56 STATS: vdl.0 cache, locks:0
02.09 16:29:56 TIMER: Check auto-disconnect...
02.09 16:29:56 STATS: vdl.0 cache, locks:0
02.09 16:29:56 TIMER: Check auto-disconnect...
02.09 16:29:56 STATS: vdl.0 cache, locks:0
02.09 16:29:56 TIMER: Check auto-disconnect...
02.09 16:29:56 STATS: vdl.0 cache, locks:0
02.09 16:29:56 TIMER: Check auto-disconnect...
02.09 16:29:56 STATS: vdl.0 cache, locks:0
02.09 16:29:56 TIMER: Check auto-disconnect...
02.09 16:29:56 STATS: vdl.0 cache, locks:0
02.09 16:29:56 TIMER: Check auto-disconnect...
02.09 16:29:56 STATS: vdl.0 cache, locks:0
02.09 16:29:56 TIMER: Check auto-disconnect...
02.09 16:29:56 STATS: vdl.0 cache, locks:0
02.09 16:29:56 TIMER: Check auto-disconnect...
02.09 16:29:56 STATS: vdl.0 cache, locks:0
02.09 16:46:22 NET: Client (conid:71197975) connected to vdl.0 (clients:1)
02.09 16:46:23 NET: Client (name:null conid:71197975 TCP) disconnected from vdl.0 (clients:0)
02.09 16:46:23 NET: Client (conid:64837702) connected to vdl.0 (clients:1)
02.09 16:52:10 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 16:52:10 -<<-: server.login ok
02.09 16:52:10 DB: SELECT * FROM LocalizationStrings
02.09 16:52:10 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 TIMER: Starting timer...
02.09 16:52:10 TIMER: Timer running...
02.09 16:52:10 DB: SELECT * FROM GameVars
02.09 16:52:10 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 16:52:10 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 16:52:10 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 16:52:10 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 16:52:10 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 16:52:10 -<<-: core/quest.getDaily ok
02.09 16:52:10 DB: SELECT * FROM UserAttributeTypes
02.09 16:52:10 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 DB: SELECT * FROM UserVariableTypes
02.09 16:52:10 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 16:52:10 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 DB: SELECT * FROM ItemGroups
02.09 16:52:10 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 DB: SELECT * FROM Bundles ORDER BY ID
02.09 16:52:10 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 16:52:10 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 SHOP: loading items...
02.09 16:52:10 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 16:52:10 -<<-: core/shop.getList ok
02.09 16:52:10 SHOP: 0 items loaded (0 sec)
02.09 16:52:10 DB: SELECT * FROM EffectAttributeTypes
02.09 16:52:10 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 DB: SELECT * FROM Effects
02.09 16:52:10 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
02.09 16:52:10 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
02.09 16:52:10 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 DB: SELECT * FROM Badges
02.09 16:52:10 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
02.09 16:52:10 -<<-: core/server.query ok
02.09 16:52:10 TIMER: Check auto-disconnect...
02.09 16:52:10 STATS: vdl.0 cache, locks:0
02.09 16:52:10 TIMER: Check auto-disconnect...
02.09 16:52:10 STATS: vdl.0 cache, locks:0
02.09 16:55:03 NET: Client (conid:6234333) connected to vdl.0 (clients:1)
02.09 16:55:03 NET: Client (name:null conid:6234333 TCP) disconnected from vdl.0 (clients:0)
02.09 16:55:03 NET: Client (conid:42086028) connected to vdl.0 (clients:1)
02.09 16:55:10 TIMER: Check auto-disconnect...
02.09 16:55:10 STATS: vdl.0 cache, locks:0
02.09 16:55:15 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
02.09 16:55:15 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
02.09 16:55:15 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
02.09 16:55:15 -<<-: core/server.query ok
02.09 16:55:15 STATS: vdl.0 cache connection, 21 calls, total 0.0496718883514404 sec spent, avg 2.37 ms
02.09 16:55:15 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
02.09 16:55:15 -<<-: core/user.isOnlineID ok
02.09 16:55:15 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
02.09 16:55:15 -<<-: core/cache.get ok
02.09 16:55:15 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
02.09 16:55:15 -<<-: core/cache.get ok
02.09 16:55:15 NET: Client login (conid:42086028, id:3, name:test2)
02.09 16:55:15 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
02.09 16:55:15 -<<-: core/user.loginPost null
02.09 16:55:15 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
02.09 16:55:15 == NET: test2 ret: user.join { name => test2, type => user.join }
02.09 16:55:16 ++ NET: test2 req: battle.find { messageType => battle.find }
02.09 16:55:16 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 16:55:16 -<<-: vdl/cache.battle.find { list => {}, count => 0, errorCode => not, _type => vdl/cache.battle.find }
02.09 16:55:16 ->>-: vdl/cache.battle.create { selfId => 3, _type => vdl/cache.battle.create }
02.09 16:55:16 -<<-: vdl/cache.battle.create { room => 27, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 16:55:16 TIME: battle.find 33.02 ms
02.09 16:55:16 == NET: test2 ret: battle.find { room => 27, type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 16:55:25 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 3, _type => core/cache.update }
02.09 16:55:25 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 16:56:10 TIMER: Check auto-disconnect...
02.09 16:56:10 STATS: vdl.0 cache, locks:2
02.09 16:57:03 NET: Client (conid:71649335) connected to vdl.0 (clients:2)
02.09 16:57:04 NET: Client (name:null conid:71649335 TCP) disconnected from vdl.0 (clients:1)
02.09 16:57:04 NET: Client (conid:14989275) connected to vdl.0 (clients:2)
02.09 16:57:10 TIMER: Check auto-disconnect...
02.09 16:57:10 STATS: vdl.0 cache, locks:2
02.09 16:57:12 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
02.09 16:57:12 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
02.09 16:57:12 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
02.09 16:57:12 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
02.09 16:57:12 STATS: vdl.0 cache connection, 29 calls, total 0.1004958152771 sec spent, avg 3.47 ms
02.09 16:57:12 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
02.09 16:57:12 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
02.09 16:57:12 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
02.09 16:57:12 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472741968, lastLoginDate => 246, lastLoadDate => 903 }, effects => { list => [] } }}, version => 0, id => 2 } }
02.09 16:57:12 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
02.09 16:57:12 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
02.09 16:57:12 NET: Client login (conid:14989275, id:2, name:test1)
02.09 16:57:12 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
02.09 16:57:12 -<<-: core/user.loginPost { _type => core/user.loginPost }
02.09 16:57:12 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
02.09 16:57:12 == NET: test1 ret: user.join { name => test2, type => user.join }
02.09 16:57:12 == NET: test1 ret: user.join { name => test1, type => user.join }
02.09 16:57:12 == NET: test2 ret: user.join { name => test1, type => user.join }
02.09 16:57:12 ++ NET: test1 req: battle.find { messageType => battle.find }
02.09 16:57:12 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 16:57:12 -<<-: vdl/cache.battle.find { list => [{ id => 27, first => 3 }], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
02.09 16:57:12 ->>-: vdl/cache.battle.join { roomId => 27, selfId => 2, _type => vdl/cache.battle.join }
02.09 16:57:12 -<<-: vdl/cache.battle.join { room => 27, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 16:57:12 DB: SELECT name FROM users WHERE id=2
02.09 16:57:12 ->>-: core/server.query { q => SELECT name FROM users WHERE id=2, _type => core/server.query }
02.09 16:57:12 -<<-: core/server.query { list => {{ name => test1 }}, errorCode => ok, _type => core/server.query }
02.09 16:57:12 DB: SELECT name FROM users WHERE id=3
02.09 16:57:12 ->>-: core/server.query { q => SELECT name FROM users WHERE id=3, _type => core/server.query }
02.09 16:57:12 -<<-: core/server.query { list => {{ name => test2 }}, errorCode => ok, _type => core/server.query }
02.09 16:57:12 TIME: battle.find 4.61 ms
02.09 16:57:12 == NET: test1 ret: battle.enemy { name => test1, type => battle.enemy, enemy.id => 1, enemy.name => test2 }
02.09 16:57:12 == NET: test2 ret: battle.enemy { name => test2, type => battle.enemy, enemy.id => 2, enemy.name => test1 }
02.09 16:57:12 == NET: test1 ret: battle.find { room => 27, type => battle.find, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 16:57:20 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
02.09 16:57:20 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 16:57:43 ++ NET: test2 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 27, name => throw, side => 2, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 16:57:43 TIME: battle.sendtask 0.04 ms
02.09 16:59:37 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 16:59:37 -<<-: server.login ok
02.09 16:59:37 DB: SELECT * FROM LocalizationStrings
02.09 16:59:37 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 TIMER: Starting timer...
02.09 16:59:37 TIMER: Timer running...
02.09 16:59:37 DB: SELECT * FROM GameVars
02.09 16:59:37 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 16:59:37 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 16:59:37 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 16:59:37 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 16:59:37 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 16:59:37 -<<-: core/quest.getDaily ok
02.09 16:59:37 DB: SELECT * FROM UserAttributeTypes
02.09 16:59:37 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 DB: SELECT * FROM UserVariableTypes
02.09 16:59:37 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 16:59:37 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 DB: SELECT * FROM ItemGroups
02.09 16:59:37 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 DB: SELECT * FROM Bundles ORDER BY ID
02.09 16:59:37 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 16:59:37 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 SHOP: loading items...
02.09 16:59:37 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 16:59:37 -<<-: core/shop.getList ok
02.09 16:59:37 SHOP: 0 items loaded (0 sec)
02.09 16:59:37 DB: SELECT * FROM EffectAttributeTypes
02.09 16:59:37 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 DB: SELECT * FROM Effects
02.09 16:59:37 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
02.09 16:59:37 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
02.09 16:59:37 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 DB: SELECT * FROM Badges
02.09 16:59:37 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
02.09 16:59:37 -<<-: core/server.query ok
02.09 16:59:37 TIMER: Check auto-disconnect...
02.09 16:59:37 STATS: vdl.0 cache, locks:0
