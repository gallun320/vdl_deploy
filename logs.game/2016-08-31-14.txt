31.08 14:04:03 STATS: vdl.0 cache, locks:0
31.08 14:05:02 TIMER: Check auto-disconnect...
31.08 14:05:03 STATS: vdl.0 cache, locks:0
31.08 14:06:02 TIMER: Check auto-disconnect...
31.08 14:06:03 STATS: vdl.0 cache, locks:0
31.08 14:07:02 TIMER: Check auto-disconnect...
31.08 14:07:03 STATS: vdl.0 cache, locks:0
31.08 14:08:02 TIMER: Check auto-disconnect...
31.08 14:08:03 STATS: vdl.0 cache, locks:0
31.08 14:09:02 TIMER: Check auto-disconnect...
31.08 14:09:03 STATS: vdl.0 cache, locks:0
31.08 14:10:02 TIMER: Check auto-disconnect...
31.08 14:10:03 STATS: vdl.0 cache, locks:0
31.08 14:11:02 TIMER: Check auto-disconnect...
31.08 14:11:03 STATS: vdl.0 cache, locks:0
31.08 14:12:02 TIMER: Check auto-disconnect...
31.08 14:12:03 STATS: vdl.0 cache, locks:0
31.08 14:13:02 TIMER: Check auto-disconnect...
31.08 14:13:03 STATS: vdl.0 cache, locks:0
31.08 14:14:02 TIMER: Check auto-disconnect...
31.08 14:14:03 STATS: vdl.0 cache, locks:0
31.08 14:15:02 TIMER: Check auto-disconnect...
31.08 14:15:03 STATS: vdl.0 cache, locks:0
31.08 14:16:02 TIMER: Check auto-disconnect...
31.08 14:16:03 STATS: vdl.0 cache, locks:0
31.08 14:17:02 TIMER: Check auto-disconnect...
31.08 14:17:03 STATS: vdl.0 cache, locks:0
31.08 14:18:02 TIMER: Check auto-disconnect...
31.08 14:18:03 STATS: vdl.0 cache, locks:0
31.08 14:19:02 TIMER: Check auto-disconnect...
31.08 14:19:03 STATS: vdl.0 cache, locks:0
31.08 14:19:16 NET: Client (conid:44379968) connected to vdl.0 (clients:1)
31.08 14:19:19 ++ NET: null req: user.login { password => , name => , messageType => user.login }
31.08 14:19:19 ++ NET: null req: battle.find { messageType => battle.find }
31.08 14:19:19 TRACE: User not logon yet.
31.08 14:19:39 NET: Client (name:null conid:44379968 TCP) disconnected from vdl.0 (clients:0)
31.08 14:19:42 NET: Client (conid:41323025) connected to vdl.0 (clients:1)
31.08 14:19:53 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 14:19:53 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 14:19:53 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 14:19:53 -<<-: core/server.query ok
31.08 14:19:53 STATS: vdl.0 cache connection, 21 calls, total 0.205659866333008 sec spent, avg 9.79 ms
31.08 14:19:53 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 14:19:53 -<<-: core/user.isOnlineID ok
31.08 14:19:53 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 14:19:53 -<<-: core/cache.get ok
31.08 14:19:53 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 14:19:53 -<<-: core/cache.get ok
31.08 14:19:53 NET: Client login (conid:41323025, id:2, name:test1)
31.08 14:19:53 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 14:19:53 -<<-: core/user.loginPost null
31.08 14:19:53 DB: SELECT ID FROM TempUserLogins WHERE UserID = 2 AND Date = 'today'::timestamp
31.08 14:19:53 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 2 AND Date = 'today'::timestamp, _type => core/server.query }
31.08 14:19:53 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
31.08 14:19:53 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (2, 'today'::timestamp)
31.08 14:19:53 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 14:19:53 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (2, 'today'::timestamp), _type => core/server.pending }} }
31.08 14:19:53 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 14:19:53 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 14:19:53 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
31.08 14:19:53 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
31.08 14:19:54 -<<-: vdl/cache.battle.create { errorCode => _requestException, _type => vdl/cache.battle.create }
31.08 14:19:54 TRACE: battle.find : cacheRequest exception { selfId => 2, _type => vdl/cache.battle.create }
31.08 14:19:54 TRACE: battle.find : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 73
Called from modules/VDLBattleModule.hx line 47
Called from modules/VDLBattleModule.hx line 39
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
31.08 14:20:02 TIMER: Check auto-disconnect...
31.08 14:20:03 STATS: vdl.0 cache, locks:2
31.08 14:20:03 ->>-: core/cache.update { diff => {language => en, params => { attrs => { lastLoginDate => 244, lastLoadDate => 832 } }}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 14:20:03 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 14:21:02 TIMER: Check auto-disconnect...
31.08 14:21:03 STATS: vdl.0 cache, locks:2
31.08 14:22:02 TIMER: Check auto-disconnect...
31.08 14:22:03 STATS: vdl.0 cache, locks:2
31.08 14:22:40 NET: Client (name:test1 conid:41323025 TCP) disconnected from vdl.0 (clients:0)
31.08 14:22:40 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
31.08 14:22:40 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
31.08 14:22:40 STATS: vdl.0 cache connection, 30 calls, total 0.330477952957153 sec spent, avg 11.02 ms
31.08 14:22:40 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
31.08 14:22:40 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 14:22:40 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
31.08 14:22:40 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
31.08 14:22:43 NET: Client (conid:25253290) connected to vdl.0 (clients:1)
31.08 14:22:52 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 14:22:52 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 14:22:52 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 14:22:52 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
31.08 14:22:52 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 14:22:52 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
31.08 14:22:52 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 14:22:52 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472567681, lastLoginDate => 244, lastLoadDate => 832 }, effects => { list => [] } }}, version => 0, id => 2 } }
31.08 14:22:52 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 14:22:52 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
31.08 14:22:52 NET: Client login (conid:25253290, id:2, name:test1)
31.08 14:22:52 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 14:22:52 -<<-: core/user.loginPost { _type => core/user.loginPost }
31.08 14:22:52 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 14:22:52 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 14:22:52 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 14:22:52 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 14:22:52 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
31.08 14:22:52 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
31.08 14:22:52 -<<-: vdl/cache.battle.create { errorCode => _requestException, _type => vdl/cache.battle.create }
31.08 14:22:52 TRACE: battle.find : cacheRequest exception { selfId => 2, _type => vdl/cache.battle.create }
31.08 14:22:52 TRACE: battle.find : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 73
Called from modules/VDLBattleModule.hx line 47
Called from modules/VDLBattleModule.hx line 39
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
31.08 14:22:58 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 14:22:58 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 14:23:02 TIMER: Check auto-disconnect...
31.08 14:24:06 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 14:24:06 -<<-: server.login ok
31.08 14:24:06 DB: SELECT * FROM LocalizationStrings
31.08 14:24:06 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:06 TIMER: Starting timer...
31.08 14:24:06 TIMER: Timer running...
31.08 14:24:06 DB: SELECT * FROM GameVars
31.08 14:24:06 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:06 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 14:24:06 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:06 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 14:24:06 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:06 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 14:24:06 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:06 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 14:24:06 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:06 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 14:24:06 -<<-: core/quest.getDaily ok
31.08 14:24:06 DB: SELECT * FROM UserAttributeTypes
31.08 14:24:06 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:06 DB: SELECT * FROM UserVariableTypes
31.08 14:24:06 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:06 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 14:24:06 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:06 DB: SELECT * FROM ItemGroups
31.08 14:24:06 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:06 DB: SELECT * FROM Bundles ORDER BY ID
31.08 14:24:06 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:06 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 14:24:06 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:06 SHOP: loading items...
31.08 14:24:06 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 14:24:06 -<<-: core/shop.getList ok
31.08 14:24:06 SHOP: 0 items loaded (0 sec)
31.08 14:24:06 DB: SELECT * FROM EffectAttributeTypes
31.08 14:24:06 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:06 DB: SELECT * FROM Effects
31.08 14:24:06 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:06 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 14:24:06 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:06 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 14:24:06 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:06 DB: SELECT * FROM Badges
31.08 14:24:06 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 14:24:06 -<<-: core/server.query ok
31.08 14:24:48 NET: Client (conid:35822200) connected to vdl.0 (clients:1)
31.08 14:24:55 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 14:24:55 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 14:24:55 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 14:24:55 -<<-: core/server.query ok
31.08 14:24:55 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 14:24:55 -<<-: core/user.isOnlineID ok
31.08 14:24:55 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 14:24:55 -<<-: core/cache.get ok
31.08 14:24:55 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 14:24:55 -<<-: core/cache.get ok
31.08 14:24:55 NET: Client login (conid:35822200, id:2, name:test1)
31.08 14:24:55 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 14:24:55 -<<-: core/user.loginPost null
31.08 14:24:55 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 14:24:55 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 14:24:55 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 14:24:55 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 14:24:55 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
31.08 14:24:55 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
31.08 14:24:55 -<<-: vdl/cache.battle.create { errorCode => _requestException, _type => vdl/cache.battle.create }
31.08 14:24:55 TRACE: battle.find : cacheRequest exception { selfId => 2, _type => vdl/cache.battle.create }
31.08 14:24:55 TRACE: battle.find : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 73
Called from modules/VDLBattleModule.hx line 47
Called from modules/VDLBattleModule.hx line 39
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
31.08 14:25:01 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 14:25:01 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 14:27:11 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 14:27:11 -<<-: server.login ok
31.08 14:27:11 DB: SELECT * FROM LocalizationStrings
31.08 14:27:11 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:11 TIMER: Starting timer...
31.08 14:27:11 TIMER: Timer running...
31.08 14:27:11 DB: SELECT * FROM GameVars
31.08 14:27:11 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:11 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 14:27:11 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:11 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 14:27:11 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:11 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 14:27:11 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:11 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 14:27:11 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:11 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 14:27:11 -<<-: core/quest.getDaily ok
31.08 14:27:11 DB: SELECT * FROM UserAttributeTypes
31.08 14:27:11 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:11 DB: SELECT * FROM UserVariableTypes
31.08 14:27:11 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:11 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 14:27:11 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:11 DB: SELECT * FROM ItemGroups
31.08 14:27:11 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:11 DB: SELECT * FROM Bundles ORDER BY ID
31.08 14:27:11 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:11 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 14:27:11 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:11 SHOP: loading items...
31.08 14:27:11 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 14:27:11 -<<-: core/shop.getList ok
31.08 14:27:11 SHOP: 0 items loaded (0 sec)
31.08 14:27:11 DB: SELECT * FROM EffectAttributeTypes
31.08 14:27:11 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:11 DB: SELECT * FROM Effects
31.08 14:27:11 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:11 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 14:27:11 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:11 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 14:27:11 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:11 DB: SELECT * FROM Badges
31.08 14:27:11 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 14:27:11 -<<-: core/server.query ok
31.08 14:27:30 NET: Client (conid:41635821) connected to vdl.0 (clients:1)
31.08 14:27:38 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 14:27:38 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 14:27:38 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 14:27:38 -<<-: core/server.query ok
31.08 14:27:38 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 14:27:38 -<<-: core/user.isOnlineID ok
31.08 14:27:38 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 14:27:38 -<<-: core/cache.get ok
31.08 14:27:38 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 14:27:38 -<<-: core/cache.get ok
31.08 14:27:38 NET: Client login (conid:41635821, id:2, name:test1)
31.08 14:27:38 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 14:27:38 -<<-: core/user.loginPost null
31.08 14:27:38 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 14:27:38 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 14:27:38 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 14:27:38 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 14:27:38 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
31.08 14:27:38 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
31.08 14:27:38 -<<-: vdl/cache.battle.create { errorCode => _requestException, _type => vdl/cache.battle.create }
31.08 14:27:38 TRACE: battle.find : cacheRequest exception { selfId => 2, _type => vdl/cache.battle.create }
31.08 14:27:38 TRACE: battle.find : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 73
Called from modules/VDLBattleModule.hx line 47
Called from modules/VDLBattleModule.hx line 39
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
31.08 14:27:46 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 14:27:46 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 14:30:21 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 14:30:21 -<<-: server.login ok
31.08 14:30:21 DB: SELECT * FROM LocalizationStrings
31.08 14:30:21 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:21 TIMER: Starting timer...
31.08 14:30:21 TIMER: Timer running...
31.08 14:30:21 DB: SELECT * FROM GameVars
31.08 14:30:21 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:21 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 14:30:21 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:21 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 14:30:21 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:21 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 14:30:21 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:21 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 14:30:21 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:21 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 14:30:21 -<<-: core/quest.getDaily ok
31.08 14:30:21 DB: SELECT * FROM UserAttributeTypes
31.08 14:30:21 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:21 DB: SELECT * FROM UserVariableTypes
31.08 14:30:21 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:21 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 14:30:21 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:21 DB: SELECT * FROM ItemGroups
31.08 14:30:21 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:21 DB: SELECT * FROM Bundles ORDER BY ID
31.08 14:30:21 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:21 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 14:30:21 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:21 SHOP: loading items...
31.08 14:30:21 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 14:30:21 -<<-: core/shop.getList ok
31.08 14:30:21 SHOP: 0 items loaded (0 sec)
31.08 14:30:21 DB: SELECT * FROM EffectAttributeTypes
31.08 14:30:21 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:21 DB: SELECT * FROM Effects
31.08 14:30:21 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:21 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 14:30:21 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:21 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 14:30:21 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:21 DB: SELECT * FROM Badges
31.08 14:30:21 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 14:30:21 -<<-: core/server.query ok
31.08 14:30:51 NET: Client (conid:60832335) connected to vdl.0 (clients:1)
31.08 14:30:59 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 14:30:59 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 14:30:59 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 14:30:59 -<<-: core/server.query ok
31.08 14:30:59 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 14:30:59 -<<-: core/user.isOnlineID ok
31.08 14:30:59 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 14:30:59 -<<-: core/cache.get ok
31.08 14:30:59 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 14:30:59 -<<-: core/cache.get ok
31.08 14:30:59 NET: Client login (conid:60832335, id:2, name:test1)
31.08 14:30:59 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 14:30:59 -<<-: core/user.loginPost null
31.08 14:30:59 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 14:30:59 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 14:30:59 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 14:30:59 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 14:30:59 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
31.08 14:30:59 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
31.08 14:30:59 -<<-: vdl/cache.battle.create { errorCode => _requestException, _type => vdl/cache.battle.create }
31.08 14:30:59 TRACE: battle.find : cacheRequest exception { selfId => 2, _type => vdl/cache.battle.create }
31.08 14:30:59 TRACE: battle.find : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 73
Called from modules/VDLBattleModule.hx line 47
Called from modules/VDLBattleModule.hx line 39
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
31.08 14:31:06 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 14:31:06 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 14:36:09 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 14:36:09 -<<-: server.login ok
31.08 14:36:09 DB: SELECT * FROM LocalizationStrings
31.08 14:36:09 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 TIMER: Starting timer...
31.08 14:36:09 TIMER: Timer running...
31.08 14:36:09 DB: SELECT * FROM GameVars
31.08 14:36:09 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 14:36:09 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 14:36:09 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 14:36:09 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 14:36:09 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 14:36:09 -<<-: core/quest.getDaily ok
31.08 14:36:09 DB: SELECT * FROM UserAttributeTypes
31.08 14:36:09 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 DB: SELECT * FROM UserVariableTypes
31.08 14:36:09 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 14:36:09 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 DB: SELECT * FROM ItemGroups
31.08 14:36:09 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 DB: SELECT * FROM Bundles ORDER BY ID
31.08 14:36:09 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 14:36:09 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 SHOP: loading items...
31.08 14:36:09 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 14:36:09 -<<-: core/shop.getList ok
31.08 14:36:09 SHOP: 0 items loaded (0 sec)
31.08 14:36:09 DB: SELECT * FROM EffectAttributeTypes
31.08 14:36:09 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 DB: SELECT * FROM Effects
31.08 14:36:09 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 14:36:09 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 14:36:09 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 DB: SELECT * FROM Badges
31.08 14:36:09 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 14:36:09 -<<-: core/server.query ok
31.08 14:36:09 TIMER: Check auto-disconnect...
31.08 14:36:09 STATS: vdl.0 cache, locks:0
31.08 14:36:09 TIMER: Check auto-disconnect...
31.08 14:36:09 STATS: vdl.0 cache, locks:0
31.08 14:38:35 NET: Client (conid:42611507) connected to vdl.0 (clients:1)
31.08 14:38:41 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 14:38:41 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 14:38:41 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 14:38:41 -<<-: core/server.query ok
31.08 14:38:41 STATS: vdl.0 cache connection, 21 calls, total 0.0205199718475342 sec spent, avg 0.98 ms
31.08 14:38:41 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 14:38:41 -<<-: core/user.isOnlineID ok
31.08 14:38:41 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 14:38:41 -<<-: core/cache.get ok
31.08 14:38:41 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 14:38:41 -<<-: core/cache.get ok
31.08 14:38:41 NET: Client login (conid:42611507, id:2, name:test1)
31.08 14:38:41 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 14:38:41 -<<-: core/user.loginPost null
31.08 14:38:41 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 14:38:41 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 14:38:41 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 14:38:41 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 14:38:41 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
31.08 14:38:41 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
31.08 14:38:41 -<<-: vdl/cache.battle.create { errorCode => ok, _type => vdl/cache.battle.create }
31.08 14:38:41 TIME: battle.find 59.51 ms
31.08 14:38:41 == NET: test1 ret: battle.find { type => battle.find, errorCode => ok, _type => vdl/cache.battle.create }
31.08 14:38:49 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 14:38:49 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 14:39:09 TIMER: Check auto-disconnect...
31.08 14:39:09 STATS: vdl.0 cache, locks:2
31.08 14:39:09 TIMER: Check auto-disconnect...
31.08 14:39:09 STATS: vdl.0 cache, locks:2
31.08 14:40:43 NET: Client (name:test1 conid:42611507 TCP) disconnected from vdl.0 (clients:0)
31.08 14:40:43 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
31.08 14:40:43 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
31.08 14:40:43 STATS: vdl.0 cache connection, 29 calls, total 0.0861613750457764 sec spent, avg 2.97 ms
31.08 14:40:43 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
31.08 14:40:43 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 14:40:43 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
31.08 14:40:43 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
31.08 14:41:09 TIMER: Check auto-disconnect...
31.08 14:41:10 STATS: vdl.0 cache, locks:0
31.08 14:42:09 TIMER: Check auto-disconnect...
31.08 14:42:10 STATS: vdl.0 cache, locks:0
31.08 14:43:09 TIMER: Check auto-disconnect...
31.08 14:43:10 STATS: vdl.0 cache, locks:0
31.08 14:44:09 TIMER: Check auto-disconnect...
31.08 14:44:10 STATS: vdl.0 cache, locks:0
31.08 14:45:09 TIMER: Check auto-disconnect...
31.08 14:45:11 STATS: vdl.0 cache, locks:0
31.08 14:46:09 TIMER: Check auto-disconnect...
31.08 14:46:11 STATS: vdl.0 cache, locks:0
31.08 14:47:09 TIMER: Check auto-disconnect...
31.08 14:47:11 STATS: vdl.0 cache, locks:0
31.08 14:48:09 TIMER: Check auto-disconnect...
31.08 14:48:11 STATS: vdl.0 cache, locks:0
31.08 14:49:09 TIMER: Check auto-disconnect...
31.08 14:49:11 STATS: vdl.0 cache, locks:0
31.08 14:50:09 TIMER: Check auto-disconnect...
31.08 14:50:11 STATS: vdl.0 cache, locks:0
31.08 14:51:09 TIMER: Check auto-disconnect...
31.08 14:51:11 STATS: vdl.0 cache, locks:0
31.08 14:52:09 TIMER: Check auto-disconnect...
31.08 14:52:11 STATS: vdl.0 cache, locks:0
31.08 14:53:09 TIMER: Check auto-disconnect...
31.08 14:53:11 STATS: vdl.0 cache, locks:0
31.08 14:54:09 TIMER: Check auto-disconnect...
31.08 14:54:11 STATS: vdl.0 cache, locks:0
31.08 14:55:09 TIMER: Check auto-disconnect...
31.08 14:55:11 STATS: vdl.0 cache, locks:0
31.08 14:56:09 TIMER: Check auto-disconnect...
31.08 14:56:11 STATS: vdl.0 cache, locks:0
31.08 14:57:09 TIMER: Check auto-disconnect...
31.08 14:57:11 STATS: vdl.0 cache, locks:0
31.08 14:58:09 TIMER: Check auto-disconnect...
31.08 14:58:11 STATS: vdl.0 cache, locks:0
31.08 14:59:39 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 14:59:39 -<<-: server.login ok
31.08 14:59:39 DB: SELECT * FROM LocalizationStrings
31.08 14:59:39 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 14:59:39 -<<-: core/server.query ok
31.08 14:59:39 TIMER: Starting timer...
31.08 14:59:39 TIMER: Timer running...
31.08 14:59:39 DB: SELECT * FROM GameVars
31.08 14:59:39 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 14:59:39 -<<-: core/server.query ok
31.08 14:59:39 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 14:59:39 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 14:59:39 -<<-: core/server.query ok
31.08 14:59:39 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 14:59:39 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 14:59:39 -<<-: core/server.query ok
31.08 14:59:39 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 14:59:39 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 14:59:39 -<<-: core/server.query ok
31.08 14:59:39 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 14:59:39 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 14:59:39 -<<-: core/server.query ok
31.08 14:59:39 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 14:59:39 -<<-: core/quest.getDaily ok
31.08 14:59:39 DB: SELECT * FROM UserAttributeTypes
31.08 14:59:39 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 14:59:39 -<<-: core/server.query ok
31.08 14:59:39 DB: SELECT * FROM UserVariableTypes
31.08 14:59:39 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 14:59:39 -<<-: core/server.query ok
31.08 14:59:39 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 14:59:39 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 14:59:39 -<<-: core/server.query ok
31.08 14:59:39 DB: SELECT * FROM ItemGroups
31.08 14:59:39 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 14:59:39 -<<-: core/server.query ok
31.08 14:59:39 DB: SELECT * FROM Bundles ORDER BY ID
31.08 14:59:39 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 14:59:39 -<<-: core/server.query ok
31.08 14:59:39 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 14:59:39 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 14:59:39 -<<-: core/server.query ok
31.08 14:59:39 SHOP: loading items...
31.08 14:59:39 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 14:59:39 -<<-: core/shop.getList ok
31.08 14:59:39 SHOP: 0 items loaded (0 sec)
31.08 14:59:39 DB: SELECT * FROM EffectAttributeTypes
31.08 14:59:39 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 14:59:39 -<<-: core/server.query ok
31.08 14:59:39 DB: SELECT * FROM Effects
31.08 14:59:39 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 14:59:39 -<<-: core/server.query ok
31.08 14:59:39 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(