21.10 15:05:22 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
21.10 15:05:22 -<<-: server.login ok
21.10 15:05:22 DB: SELECT * FROM LocalizationStrings
21.10 15:05:22 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
21.10 15:05:22 -<<-: core/server.query ok
21.10 15:05:22 TIMER: Starting timer...
21.10 15:05:22 TIMER: Timer running...
21.10 15:05:22 DB: SELECT * FROM GameVars
21.10 15:05:22 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
21.10 15:05:22 -<<-: core/server.query ok
21.10 15:05:22 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
21.10 15:05:22 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
21.10 15:05:22 -<<-: core/server.query ok
21.10 15:05:22 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
21.10 15:05:22 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
21.10 15:05:22 -<<-: core/server.query ok
21.10 15:05:22 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
21.10 15:05:22 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
21.10 15:05:22 -<<-: core/server.query ok
21.10 15:05:22 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
21.10 15:05:22 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
21.10 15:05:22 -<<-: core/server.query ok
21.10 15:05:22 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
21.10 15:05:22 -<<-: core/quest.getDaily ok
21.10 15:05:22 DB: SELECT * FROM UserAttributeTypes
21.10 15:05:22 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
21.10 15:05:22 -<<-: core/server.query ok
21.10 15:05:22 DB: SELECT * FROM UserVariableTypes
21.10 15:05:22 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
21.10 15:05:22 -<<-: core/server.query ok
21.10 15:05:22 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
21.10 15:05:22 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
21.10 15:05:22 -<<-: core/server.query ok
21.10 15:05:22 DB: SELECT * FROM ItemGroups
21.10 15:05:22 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
21.10 15:05:22 -<<-: core/server.query ok
21.10 15:05:22 DB: SELECT * FROM Bundles ORDER BY ID
21.10 15:05:22 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
21.10 15:05:22 -<<-: core/server.query ok
21.10 15:05:22 DB: SELECT * FROM BundleItems ORDER BY ID
21.10 15:05:22 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
21.10 15:05:22 -<<-: core/server.query ok
21.10 15:05:22 SHOP: loading items...
21.10 15:05:22 ->>-: core/shop.getList { _type => core/shop.getList }
21.10 15:05:22 -<<-: core/shop.getList ok
21.10 15:05:22 SHOP: 0 items loaded (0 sec)
21.10 15:05:22 DB: SELECT * FROM EffectAttributeTypes
21.10 15:05:22 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
21.10 15:05:22 -<<-: core/server.query ok
21.10 15:05:22 DB: SELECT * FROM Effects
21.10 15:05:22 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
21.10 15:05:22 -<<-: core/server.query ok
21.10 15:05:22 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(21.10 15:15:33 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
21.10 15:15:33 -<<-: server.login ok
21.10 15:15:33 DB: SELECT * FROM LocalizationStrings
21.10 15:15:33 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
21.10 15:15:33 -<<-: core/server.query ok
21.10 15:15:33 TIMER: Starting timer...
21.10 15:15:33 TIMER: Timer running...
21.10 15:15:33 DB: SELECT * FROM GameVars
21.10 15:15:33 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
21.10 15:15:33 -<<-: core/server.query ok
21.10 15:15:33 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
21.10 15:15:33 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
21.10 15:15:33 -<<-: core/server.query ok
21.10 15:15:33 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
21.10 15:15:33 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
21.10 15:15:33 -<<-: core/server.query ok
21.10 15:15:33 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
21.10 15:15:33 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
21.10 15:15:33 -<<-: core/server.query ok
21.10 15:15:33 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
21.10 15:15:33 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
21.10 15:15:33 -<<-: core/server.query ok
21.10 15:15:33 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
21.10 15:15:33 -<<-: core/quest.getDaily ok
21.10 15:15:33 DB: SELECT * FROM UserAttributeTypes
21.10 15:15:33 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
21.10 15:15:33 -<<-: core/server.query ok
21.10 15:15:33 DB: SELECT * FROM UserVariableTypes
21.10 15:15:33 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
21.10 15:15:33 -<<-: core/server.query ok
21.10 15:15:33 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
21.10 15:15:33 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
21.10 15:15:33 -<<-: core/server.query ok
21.10 15:15:33 DB: SELECT * FROM ItemGroups
21.10 15:15:33 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
21.10 15:15:33 -<<-: core/server.query ok
21.10 15:15:33 DB: SELECT * FROM Bundles ORDER BY ID
21.10 15:15:33 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
21.10 15:15:33 -<<-: core/server.query ok
21.10 15:15:33 DB: SELECT * FROM BundleItems ORDER BY ID
21.10 15:15:33 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
21.10 15:15:33 -<<-: core/server.query ok
21.10 15:15:33 SHOP: loading items...
21.10 15:15:33 ->>-: core/shop.getList { _type => core/shop.getList }
21.10 15:15:33 -<<-: core/shop.getList ok
21.10 15:15:33 SHOP: 0 items loaded (0 sec)
21.10 15:15:33 DB: SELECT * FROM EffectAttributeTypes
21.10 15:15:33 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
21.10 15:15:33 -<<-: core/server.query ok
21.10 15:15:33 DB: SELECT * FROM Effects
21.10 15:15:33 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
21.10 15:15:33 -<<-: core/server.query ok
21.10 15:15:33 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(21.10 15:24:18 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
21.10 15:24:18 -<<-: server.login ok
21.10 15:24:18 DB: SELECT * FROM LocalizationStrings
21.10 15:24:18 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:18 TIMER: Starting timer...
21.10 15:24:18 TIMER: Timer running...
21.10 15:24:18 DB: SELECT * FROM GameVars
21.10 15:24:18 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:18 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
21.10 15:24:18 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:18 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
21.10 15:24:18 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:18 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
21.10 15:24:18 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:18 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
21.10 15:24:18 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:18 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
21.10 15:24:18 -<<-: core/quest.getDaily ok
21.10 15:24:18 DB: SELECT * FROM UserAttributeTypes
21.10 15:24:18 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:18 DB: SELECT * FROM UserVariableTypes
21.10 15:24:18 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:18 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
21.10 15:24:18 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:18 DB: SELECT * FROM ItemGroups
21.10 15:24:18 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:18 DB: SELECT * FROM Bundles ORDER BY ID
21.10 15:24:18 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:18 DB: SELECT * FROM BundleItems ORDER BY ID
21.10 15:24:18 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:18 SHOP: loading items...
21.10 15:24:18 ->>-: core/shop.getList { _type => core/shop.getList }
21.10 15:24:18 -<<-: core/shop.getList ok
21.10 15:24:18 SHOP: 0 items loaded (0 sec)
21.10 15:24:18 DB: SELECT * FROM EffectAttributeTypes
21.10 15:24:18 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:18 DB: SELECT * FROM Effects
21.10 15:24:18 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:18 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
21.10 15:24:18 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:18 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
21.10 15:24:18 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:18 DB: SELECT * FROM Badges
21.10 15:24:18 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
21.10 15:24:18 -<<-: core/server.query ok
21.10 15:24:25 NET: Client (conid:33325919) connected to vdl.0 (clients:1)
21.10 15:24:25 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
21.10 15:24:25 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
21.10 15:24:25 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
21.10 15:24:25 -<<-: core/server.query ok
21.10 15:24:25 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
21.10 15:24:25 -<<-: core/user.isOnlineID ok
21.10 15:24:25 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
21.10 15:24:25 -<<-: core/cache.get ok
21.10 15:24:25 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
21.10 15:24:25 -<<-: core/cache.get ok
21.10 15:24:25 NET: Client login (conid:33325919, id:76, name:Aimer)
21.10 15:24:25 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.35.23 }
21.10 15:24:25 -<<-: core/user.loginPost null
21.10 15:24:25 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
21.10 15:24:25 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
21.10 15:24:27 ++ NET: Aimer req: user.data { messageType => user.data }
21.10 15:24:27 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
21.10 15:24:27 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
21.10 15:24:27 TIME: user.data 1 ms
21.10 15:24:27 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
21.10 15:24:33 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
21.10 15:24:33 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
