02.09 18:07:55 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 18:07:55 -<<-: server.login ok
02.09 18:07:55 DB: SELECT * FROM LocalizationStrings
02.09 18:07:55 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 18:07:55 -<<-: core/server.query ok
02.09 18:07:55 TIMER: Starting timer...
02.09 18:07:55 TIMER: Timer running...
02.09 18:07:55 DB: SELECT * FROM GameVars
02.09 18:07:55 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 18:07:55 -<<-: core/server.query ok
02.09 18:07:55 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 18:07:55 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 18:07:55 -<<-: core/server.query ok
02.09 18:07:55 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 18:07:55 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 18:07:55 -<<-: core/server.query ok
02.09 18:07:55 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 18:07:55 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 18:07:55 -<<-: core/server.query ok
02.09 18:07:55 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 18:07:55 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 18:07:55 -<<-: core/server.query ok
02.09 18:07:55 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 18:07:55 -<<-: core/quest.getDaily ok
02.09 18:07:55 DB: SELECT * FROM UserAttributeTypes
02.09 18:07:55 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 18:07:55 -<<-: core/server.query ok
02.09 18:07:55 DB: SELECT * FROM UserVariableTypes
02.09 18:07:55 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 18:07:55 -<<-: core/server.query ok
02.09 18:07:55 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 18:07:55 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 18:07:55 -<<-: core/server.query ok
02.09 18:07:55 DB: SELECT * FROM ItemGroups
02.09 18:07:55 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 18:07:55 -<<-: core/server.query ok
02.09 18:07:55 DB: SELECT * FROM Bundles ORDER BY ID
02.09 18:07:55 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 18:07:55 -<<-: core/server.query ok
02.09 18:07:55 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 18:07:55 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 18:07:55 -<<-: core/server.query ok
02.09 18:07:55 SHOP: loading items...
02.09 18:07:55 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 18:07:55 -<<-: core/shop.getList ok
02.09 18:07:55 SHOP: 0 items loaded (0 sec)
02.09 18:07:55 DB: SELECT * FROM EffectAttributeTypes
02.09 18:07:55 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 18:07:55 -<<-: core/server.query ok
02.09 18:07:55 DB: SELECT * FROM Effects
02.09 18:07:55 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 18:07:55 -<<-: core/server.query ok
02.09 18:07:55 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(02.09 18:16:41 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 18:16:41 -<<-: server.login ok
02.09 18:16:41 DB: SELECT * FROM LocalizationStrings
02.09 18:16:41 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 TIMER: Starting timer...
02.09 18:16:41 TIMER: Timer running...
02.09 18:16:41 DB: SELECT * FROM GameVars
02.09 18:16:41 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 18:16:41 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 18:16:41 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 18:16:41 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 18:16:41 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 18:16:41 -<<-: core/quest.getDaily ok
02.09 18:16:41 DB: SELECT * FROM UserAttributeTypes
02.09 18:16:41 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 DB: SELECT * FROM UserVariableTypes
02.09 18:16:41 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 18:16:41 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 DB: SELECT * FROM ItemGroups
02.09 18:16:41 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 DB: SELECT * FROM Bundles ORDER BY ID
02.09 18:16:41 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 18:16:41 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 SHOP: loading items...
02.09 18:16:41 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 18:16:41 -<<-: core/shop.getList ok
02.09 18:16:41 SHOP: 0 items loaded (0 sec)
02.09 18:16:41 DB: SELECT * FROM EffectAttributeTypes
02.09 18:16:41 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 DB: SELECT * FROM Effects
02.09 18:16:41 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
02.09 18:16:41 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
02.09 18:16:41 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 DB: SELECT * FROM Badges
02.09 18:16:41 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
02.09 18:16:41 -<<-: core/server.query ok
02.09 18:16:41 TIMER: Check auto-disconnect...
02.09 18:17:42 STATS: vdl.0 cache, locks:0
02.09 18:17:45 NET: Client (conid:87815959) connected to vdl.0 (clients:1)
02.09 18:17:45 NET: Client (name:null conid:87815959 TCP) disconnected from vdl.0 (clients:0)
02.09 18:17:45 NET: Client (conid:77296198) connected to vdl.0 (clients:1)
02.09 18:17:54 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
02.09 18:17:54 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
02.09 18:17:54 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
02.09 18:17:54 -<<-: core/server.query ok
02.09 18:17:54 STATS: vdl.0 cache connection, 21 calls, total 0.019646167755127 sec spent, avg 0.94 ms
02.09 18:17:54 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
02.09 18:17:54 -<<-: core/user.isOnlineID ok
02.09 18:17:54 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
02.09 18:17:54 -<<-: core/cache.get ok
02.09 18:17:54 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
02.09 18:17:54 -<<-: core/cache.get ok
02.09 18:17:54 NET: Client login (conid:77296198, id:3, name:test2)
02.09 18:17:54 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
02.09 18:17:54 -<<-: core/user.loginPost null
02.09 18:17:54 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
02.09 18:17:54 == NET: test2 ret: user.join { name => test2, type => user.join }
02.09 18:17:54 ++ NET: test2 req: battle.find { messageType => battle.find }
02.09 18:17:54 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 18:17:54 -<<-: vdl/cache.battle.find { list => [{ id => 33, first => 2 }], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
02.09 18:17:54 ->>-: vdl/cache.battle.join { roomId => 33, selfId => 3, _type => vdl/cache.battle.join }
02.09 18:17:54 -<<-: vdl/cache.battle.join { errorCode => _requestException, _type => vdl/cache.battle.join }
02.09 18:17:54 TRACE: battle.find : cacheRequest exception { roomId => 33, selfId => 3, _type => vdl/cache.battle.join }
02.09 18:17:54 TRACE: battle.find : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 161
Called from modules/VDLBattleModule.hx line 76
Called from modules/VDLBattleModule.hx line 40
Called from modules/VDLBattleModule.hx line 29
Called from snipe/slave/Server.hx line 1176
02.09 18:18:02 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 3, _type => core/cache.update }
02.09 18:18:02 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 18:18:41 TIMER: Check auto-disconnect...
02.09 18:19:19 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 18:19:19 -<<-: server.login ok
02.09 18:19:19 DB: SELECT * FROM LocalizationStrings
02.09 18:19:19 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:19:19 TIMER: Starting timer...
02.09 18:19:19 TIMER: Timer running...
02.09 18:19:19 DB: SELECT * FROM GameVars
02.09 18:19:19 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:19:19 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 18:19:19 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:19:19 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 18:19:19 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:19:19 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 18:19:19 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:19:19 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 18:19:19 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:19:19 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 18:19:19 -<<-: core/quest.getDaily ok
02.09 18:19:19 DB: SELECT * FROM UserAttributeTypes
02.09 18:19:19 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:19:19 DB: SELECT * FROM UserVariableTypes
02.09 18:19:19 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:19:19 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 18:19:19 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:19:19 DB: SELECT * FROM ItemGroups
02.09 18:19:19 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:19:19 DB: SELECT * FROM Bundles ORDER BY ID
02.09 18:19:19 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:19:19 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 18:19:19 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:19:19 SHOP: loading items...
02.09 18:19:19 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 18:19:19 -<<-: core/shop.getList ok
02.09 18:19:19 SHOP: 0 items loaded (0 sec)
02.09 18:19:19 DB: SELECT * FROM EffectAttributeTypes
02.09 18:19:19 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:19:19 DB: SELECT * FROM Effects
02.09 18:19:19 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:19:19 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
02.09 18:19:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:19:19 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
02.09 18:19:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:19:19 DB: SELECT * FROM Badges
02.09 18:19:19 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
02.09 18:19:19 -<<-: core/server.query ok
02.09 18:20:03 NET: Client (conid:80041225) connected to vdl.0 (clients:1)
02.09 18:20:03 NET: Client (name:null conid:80041225 TCP) disconnected from vdl.0 (clients:0)
02.09 18:20:03 NET: Client (conid:51346776) connected to vdl.0 (clients:1)
02.09 18:20:08 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
02.09 18:20:08 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
02.09 18:20:08 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
02.09 18:20:08 -<<-: core/server.query ok
02.09 18:20:08 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
02.09 18:20:08 -<<-: core/user.isOnlineID ok
02.09 18:20:08 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
02.09 18:20:08 -<<-: core/cache.get ok
02.09 18:20:08 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
02.09 18:20:08 -<<-: core/cache.get ok
02.09 18:20:08 NET: Client login (conid:51346776, id:2, name:test1)
02.09 18:20:08 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
02.09 18:20:08 -<<-: core/user.loginPost null
02.09 18:20:08 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
02.09 18:20:08 == NET: test1 ret: user.join { name => test1, type => user.join }
02.09 18:20:08 ++ NET: test1 req: battle.find { messageType => battle.find }
02.09 18:20:08 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 18:20:08 -<<-: vdl/cache.battle.find { list => {}, count => 0, errorCode => not, _type => vdl/cache.battle.find }
02.09 18:20:08 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
02.09 18:20:08 -<<-: vdl/cache.battle.create { room => 34, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 18:20:08 TIME: battle.find 43.46 ms
02.09 18:20:08 == NET: test1 ret: battle.find { room => 34, type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 18:20:14 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1472829608 } }}, type => user, unlock => false, id => 2, _type => core/cache.update }
02.09 18:20:14 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 18:20:19 TIMER: Check auto-disconnect...
02.09 18:20:19 STATS: vdl.0 cache, locks:2
02.09 18:20:20 NET: Client (conid:89559779) connected to vdl.0 (clients:2)
02.09 18:20:28 NET: Client (name:null conid:89559779 TCP) disconnected from vdl.0 (clients:1)
02.09 18:20:39 NET: Client (conid:4701711) connected to vdl.0 (clients:2)
02.09 18:20:40 NET: Client (name:null conid:4701711 TCP) disconnected from vdl.0 (clients:1)
02.09 18:20:40 NET: Client (conid:62554671) connected to vdl.0 (clients:2)
02.09 18:20:59 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
02.09 18:20:59 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
02.09 18:20:59 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
02.09 18:20:59 -<<-: core/server.query { list => {{ name => test2, networkid => , isbanned => false, id => 3 }}, errorCode => ok, _type => core/server.query }
02.09 18:20:59 STATS: vdl.0 cache connection, 29 calls, total 0.0772275924682617 sec spent, avg 2.66 ms
02.09 18:20:59 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
02.09 18:20:59 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
02.09 18:20:59 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
02.09 18:20:59 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test2, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472825979, lastLoginDate => 246, lastLoadDate => 903 }, effects => { list => [] } }}, version => 0, id => 3 } }
02.09 18:20:59 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
02.09 18:20:59 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 3 } }
02.09 18:20:59 NET: Client login (conid:62554671, id:3, name:test2)
02.09 18:20:59 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
02.09 18:20:59 -<<-: core/user.loginPost { _type => core/user.loginPost }
02.09 18:20:59 == NET: test1 ret: user.join { name => test2, type => user.join }
02.09 18:20:59 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
02.09 18:20:59 == NET: test2 ret: user.join { name => test1, type => user.join }
02.09 18:20:59 == NET: test2 ret: user.join { name => test2, type => user.join }
02.09 18:21:00 ++ NET: test2 req: battle.find { messageType => battle.find }
02.09 18:21:00 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 18:21:00 -<<-: vdl/cache.battle.find { list => [{ id => 34, first => 2 }], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
02.09 18:21:00 ->>-: vdl/cache.battle.join { roomId => 34, selfId => 3, _type => vdl/cache.battle.join }
02.09 18:21:00 -<<-: vdl/cache.battle.join { room => 34, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 18:21:00 DB: SELECT name FROM users WHERE id=3
02.09 18:21:00 ->>-: core/server.query { q => SELECT name FROM users WHERE id=3, _type => core/server.query }
02.09 18:21:00 -<<-: core/server.query { list => {{ name => test2 }}, errorCode => ok, _type => core/server.query }
02.09 18:21:00 DB: SELECT name FROM users WHERE id=2
02.09 18:21:00 ->>-: core/server.query { q => SELECT name FROM users WHERE id=2, _type => core/server.query }
02.09 18:21:00 -<<-: core/server.query { list => {{ name => test1 }}, errorCode => ok, _type => core/server.query }
02.09 18:21:00 TIME: battle.find 8.73 ms
02.09 18:21:00 == NET: test2 ret: battle.enemy { name => test2, type => battle.enemy, enemy.id => 3, enemy.name => test1, enemy.num => 1 }
02.09 18:21:00 == NET: test1 ret: battle.enemy { name => test1, type => battle.enemy, enemy.id => 2, enemy.name => test2, enemy.num => 2 }
02.09 18:21:00 == NET: test2 ret: battle.find { room => 34, type => battle.find, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 18:21:04 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 3, _type => core/cache.update }
02.09 18:21:04 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 18:21:19 TIMER: Check auto-disconnect...
02.09 18:21:19 STATS: vdl.0 cache, locks:4
02.09 18:21:19 TIMER: Check auto-disconnect...
02.09 18:21:19 STATS: vdl.0 cache, locks:4
02.09 18:22:27 NET: Client (name:test1 conid:51346776 TCP) disconnected from vdl.0 (clients:1)
02.09 18:22:27 DB: SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true
02.09 18:22:27 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=2 OR secondid=2 AND finished <> true, _type => core/server.query }
02.09 18:22:27 -<<-: core/server.query { list => {{ id => 34 }}, errorCode => ok, _type => core/server.query }
02.09 18:22:27 STATS: vdl.0 cache connection, 39 calls, total 0.0914571285247803 sec spent, avg 2.35 ms
02.09 18:22:27 ->>-: vdl/cache.battle.deleteRoom { roomId => 34, _type => vdl/cache.battle.deleteRoom }
02.09 18:22:28 -<<-: vdl/cache.battle.deleteRoom { errorCode => true, _type => vdl/cache.battle.deleteRoom }
02.09 18:22:28 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
02.09 18:22:28 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
02.09 18:22:28 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
02.09 18:22:28 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 18:22:28 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
02.09 18:22:28 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
02.09 18:23:19 TIMER: Check auto-disconnect...
02.09 18:23:19 STATS: vdl.0 cache, locks:2
02.09 18:23:19 TIMER: Check auto-disconnect...
02.09 18:23:19 NET: Client (name:test2 conid:62554671 TCP) disconnected from vdl.0 (clients:0)
02.09 18:23:19 DB: SELECT id FROM battle WHERE firstid=3 OR secondid=3 AND finished <> true
02.09 18:23:19 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=3 OR secondid=3 AND finished <> true, _type => core/server.query }
02.09 18:23:19 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
02.09 18:23:19 STATS: vdl.0 cache connection, 44 calls, total 0.125737190246582 sec spent, avg 2.86 ms
02.09 18:23:19 ->>-: vdl/cache.battle.deleteRoom { roomId => 0, _type => vdl/cache.battle.deleteRoom }
02.09 18:23:19 -<<-: vdl/cache.battle.deleteRoom { errorCode => true, _type => vdl/cache.battle.deleteRoom }
02.09 18:23:19 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 3, _type => core/cache.update }
02.09 18:23:19 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
02.09 18:23:19 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 3, _type => core/cache.update }
02.09 18:23:19 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 18:23:19 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 3, _type => core/user.logoutPost }
02.09 18:23:19 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
02.09 18:23:19 STATS: vdl.0 cache, locks:0
02.09 18:23:19 TIMER: Check auto-disconnect...
02.09 18:23:19 STATS: vdl.0 cache, locks:0
02.09 18:23:19 TIMER: Check auto-disconnect...
02.09 18:23:19 STATS: vdl.0 cache, locks:0
02.09 18:23:19 TIMER: Check auto-disconnect...
02.09 18:23:19 STATS: vdl.0 cache, locks:0
02.09 18:23:19 TIMER: Check auto-disconnect...
02.09 18:23:19 STATS: vdl.0 cache, locks:0
02.09 18:28:41 NET: Client (conid:3034967) connected to vdl.0 (clients:1)
02.09 18:28:44 NET: Client (name:null conid:3034967 TCP) disconnected from vdl.0 (clients:0)
02.09 18:29:19 TIMER: Check auto-disconnect...
02.09 18:29:19 STATS: vdl.0 cache, locks:0
02.09 18:29:19 TIMER: Check auto-disconnect...
02.09 18:29:19 STATS: vdl.0 cache, locks:0
02.09 18:29:19 TIMER: Check auto-disconnect...
02.09 18:29:19 STATS: vdl.0 cache, locks:0
02.09 18:29:19 TIMER: Check auto-disconnect...
02.09 18:29:19 STATS: vdl.0 cache, locks:0
02.09 18:29:19 TIMER: Check auto-disconnect...
02.09 18:29:19 STATS: vdl.0 cache, locks:0
02.09 18:34:17 NET: Client (conid:64664027) connected to vdl.0 (clients:1)
02.09 18:34:18 NET: Client (name:null conid:64664027 TCP) disconnected from vdl.0 (clients:0)
02.09 18:34:18 NET: Client (conid:40654103) connected to vdl.0 (clients:1)
02.09 18:34:19 TIMER: Check auto-disconnect...
02.09 18:34:19 STATS: vdl.0 cache, locks:0
02.09 18:34:19 TIMER: Check auto-disconnect...
02.09 18:34:19 STATS: vdl.0 cache, locks:0
02.09 18:34:19 TIMER: Check auto-disconnect...
02.09 18:34:19 STATS: vdl.0 cache, locks:0
02.09 18:36:37 NET: Client (conid:36322062) connected to vdl.0 (clients:2)
02.09 18:36:37 NET: Client (conid:77503322) connected to vdl.0 (clients:3)
02.09 18:36:37 NET: Client (name:null conid:36322062 TCP) disconnected from vdl.0 (clients:2)
02.09 18:36:39 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
02.09 18:36:39 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
02.09 18:36:39 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
02.09 18:36:39 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
02.09 18:36:39 STATS: vdl.0 cache connection, 49 calls, total 0.134933233261108 sec spent, avg 2.75 ms
02.09 18:36:39 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
02.09 18:36:39 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
02.09 18:36:39 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
02.09 18:36:39 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472829608, lastLoginDate => 246, lastLoadDate => 903 }, effects => { list => [] } }}, version => 0, id => 2 } }
02.09 18:36:39 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
02.09 18:36:39 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
02.09 18:36:39 NET: Client login (conid:40654103, id:2, name:test1)
02.09 18:36:39 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
02.09 18:36:39 -<<-: core/user.loginPost { _type => core/user.loginPost }
02.09 18:36:39 == NET: null ret: user.join { name => test1, type => user.join }
02.09 18:36:39 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
02.09 18:36:39 == NET: test1 ret: user.join { name => test1, type => user.join }
02.09 18:36:39 == NET: test1 ret: user.join { name => null, type => user.join }
02.09 18:36:40 ++ NET: test1 req: battle.find { messageType => battle.find }
02.09 18:36:40 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 18:36:40 -<<-: vdl/cache.battle.find { list => {}, count => 0, errorCode => not, _type => vdl/cache.battle.find }
02.09 18:36:40 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
02.09 18:36:40 -<<-: vdl/cache.battle.create { room => 35, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 18:36:40 TIME: battle.find 43.04 ms
02.09 18:36:40 == NET: test1 ret: battle.find { room => 35, type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 18:36:44 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
02.09 18:36:44 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 18:36:55 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
02.09 18:36:55 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
02.09 18:36:55 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
02.09 18:36:55 -<<-: core/server.query { list => {{ name => test2, networkid => , isbanned => false, id => 3 }}, errorCode => ok, _type => core/server.query }
02.09 18:36:55 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
02.09 18:36:55 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
02.09 18:36:55 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
02.09 18:36:55 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test2, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472825979, lastLoginDate => 246, lastLoadDate => 903 }, effects => { list => [] } }}, version => 0, id => 3 } }
02.09 18:36:55 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
02.09 18:36:55 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 3 } }
02.09 18:36:55 NET: Client login (conid:77503322, id:3, name:test2)
02.09 18:36:55 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
02.09 18:36:55 -<<-: core/user.loginPost { _type => core/user.loginPost }
02.09 18:36:55 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
02.09 18:36:55 == NET: test2 ret: user.join { name => test1, type => user.join }
02.09 18:36:55 == NET: test2 ret: user.join { name => test2, type => user.join }
02.09 18:36:55 == NET: test1 ret: user.join { name => test2, type => user.join }
02.09 18:36:55 ++ NET: test2 req: battle.find { messageType => battle.find }
02.09 18:36:55 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 18:36:55 -<<-: vdl/cache.battle.find { list => [{ id => 35, first => 2 }], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
02.09 18:36:55 ->>-: vdl/cache.battle.join { roomId => 35, selfId => 3, _type => vdl/cache.battle.join }
02.09 18:36:55 -<<-: vdl/cache.battle.join { room => 35, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 18:36:55 DB: SELECT name FROM users WHERE id=3
02.09 18:36:55 ->>-: core/server.query { q => SELECT name FROM users WHERE id=3, _type => core/server.query }
02.09 18:36:55 -<<-: core/server.query { list => {{ name => test2 }}, errorCode => ok, _type => core/server.query }
02.09 18:36:55 DB: SELECT name FROM users WHERE id=2
02.09 18:36:55 ->>-: core/server.query { q => SELECT name FROM users WHERE id=2, _type => core/server.query }
02.09 18:36:55 -<<-: core/server.query { list => {{ name => test1 }}, errorCode => ok, _type => core/server.query }
02.09 18:36:55 TIME: battle.find 4.49 ms
02.09 18:36:55 == NET: test2 ret: battle.enemy { name => test2, type => battle.enemy, enemy.id => 3, enemy.name => test1, enemy.num => 1 }
02.09 18:36:55 == NET: test1 ret: battle.enemy { name => test1, type => battle.enemy, enemy.id => 2, enemy.name => test2, enemy.num => 2 }
02.09 18:36:55 == NET: test2 ret: battle.find { room => 35, type => battle.find, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 18:37:04 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 3, _type => core/cache.update }
02.09 18:37:04 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 18:37:19 TIMER: Check auto-disconnect...
02.09 18:37:19 STATS: vdl.0 cache, locks:4
02.09 18:37:29 ++ NET: test1 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 35, name => throw, side => 2, dices => 202132, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 18:37:29 ->>-: vdl/cache.battle.infoRoom { roomId => 35, _type => vdl/cache.battle.infoRoom }
02.09 18:37:29 -<<-: vdl/cache.battle.infoRoom { secondId => 3, firstId => 2, _type => vdl/cache.battle.infoRoom, turnId => 2 }
02.09 18:37:29 TIME: battle.sendtask 0.3 ms
02.09 18:37:29 == NET: test1 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 18:37:29 == NET: test2 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 35, name => throw, side => 2, type => battle.task, to => (0.0, 0.0), diceID => 0 }
02.09 18:47:57 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 18:47:57 -<<-: server.login ok
02.09 18:47:57 DB: SELECT * FROM LocalizationStrings
02.09 18:47:57 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 TIMER: Starting timer...
02.09 18:47:57 TIMER: Timer running...
02.09 18:47:57 DB: SELECT * FROM GameVars
02.09 18:47:57 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 18:47:57 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 18:47:57 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 18:47:57 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 18:47:57 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 18:47:57 -<<-: core/quest.getDaily ok
02.09 18:47:57 DB: SELECT * FROM UserAttributeTypes
02.09 18:47:57 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 DB: SELECT * FROM UserVariableTypes
02.09 18:47:57 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 18:47:57 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 DB: SELECT * FROM ItemGroups
02.09 18:47:57 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 DB: SELECT * FROM Bundles ORDER BY ID
02.09 18:47:57 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 18:47:57 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 SHOP: loading items...
02.09 18:47:57 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 18:47:57 -<<-: core/shop.getList ok
02.09 18:47:57 SHOP: 0 items loaded (0 sec)
02.09 18:47:57 DB: SELECT * FROM EffectAttributeTypes
02.09 18:47:57 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 DB: SELECT * FROM Effects
02.09 18:47:57 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
02.09 18:47:57 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
02.09 18:47:57 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 DB: SELECT * FROM Badges
02.09 18:47:57 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
02.09 18:47:57 -<<-: core/server.query ok
02.09 18:47:57 TIMER: Check auto-disconnect...
02.09 18:47:57 STATS: vdl.0 cache, locks:0
02.09 18:47:57 TIMER: Check auto-disconnect...
02.09 18:47:57 STATS: vdl.0 cache, locks:0
02.09 18:47:57 TIMER: Check auto-disconnect...
02.09 18:47:57 STATS: vdl.0 cache, locks:0
02.09 18:47:57 TIMER: Check auto-disconnect...
02.09 18:47:57 STATS: vdl.0 cache, locks:0
02.09 18:47:57 TIMER: Check auto-disconnect...
02.09 18:47:57 STATS: vdl.0 cache, locks:0
02.09 18:47:57 TIMER: Check auto-disconnect...
02.09 18:47:57 STATS: vdl.0 cache, locks:0
02.09 18:47:57 TIMER: Check auto-disconnect...
02.09 18:47:57 STATS: vdl.0 cache, locks:0
02.09 18:47:57 TIMER: Check auto-disconnect...
02.09 18:47:57 STATS: vdl.0 cache, locks:0
02.09 18:47:57 TIMER: Check auto-disconnect...
02.09 18:47:57 STATS: vdl.0 cache, locks:0
02.09 18:47:57 NET: Client (conid:38989628) connected to vdl.0 (clients:1)
02.09 18:47:57 TIMER: Check auto-disconnect...
02.09 18:47:57 NET: Client (name:null conid:38989628 TCP) disconnected from vdl.0 (clients:0)
02.09 18:47:57 NET: Client (conid:95979629) connected to vdl.0 (clients:1)
02.09 18:47:57 STATS: vdl.0 cache, locks:0
02.09 18:58:17 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
02.09 18:58:17 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
02.09 18:58:17 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
02.09 18:58:17 -<<-: core/server.query ok
02.09 18:58:17 STATS: vdl.0 cache connection, 21 calls, total 0.0361194610595703 sec spent, avg 1.72 ms
02.09 18:58:17 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
02.09 18:58:17 -<<-: core/user.isOnlineID ok
02.09 18:58:17 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
02.09 18:58:17 -<<-: core/cache.get ok
02.09 18:58:17 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
02.09 18:58:17 -<<-: core/cache.get ok
02.09 18:58:17 NET: Client login (conid:95979629, id:3, name:test2)
02.09 18:58:17 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
02.09 18:58:17 -<<-: core/user.loginPost null
02.09 18:58:17 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
02.09 18:58:17 == NET: test2 ret: user.join { name => test2, type => user.join }
02.09 18:58:17 ++ NET: test2 req: battle.find { messageType => battle.find }
02.09 18:58:17 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 18:58:17 -<<-: vdl/cache.battle.find { list => {}, count => 0, errorCode => not, _type => vdl/cache.battle.find }
02.09 18:58:17 ->>-: vdl/cache.battle.create { selfId => 3, _type => vdl/cache.battle.create }
02.09 18:58:17 -<<-: vdl/cache.battle.create { room => 36, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 18:58:17 TIME: battle.find 44.98 ms
02.09 18:58:17 == NET: test2 ret: battle.find { room => 36, type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
02.09 18:58:22 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 3, _type => core/cache.update }
02.09 18:58:22 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 18:58:38 NET: Client (conid:39031766) connected to vdl.0 (clients:2)
02.09 18:58:38 NET: Client (name:null conid:39031766 TCP) disconnected from vdl.0 (clients:1)
02.09 18:58:39 NET: Client (conid:26240570) connected to vdl.0 (clients:2)
02.09 18:58:43 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
02.09 18:58:43 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
02.09 18:58:43 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
02.09 18:58:43 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
02.09 18:58:43 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
02.09 18:58:43 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
02.09 18:58:43 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
02.09 18:58:43 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472829608, lastLoginDate => 246, lastLoadDate => 903 }, effects => { list => [] } }}, version => 0, id => 2 } }
02.09 18:58:43 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
02.09 18:58:43 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
02.09 18:58:43 NET: Client login (conid:26240570, id:2, name:test1)
02.09 18:58:43 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
02.09 18:58:43 -<<-: core/user.loginPost { _type => core/user.loginPost }
02.09 18:58:43 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
02.09 18:58:43 == NET: test2 ret: user.join { name => test1, type => user.join }
02.09 18:58:43 == NET: test1 ret: user.join { name => test2, type => user.join }
02.09 18:58:43 == NET: test1 ret: user.join { name => test1, type => user.join }
02.09 18:58:44 ++ NET: test1 req: battle.find { messageType => battle.find }
02.09 18:58:44 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 18:58:44 -<<-: vdl/cache.battle.find { list => [{ id => 36, first => 3 }], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
02.09 18:58:44 ->>-: vdl/cache.battle.join { roomId => 36, selfId => 2, _type => vdl/cache.battle.join }
02.09 18:58:44 -<<-: vdl/cache.battle.join { room => 36, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 18:58:44 DB: SELECT name FROM users WHERE id=2
02.09 18:58:44 ->>-: core/server.query { q => SELECT name FROM users WHERE id=2, _type => core/server.query }
02.09 18:58:44 -<<-: core/server.query { list => {{ name => test1 }}, errorCode => ok, _type => core/server.query }
02.09 18:58:44 DB: SELECT name FROM users WHERE id=3
02.09 18:58:44 ->>-: core/server.query { q => SELECT name FROM users WHERE id=3, _type => core/server.query }
02.09 18:58:44 -<<-: core/server.query { list => {{ name => test2 }}, errorCode => ok, _type => core/server.query }
02.09 18:58:44 TIME: battle.find 8.1 ms
02.09 18:58:44 == NET: test1 ret: battle.enemy { name => test1, type => battle.enemy, enemy.id => 2, enemy.name => test2, enemy.num => 1 }
02.09 18:58:44 == NET: test1 ret: battle.find { room => 36, type => battle.find, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
02.09 18:58:44 == NET: test2 ret: battle.enemy { name => test2, type => battle.enemy, enemy.id => 3, enemy.name => test1, enemy.num => 2 }
02.09 18:58:50 ++ NET: test2 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 36, name => throw, side => 2, dices => 401220, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
02.09 18:58:50 ->>-: vdl/cache.battle.infoRoom { roomId => 36, _type => vdl/cache.battle.infoRoom }
02.09 18:58:50 -<<-: vdl/cache.battle.infoRoom { secondId => 2, firstId => 3, _type => vdl/cache.battle.infoRoom, turnId => 3 }
02.09 18:58:50 TIME: battle.sendtask 0.76 ms
02.09 18:58:50 == NET: test2 ret: battle.sendtask { type => battle.sendtask, errorCode => true }
02.09 18:58:50 == NET: test1 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 36, name => throw, side => 2, type => battle.task, dices => 401220, to => (0.0, 0.0), diceID => 0 }
02.09 18:58:52 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
02.09 18:58:52 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 18:58:57 TIMER: Check auto-disconnect...
02.09 18:58:57 STATS: vdl.0 cache, locks:4
02.09 18:59:33 ++ NET: test2 req: battle.end { roomId => 36, scoreSecondPlayer => 0, messageType => battle.end, scoreFirstPlayer => 0 }
02.09 18:59:33 TIME: battle.end 0.08 ms
