29.12 13:00:05 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:00:05 TIME: user.ping 0.14 ms
29.12 13:00:05 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:00:12 TIMER: Check auto-disconnect...
29.12 13:00:13 STATS: vdl.0 cache, locks:2
29.12 13:00:27 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:00:27 TIME: user.ping 0.14 ms
29.12 13:00:27 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:00:49 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:00:49 TIME: user.ping 0.14 ms
29.12 13:00:49 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:01:12 TIMER: Check auto-disconnect...
29.12 13:01:13 STATS: vdl.0 cache, locks:2
29.12 13:01:21 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:01:21 TIME: user.ping 0.16 ms
29.12 13:01:21 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:01:48 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:01:48 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:01:48 TIME: user.ping 0.18 ms
29.12 13:02:12 TIMER: Check auto-disconnect...
29.12 13:02:13 STATS: vdl.0 cache, locks:2
29.12 13:02:21 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:02:21 TIME: user.ping 0.13 ms
29.12 13:02:21 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:02:40 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:02:40 TIME: user.ping 0.19 ms
29.12 13:02:40 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:03:01 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:03:01 TIME: user.ping 0.18 ms
29.12 13:03:01 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:03:12 TIMER: Check auto-disconnect...
29.12 13:03:13 STATS: vdl.0 cache, locks:2
29.12 13:03:23 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:03:23 TIME: user.ping 0.12 ms
29.12 13:03:23 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:03:44 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:03:44 TIME: user.ping 0.16 ms
29.12 13:03:44 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:04:06 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:04:06 TIME: user.ping 0.13 ms
29.12 13:04:06 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:04:12 TIMER: Check auto-disconnect...
29.12 13:04:13 STATS: vdl.0 cache, locks:2
29.12 13:04:28 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:04:28 TIME: user.ping 0.13 ms
29.12 13:04:28 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:04:50 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:04:50 TIME: user.ping 0.13 ms
29.12 13:04:50 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:05:11 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:05:11 TIME: user.ping 0.1 ms
29.12 13:05:11 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:05:12 TIMER: Check auto-disconnect...
29.12 13:05:13 STATS: vdl.0 cache, locks:2
29.12 13:05:33 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:05:33 TIME: user.ping 0.12 ms
29.12 13:05:33 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:05:55 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:05:55 TIME: user.ping 0.14 ms
29.12 13:05:55 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:06:12 TIMER: Check auto-disconnect...
29.12 13:06:13 STATS: vdl.0 cache, locks:2
29.12 13:06:18 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:06:18 TIME: user.ping 0.2 ms
29.12 13:06:18 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:06:38 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:06:38 TIME: user.ping 0.11 ms
29.12 13:06:38 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:06:58 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:06:58 TIME: user.ping 0.13 ms
29.12 13:06:58 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:07:12 TIMER: Check auto-disconnect...
29.12 13:07:13 NET: Client (name:uid161 conid:56838790 TCP) disconnected from vdl.0 (clients:0)
29.12 13:07:13 DB: SELECT id FROM battle WHERE firstid=161 OR secondid=161 AND finished <> true
29.12 13:07:13 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=161 OR secondid=161 AND finished <> true, _type => core/server.query }
29.12 13:07:13 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.12 13:07:13 STATS: vdl.0 cache connection, 218 calls, total 0.18885326385498 sec spent, avg 0.87 ms
29.12 13:07:13 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.12 13:07:13 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
29.12 13:07:13 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.12 13:07:13 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 1009
29.12 13:07:13 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 161, _type => core/cache.update }
29.12 13:07:13 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.12 13:07:13 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 161, _type => core/cache.update }
29.12 13:07:13 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.12 13:07:13 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 161, _type => core/user.logoutPost }
29.12 13:07:13 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.12 13:07:13 STATS: vdl.0 cache, locks:0
29.12 13:07:46 NET: Client (conid:38705103) connected to vdl.0 (clients:1)
29.12 13:07:46 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTYx }
29.12 13:07:46 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid161' AND Password = 'uid161'
29.12 13:07:46 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid161' AND Password = 'uid161', _type => core/server.query }
29.12 13:07:46 -<<-: core/server.query { list => {{ name => uid161, networkid => , isbanned => false, id => 161 }}, errorCode => ok, _type => core/server.query }
29.12 13:07:46 ->>-: core/user.isOnlineID { id => 161, _type => core/user.isOnlineID }
29.12 13:07:46 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.12 13:07:46 ->>-: core/cache.get { type => user, v => -1, id => 161, _type => core/cache.get }
29.12 13:07:46 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid161, deleted => false, year => , email => mail, networktype =>   , password => uid161, isbanned => false, regdate => 2016-12-29 12:40:36.456335+00, city => , language => en, networkid => , params => { attrs => { _lastTime.24hr => 1483015805, lastLoginDate => 364, lastLoadDate => 1230 }, effects => { list => [] } }}, version => 0, id => 161 } }
29.12 13:07:46 ->>-: core/cache.get { type => questdata, v => -1, id => 161, _type => core/cache.get }
29.12 13:07:46 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 161 } }
29.12 13:07:46 NET: Client login (conid:38705103, id:161, name:uid161)
29.12 13:07:46 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 161, _type => core/user.loginPost, ipAddr => 91.225.76.192 }
29.12 13:07:46 -<<-: core/user.loginPost { _type => core/user.loginPost }
29.12 13:07:46 DB: SELECT token FROM tokens WHERE userid = 161
29.12 13:07:46 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 161, _type => core/server.query }
29.12 13:07:46 -<<-: core/server.query { list => {{ token => d2869e26f4cc8903e7918288f2227399 }}, errorCode => ok, _type => core/server.query }
29.12 13:07:46 == NET: uid161 ret: user.login { name => uid161, type => user.login, errorCode => ok, id => 161, token => d2869e26f4cc8903e7918288f2227399 }
29.12 13:07:46 == NET: uid161 ret: user.join { name => uid161, type => user.join }
29.12 13:07:51 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:07:51 TIME: user.ping 0.14 ms
29.12 13:07:51 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:07:53 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 161, _type => core/cache.update }
29.12 13:07:53 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.12 13:08:12 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:08:12 TIME: user.ping 0.11 ms
29.12 13:08:12 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:08:12 TIMER: Check auto-disconnect...
29.12 13:08:13 STATS: vdl.0 cache, locks:2
29.12 13:08:33 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:08:33 TIME: user.ping 0.15 ms
29.12 13:08:33 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:08:51 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:08:51 TIME: user.ping 0.2 ms
29.12 13:08:51 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:09:12 TIMER: Check auto-disconnect...
29.12 13:09:12 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:09:12 TIME: user.ping 0.12 ms
29.12 13:09:12 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:09:13 STATS: vdl.0 cache, locks:2
29.12 13:09:34 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:09:34 TIME: user.ping 0.19 ms
29.12 13:09:34 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:09:55 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:09:55 TIME: user.ping 0.13 ms
29.12 13:09:55 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:10:12 TIMER: Check auto-disconnect...
29.12 13:10:13 STATS: vdl.0 cache, locks:2
29.12 13:10:17 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:10:17 TIME: user.ping 0.13 ms
29.12 13:10:17 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:10:39 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:10:39 TIME: user.ping 0.28 ms
29.12 13:10:39 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:11:00 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:11:00 TIME: user.ping 0.14 ms
29.12 13:11:00 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:11:12 TIMER: Check auto-disconnect...
29.12 13:11:13 STATS: vdl.0 cache, locks:2
29.12 13:11:22 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:11:22 TIME: user.ping 0.13 ms
29.12 13:11:22 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:11:44 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:11:44 TIME: user.ping 0.18 ms
29.12 13:11:44 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:12:05 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:12:05 TIME: user.ping 0.17 ms
29.12 13:12:05 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:12:12 TIMER: Check auto-disconnect...
29.12 13:12:13 STATS: vdl.0 cache, locks:2
29.12 13:12:27 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:12:27 TIME: user.ping 0.1 ms
29.12 13:12:27 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:12:48 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:12:48 TIME: user.ping 0.15 ms
29.12 13:12:48 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:13:10 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:13:10 TIME: user.ping 0.11 ms
29.12 13:13:10 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:13:12 TIMER: Check auto-disconnect...
29.12 13:13:13 STATS: vdl.0 cache, locks:2
29.12 13:13:32 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:13:32 TIME: user.ping 0.15 ms
29.12 13:13:32 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:13:53 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:13:53 TIME: user.ping 0.13 ms
29.12 13:13:53 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:14:12 TIMER: Check auto-disconnect...
29.12 13:14:13 STATS: vdl.0 cache, locks:2
29.12 13:14:15 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:14:15 TIME: user.ping 0.12 ms
29.12 13:14:15 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:14:37 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:14:37 TIME: user.ping 0.14 ms
29.12 13:14:37 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:14:58 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:14:58 TIME: user.ping 0.21 ms
29.12 13:14:58 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:15:12 TIMER: Check auto-disconnect...
29.12 13:15:13 STATS: vdl.0 cache, locks:2
29.12 13:15:20 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:15:20 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:15:20 TIME: user.ping 0.33 ms
29.12 13:15:42 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:15:42 TIME: user.ping 0.17 ms
29.12 13:15:42 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:16:03 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:16:03 TIME: user.ping 0.13 ms
29.12 13:16:03 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:16:12 TIMER: Check auto-disconnect...
29.12 13:16:13 STATS: vdl.0 cache, locks:2
29.12 13:16:25 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:16:25 TIME: user.ping 0.14 ms
29.12 13:16:25 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:16:46 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:16:46 TIME: user.ping 0.14 ms
29.12 13:16:46 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:17:08 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:17:08 TIME: user.ping 0.11 ms
29.12 13:17:08 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:17:12 TIMER: Check auto-disconnect...
29.12 13:17:13 STATS: vdl.0 cache, locks:2
29.12 13:17:30 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:17:30 TIME: user.ping 0.14 ms
29.12 13:17:30 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:17:51 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:17:51 TIME: user.ping 0.16 ms
29.12 13:17:51 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:18:12 TIMER: Check auto-disconnect...
29.12 13:18:13 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:18:13 TIME: user.ping 0.14 ms
29.12 13:18:13 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:18:13 STATS: vdl.0 cache, locks:2
29.12 13:18:35 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:18:35 TIME: user.ping 0.11 ms
29.12 13:18:35 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:18:56 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:18:56 TIME: user.ping 0.15 ms
29.12 13:18:56 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:19:12 TIMER: Check auto-disconnect...
29.12 13:19:13 STATS: vdl.0 cache, locks:2
29.12 13:19:18 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:19:18 TIME: user.ping 0.21 ms
29.12 13:19:18 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:19:39 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:19:39 TIME: user.ping 0.13 ms
29.12 13:19:39 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:20:01 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:20:01 TIME: user.ping 0.12 ms
29.12 13:20:01 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:20:12 TIMER: Check auto-disconnect...
29.12 13:20:13 STATS: vdl.0 cache, locks:2
29.12 13:20:23 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:20:23 TIME: user.ping 0.12 ms
29.12 13:20:23 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:20:44 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:20:44 TIME: user.ping 0.12 ms
29.12 13:20:44 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:21:06 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:21:06 TIME: user.ping 0.12 ms
29.12 13:21:06 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:21:12 TIMER: Check auto-disconnect...
29.12 13:21:13 STATS: vdl.0 cache, locks:2
29.12 13:21:27 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:21:27 TIME: user.ping 0.13 ms
29.12 13:21:27 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:21:49 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:21:49 TIME: user.ping 0.14 ms
29.12 13:21:49 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:22:11 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:22:11 TIME: user.ping 0.25 ms
29.12 13:22:11 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:22:12 TIMER: Check auto-disconnect...
29.12 13:22:13 STATS: vdl.0 cache, locks:2
29.12 13:22:32 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:22:32 TIME: user.ping 0.12 ms
29.12 13:22:32 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:22:54 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:22:54 TIME: user.ping 0.12 ms
29.12 13:22:54 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:23:12 TIMER: Check auto-disconnect...
29.12 13:23:13 STATS: vdl.0 cache, locks:2
29.12 13:23:16 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:23:16 TIME: user.ping 0.14 ms
29.12 13:23:16 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:23:37 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:23:37 TIME: user.ping 0.13 ms
29.12 13:23:37 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:23:59 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:23:59 TIME: user.ping 0.1 ms
29.12 13:23:59 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:24:12 TIMER: Check auto-disconnect...
29.12 13:24:13 STATS: vdl.0 cache, locks:2
29.12 13:24:20 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:24:20 TIME: user.ping 0.11 ms
29.12 13:24:20 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:24:42 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:24:42 TIME: user.ping 0.12 ms
29.12 13:24:42 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:25:03 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:25:03 TIME: user.ping 0.15 ms
29.12 13:25:03 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:25:12 TIMER: Check auto-disconnect...
29.12 13:25:13 STATS: vdl.0 cache, locks:2
29.12 13:25:25 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:25:25 TIME: user.ping 0.2 ms
29.12 13:25:25 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:25:46 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:25:46 TIME: user.ping 0.14 ms
29.12 13:25:46 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:26:08 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:26:08 TIME: user.ping 0.14 ms
29.12 13:26:08 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:26:12 TIMER: Check auto-disconnect...
29.12 13:26:13 STATS: vdl.0 cache, locks:2
29.12 13:26:29 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:26:29 TIME: user.ping 0.14 ms
29.12 13:26:29 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:26:51 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:26:51 TIME: user.ping 0.13 ms
29.12 13:26:51 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:27:12 TIMER: Check auto-disconnect...
29.12 13:27:12 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:27:12 TIME: user.ping 0.12 ms
29.12 13:27:12 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:27:13 STATS: vdl.0 cache, locks:2
29.12 13:27:34 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:27:34 TIME: user.ping 0.14 ms
29.12 13:27:34 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:27:55 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:27:55 TIME: user.ping 0.13 ms
29.12 13:27:55 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:28:12 TIMER: Check auto-disconnect...
29.12 13:28:13 STATS: vdl.0 cache, locks:2
29.12 13:28:16 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:28:16 TIME: user.ping 0.11 ms
29.12 13:28:16 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:28:37 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:28:37 TIME: user.ping 0.13 ms
29.12 13:28:37 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:28:59 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:28:59 TIME: user.ping 0.16 ms
29.12 13:28:59 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:29:12 TIMER: Check auto-disconnect...
29.12 13:29:13 STATS: vdl.0 cache, locks:2
29.12 13:29:20 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:29:20 TIME: user.ping 0.13 ms
29.12 13:29:20 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:29:42 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:29:42 TIME: user.ping 0.12 ms
29.12 13:29:42 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:30:03 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:30:03 TIME: user.ping 0.15 ms
29.12 13:30:03 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:30:12 TIMER: Check auto-disconnect...
29.12 13:30:13 STATS: vdl.0 cache, locks:2
29.12 13:30:25 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:30:25 TIME: user.ping 0.12 ms
29.12 13:30:25 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:30:47 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:30:47 TIME: user.ping 0.11 ms
29.12 13:30:47 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:31:08 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:31:08 TIME: user.ping 0.3 ms
29.12 13:31:08 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:31:12 TIMER: Check auto-disconnect...
29.12 13:31:13 STATS: vdl.0 cache, locks:2
29.12 13:31:29 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:31:29 TIME: user.ping 0.14 ms
29.12 13:31:29 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:31:50 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:31:50 TIME: user.ping 0.11 ms
29.12 13:31:50 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:32:12 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:32:12 TIME: user.ping 0.12 ms
29.12 13:32:12 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:32:12 TIMER: Check auto-disconnect...
29.12 13:32:13 STATS: vdl.0 cache, locks:2
29.12 13:32:34 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:32:34 TIME: user.ping 0.14 ms
29.12 13:32:34 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:32:55 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:32:55 TIME: user.ping 0.11 ms
29.12 13:32:55 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:33:12 TIMER: Check auto-disconnect...
29.12 13:33:13 STATS: vdl.0 cache, locks:2
29.12 13:33:17 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:33:17 TIME: user.ping 0.19 ms
29.12 13:33:17 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:33:38 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:33:38 TIME: user.ping 0.11 ms
29.12 13:33:38 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:34:00 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:34:00 TIME: user.ping 0.12 ms
29.12 13:34:00 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:34:12 TIMER: Check auto-disconnect...
29.12 13:34:13 STATS: vdl.0 cache, locks:2
29.12 13:34:22 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:34:22 TIME: user.ping 0.14 ms
29.12 13:34:22 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:34:43 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:34:43 TIME: user.ping 0.13 ms
29.12 13:34:43 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:35:05 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:35:05 TIME: user.ping 0.17 ms
29.12 13:35:05 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:35:12 TIMER: Check auto-disconnect...
29.12 13:35:13 STATS: vdl.0 cache, locks:2
29.12 13:35:27 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:35:27 TIME: user.ping 0.12 ms
29.12 13:35:27 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:35:48 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:35:48 TIME: user.ping 0.16 ms
29.12 13:35:48 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:36:10 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:36:10 TIME: user.ping 0.13 ms
29.12 13:36:10 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:36:12 TIMER: Check auto-disconnect...
29.12 13:36:13 STATS: vdl.0 cache, locks:2
29.12 13:36:31 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:36:31 TIME: user.ping 0.13 ms
29.12 13:36:31 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:36:53 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:36:53 TIME: user.ping 0.12 ms
29.12 13:36:53 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:37:12 TIMER: Check auto-disconnect...
29.12 13:37:13 STATS: vdl.0 cache, locks:2
29.12 13:37:15 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:37:15 TIME: user.ping 0.16 ms
29.12 13:37:15 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:37:36 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:37:36 TIME: user.ping 0.13 ms
29.12 13:37:36 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:37:58 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:37:58 TIME: user.ping 0.14 ms
29.12 13:37:58 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:38:12 TIMER: Check auto-disconnect...
29.12 13:38:13 STATS: vdl.0 cache, locks:2
29.12 13:38:20 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:38:20 TIME: user.ping 0.16 ms
29.12 13:38:20 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:38:41 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:38:41 TIME: user.ping 0.32 ms
29.12 13:38:41 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:39:03 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:39:03 TIME: user.ping 0.13 ms
29.12 13:39:03 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:39:12 TIMER: Check auto-disconnect...
29.12 13:39:13 STATS: vdl.0 cache, locks:2
29.12 13:39:24 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:39:24 TIME: user.ping 0.12 ms
29.12 13:39:24 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:39:46 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:39:46 TIME: user.ping 0.22 ms
29.12 13:39:46 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:40:08 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:40:08 TIME: user.ping 0.12 ms
29.12 13:40:08 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:40:12 TIMER: Check auto-disconnect...
29.12 13:40:13 STATS: vdl.0 cache, locks:2
29.12 13:40:29 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:40:29 TIME: user.ping 0.12 ms
29.12 13:40:29 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:40:51 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:40:51 TIME: user.ping 0.25 ms
29.12 13:40:51 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:41:12 TIMER: Check auto-disconnect...
29.12 13:41:13 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:41:13 TIME: user.ping 0.13 ms
29.12 13:41:13 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:41:13 STATS: vdl.0 cache, locks:2
29.12 13:41:34 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:41:34 TIME: user.ping 0.12 ms
29.12 13:41:34 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:41:56 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:41:56 TIME: user.ping 0.17 ms
29.12 13:41:56 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:42:12 TIMER: Check auto-disconnect...
29.12 13:42:13 STATS: vdl.0 cache, locks:2
29.12 13:42:18 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:42:18 TIME: user.ping 0.14 ms
29.12 13:42:18 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:42:39 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:42:39 TIME: user.ping 0.13 ms
29.12 13:42:39 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:43:01 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:43:01 TIME: user.ping 0.14 ms
29.12 13:43:01 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:43:12 TIMER: Check auto-disconnect...
29.12 13:43:13 STATS: vdl.0 cache, locks:2
29.12 13:43:23 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:43:23 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:43:23 TIME: user.ping 0.19 ms
29.12 13:43:45 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:43:45 TIME: user.ping 0.14 ms
29.12 13:43:45 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:43:59 NET: Client (name:uid161 conid:38705103 TCP) disconnected from vdl.0 (clients:0)
29.12 13:43:59 DB: SELECT id FROM battle WHERE firstid=161 OR secondid=161 AND finished <> true
29.12 13:43:59 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=161 OR secondid=161 AND finished <> true, _type => core/server.query }
29.12 13:43:59 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.12 13:43:59 STATS: vdl.0 cache connection, 230 calls, total 0.19469952583313 sec spent, avg 0.85 ms
29.12 13:43:59 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.12 13:43:59 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
29.12 13:43:59 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.12 13:43:59 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 1009
29.12 13:43:59 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 161, _type => core/cache.update }
29.12 13:43:59 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.12 13:43:59 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 161, _type => core/cache.update }
29.12 13:43:59 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.12 13:43:59 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 161, _type => core/user.logoutPost }
29.12 13:43:59 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.12 13:44:12 TIMER: Check auto-disconnect...
29.12 13:44:13 NET: Client (conid:93997500) connected to vdl.0 (clients:1)
29.12 13:44:13 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTYx }
29.12 13:44:13 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid161' AND Password = 'uid161'
29.12 13:44:13 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid161' AND Password = 'uid161', _type => core/server.query }
29.12 13:44:13 -<<-: core/server.query { list => {{ name => uid161, networkid => , isbanned => false, id => 161 }}, errorCode => ok, _type => core/server.query }
29.12 13:44:13 ->>-: core/user.isOnlineID { id => 161, _type => core/user.isOnlineID }
29.12 13:44:13 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.12 13:44:13 ->>-: core/cache.get { type => user, v => -1, id => 161, _type => core/cache.get }
29.12 13:44:13 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid161, deleted => false, year => , email => mail, networktype =>   , password => uid161, isbanned => false, regdate => 2016-12-29 12:40:36.456335+00, city => , language => en, networkid => , params => { attrs => { _lastTime.24hr => 1483015805, lastLoginDate => 364, lastLoadDate => 1230 }, effects => { list => [] } }}, version => 0, id => 161 } }
29.12 13:44:13 ->>-: core/cache.get { type => questdata, v => -1, id => 161, _type => core/cache.get }
29.12 13:44:13 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 161 } }
29.12 13:44:13 NET: Client login (conid:93997500, id:161, name:uid161)
29.12 13:44:13 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 161, _type => core/user.loginPost, ipAddr => 91.225.76.192 }
29.12 13:44:13 -<<-: core/user.loginPost { _type => core/user.loginPost }
29.12 13:44:13 DB: SELECT token FROM tokens WHERE userid = 161
29.12 13:44:13 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 161, _type => core/server.query }
29.12 13:44:13 -<<-: core/server.query { list => {{ token => d2869e26f4cc8903e7918288f2227399 }}, errorCode => ok, _type => core/server.query }
29.12 13:44:13 == NET: uid161 ret: user.login { name => uid161, type => user.login, errorCode => ok, id => 161, token => d2869e26f4cc8903e7918288f2227399 }
29.12 13:44:13 == NET: uid161 ret: user.join { name => uid161, type => user.join }
29.12 13:44:13 STATS: vdl.0 cache, locks:2
29.12 13:44:18 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 161, _type => core/cache.update }
29.12 13:44:18 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.12 13:44:40 NET: Client (name:uid161 conid:93997500 TCP) disconnected from vdl.0 (clients:0)
29.12 13:44:40 DB: SELECT id FROM battle WHERE firstid=161 OR secondid=161 AND finished <> true
29.12 13:44:40 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=161 OR secondid=161 AND finished <> true, _type => core/server.query }
29.12 13:44:40 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
29.12 13:44:40 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.12 13:44:40 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
29.12 13:44:40 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
29.12 13:44:40 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 1009
29.12 13:44:40 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 161, _type => core/cache.update }
29.12 13:44:40 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
29.12 13:44:40 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 161, _type => core/cache.update }
29.12 13:44:40 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.12 13:44:40 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 161, _type => core/user.logoutPost }
29.12 13:44:40 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
29.12 13:45:12 TIMER: Check auto-disconnect...
29.12 13:45:12 NET: Client (conid:73525980) connected to vdl.0 (clients:1)
29.12 13:45:12 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTYx }
29.12 13:45:12 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid161' AND Password = 'uid161'
29.12 13:45:12 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid161' AND Password = 'uid161', _type => core/server.query }
29.12 13:45:12 -<<-: core/server.query { list => {{ name => uid161, networkid => , isbanned => false, id => 161 }}, errorCode => ok, _type => core/server.query }
29.12 13:45:12 STATS: vdl.0 cache connection, 247 calls, total 0.20299220085144 sec spent, avg 0.82 ms
29.12 13:45:12 ->>-: core/user.isOnlineID { id => 161, _type => core/user.isOnlineID }
29.12 13:45:12 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
29.12 13:45:12 ->>-: core/cache.get { type => user, v => -1, id => 161, _type => core/cache.get }
29.12 13:45:12 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid161, deleted => false, year => , email => mail, networktype =>   , password => uid161, isbanned => false, regdate => 2016-12-29 12:40:36.456335+00, city => , language => en, networkid => , params => { attrs => { _lastTime.24hr => 1483015805, lastLoginDate => 364, lastLoadDate => 1230 }, effects => { list => [] } }}, version => 0, id => 161 } }
29.12 13:45:12 ->>-: core/cache.get { type => questdata, v => -1, id => 161, _type => core/cache.get }
29.12 13:45:12 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 161 } }
29.12 13:45:12 NET: Client login (conid:73525980, id:161, name:uid161)
29.12 13:45:12 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 161, _type => core/user.loginPost, ipAddr => 91.225.76.192 }
29.12 13:45:12 -<<-: core/user.loginPost { _type => core/user.loginPost }
29.12 13:45:12 DB: SELECT token FROM tokens WHERE userid = 161
29.12 13:45:12 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 161, _type => core/server.query }
29.12 13:45:12 -<<-: core/server.query { list => {{ token => d2869e26f4cc8903e7918288f2227399 }}, errorCode => ok, _type => core/server.query }
29.12 13:45:12 == NET: uid161 ret: user.login { name => uid161, type => user.login, errorCode => ok, id => 161, token => d2869e26f4cc8903e7918288f2227399 }
29.12 13:45:12 == NET: uid161 ret: user.join { name => uid161, type => user.join }
29.12 13:45:13 STATS: vdl.0 cache, locks:2
29.12 13:45:17 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:45:17 TIME: user.ping 0.14 ms
29.12 13:45:17 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:45:18 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 161, _type => core/cache.update }
29.12 13:45:18 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
29.12 13:45:34 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:45:34 TIME: user.ping 0.11 ms
29.12 13:45:34 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:45:56 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:45:56 TIME: user.ping 0.17 ms
29.12 13:45:56 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:46:12 TIMER: Check auto-disconnect...
29.12 13:46:13 STATS: vdl.0 cache, locks:2
29.12 13:46:21 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:46:21 TIME: user.ping 0.13 ms
29.12 13:46:21 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:46:39 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:46:39 TIME: user.ping 0.14 ms
29.12 13:46:39 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:47:01 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:47:01 TIME: user.ping 0.14 ms
29.12 13:47:01 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:47:12 TIMER: Check auto-disconnect...
29.12 13:47:14 STATS: vdl.0 cache, locks:2
29.12 13:47:23 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:47:23 TIME: user.ping 0.12 ms
29.12 13:47:23 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:47:44 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:47:44 TIME: user.ping 0.17 ms
29.12 13:47:44 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:48:06 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:48:06 TIME: user.ping 0.29 ms
29.12 13:48:06 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:48:12 TIMER: Check auto-disconnect...
29.12 13:48:14 STATS: vdl.0 cache, locks:2
29.12 13:48:27 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:48:27 TIME: user.ping 0.17 ms
29.12 13:48:27 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:48:49 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:48:49 TIME: user.ping 0.14 ms
29.12 13:48:49 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:49:11 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:49:11 TIME: user.ping 0.15 ms
29.12 13:49:11 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:49:12 TIMER: Check auto-disconnect...
29.12 13:49:14 STATS: vdl.0 cache, locks:2
29.12 13:49:32 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:49:32 TIME: user.ping 0.13 ms
29.12 13:49:32 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:49:54 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:49:54 TIME: user.ping 0.14 ms
29.12 13:49:54 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:50:12 TIMER: Check auto-disconnect...
29.12 13:50:14 STATS: vdl.0 cache, locks:2
29.12 13:50:16 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:50:16 TIME: user.ping 0.12 ms
29.12 13:50:16 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:50:37 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:50:37 TIME: user.ping 0.12 ms
29.12 13:50:37 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:50:59 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:50:59 TIME: user.ping 0.13 ms
29.12 13:50:59 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:51:12 TIMER: Check auto-disconnect...
29.12 13:51:14 STATS: vdl.0 cache, locks:2
29.12 13:51:21 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:51:21 TIME: user.ping 0.16 ms
29.12 13:51:21 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:51:42 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:51:42 TIME: user.ping 0.13 ms
29.12 13:51:42 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:52:04 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:52:04 TIME: user.ping 0.11 ms
29.12 13:52:04 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:52:12 TIMER: Check auto-disconnect...
29.12 13:52:14 STATS: vdl.0 cache, locks:2
29.12 13:52:26 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:52:26 TIME: user.ping 0.1 ms
29.12 13:52:26 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:52:47 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:52:47 TIME: user.ping 0.27 ms
29.12 13:52:47 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:53:09 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:53:09 TIME: user.ping 0.12 ms
29.12 13:53:09 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:53:12 TIMER: Check auto-disconnect...
29.12 13:53:14 STATS: vdl.0 cache, locks:2
29.12 13:53:30 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:53:30 TIME: user.ping 0.13 ms
29.12 13:53:30 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:53:52 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:53:52 TIME: user.ping 0.14 ms
29.12 13:53:52 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:54:12 TIMER: Check auto-disconnect...
29.12 13:54:14 STATS: vdl.0 cache, locks:2
29.12 13:54:14 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:54:14 TIME: user.ping 0.34 ms
29.12 13:54:14 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:54:36 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:54:36 TIME: user.ping 0.14 ms
29.12 13:54:36 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:54:57 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:54:57 TIME: user.ping 0.15 ms
29.12 13:54:57 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:55:12 TIMER: Check auto-disconnect...
29.12 13:55:14 STATS: vdl.0 cache, locks:2
29.12 13:55:19 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:55:19 TIME: user.ping 0.11 ms
29.12 13:55:19 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:55:40 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:55:40 TIME: user.ping 0.14 ms
29.12 13:55:40 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:56:02 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:56:02 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:56:02 TIME: user.ping 0.13 ms
29.12 13:56:12 TIMER: Check auto-disconnect...
29.12 13:56:14 STATS: vdl.0 cache, locks:2
29.12 13:56:24 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:56:24 TIME: user.ping 0.14 ms
29.12 13:56:24 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:56:45 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:56:45 TIME: user.ping 0.11 ms
29.12 13:56:45 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:57:07 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:57:07 TIME: user.ping 0.17 ms
29.12 13:57:07 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:57:12 TIMER: Check auto-disconnect...
29.12 13:57:14 STATS: vdl.0 cache, locks:2
29.12 13:57:29 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:57:29 TIME: user.ping 0.13 ms
29.12 13:57:29 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:57:50 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:57:50 TIME: user.ping 0.14 ms
29.12 13:57:50 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:58:12 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:58:12 TIME: user.ping 0.13 ms
29.12 13:58:12 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:58:12 TIMER: Check auto-disconnect...
29.12 13:58:14 STATS: vdl.0 cache, locks:2
29.12 13:58:34 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:58:34 TIME: user.ping 0.12 ms
29.12 13:58:34 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:58:55 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:58:55 TIME: user.ping 0.13 ms
29.12 13:58:55 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:59:12 TIMER: Check auto-disconnect...
29.12 13:59:14 STATS: vdl.0 cache, locks:2
29.12 13:59:17 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:59:17 TIME: user.ping 0.11 ms
29.12 13:59:17 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
29.12 13:59:38 ++ NET: uid161 req: user.ping { messageType => user.ping, msg => ok }
29.12 13:59:38 TIME: user.ping 0.14 ms
29.12 13:59:38 == NET: uid161 ret: user.ping { type => user.ping, errorCode => ok }
