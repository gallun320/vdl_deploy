25.10 17:00:14 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:00:14 TIME: user.ping 0.2 ms
25.10 17:00:14 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:00:34 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:00:34 TIME: user.ping 0.17 ms
25.10 17:00:34 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:00:47 TIMER: Check auto-disconnect...
25.10 17:00:47 STATS: vdl.0 cache, locks:2
25.10 17:00:54 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:00:54 TIME: user.ping 0.09 ms
25.10 17:00:54 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:01:14 NET: Client (name:uid94 conid:30871992 TCP) disconnected from vdl.0 (clients:0)
25.10 17:01:14 DB: SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true
25.10 17:01:14 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true, _type => core/server.query }
25.10 17:01:14 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 17:01:14 STATS: vdl.0 cache connection, 57 calls, total 0.114104509353638 sec spent, avg 2 ms
25.10 17:01:14 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 17:01:14 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 17:01:14 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 17:01:14 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
25.10 17:01:14 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 94, _type => core/cache.update }
25.10 17:01:14 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 17:01:14 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 94, _type => core/cache.update }
25.10 17:01:14 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:01:14 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 94, _type => core/user.logoutPost }
25.10 17:01:14 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 17:01:42 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
25.10 17:01:42 -<<-: server.login ok
25.10 17:01:42 DB: SELECT * FROM LocalizationStrings
25.10 17:01:42 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:01:42 TIMER: Starting timer...
25.10 17:01:42 TIMER: Timer running...
25.10 17:01:42 DB: SELECT * FROM GameVars
25.10 17:01:42 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:01:42 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.10 17:01:42 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:01:42 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.10 17:01:42 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:01:42 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.10 17:01:42 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:01:42 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.10 17:01:42 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:01:42 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
25.10 17:01:42 -<<-: core/quest.getDaily ok
25.10 17:01:42 DB: SELECT * FROM UserAttributeTypes
25.10 17:01:42 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:01:42 DB: SELECT * FROM UserVariableTypes
25.10 17:01:42 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:01:42 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.10 17:01:42 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:01:42 DB: SELECT * FROM ItemGroups
25.10 17:01:42 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:01:42 DB: SELECT * FROM Bundles ORDER BY ID
25.10 17:01:42 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:01:42 DB: SELECT * FROM BundleItems ORDER BY ID
25.10 17:01:42 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:01:42 SHOP: loading items...
25.10 17:01:42 ->>-: core/shop.getList { _type => core/shop.getList }
25.10 17:01:42 -<<-: core/shop.getList ok
25.10 17:01:42 SHOP: 0 items loaded (0 sec)
25.10 17:01:42 DB: SELECT * FROM EffectAttributeTypes
25.10 17:01:42 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:01:42 DB: SELECT * FROM Effects
25.10 17:01:42 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:01:42 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 17:01:42 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:01:42 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 17:01:42 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:01:42 DB: SELECT * FROM Badges
25.10 17:01:42 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.10 17:01:42 -<<-: core/server.query ok
25.10 17:02:07 NET: Client (conid:8278636) connected to vdl.0 (clients:1)
25.10 17:02:07 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
25.10 17:02:07 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 17:02:07 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 17:02:07 -<<-: core/server.query ok
25.10 17:02:07 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 17:02:07 -<<-: core/user.isOnlineID ok
25.10 17:02:07 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 17:02:07 -<<-: core/cache.get ok
25.10 17:02:07 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 17:02:07 -<<-: core/cache.get ok
25.10 17:02:07 NET: Client login (conid:8278636, id:94, name:uid94)
25.10 17:02:07 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 17:02:07 -<<-: core/user.loginPost null
25.10 17:02:07 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
25.10 17:02:07 == NET: uid94 ret: user.join { name => uid94, type => user.join }
25.10 17:02:12 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:02:12 TIME: user.ping 0.25 ms
25.10 17:02:12 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:02:17 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 17:02:17 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:02:32 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:02:32 TIME: user.ping 0.09 ms
25.10 17:02:32 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:02:42 TIMER: Check auto-disconnect...
25.10 17:02:42 STATS: vdl.0 cache, locks:2
25.10 17:02:42 NET: Client (conid:6315837) connected to vdl.0 (clients:2)
25.10 17:02:43 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
25.10 17:02:43 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 17:02:43 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 17:02:43 -<<-: core/server.query { list => {{ name => uid95, networkid => , isbanned => false, id => 95 }}, errorCode => ok, _type => core/server.query }
25.10 17:02:43 STATS: vdl.0 cache connection, 27 calls, total 0.0347874164581299 sec spent, avg 1.29 ms
25.10 17:02:43 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 17:02:43 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 17:02:43 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 17:02:43 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid95, deleted => false, email => , networktype =>   , password => uid95, isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402835, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 95 } }
25.10 17:02:43 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 17:02:43 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 95 } }
25.10 17:02:43 NET: Client login (conid:6315837, id:95, name:uid95)
25.10 17:02:43 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 17:02:43 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 17:02:43 == NET: uid94 ret: user.join { name => uid95, type => user.join }
25.10 17:02:43 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
25.10 17:02:43 == NET: uid95 ret: user.join { name => uid94, type => user.join }
25.10 17:02:43 == NET: uid95 ret: user.join { name => uid95, type => user.join }
25.10 17:02:46 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:02:46 TIME: user.ping 0.21 ms
25.10 17:02:46 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:02:48 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:02:48 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:02:48 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [76], round => 1, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:04, startdate => 2016-25-10 17:04 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:02:48 TIME: tournament.getAvailableTournament 2.49 ms
25.10 17:02:48 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [76], round => 1, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:04, startdate => 2016-25-10 17:04 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:02:52 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 17:02:52 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:02:52 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:02:52 TIME: user.ping 0.15 ms
25.10 17:02:52 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:02:54 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:02:54 TIME: user.ping 0.16 ms
25.10 17:02:54 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:03:02 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:03:02 TIME: user.ping 0.12 ms
25.10 17:03:02 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:03:09 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:03:09 TIME: user.ping 0.14 ms
25.10 17:03:09 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:03:12 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:03:12 TIME: user.ping 0.1 ms
25.10 17:03:12 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:03:17 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:03:17 TIME: user.ping 0.16 ms
25.10 17:03:17 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:03:32 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:03:32 TIME: user.ping 0.2 ms
25.10 17:03:32 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:03:42 TIMER: Check auto-disconnect...
25.10 17:03:42 STATS: vdl.0 cache, locks:4
25.10 17:03:52 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:03:52 TIME: user.ping 0.19 ms
25.10 17:03:52 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:04:12 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:04:12 TIME: user.ping 0.29 ms
25.10 17:04:12 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:04:17 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:04:17 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:04:17 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [76], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:04, startdate => 2016-25-10 17:04 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:04:17 STATS: vdl.0 cache connection, 34 calls, total 0.0542032718658447 sec spent, avg 1.59 ms
25.10 17:04:17 TIME: tournament.getAvailableTournament 5.97 ms
25.10 17:04:17 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [76], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:04, startdate => 2016-25-10 17:04 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:04:21 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:04:21 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:04:21 TIME: user.ping 0.14 ms
25.10 17:04:32 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:04:32 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:04:32 TIME: user.ping 0.18 ms
25.10 17:04:42 TIMER: Check auto-disconnect...
25.10 17:04:42 STATS: vdl.0 cache, locks:4
25.10 17:04:52 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:04:52 TIME: user.ping 0.17 ms
25.10 17:04:52 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:05:03 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:05:03 TIME: user.ping 0.14 ms
25.10 17:05:03 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:05:11 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:05:11 TIME: user.ping 0.23 ms
25.10 17:05:11 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:05:12 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:05:12 TIME: user.ping 0.11 ms
25.10 17:05:12 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:05:18 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:05:18 TIME: user.ping 0.17 ms
25.10 17:05:18 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:05:25 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:05:25 TIME: user.ping 0.14 ms
25.10 17:05:25 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:05:32 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:05:32 TIME: user.ping 0.13 ms
25.10 17:05:32 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:05:33 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:05:33 TIME: user.ping 0.1 ms
25.10 17:05:33 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:05:40 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:05:40 TIME: user.ping 0.06 ms
25.10 17:05:40 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:05:42 TIMER: Check auto-disconnect...
25.10 17:05:42 STATS: vdl.0 cache, locks:4
25.10 17:05:48 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:05:48 TIME: user.ping 0.24 ms
25.10 17:05:48 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:05:53 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:05:53 TIME: user.ping 0.17 ms
25.10 17:05:53 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:05:55 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:05:55 TIME: user.ping 0.16 ms
25.10 17:05:55 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:06:02 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:06:02 TIME: user.ping 0.09 ms
25.10 17:06:02 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:06:10 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:06:10 TIME: user.ping 0.11 ms
25.10 17:06:10 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:06:13 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:06:13 TIME: user.ping 0.07 ms
25.10 17:06:13 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:06:17 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:06:17 TIME: user.ping 0.13 ms
25.10 17:06:17 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:06:25 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:06:25 TIME: user.ping 0.15 ms
25.10 17:06:25 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:06:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:06:32 TIME: user.ping 0.2 ms
25.10 17:06:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:06:33 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:06:33 TIME: user.ping 0.16 ms
25.10 17:06:33 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:06:40 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:06:40 TIME: user.ping 0.12 ms
25.10 17:06:40 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:06:42 TIMER: Check auto-disconnect...
25.10 17:06:42 STATS: vdl.0 cache, locks:4
25.10 17:06:47 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:06:47 TIME: user.ping 0.18 ms
25.10 17:06:47 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:06:53 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:06:53 TIME: user.ping 0.19 ms
25.10 17:06:53 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:06:54 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:06:54 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:06:54 TIME: user.ping 0.19 ms
25.10 17:07:02 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:07:02 TIME: user.ping 0.17 ms
25.10 17:07:02 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:07:09 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:07:09 TIME: user.ping 0.1 ms
25.10 17:07:09 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:07:13 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:07:13 TIME: user.ping 0.22 ms
25.10 17:07:13 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:07:17 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:07:17 TIME: user.ping 0.14 ms
25.10 17:07:17 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:07:34 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
25.10 17:07:34 -<<-: server.login ok
25.10 17:07:34 DB: SELECT * FROM LocalizationStrings
25.10 17:07:34 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:34 TIMER: Starting timer...
25.10 17:07:34 TIMER: Timer running...
25.10 17:07:34 DB: SELECT * FROM GameVars
25.10 17:07:34 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:34 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.10 17:07:34 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:34 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.10 17:07:34 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:34 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.10 17:07:34 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:34 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.10 17:07:34 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:34 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
25.10 17:07:34 -<<-: core/quest.getDaily ok
25.10 17:07:34 DB: SELECT * FROM UserAttributeTypes
25.10 17:07:34 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:34 DB: SELECT * FROM UserVariableTypes
25.10 17:07:34 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:34 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.10 17:07:34 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:34 DB: SELECT * FROM ItemGroups
25.10 17:07:34 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:34 DB: SELECT * FROM Bundles ORDER BY ID
25.10 17:07:34 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:34 DB: SELECT * FROM BundleItems ORDER BY ID
25.10 17:07:34 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:34 SHOP: loading items...
25.10 17:07:34 ->>-: core/shop.getList { _type => core/shop.getList }
25.10 17:07:34 -<<-: core/shop.getList ok
25.10 17:07:34 SHOP: 0 items loaded (0 sec)
25.10 17:07:34 DB: SELECT * FROM EffectAttributeTypes
25.10 17:07:34 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:34 DB: SELECT * FROM Effects
25.10 17:07:34 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:34 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 17:07:34 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:34 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 17:07:34 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:34 DB: SELECT * FROM Badges
25.10 17:07:34 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.10 17:07:34 -<<-: core/server.query ok
25.10 17:07:39 NET: Client (conid:80233101) connected to vdl.0 (clients:1)
25.10 17:07:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:07:41 TIME: user.ping 0.36 ms
25.10 17:07:41 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:07:48 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:07:48 TIME: user.ping 0.1 ms
25.10 17:07:48 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:07:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:07:56 TIME: user.ping 0.16 ms
25.10 17:07:56 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:08:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:08:03 TIME: user.ping 0.12 ms
25.10 17:08:03 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:08:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:08:11 TIME: user.ping 0.11 ms
25.10 17:08:11 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:08:13 NET: Client (conid:86960092) connected to vdl.0 (clients:2)
25.10 17:08:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:08:18 TIME: user.ping 0.19 ms
25.10 17:08:18 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:08:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:08:18 TIME: user.ping 0.07 ms
25.10 17:08:18 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:08:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:08:26 TIME: user.ping 0.12 ms
25.10 17:08:26 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:08:33 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:08:33 TIME: user.ping 0.12 ms
25.10 17:08:33 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:08:34 TIMER: Check auto-disconnect...
25.10 17:08:34 STATS: vdl.0 cache, locks:0
25.10 17:08:38 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:08:38 TIME: user.ping 0.08 ms
25.10 17:08:38 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:08:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:08:41 TIME: user.ping 0.06 ms
25.10 17:08:41 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:08:48 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:08:48 TIME: user.ping 0.15 ms
25.10 17:08:48 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:08:55 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:08:55 TIME: user.ping 0.12 ms
25.10 17:08:55 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:08:58 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:08:58 TIME: user.ping 0.21 ms
25.10 17:08:58 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:08:58 NET: Client (name:null conid:80233101 TCP) disconnected from vdl.0 (clients:1)
25.10 17:09:02 NET: Client (conid:89227623) connected to vdl.0 (clients:2)
25.10 17:09:03 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
25.10 17:09:03 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 17:09:03 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 17:09:03 -<<-: core/server.query ok
25.10 17:09:03 STATS: vdl.0 cache connection, 21 calls, total 0.026139497756958 sec spent, avg 1.24 ms
25.10 17:09:03 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 17:09:03 -<<-: core/user.isOnlineID ok
25.10 17:09:03 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 17:09:03 -<<-: core/cache.get ok
25.10 17:09:03 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 17:09:03 -<<-: core/cache.get ok
25.10 17:09:03 NET: Client login (conid:89227623, id:95, name:uid95)
25.10 17:09:03 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 17:09:03 -<<-: core/user.loginPost null
25.10 17:09:03 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
25.10 17:09:03 == NET: null ret: user.join { name => uid95, type => user.join }
25.10 17:09:03 == NET: uid95 ret: user.join { name => null, type => user.join }
25.10 17:09:03 == NET: uid95 ret: user.join { name => uid95, type => user.join }
25.10 17:09:04 NET: Client (name:null conid:86960092 TCP) disconnected from vdl.0 (clients:1)
25.10 17:09:06 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:09:06 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:09:06 TIME: user.ping 0.17 ms
25.10 17:09:09 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 17:09:09 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:09:13 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:09:13 TIME: user.ping 0.21 ms
25.10 17:09:13 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:09:16 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:09:16 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:16 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:16 TIME: tournament.getAvailableTournament 3.53 ms
25.10 17:09:16 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:19 NET: Client (conid:34631819) connected to vdl.0 (clients:2)
25.10 17:09:21 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:09:21 TIME: user.ping 0.18 ms
25.10 17:09:21 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:09:22 ++ NET: uid95 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 17:09:22 ->>-: vdl/cache.tournament.addUsers { userId => 95, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 17:09:22 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 17:09:22 TIME: tournament.addUsers 0.43 ms
25.10 17:09:22 == NET: uid95 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 17:09:22 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:09:22 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:22 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:22 TIME: tournament.getAvailableTournament 3.93 ms
25.10 17:09:22 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:23 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
25.10 17:09:23 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 17:09:23 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 17:09:23 -<<-: core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
25.10 17:09:23 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 17:09:23 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 17:09:23 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 17:09:23 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 94 } }
25.10 17:09:23 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 17:09:23 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
25.10 17:09:23 NET: Client login (conid:34631819, id:94, name:uid94)
25.10 17:09:23 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 17:09:23 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 17:09:23 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
25.10 17:09:23 == NET: uid95 ret: user.join { name => uid94, type => user.join }
25.10 17:09:23 == NET: uid94 ret: user.join { name => uid95, type => user.join }
25.10 17:09:23 == NET: uid94 ret: user.join { name => uid94, type => user.join }
25.10 17:09:29 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 17:09:29 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:09:29 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:09:29 TIME: user.ping 0.11 ms
25.10 17:09:29 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:09:34 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:09:34 TIME: user.ping 0.31 ms
25.10 17:09:34 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:09:34 TIMER: Check auto-disconnect...
25.10 17:09:34 STATS: vdl.0 cache, locks:4
25.10 17:09:37 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:09:37 TIME: user.ping 0.19 ms
25.10 17:09:37 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:09:38 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:09:38 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:38 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:38 TIME: tournament.getAvailableTournament 3.48 ms
25.10 17:09:38 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:43 ++ NET: uid94 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 17:09:43 ->>-: vdl/cache.tournament.addUsers { userId => 94, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 17:09:43 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 17:09:43 TIME: tournament.addUsers 0.75 ms
25.10 17:09:43 == NET: uid94 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 17:09:44 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:09:44 TIME: user.ping 0.18 ms
25.10 17:09:44 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:09:52 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:09:52 TIME: user.ping 0.12 ms
25.10 17:09:52 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:09:55 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:09:55 TIME: user.ping 0.21 ms
25.10 17:09:55 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:09:57 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:09:57 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:57 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:57 TIME: tournament.getAvailableTournament 6.11 ms
25.10 17:09:57 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:59 ++ NET: uid94 req: tournament.deleteUsers { tournamentId => 1, messageType => tournament.deleteUsers }
25.10 17:09:59 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 17:09:59 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95,94] }
25.10 17:09:59 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [95], _type => vdl/cache.tournament.setUsersTournament }
25.10 17:09:59 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
25.10 17:09:59 TIME: tournament.deleteUsers 0.9 ms
25.10 17:09:59 == NET: uid94 ret: tournament.deleteUsers { type => tournament.deleteUsers, errorCode => ok }
25.10 17:09:59 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:09:59 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:59 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:59 TIME: tournament.getAvailableTournament 1.14 ms
25.10 17:09:59 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:09:59 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:09:59 TIME: user.ping 0.21 ms
25.10 17:09:59 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:10:05 NET: Client (name:uid95 conid:89227623 TCP) disconnected from vdl.0 (clients:1)
25.10 17:10:05 DB: SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true
25.10 17:10:05 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true, _type => core/server.query }
25.10 17:10:05 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 17:10:05 STATS: vdl.0 cache connection, 42 calls, total 0.062025785446167 sec spent, avg 1.48 ms
25.10 17:10:05 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 17:10:05 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 17:10:05 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 17:10:05 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
25.10 17:10:05 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 95, _type => core/cache.update }
25.10 17:10:05 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 17:10:05 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 95, _type => core/cache.update }
25.10 17:10:05 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:10:05 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 95, _type => core/user.logoutPost }
25.10 17:10:05 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 17:10:15 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:10:15 TIME: user.ping 0.23 ms
25.10 17:10:15 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:10:34 TIMER: Check auto-disconnect...
25.10 17:10:34 STATS: vdl.0 cache, locks:2
25.10 17:10:35 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:10:35 TIME: user.ping 0.16 ms
25.10 17:10:35 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:10:55 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:10:55 TIME: user.ping 0.15 ms
25.10 17:10:55 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:11:15 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:11:15 TIME: user.ping 0.08 ms
25.10 17:11:15 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:11:34 TIMER: Check auto-disconnect...
25.10 17:11:34 STATS: vdl.0 cache, locks:2
25.10 17:11:35 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:11:35 TIME: user.ping 0.14 ms
25.10 17:11:35 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:11:42 NET: Client (name:uid94 conid:34631819 TCP) disconnected from vdl.0 (clients:0)
25.10 17:11:42 DB: SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true
25.10 17:11:42 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true, _type => core/server.query }
25.10 17:11:42 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 17:11:42 STATS: vdl.0 cache connection, 47 calls, total 0.0671219825744629 sec spent, avg 1.43 ms
25.10 17:11:42 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 17:11:42 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 17:11:42 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 17:11:42 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
25.10 17:11:42 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 94, _type => core/cache.update }
25.10 17:11:42 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 17:11:42 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 94, _type => core/cache.update }
25.10 17:11:42 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:11:42 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 94, _type => core/user.logoutPost }
25.10 17:11:42 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 17:11:59 NET: Client (conid:26687659) connected to vdl.0 (clients:1)
25.10 17:12:03 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
25.10 17:12:03 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 17:12:03 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 17:12:03 -<<-: core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
25.10 17:12:03 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 17:12:03 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 17:12:03 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 17:12:03 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 94 } }
25.10 17:12:03 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 17:12:03 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
25.10 17:12:03 NET: Client login (conid:26687659, id:94, name:uid94)
25.10 17:12:03 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 17:12:03 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 17:12:03 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
25.10 17:12:03 == NET: uid94 ret: user.join { name => uid94, type => user.join }
25.10 17:12:08 NET: Client (conid:35185696) connected to vdl.0 (clients:2)
25.10 17:12:08 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
25.10 17:12:08 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 17:12:08 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 17:12:08 -<<-: core/server.query { list => {{ name => uid95, networkid => , isbanned => false, id => 95 }}, errorCode => ok, _type => core/server.query }
25.10 17:12:08 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 17:12:08 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 17:12:08 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 17:12:08 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid95, deleted => false, email => , networktype =>   , password => uid95, isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402835, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 95 } }
25.10 17:12:08 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 17:12:08 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 95 } }
25.10 17:12:08 NET: Client login (conid:35185696, id:95, name:uid95)
25.10 17:12:08 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 17:12:08 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 17:12:08 == NET: uid94 ret: user.join { name => uid95, type => user.join }
25.10 17:12:08 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
25.10 17:12:08 == NET: uid95 ret: user.join { name => uid94, type => user.join }
25.10 17:12:08 == NET: uid95 ret: user.join { name => uid95, type => user.join }
25.10 17:12:09 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 17:12:09 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:12:12 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:12:12 TIME: user.ping 0.26 ms
25.10 17:12:12 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:12:14 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 17:12:14 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:12:14 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:12:14 TIME: user.ping 0.2 ms
25.10 17:12:14 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:12:17 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:12:17 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:12:17 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:12:17 TIME: tournament.getAvailableTournament 4.05 ms
25.10 17:12:17 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:15, startdate => 2016-25-10 17:15 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:12:19 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:12:19 TIME: user.ping 0.15 ms
25.10 17:12:19 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:12:23 ++ NET: uid94 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 17:12:23 ->>-: vdl/cache.tournament.addUsers { userId => 94, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 17:12:23 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 17:12:23 TIME: tournament.addUsers 0.38 ms
25.10 17:12:23 == NET: uid94 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 17:15:41 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
25.10 17:15:41 -<<-: server.login ok
25.10 17:15:41 DB: SELECT * FROM LocalizationStrings
25.10 17:15:41 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:41 TIMER: Starting timer...
25.10 17:15:41 TIMER: Timer running...
25.10 17:15:41 DB: SELECT * FROM GameVars
25.10 17:15:41 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:41 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.10 17:15:41 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:41 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.10 17:15:41 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:41 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.10 17:15:41 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:41 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.10 17:15:41 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:41 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
25.10 17:15:41 -<<-: core/quest.getDaily ok
25.10 17:15:41 DB: SELECT * FROM UserAttributeTypes
25.10 17:15:41 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:41 DB: SELECT * FROM UserVariableTypes
25.10 17:15:41 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:41 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.10 17:15:41 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:41 DB: SELECT * FROM ItemGroups
25.10 17:15:41 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:41 DB: SELECT * FROM Bundles ORDER BY ID
25.10 17:15:41 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:41 DB: SELECT * FROM BundleItems ORDER BY ID
25.10 17:15:41 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:41 SHOP: loading items...
25.10 17:15:41 ->>-: core/shop.getList { _type => core/shop.getList }
25.10 17:15:41 -<<-: core/shop.getList ok
25.10 17:15:41 SHOP: 0 items loaded (0 sec)
25.10 17:15:41 DB: SELECT * FROM EffectAttributeTypes
25.10 17:15:41 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:41 DB: SELECT * FROM Effects
25.10 17:15:41 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:41 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 17:15:41 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:41 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 17:15:41 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:41 DB: SELECT * FROM Badges
25.10 17:15:41 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.10 17:15:41 -<<-: core/server.query ok
25.10 17:15:56 NET: Client (conid:18241572) connected to vdl.0 (clients:1)
25.10 17:16:01 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:16:01 TIME: user.ping 0.23 ms
25.10 17:16:01 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:16:05 NET: Client (conid:46870645) connected to vdl.0 (clients:2)
25.10 17:16:06 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
25.10 17:16:06 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 17:16:06 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 17:16:06 -<<-: core/server.query ok
25.10 17:16:06 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 17:16:06 -<<-: core/user.isOnlineID ok
25.10 17:16:06 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 17:16:06 -<<-: core/cache.get ok
25.10 17:16:06 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 17:16:06 -<<-: core/cache.get ok
25.10 17:16:06 NET: Client login (conid:46870645, id:95, name:uid95)
25.10 17:16:06 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 17:16:06 -<<-: core/user.loginPost null
25.10 17:16:06 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
25.10 17:16:06 == NET: null ret: user.join { name => uid95, type => user.join }
25.10 17:16:06 == NET: uid95 ret: user.join { name => null, type => user.join }
25.10 17:16:06 == NET: uid95 ret: user.join { name => uid95, type => user.join }
25.10 17:16:10 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:16:10 TIME: user.ping 0.19 ms
25.10 17:16:10 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:16:11 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 17:16:11 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:16:21 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:16:21 TIME: user.ping 0.13 ms
25.10 17:16:21 == NET: null ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:16:29 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:16:29 TIME: user.ping 0.17 ms
25.10 17:16:29 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:16:36 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:16:36 TIME: user.ping 0.15 ms
25.10 17:16:36 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:16:38 NET: Client (name:null conid:18241572 TCP) disconnected from vdl.0 (clients:1)
25.10 17:16:41 TIMER: Check auto-disconnect...
25.10 17:16:41 STATS: vdl.0 cache, locks:2
25.10 17:16:44 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:16:44 TIME: user.ping 0.16 ms
25.10 17:16:44 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:16:51 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:16:51 TIME: user.ping 0.73 ms
25.10 17:16:51 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:16:53 NET: Client (conid:59771598) connected to vdl.0 (clients:2)
25.10 17:16:57 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
25.10 17:16:57 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 17:16:57 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 17:16:57 -<<-: core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
25.10 17:16:57 STATS: vdl.0 cache connection, 27 calls, total 0.0351264476776123 sec spent, avg 1.3 ms
25.10 17:16:57 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 17:16:57 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 17:16:57 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 17:16:57 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 94 } }
25.10 17:16:57 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 17:16:57 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
25.10 17:16:57 NET: Client login (conid:59771598, id:94, name:uid94)
25.10 17:16:57 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 17:16:57 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 17:16:57 == NET: uid95 ret: user.join { name => uid94, type => user.join }
25.10 17:16:57 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
25.10 17:16:57 == NET: uid94 ret: user.join { name => uid95, type => user.join }
25.10 17:16:57 == NET: uid94 ret: user.join { name => uid94, type => user.join }
25.10 17:16:58 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:16:58 TIME: user.ping 0.18 ms
25.10 17:16:58 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:17:05 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:17:05 TIME: user.ping 0.09 ms
25.10 17:17:05 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:17:06 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 17:17:06 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:17:08 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:17:08 TIME: user.ping 0.22 ms
25.10 17:17:08 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:17:13 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:17:13 TIME: user.ping 0.34 ms
25.10 17:17:13 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:17:15 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:17:15 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:17:15 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 17:19, startdate => 2016-25-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:17:15 TIME: tournament.getAvailableTournament 3.31 ms
25.10 17:17:15 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 17:19, startdate => 2016-25-10 17:19 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:17:19 ++ NET: uid94 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
25.10 17:17:19 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 17:17:19 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
25.10 17:17:19 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 17:17:19 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95,94] }
25.10 17:17:19 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 95, player2 => 94 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
25.10 17:17:19 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 95, player2 => 94 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 17:17:19 TIME: tournament.grid 7.03 ms
25.10 17:17:19 == NET: uid94 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 95, player2 => 94 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 17:17:20 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:17:20 TIME: user.ping 0.15 ms
25.10 17:17:20 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:17:23 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:17:23 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:17:23 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 17:19, startdate => 2016-25-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:17:23 TIME: tournament.getAvailableTournament 4.92 ms
25.10 17:17:23 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 17:19, startdate => 2016-25-10 17:19 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:17:27 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:17:27 TIME: user.ping 0.17 ms
25.10 17:17:27 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:17:29 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:17:29 TIME: user.ping 0.16 ms
25.10 17:17:29 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:17:34 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:17:34 TIME: user.ping 0.16 ms
25.10 17:17:34 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:17:41 TIMER: Check auto-disconnect...
25.10 17:17:41 STATS: vdl.0 cache, locks:4
25.10 17:17:42 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:17:42 TIME: user.ping 0.18 ms
25.10 17:17:42 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:17:49 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:17:49 TIME: user.ping 0.18 ms
25.10 17:17:49 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:17:49 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:17:49 TIME: user.ping 0.2 ms
25.10 17:17:49 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:17:56 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:17:56 TIME: user.ping 0.18 ms
25.10 17:17:56 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:18:03 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:18:03 TIME: user.ping 0.16 ms
25.10 17:18:03 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:18:09 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:18:09 TIME: user.ping 0.15 ms
25.10 17:18:09 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:18:11 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:18:11 TIME: user.ping 0.18 ms
25.10 17:18:11 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:18:18 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:18:18 TIME: user.ping 0.16 ms
25.10 17:18:18 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:18:25 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:18:25 TIME: user.ping 0.2 ms
25.10 17:18:25 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:18:29 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:18:29 TIME: user.ping 0.07 ms
25.10 17:18:29 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:18:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:18:32 TIME: user.ping 0.16 ms
25.10 17:18:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:18:39 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:18:39 TIME: user.ping 0.12 ms
25.10 17:18:39 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:18:41 TIMER: Check auto-disconnect...
25.10 17:18:41 STATS: vdl.0 cache, locks:4
25.10 17:18:47 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:18:47 TIME: user.ping 0.14 ms
25.10 17:18:47 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:18:49 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:18:49 TIME: user.ping 0.34 ms
25.10 17:18:49 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:18:54 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:18:54 TIME: user.ping 0.14 ms
25.10 17:18:54 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:19:01 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:19:01 TIME: user.ping 0.08 ms
25.10 17:19:01 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:19:08 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:19:08 TIME: user.ping 0.13 ms
25.10 17:19:08 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:19:09 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:19:09 TIME: user.ping 0.17 ms
25.10 17:19:09 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:19:16 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:19:16 TIME: user.ping 0.09 ms
25.10 17:19:16 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:19:23 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:19:23 TIME: user.ping 0.16 ms
25.10 17:19:23 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:19:29 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:19:29 TIME: user.ping 0.17 ms
25.10 17:19:29 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:19:30 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:19:30 TIME: user.ping 0.18 ms
25.10 17:19:30 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:19:37 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:19:37 TIME: user.ping 0.18 ms
25.10 17:19:37 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:19:41 TIMER: Check auto-disconnect...
25.10 17:19:41 -<<-: tournament.enemyEvent { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-25-10 17:19, id => 94, enemy.num => 2, battleId => 78, player => 1 }, _isNotify => true, id => 94, _type => tournament.enemyEvent }
25.10 17:19:41 -<<-: tournament.enemyEvent { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-25-10 17:19, id => 95, enemy.num => 1, battleId => 78, player => 2 }, _isNotify => true, id => 95, _type => tournament.enemyEvent }
25.10 17:19:41 == NET: uid94 ret: tournament.enemy { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-25-10 17:19, id => 94, enemy.num => 2, battleId => 78, player => 1 }, type => tournament.enemy }
25.10 17:19:41 == NET: uid95 ret: tournament.enemy { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-25-10 17:19, id => 95, enemy.num => 1, battleId => 78, player => 2 }, type => tournament.enemy }
25.10 17:19:41 STATS: vdl.0 cache, locks:4
25.10 17:19:47 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:19:47 TIME: user.ping 0.2 ms
25.10 17:19:47 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:19:52 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:19:52 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:19:52 TIME: user.ping 0.17 ms
25.10 17:19:57 ++ NET: uid94 req: battle.sendtask { dice => 0, from => (0.0, 0.0), roomId => 78, name => throw, side => 2, dices => 425505, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
25.10 17:19:57 ->>-: vdl/cache.battle.infoRoom { roomId => 78, _type => vdl/cache.battle.infoRoom }
25.10 17:19:57 -<<-: vdl/cache.battle.infoRoom { secondId => 95, firstId => 94, _type => vdl/cache.battle.infoRoom, turnId => 94 }
25.10 17:19:57 STATS: vdl.0 cache connection, 38 calls, total 0.0562388896942139 sec spent, avg 1.48 ms
25.10 17:19:57 TIME: battle.sendtask 0.58 ms
25.10 17:19:57 == NET: uid94 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
25.10 17:19:57 == NET: uid95 ret: battle.task { dice => 0, from => (0.0, 0.0), roomId => 78, name => throw, side => 2, type => battle.task, dices => 425505, messageType => battle.sendtask, to => (0.0, 0.0), diceID => 0 }
25.10 17:19:57 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:19:57 TIME: user.ping 0.22 ms
25.10 17:19:57 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:20:02 ++ NET: uid94 req: battle.sendtask { dice => 5, from => (7.0, 4.0), roomId => 78, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (8.0, 4.0), diceID => 0 }
25.10 17:20:02 ->>-: vdl/cache.battle.infoRoom { roomId => 78, _type => vdl/cache.battle.infoRoom }
25.10 17:20:02 -<<-: vdl/cache.battle.infoRoom { secondId => 95, firstId => 94, _type => vdl/cache.battle.infoRoom, turnId => 94 }
25.10 17:20:02 TIME: battle.sendtask 0.66 ms
25.10 17:20:02 == NET: uid94 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
25.10 17:20:02 == NET: uid95 ret: battle.task { dice => 5, from => (7.0, 4.0), roomId => 78, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (8.0, 4.0), diceID => 0 }
25.10 17:20:03 ++ NET: uid94 req: battle.sendtask { dice => 5, from => (8.0, 4.0), roomId => 78, name => swap, side => 2, dices => null, messageType => battle.sendtask, to => (9.0, 4.0), diceID => 0 }
25.10 17:20:03 ->>-: vdl/cache.battle.infoRoom { roomId => 78, _type => vdl/cache.battle.infoRoom }
25.10 17:20:03 -<<-: vdl/cache.battle.infoRoom { secondId => 95, firstId => 94, _type => vdl/cache.battle.infoRoom, turnId => 94 }
25.10 17:20:03 TIME: battle.sendtask 0.78 ms
25.10 17:20:03 == NET: uid94 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
25.10 17:20:03 == NET: uid95 ret: battle.task { dice => 5, from => (8.0, 4.0), roomId => 78, name => swap, side => 2, type => battle.task, dices => null, messageType => battle.sendtask, to => (9.0, 4.0), diceID => 0 }
25.10 17:20:07 ++ NET: uid94 req: tournament.lose { winner => 95, messageType => tournament.lose }
25.10 17:20:07 TIME: tournament.lose 0.12 ms
25.10 17:20:07 == NET: uid94 ret: tournament.lose { type => tournament.lose, errorCode => ok }
25.10 17:20:07 == NET: uid95 ret: battle.leave { type => battle.leave }
25.10 17:20:07 ++ NET: uid95 req: tournament.end { lose => 94, dateRound => 2016-25-10 17:19, winner => 95, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 94, player2 => 95, battleId => 78 }
25.10 17:20:07 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 17:20:07 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => active }
25.10 17:20:07 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
25.10 17:20:07 -<<-: vdl/cache.tournament.getBattlesTournaments [78]
25.10 17:20:07 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 17:20:07 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95,94] }
25.10 17:20:07 ->>-: vdl/cache.battle.finishRoom { roomId => 78, _type => vdl/cache.battle.finishRoom }
25.10 17:20:07 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
25.10 17:20:07 ->>-: vdl/cache.battle.deleteRoom { roomId => 78, _type => vdl/cache.battle.deleteRoom }
25.10 17:20:07 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
25.10 17:20:07 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [78] }
25.10 17:20:07 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
25.10 17:20:07 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [95], _type => vdl/cache.tournament.setUsersTournament }
25.10 17:20:07 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
25.10 17:20:07 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 95, round => 1, player1 => 94, player2 => 95 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => active }
25.10 17:20:07 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 95, player2 => 94 },{ winner => -1, round => 1, player1 => 95, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 17:20:07 ->>-: vdl/cache.tournament.finish { tournamentId => 1, _type => vdl/cache.tournament.finish }
25.10 17:20:07 -<<-: vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
25.10 17:20:07 == NET: uid95 ret: tournament.end { type => tournament.end, errorCode => TournamentEnd }
25.10 17:20:07 TIME: tournament.end 33.27 ms
25.10 17:20:07 == NET: uid94 ret: battle.end { type => battle.end }
25.10 17:20:09 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:20:09 TIME: user.ping 0.12 ms
25.10 17:20:09 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:20:15 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:20:15 TIME: user.ping 0.18 ms
25.10 17:20:15 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:20:20 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:20:20 TIME: user.ping 0.16 ms
25.10 17:20:20 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:20:24 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:20:24 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:20:24 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78], round => 1, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:19, startdate => 2016-25-10 17:19 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:20:24 TIME: tournament.getAvailableTournament 3.4 ms
25.10 17:20:24 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78], round => 1, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:19, startdate => 2016-25-10 17:19 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:20:29 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
25.10 17:20:29 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 17:20:29 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
25.10 17:20:29 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 17:20:29 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 95, player2 => 94 },{ winner => -1, round => 1, player1 => 95, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 17:20:29 TIME: tournament.grid 1.44 ms
25.10 17:20:29 == NET: uid95 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 95, player2 => 94 },{ winner => -1, round => 1, player1 => 95, player2 => null }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 17:20:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:20:32 TIME: user.ping 0.16 ms
25.10 17:20:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:20:35 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:20:35 TIME: user.ping 0.17 ms
25.10 17:20:35 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:20:41 TIMER: Check auto-disconnect...
25.10 17:20:41 STATS: vdl.0 cache, locks:4
25.10 17:20:44 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:20:44 TIME: user.ping 0.13 ms
25.10 17:20:44 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:20:55 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:20:55 TIME: user.ping 0.15 ms
25.10 17:20:55 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:21:15 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:21:15 TIME: user.ping 0.07 ms
25.10 17:21:15 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:21:21 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:21:21 TIME: user.ping 0.19 ms
25.10 17:21:21 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:21:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:21:32 TIME: user.ping 0.11 ms
25.10 17:21:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:21:36 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:21:36 TIME: user.ping 0.22 ms
25.10 17:21:36 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:21:41 TIMER: Check auto-disconnect...
25.10 17:21:41 STATS: vdl.0 cache, locks:4
25.10 17:21:43 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:21:43 TIME: user.ping 0.18 ms
25.10 17:21:43 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:21:54 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:21:54 TIME: user.ping 0.19 ms
25.10 17:21:54 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:21:56 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:21:56 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:21:56 TIME: user.ping 0.2 ms
25.10 17:22:05 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:22:05 TIME: user.ping 0.17 ms
25.10 17:22:05 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:22:16 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:22:16 TIME: user.ping 0.1 ms
25.10 17:22:16 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:22:16 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:22:16 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:22:16 TIME: user.ping 0.21 ms
25.10 17:22:27 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:22:27 TIME: user.ping 0.15 ms
25.10 17:22:27 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:22:36 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:22:36 TIME: user.ping 0.07 ms
25.10 17:22:36 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:22:38 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:22:38 TIME: user.ping 0.2 ms
25.10 17:22:38 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:22:41 TIMER: Check auto-disconnect...
25.10 17:22:41 STATS: vdl.0 cache, locks:4
25.10 17:22:49 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:22:49 TIME: user.ping 0.18 ms
25.10 17:22:49 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:22:56 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:22:56 TIME: user.ping 0.09 ms
25.10 17:22:56 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:23:00 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:23:00 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:23:00 TIME: user.ping 0.18 ms
25.10 17:23:11 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:23:11 TIME: user.ping 0.18 ms
25.10 17:23:11 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:23:16 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:23:16 TIME: user.ping 0.22 ms
25.10 17:23:16 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:23:22 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:23:22 TIME: user.ping 0.15 ms
25.10 17:23:22 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:23:33 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:23:33 TIME: user.ping 0.19 ms
25.10 17:23:33 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:23:36 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:23:36 TIME: user.ping 0.18 ms
25.10 17:23:36 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:23:41 TIMER: Check auto-disconnect...
25.10 17:23:41 STATS: vdl.0 cache, locks:4
25.10 17:23:45 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:23:45 TIME: user.ping 0.17 ms
25.10 17:23:45 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:23:56 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:23:56 TIME: user.ping 0.23 ms
25.10 17:23:56 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:24:16 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:24:16 TIME: user.ping 0.18 ms
25.10 17:24:16 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:24:36 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:24:36 TIME: user.ping 0.12 ms
25.10 17:24:36 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:24:41 TIMER: Check auto-disconnect...
25.10 17:24:41 STATS: vdl.0 cache, locks:4
25.10 17:24:56 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:24:56 TIME: user.ping 0.12 ms
25.10 17:24:56 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:25:16 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:25:16 TIME: user.ping 0.12 ms
25.10 17:25:16 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:25:36 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:25:36 TIME: user.ping 0.09 ms
25.10 17:25:36 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:25:41 TIMER: Check auto-disconnect...
25.10 17:25:41 STATS: vdl.0 cache, locks:4
25.10 17:25:56 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:25:56 TIME: user.ping 0.17 ms
25.10 17:25:56 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:26:16 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:26:16 TIME: user.ping 0.07 ms
25.10 17:26:16 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:26:37 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:26:37 TIME: user.ping 0.1 ms
25.10 17:26:37 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:26:41 TIMER: Check auto-disconnect...
25.10 17:26:41 STATS: vdl.0 cache, locks:4
25.10 17:26:57 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:26:57 TIME: user.ping 0.07 ms
25.10 17:26:57 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:27:41 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
25.10 17:27:41 -<<-: server.login ok
25.10 17:27:41 DB: SELECT * FROM LocalizationStrings
25.10 17:27:41 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:27:41 TIMER: Starting timer...
25.10 17:27:41 TIMER: Timer running...
25.10 17:27:41 DB: SELECT * FROM GameVars
25.10 17:27:41 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:27:41 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.10 17:27:41 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:27:41 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.10 17:27:41 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:27:41 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.10 17:27:41 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:27:41 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.10 17:27:41 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:27:41 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
25.10 17:27:41 -<<-: core/quest.getDaily ok
25.10 17:27:41 DB: SELECT * FROM UserAttributeTypes
25.10 17:27:41 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:27:41 DB: SELECT * FROM UserVariableTypes
25.10 17:27:41 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:27:41 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.10 17:27:41 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:27:41 DB: SELECT * FROM ItemGroups
25.10 17:27:41 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:27:41 DB: SELECT * FROM Bundles ORDER BY ID
25.10 17:27:41 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:27:41 DB: SELECT * FROM BundleItems ORDER BY ID
25.10 17:27:41 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:27:41 SHOP: loading items...
25.10 17:27:41 ->>-: core/shop.getList { _type => core/shop.getList }
25.10 17:27:41 -<<-: core/shop.getList ok
25.10 17:27:41 SHOP: 0 items loaded (0 sec)
25.10 17:27:41 DB: SELECT * FROM EffectAttributeTypes
25.10 17:27:41 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:27:41 DB: SELECT * FROM Effects
25.10 17:27:41 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:27:41 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 17:27:41 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:27:41 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 17:27:41 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:27:41 DB: SELECT * FROM Badges
25.10 17:27:41 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.10 17:27:41 -<<-: core/server.query ok
25.10 17:28:17 NET: Client (conid:84671165) connected to vdl.0 (clients:1)
25.10 17:28:22 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:28:22 TRACE: User not logon yet.
25.10 17:28:41 TIMER: Check auto-disconnect...
25.10 17:28:41 STATS: vdl.0 cache, locks:0
25.10 17:28:42 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:28:42 TRACE: User not logon yet.
25.10 17:29:02 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:29:02 TRACE: User not logon yet.
25.10 17:29:22 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:29:22 TRACE: User not logon yet.
25.10 17:29:41 TIMER: Check auto-disconnect...
25.10 17:29:41 STATS: vdl.0 cache, locks:0
25.10 17:29:42 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:29:42 TRACE: User not logon yet.
25.10 17:30:02 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:30:02 TRACE: User not logon yet.
25.10 17:30:18 NET: Client (conid:44602604) connected to vdl.0 (clients:2)
25.10 17:30:19 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
25.10 17:30:19 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 17:30:19 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 17:30:19 -<<-: core/server.query ok
25.10 17:30:19 STATS: vdl.0 cache connection, 21 calls, total 0.0269012451171875 sec spent, avg 1.28 ms
25.10 17:30:19 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 17:30:19 -<<-: core/user.isOnlineID ok
25.10 17:30:19 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 17:30:19 -<<-: core/cache.get ok
25.10 17:30:19 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 17:30:19 -<<-: core/cache.get ok
25.10 17:30:19 NET: Client login (conid:44602604, id:95, name:uid95)
25.10 17:30:19 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 17:30:19 -<<-: core/user.loginPost null
25.10 17:30:19 == NET: null ret: user.join { name => uid95, type => user.join }
25.10 17:30:19 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
25.10 17:30:19 == NET: uid95 ret: user.join { name => null, type => user.join }
25.10 17:30:19 == NET: uid95 ret: user.join { name => uid95, type => user.join }
25.10 17:30:22 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:30:22 TIME: user.ping 0.24 ms
25.10 17:30:22 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:30:22 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:30:22 TRACE: User not logon yet.
25.10 17:30:24 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:30:24 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:30:24 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:30:24 TIME: tournament.getAvailableTournament 3.68 ms
25.10 17:30:24 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:30:27 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 17:30:27 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:30:28 ++ NET: uid95 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 17:30:28 ->>-: vdl/cache.tournament.addUsers { userId => 95, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 17:30:28 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 17:30:28 TIME: tournament.addUsers 0.66 ms
25.10 17:30:28 == NET: uid95 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 17:30:28 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:30:28 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:30:28 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:30:28 TIME: tournament.getAvailableTournament 1.8 ms
25.10 17:30:28 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:30:30 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:30:30 TIME: user.ping 0.19 ms
25.10 17:30:30 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:30:33 ++ NET: null req: tournament.end { lose => 94, dateRound => 2016-25-10 17:19, winner => 95, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 94, player2 => 95, battleId => 78 }
25.10 17:30:33 TRACE: User not logon yet.
25.10 17:30:33 NET: Client (name:null conid:84671165 TCP) disconnected from vdl.0 (clients:1)
25.10 17:30:38 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:30:38 TIME: user.ping 0.19 ms
25.10 17:30:38 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:30:41 TIMER: Check auto-disconnect...
25.10 17:30:42 STATS: vdl.0 cache, locks:2
25.10 17:30:46 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:30:46 TIME: user.ping 0.19 ms
25.10 17:30:46 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:30:47 NET: Client (conid:93342039) connected to vdl.0 (clients:2)
25.10 17:30:52 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
25.10 17:30:52 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 17:30:52 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 17:30:52 -<<-: core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
25.10 17:30:52 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 17:30:52 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 17:30:52 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 17:30:52 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 94 } }
25.10 17:30:52 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 17:30:52 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
25.10 17:30:52 NET: Client login (conid:93342039, id:94, name:uid94)
25.10 17:30:52 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 17:30:52 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 17:30:52 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
25.10 17:30:52 == NET: uid95 ret: user.join { name => uid94, type => user.join }
25.10 17:30:52 == NET: uid94 ret: user.join { name => uid95, type => user.join }
25.10 17:30:52 == NET: uid94 ret: user.join { name => uid94, type => user.join }
25.10 17:30:54 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:30:54 TIME: user.ping 0.12 ms
25.10 17:30:54 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:31:00 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:31:00 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:31:00 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:31:00 TIME: tournament.getAvailableTournament 3.3 ms
25.10 17:31:00 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:31:01 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:31:01 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:31:01 TIME: user.ping 0.22 ms
25.10 17:31:02 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 17:31:02 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:31:03 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:31:03 TIME: user.ping 0.19 ms
25.10 17:31:03 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:31:07 ++ NET: uid94 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 17:31:07 ->>-: vdl/cache.tournament.addUsers { userId => 94, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 17:31:07 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 17:31:07 TIME: tournament.addUsers 0.79 ms
25.10 17:31:07 == NET: uid94 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 17:31:09 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:31:09 TIME: user.ping 0.23 ms
25.10 17:31:09 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:31:16 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:31:16 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:31:16 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:31:16 TIME: tournament.getAvailableTournament 4.69 ms
25.10 17:31:16 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:31:17 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:31:17 TIME: user.ping 0.09 ms
25.10 17:31:17 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:31:23 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:31:23 TIME: user.ping 0.16 ms
25.10 17:31:23 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:31:25 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:31:25 TIME: user.ping 0.18 ms
25.10 17:31:25 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:31:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:31:32 TIME: user.ping 0.19 ms
25.10 17:31:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:31:40 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:31:40 TIME: user.ping 0.13 ms
25.10 17:31:40 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:31:41 TIMER: Check auto-disconnect...
25.10 17:31:42 STATS: vdl.0 cache, locks:4
25.10 17:31:43 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:31:43 TIME: user.ping 0.16 ms
25.10 17:31:43 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:31:48 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:31:48 TIME: user.ping 0.11 ms
25.10 17:31:48 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:31:56 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:31:56 TIME: user.ping 0.1 ms
25.10 17:31:56 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:32:03 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:32:03 TIME: user.ping 0.14 ms
25.10 17:32:03 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:32:03 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:32:03 TIME: user.ping 0.3 ms
25.10 17:32:03 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:32:11 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:32:11 TIME: user.ping 0.17 ms
25.10 17:32:11 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:32:19 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:32:19 TIME: user.ping 0.12 ms
25.10 17:32:19 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:32:23 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:32:23 TIME: user.ping 0.15 ms
25.10 17:32:23 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:32:27 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:32:27 TIME: user.ping 0.16 ms
25.10 17:32:27 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:32:34 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:32:34 TIME: user.ping 0.07 ms
25.10 17:32:34 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:32:41 TIMER: Check auto-disconnect...
25.10 17:32:42 STATS: vdl.0 cache, locks:4
25.10 17:32:42 -<<-: tournament.enemyEvent { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-25-10 17:32, id => 94, enemy.num => 2, battleId => 79, player => 1 }, _isNotify => true, id => 94, _type => tournament.enemyEvent }
25.10 17:32:42 -<<-: tournament.enemyEvent { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-25-10 17:32, id => 95, enemy.num => 1, battleId => 79, player => 2 }, _isNotify => true, id => 95, _type => tournament.enemyEvent }
25.10 17:32:42 == NET: uid94 ret: tournament.enemy { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-25-10 17:32, id => 94, enemy.num => 2, battleId => 79, player => 1 }, type => tournament.enemy }
25.10 17:32:42 == NET: uid95 ret: tournament.enemy { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-25-10 17:32, id => 95, enemy.num => 1, battleId => 79, player => 2 }, type => tournament.enemy }
25.10 17:32:43 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:32:43 TIME: user.ping 0.18 ms
25.10 17:32:43 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:32:45 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:32:45 TIME: user.ping 0.15 ms
25.10 17:32:45 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:32:51 ++ NET: uid94 req: tournament.lose { winner => 95, messageType => tournament.lose }
25.10 17:32:51 == NET: uid94 ret: tournament.lose { type => tournament.lose, errorCode => ok }
25.10 17:32:51 TIME: tournament.lose 0.07 ms
25.10 17:32:51 == NET: uid95 ret: battle.leave { type => battle.leave }
25.10 17:32:51 ++ NET: uid95 req: tournament.end { lose => 94, dateRound => 2016-25-10 17:32, winner => 95, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 94, player2 => 95, battleId => 79 }
25.10 17:32:51 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 17:32:51 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => active }
25.10 17:32:51 STATS: vdl.0 cache connection, 39 calls, total 0.0510678291320801 sec spent, avg 1.31 ms
25.10 17:32:51 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
25.10 17:32:51 -<<-: vdl/cache.tournament.getBattlesTournaments [79]
25.10 17:32:51 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 17:32:51 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95,94] }
25.10 17:32:51 ->>-: vdl/cache.battle.finishRoom { roomId => 79, _type => vdl/cache.battle.finishRoom }
25.10 17:32:51 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
25.10 17:32:51 ->>-: vdl/cache.battle.deleteRoom { roomId => 79, _type => vdl/cache.battle.deleteRoom }
25.10 17:32:51 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
25.10 17:32:51 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [79] }
25.10 17:32:51 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
25.10 17:32:51 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [95], _type => vdl/cache.tournament.setUsersTournament }
25.10 17:32:51 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
25.10 17:32:51 ->>-: vdl/cache.tournament.addRound { dateRound => 2016-25-10 17:32, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
25.10 17:32:51 -<<-: vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
25.10 17:32:51 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 95, round => 2, player1 => 94, player2 => 95 }], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => active }
25.10 17:32:51 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 95, round => 2, player1 => 94, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 17:32:51 ->>-: vdl/cache.tournament.finish { tournamentId => 1, _type => vdl/cache.tournament.finish }
25.10 17:32:51 -<<-: vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
25.10 17:32:51 TIME: tournament.end 31.07 ms
25.10 17:32:51 == NET: uid95 ret: tournament.end { type => tournament.end, errorCode => TournamentEnd }
25.10 17:32:51 == NET: uid94 ret: battle.end { type => battle.end }
25.10 17:32:54 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:32:54 TIME: user.ping 0.14 ms
25.10 17:32:54 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:32:58 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:32:58 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:32:58 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78,79], round => 2, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:32:58 TIME: tournament.getAvailableTournament 1.1 ms
25.10 17:32:58 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78,79], round => 2, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:33:03 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 2, messageType => tournament.grid }
25.10 17:33:03 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 17:33:03 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
25.10 17:33:03 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 17:33:03 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 95, round => 2, player1 => 94, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 17:33:03 TIME: tournament.grid 0.74 ms
25.10 17:33:03 == NET: uid95 ret: tournament.grid { list => [{ winner => 95, round => 2, player1 => 94, player2 => 95 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 17:33:06 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:33:06 TIME: user.ping 0.09 ms
25.10 17:33:06 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:33:06 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:33:06 TIME: user.ping 0.09 ms
25.10 17:33:06 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:33:27 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:33:27 TIME: user.ping 0.18 ms
25.10 17:33:27 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:33:41 TIMER: Check auto-disconnect...
25.10 17:33:42 STATS: vdl.0 cache, locks:4
25.10 17:33:47 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:33:47 TIME: user.ping 0.18 ms
25.10 17:33:47 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:34:07 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:34:07 TIME: user.ping 0.17 ms
25.10 17:34:07 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:34:27 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:34:27 TIME: user.ping 0.1 ms
25.10 17:34:27 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:34:41 TIMER: Check auto-disconnect...
25.10 17:34:42 STATS: vdl.0 cache, locks:4
25.10 17:34:47 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:34:47 TIME: user.ping 0.15 ms
25.10 17:34:47 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:35:07 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:35:07 TIME: user.ping 0.24 ms
25.10 17:35:07 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:35:27 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:35:27 TIME: user.ping 0.18 ms
25.10 17:35:27 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:35:41 TIMER: Check auto-disconnect...
25.10 17:35:42 STATS: vdl.0 cache, locks:4
25.10 17:35:47 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:35:47 TIME: user.ping 0.18 ms
25.10 17:35:47 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:36:07 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:36:07 TIME: user.ping 0.19 ms
25.10 17:36:07 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:36:27 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:36:27 TIME: user.ping 0.17 ms
25.10 17:36:27 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:36:41 TIMER: Check auto-disconnect...
25.10 17:36:41 NET: Client (name:uid95 conid:44602604 TCP) disconnected from vdl.0 (clients:1)
25.10 17:36:41 DB: SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true
25.10 17:36:41 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true, _type => core/server.query }
25.10 17:36:41 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 17:36:41 STATS: vdl.0 cache connection, 52 calls, total 0.0855307579040527 sec spent, avg 1.64 ms
25.10 17:36:41 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 17:36:41 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 17:36:41 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 17:36:41 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
25.10 17:36:41 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 95, _type => core/cache.update }
25.10 17:36:41 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 17:36:41 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 95, _type => core/cache.update }
25.10 17:36:41 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:36:41 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 95, _type => core/user.logoutPost }
25.10 17:36:41 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 17:36:42 STATS: vdl.0 cache, locks:2
25.10 17:36:47 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:36:47 TIME: user.ping 0.14 ms
25.10 17:36:47 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:37:05 NET: Client (conid:80104379) connected to vdl.0 (clients:2)
25.10 17:37:07 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:37:07 TIME: user.ping 0.09 ms
25.10 17:37:07 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:37:08 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 17:37:08 TRACE: User not logon yet.
25.10 17:37:09 ++ NET: null req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:37:09 TRACE: User not logon yet.
25.10 17:37:19 ++ NET: null req: tournament.end { lose => 94, dateRound => 2016-25-10 17:32, winner => 95, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 94, player2 => 95, battleId => 79 }
25.10 17:37:19 TRACE: User not logon yet.
25.10 17:37:19 NET: Client (name:null conid:80104379 TCP) disconnected from vdl.0 (clients:1)
25.10 17:37:23 NET: Client (conid:88716955) connected to vdl.0 (clients:2)
25.10 17:37:24 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
25.10 17:37:24 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 17:37:24 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 17:37:24 -<<-: core/server.query { list => {{ name => uid95, networkid => , isbanned => false, id => 95 }}, errorCode => ok, _type => core/server.query }
25.10 17:37:24 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 17:37:24 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 17:37:24 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 17:37:24 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid95, deleted => false, email => , networktype =>   , password => uid95, isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402835, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 95 } }
25.10 17:37:24 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 17:37:24 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 95 } }
25.10 17:37:24 NET: Client login (conid:88716955, id:95, name:uid95)
25.10 17:37:24 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 17:37:24 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 17:37:24 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
25.10 17:37:24 == NET: uid95 ret: user.join { name => uid94, type => user.join }
25.10 17:37:24 == NET: uid95 ret: user.join { name => uid95, type => user.join }
25.10 17:37:24 == NET: uid94 ret: user.join { name => uid95, type => user.join }
25.10 17:37:27 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:37:27 TIME: user.ping 0.2 ms
25.10 17:37:27 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:37:28 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:37:28 TIME: user.ping 0.19 ms
25.10 17:37:28 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:37:28 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 17:37:28 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:37:28 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78,79], round => 2, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:37:28 TIME: tournament.getAvailableTournament 4.13 ms
25.10 17:37:28 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78,79], round => 2, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 17:32, startdate => 2016-25-10 17:32 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 17:37:32 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 17:37:32 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:37:34 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 2, messageType => tournament.grid }
25.10 17:37:34 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 17:37:34 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
25.10 17:37:34 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 17:37:34 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 95, round => 2, player1 => 94, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 17:37:34 TIME: tournament.grid 1.36 ms
25.10 17:37:34 == NET: uid95 ret: tournament.grid { list => [{ winner => 95, round => 2, player1 => 94, player2 => 95 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 17:37:38 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:37:38 TIME: user.ping 0.08 ms
25.10 17:37:38 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:37:41 TIMER: Check auto-disconnect...
25.10 17:37:42 STATS: vdl.0 cache, locks:4
25.10 17:37:47 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:37:47 TIME: user.ping 0.16 ms
25.10 17:37:47 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:37:47 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:37:47 TIME: user.ping 0.17 ms
25.10 17:37:47 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:37:56 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:37:56 TIME: user.ping 0.09 ms
25.10 17:37:56 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:38:05 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:38:05 TIME: user.ping 0.22 ms
25.10 17:38:05 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:38:08 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:38:08 TIME: user.ping 0.17 ms
25.10 17:38:08 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:38:14 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:38:14 TIME: user.ping 0.11 ms
25.10 17:38:14 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:38:23 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:38:23 TIME: user.ping 0.15 ms
25.10 17:38:23 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:38:28 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:38:28 TIME: user.ping 0.2 ms
25.10 17:38:28 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:38:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:38:32 TIME: user.ping 0.18 ms
25.10 17:38:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:38:41 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:38:41 TIME: user.ping 0.21 ms
25.10 17:38:41 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:38:41 TIMER: Check auto-disconnect...
25.10 17:38:42 STATS: vdl.0 cache, locks:4
25.10 17:38:48 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:38:48 TIME: user.ping 0.18 ms
25.10 17:38:48 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:38:49 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:38:49 TIME: user.ping 0.16 ms
25.10 17:38:49 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:38:58 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:38:58 TIME: user.ping 0.17 ms
25.10 17:38:58 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:39:07 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:39:07 TIME: user.ping 0.16 ms
25.10 17:39:07 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:39:08 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:39:08 TIME: user.ping 0.24 ms
25.10 17:39:08 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:39:16 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:39:16 TIME: user.ping 0.16 ms
25.10 17:39:16 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:39:25 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:39:25 TIME: user.ping 0.19 ms
25.10 17:39:25 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:39:28 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:39:28 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:39:28 TIME: user.ping 0.13 ms
25.10 17:39:34 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:39:34 TIME: user.ping 0.13 ms
25.10 17:39:34 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:39:41 TIMER: Check auto-disconnect...
25.10 17:39:42 STATS: vdl.0 cache, locks:4
25.10 17:39:43 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:39:43 TIME: user.ping 0.14 ms
25.10 17:39:43 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:39:48 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:39:48 TIME: user.ping 0.08 ms
25.10 17:39:48 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:39:52 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:39:52 TIME: user.ping 0.18 ms
25.10 17:39:52 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:40:01 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:40:01 TIME: user.ping 0.11 ms
25.10 17:40:01 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:40:08 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:40:08 TIME: user.ping 0.14 ms
25.10 17:40:08 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:40:10 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:40:10 TIME: user.ping 0.15 ms
25.10 17:40:10 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:40:19 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:40:19 TIME: user.ping 0.19 ms
25.10 17:40:19 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:40:28 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:40:28 TIME: user.ping 0.16 ms
25.10 17:40:28 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:40:28 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:40:28 TIME: user.ping 0.16 ms
25.10 17:40:28 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:40:37 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:40:37 TIME: user.ping 0.11 ms
25.10 17:40:37 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:40:41 TIMER: Check auto-disconnect...
25.10 17:40:42 STATS: vdl.0 cache, locks:4
25.10 17:40:45 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:40:45 TIME: user.ping 0.18 ms
25.10 17:40:45 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:40:48 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:40:48 TIME: user.ping 0.18 ms
25.10 17:40:48 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:40:54 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:40:54 TIME: user.ping 0.17 ms
25.10 17:40:54 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:41:03 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:41:03 TIME: user.ping 0.14 ms
25.10 17:41:03 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:41:08 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:41:08 TIME: user.ping 0.16 ms
25.10 17:41:08 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:41:12 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:41:12 TIME: user.ping 0.18 ms
25.10 17:41:12 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:41:21 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:41:21 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:41:21 TIME: user.ping 0.18 ms
25.10 17:41:28 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:41:28 TIME: user.ping 0.09 ms
25.10 17:41:28 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:41:30 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:41:30 TIME: user.ping 0.2 ms
25.10 17:41:30 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:41:39 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:41:39 TIME: user.ping 0.18 ms
25.10 17:41:39 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:41:41 TIMER: Check auto-disconnect...
25.10 17:41:42 STATS: vdl.0 cache, locks:4
25.10 17:41:48 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:41:48 TIME: user.ping 0.14 ms
25.10 17:41:48 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:41:48 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:41:48 TIME: user.ping 0.2 ms
25.10 17:41:48 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:41:57 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:41:57 TIME: user.ping 0.15 ms
25.10 17:41:57 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:42:06 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:42:06 TIME: user.ping 0.15 ms
25.10 17:42:06 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:42:08 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:42:08 TIME: user.ping 0.23 ms
25.10 17:42:08 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:42:15 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:42:15 TIME: user.ping 0.13 ms
25.10 17:42:15 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:42:24 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:42:24 TIME: user.ping 0.13 ms
25.10 17:42:24 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:42:28 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:42:28 TIME: user.ping 0.19 ms
25.10 17:42:28 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:42:33 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:42:33 TIME: user.ping 0.09 ms
25.10 17:42:33 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:42:41 TIMER: Check auto-disconnect...
25.10 17:42:42 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:42:42 TIME: user.ping 0.09 ms
25.10 17:42:42 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:42:42 STATS: vdl.0 cache, locks:4
25.10 17:42:48 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:42:48 TIME: user.ping 0.08 ms
25.10 17:42:48 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:42:51 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:42:51 TIME: user.ping 0.2 ms
25.10 17:42:51 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:42:59 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:42:59 TIME: user.ping 0.11 ms
25.10 17:42:59 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:43:08 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:43:08 TIME: user.ping 0.17 ms
25.10 17:43:08 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:43:17 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:43:17 TIME: user.ping 0.17 ms
25.10 17:43:17 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:43:26 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:43:26 TIME: user.ping 0.17 ms
25.10 17:43:26 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:43:35 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:43:35 TIME: user.ping 0.11 ms
25.10 17:43:35 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:43:41 TIMER: Check auto-disconnect...
25.10 17:43:42 STATS: vdl.0 cache, locks:4
25.10 17:43:44 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:43:44 TIME: user.ping 0.13 ms
25.10 17:43:44 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:43:53 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:43:53 TIME: user.ping 0.08 ms
25.10 17:43:53 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:44:02 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:44:02 TIME: user.ping 0.17 ms
25.10 17:44:02 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:44:11 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:44:11 TIME: user.ping 0.17 ms
25.10 17:44:11 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:44:20 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:44:20 TIME: user.ping 0.18 ms
25.10 17:44:20 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:44:29 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:44:29 TIME: user.ping 0.2 ms
25.10 17:44:29 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:44:38 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:44:38 TIME: user.ping 0.1 ms
25.10 17:44:38 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:44:41 TIMER: Check auto-disconnect...
25.10 17:44:42 STATS: vdl.0 cache, locks:4
25.10 17:44:47 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:44:47 TIME: user.ping 0.18 ms
25.10 17:44:47 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:44:56 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:44:56 TIME: user.ping 0.08 ms
25.10 17:44:56 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:45:05 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:45:05 TIME: user.ping 0.12 ms
25.10 17:45:05 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:45:14 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:45:14 TIME: user.ping 0.1 ms
25.10 17:45:14 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:45:23 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:45:23 TIME: user.ping 0.07 ms
25.10 17:45:23 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:45:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:45:32 TIME: user.ping 0.11 ms
25.10 17:45:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:45:40 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:45:40 TIME: user.ping 0.54 ms
25.10 17:45:40 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:45:41 TIMER: Check auto-disconnect...
25.10 17:45:42 STATS: vdl.0 cache, locks:4
25.10 17:45:49 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:45:49 TIME: user.ping 0.08 ms
25.10 17:45:49 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:45:58 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:45:58 TIME: user.ping 0.28 ms
25.10 17:45:58 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:46:07 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:46:07 TIME: user.ping 0.18 ms
25.10 17:46:07 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:46:16 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:46:16 TIME: user.ping 0.14 ms
25.10 17:46:16 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:46:25 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:46:25 TIME: user.ping 0.15 ms
25.10 17:46:25 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:46:34 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:46:34 TIME: user.ping 0.22 ms
25.10 17:46:34 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:46:41 TIMER: Check auto-disconnect...
25.10 17:46:41 NET: Client (name:uid94 conid:93342039 TCP) disconnected from vdl.0 (clients:1)
25.10 17:46:41 DB: SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true
25.10 17:46:41 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true, _type => core/server.query }
25.10 17:46:41 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 17:46:41 STATS: vdl.0 cache connection, 66 calls, total 0.100936651229858 sec spent, avg 1.53 ms
25.10 17:46:41 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 17:46:41 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 17:46:41 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 17:46:41 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
25.10 17:46:41 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 94, _type => core/cache.update }
25.10 17:46:41 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 17:46:41 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 94, _type => core/cache.update }
25.10 17:46:41 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 17:46:41 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 94, _type => core/user.logoutPost }
25.10 17:46:41 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 17:46:42 STATS: vdl.0 cache, locks:2
25.10 17:46:43 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:46:43 TIME: user.ping 0.17 ms
25.10 17:46:43 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:46:52 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:46:52 TIME: user.ping 0.18 ms
25.10 17:46:52 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:47:01 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:47:01 TIME: user.ping 0.12 ms
25.10 17:47:01 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:47:10 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:47:10 TIME: user.ping 0.14 ms
25.10 17:47:10 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:47:19 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:47:19 TIME: user.ping 0.17 ms
25.10 17:47:19 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:47:28 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:47:28 TIME: user.ping 0.16 ms
25.10 17:47:28 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:47:36 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:47:36 TIME: user.ping 0.11 ms
25.10 17:47:36 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:47:41 TIMER: Check auto-disconnect...
25.10 17:47:42 STATS: vdl.0 cache, locks:2
25.10 17:47:45 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:47:45 TIME: user.ping 0.15 ms
25.10 17:47:45 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:47:54 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:47:54 TIME: user.ping 0.17 ms
25.10 17:47:54 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:48:03 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:48:03 TIME: user.ping 0.16 ms
25.10 17:48:03 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:48:12 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:48:12 TIME: user.ping 0.16 ms
25.10 17:48:12 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:48:21 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:48:21 TIME: user.ping 0.14 ms
25.10 17:48:21 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:48:30 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:48:30 TIME: user.ping 0.18 ms
25.10 17:48:30 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:48:39 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:48:39 TIME: user.ping 0.08 ms
25.10 17:48:39 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:48:41 TIMER: Check auto-disconnect...
25.10 17:48:42 STATS: vdl.0 cache, locks:2
25.10 17:48:48 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:48:48 TIME: user.ping 0.61 ms
25.10 17:48:48 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:48:57 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:48:57 TIME: user.ping 0.15 ms
25.10 17:48:57 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:49:06 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:49:06 TIME: user.ping 0.18 ms
25.10 17:49:06 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:49:15 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:49:15 TIME: user.ping 0.15 ms
25.10 17:49:15 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:49:23 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:49:23 TIME: user.ping 0.26 ms
25.10 17:49:23 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:49:33 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:49:33 TIME: user.ping 0.11 ms
25.10 17:49:33 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:49:41 TIMER: Check auto-disconnect...
25.10 17:49:41 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:49:41 TIME: user.ping 0.15 ms
25.10 17:49:41 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:49:42 STATS: vdl.0 cache, locks:2
25.10 17:49:50 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:49:50 TIME: user.ping 0.17 ms
25.10 17:49:50 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:49:59 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:49:59 TIME: user.ping 0.17 ms
25.10 17:49:59 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:50:08 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:50:08 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:50:08 TIME: user.ping 0.16 ms
25.10 17:50:16 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:50:16 TIME: user.ping 0.12 ms
25.10 17:50:16 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:50:25 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:50:25 TIME: user.ping 0.18 ms
25.10 17:50:25 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:50:34 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:50:34 TIME: user.ping 0.12 ms
25.10 17:50:34 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:50:41 TIMER: Check auto-disconnect...
25.10 17:50:42 STATS: vdl.0 cache, locks:2
25.10 17:50:43 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:50:43 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:50:43 TIME: user.ping 0.19 ms
25.10 17:50:51 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:50:51 TIME: user.ping 0.13 ms
25.10 17:50:51 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:51:00 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:51:00 TIME: user.ping 0.15 ms
25.10 17:51:00 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:51:09 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:51:09 TIME: user.ping 0.17 ms
25.10 17:51:09 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:51:17 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:51:17 TIME: user.ping 0.16 ms
25.10 17:51:17 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:51:26 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:51:26 TIME: user.ping 0.18 ms
25.10 17:51:26 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:51:35 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:51:35 TIME: user.ping 0.12 ms
25.10 17:51:35 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:51:41 TIMER: Check auto-disconnect...
25.10 17:51:42 STATS: vdl.0 cache, locks:2
25.10 17:51:44 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:51:44 TIME: user.ping 0.17 ms
25.10 17:51:44 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:51:52 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:51:52 TIME: user.ping 0.1 ms
25.10 17:51:52 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:52:01 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:52:01 TIME: user.ping 0.17 ms
25.10 17:52:01 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:52:10 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:52:10 TIME: user.ping 0.12 ms
25.10 17:52:10 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:52:19 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:52:19 TIME: user.ping 0.17 ms
25.10 17:52:19 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:52:27 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:52:27 TIME: user.ping 0.12 ms
25.10 17:52:27 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:52:36 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:52:36 TIME: user.ping 0.18 ms
25.10 17:52:36 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:52:41 TIMER: Check auto-disconnect...
25.10 17:52:42 STATS: vdl.0 cache, locks:2
25.10 17:52:45 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:52:45 TIME: user.ping 0.16 ms
25.10 17:52:45 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:52:54 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:52:54 TIME: user.ping 0.08 ms
25.10 17:52:54 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:53:02 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:53:02 TIME: user.ping 0.16 ms
25.10 17:53:02 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:53:11 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:53:11 TIME: user.ping 0.1 ms
25.10 17:53:11 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:53:20 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:53:20 TIME: user.ping 0.09 ms
25.10 17:53:20 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:53:29 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:53:29 TIME: user.ping 0.09 ms
25.10 17:53:29 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:53:37 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:53:37 TIME: user.ping 0.1 ms
25.10 17:53:37 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:53:41 TIMER: Check auto-disconnect...
25.10 17:53:42 STATS: vdl.0 cache, locks:2
25.10 17:53:46 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:53:46 TIME: user.ping 0.18 ms
25.10 17:53:46 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:53:55 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:53:55 TIME: user.ping 0.14 ms
25.10 17:53:55 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:54:04 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:54:04 TIME: user.ping 0.21 ms
25.10 17:54:04 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:54:12 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:54:12 TIME: user.ping 0.14 ms
25.10 17:54:12 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:54:21 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:54:21 TIME: user.ping 0.17 ms
25.10 17:54:21 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:54:30 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:54:30 TIME: user.ping 0.11 ms
25.10 17:54:30 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:54:39 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:54:39 TIME: user.ping 0.17 ms
25.10 17:54:39 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:54:41 TIMER: Check auto-disconnect...
25.10 17:54:42 STATS: vdl.0 cache, locks:2
25.10 17:54:47 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:54:47 TIME: user.ping 0.17 ms
25.10 17:54:47 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:54:56 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:54:56 TIME: user.ping 0.1 ms
25.10 17:54:56 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:55:05 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:55:05 TIME: user.ping 0.13 ms
25.10 17:55:05 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:55:14 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:55:14 TIME: user.ping 0.09 ms
25.10 17:55:14 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:55:22 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:55:22 TIME: user.ping 0.14 ms
25.10 17:55:22 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:55:31 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:55:31 TIME: user.ping 0.12 ms
25.10 17:55:31 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:55:40 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:55:40 TIME: user.ping 0.17 ms
25.10 17:55:40 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:55:41 TIMER: Check auto-disconnect...
25.10 17:55:42 STATS: vdl.0 cache, locks:2
25.10 17:55:48 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:55:48 TIME: user.ping 0.18 ms
25.10 17:55:48 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:55:57 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:55:57 TIME: user.ping 0.09 ms
25.10 17:55:57 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:56:06 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:56:06 TIME: user.ping 0.44 ms
25.10 17:56:06 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:56:15 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:56:15 TIME: user.ping 0.17 ms
25.10 17:56:15 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:56:24 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:56:24 TIME: user.ping 0.16 ms
25.10 17:56:24 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:56:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:56:32 TIME: user.ping 0.15 ms
25.10 17:56:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:56:41 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:56:41 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:56:41 TIME: user.ping 0.19 ms
25.10 17:56:41 TIMER: Check auto-disconnect...
25.10 17:56:42 STATS: vdl.0 cache, locks:2
25.10 17:56:50 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:56:50 TIME: user.ping 0.08 ms
25.10 17:56:50 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:56:59 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:56:59 TIME: user.ping 0.07 ms
25.10 17:56:59 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:57:07 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:57:07 TIME: user.ping 0.21 ms
25.10 17:57:07 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:57:16 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:57:16 TIME: user.ping 0.18 ms
25.10 17:57:16 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:57:25 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:57:25 TIME: user.ping 0.15 ms
25.10 17:57:25 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:57:34 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:57:34 TIME: user.ping 0.17 ms
25.10 17:57:34 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:57:41 TIMER: Check auto-disconnect...
25.10 17:57:42 STATS: vdl.0 cache, locks:2
25.10 17:57:42 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:57:42 TIME: user.ping 0.17 ms
25.10 17:57:42 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:57:51 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:57:51 TIME: user.ping 0.19 ms
25.10 17:57:51 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:58:00 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:58:00 TIME: user.ping 0.08 ms
25.10 17:58:00 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:58:09 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:58:09 TIME: user.ping 0.09 ms
25.10 17:58:09 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:58:17 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:58:17 TIME: user.ping 0.08 ms
25.10 17:58:17 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:58:26 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:58:26 TIME: user.ping 0.16 ms
25.10 17:58:26 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:58:35 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:58:35 TIME: user.ping 0.1 ms
25.10 17:58:35 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:58:41 TIMER: Check auto-disconnect...
25.10 17:58:42 STATS: vdl.0 cache, locks:2
25.10 17:58:44 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:58:44 TIME: user.ping 0.11 ms
25.10 17:58:44 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:58:52 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:58:52 TIME: user.ping 0.12 ms
25.10 17:58:52 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:59:01 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:59:01 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:59:01 TIME: user.ping 0.18 ms
25.10 17:59:10 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:59:10 TIME: user.ping 0.14 ms
25.10 17:59:10 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:59:19 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:59:19 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:59:19 TIME: user.ping 0.09 ms
25.10 17:59:27 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:59:27 TIME: user.ping 0.12 ms
25.10 17:59:27 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:59:36 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:59:36 TIME: user.ping 0.16 ms
25.10 17:59:36 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:59:41 TIMER: Check auto-disconnect...
25.10 17:59:42 STATS: vdl.0 cache, locks:2
25.10 17:59:45 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:59:45 TIME: user.ping 0.12 ms
25.10 17:59:45 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 17:59:54 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 17:59:54 TIME: user.ping 0.18 ms
25.10 17:59:54 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
