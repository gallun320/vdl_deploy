12.10 18:00:45 TIMER: Check auto-disconnect...
12.10 18:00:45 STATS: vdl.0 cache, locks:2
12.10 18:01:34 ++ NET: uid33 req: user.logout { messageType => user.logout }
12.10 18:01:34 TRACE: user.logout : No such module: user
12.10 18:01:34 TRACE: user.logout : 
Called from snipe/slave/Server.hx line 1159
12.10 18:01:34 NET: Client (name:uid33 conid:55421202 TCP) disconnected from vdl.0 (clients:0)
12.10 18:01:34 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 18:01:34 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 18:01:34 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 18:01:34 STATS: vdl.0 cache connection, 55 calls, total 0.138841867446899 sec spent, avg 2.52 ms
12.10 18:01:34 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 18:01:34 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 18:01:34 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 18:01:34 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
12.10 18:01:34 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 18:01:34 -<<-: core/cache.update { errorCode => ok, version => 4, _type => core/cache.update }
12.10 18:01:34 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 18:01:34 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 18:01:34 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 18:01:34 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 18:01:45 TIMER: Check auto-disconnect...
12.10 18:01:45 STATS: vdl.0 cache, locks:0
12.10 18:02:22 NET: Client (conid:5955890) connected to vdl.0 (clients:1)
12.10 18:02:23 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 18:02:23 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 18:02:23 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 18:02:23 -<<-: core/server.query { list => {{ name => uid33, networkid => , isbanned => false, id => 33 }}, errorCode => ok, _type => core/server.query }
12.10 18:02:23 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 18:02:23 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 18:02:23 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 18:02:23 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid33, deleted => false, email => , networktype =>   , password => uid33, isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476272110, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 0, id => 33 } }
12.10 18:02:23 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 18:02:23 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 33 } }
12.10 18:02:23 NET: Client login (conid:5955890, id:33, name:uid33)
12.10 18:02:23 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 18:02:23 -<<-: core/user.loginPost { _type => core/user.loginPost }
12.10 18:02:23 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 18:02:23 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 18:02:28 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 18:02:28 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:02:28 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:02:28 TIME: tournament.getAvailableTournament 3.32 ms
12.10 18:02:28 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:02:30 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 18:02:30 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 18:02:35 ++ NET: uid33 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
12.10 18:02:35 ->>-: vdl/cache.tournament.addUsers { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 18:02:35 -<<-: vdl/cache.tournament.addUsers { errorCode => _requestException, _type => vdl/cache.tournament.addUsers }
12.10 18:02:35 STATS: vdl.0 cache connection, 67 calls, total 0.157703161239624 sec spent, avg 2.35 ms
12.10 18:02:35 TRACE: tournament.addUsers : cacheRequest exception { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 18:02:35 TRACE: tournament.addUsers : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 306
Called from modules/VDLTournamentModule.hx line 129
Called from modules/VDLTournamentModule.hx line 61
Called from snipe/slave/Server.hx line 1176
12.10 18:05:01 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 18:05:01 -<<-: server.login ok
12.10 18:05:01 DB: SELECT * FROM LocalizationStrings
12.10 18:05:01 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 TIMER: Starting timer...
12.10 18:05:01 TIMER: Timer running...
12.10 18:05:01 DB: SELECT * FROM GameVars
12.10 18:05:01 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 18:05:01 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 18:05:01 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 18:05:01 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 18:05:01 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 18:05:01 -<<-: core/quest.getDaily ok
12.10 18:05:01 DB: SELECT * FROM UserAttributeTypes
12.10 18:05:01 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 DB: SELECT * FROM UserVariableTypes
12.10 18:05:01 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 18:05:01 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 DB: SELECT * FROM ItemGroups
12.10 18:05:01 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 DB: SELECT * FROM Bundles ORDER BY ID
12.10 18:05:01 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 18:05:01 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 SHOP: loading items...
12.10 18:05:01 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 18:05:01 -<<-: core/shop.getList ok
12.10 18:05:01 SHOP: 0 items loaded (0 sec)
12.10 18:05:01 DB: SELECT * FROM EffectAttributeTypes
12.10 18:05:01 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 DB: SELECT * FROM Effects
12.10 18:05:01 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 18:05:01 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 18:05:01 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 DB: SELECT * FROM Badges
12.10 18:05:01 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 18:05:01 -<<-: core/server.query ok
12.10 18:05:01 TIMER: Check auto-disconnect...
12.10 18:05:01 STATS: vdl.0 cache, locks:0
12.10 18:05:01 TIMER: Check auto-disconnect...
12.10 18:05:01 STATS: vdl.0 cache, locks:0
12.10 18:05:01 TIMER: Check auto-disconnect...
12.10 18:05:01 STATS: vdl.0 cache, locks:0
12.10 18:08:49 NET: Client (conid:35188151) connected to vdl.0 (clients:1)
12.10 18:08:50 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 18:08:50 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 18:08:50 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 18:08:50 -<<-: core/server.query ok
12.10 18:08:50 STATS: vdl.0 cache connection, 21 calls, total 0.0821444988250732 sec spent, avg 3.91 ms
12.10 18:08:50 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 18:08:50 -<<-: core/user.isOnlineID ok
12.10 18:08:50 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 18:08:50 -<<-: core/cache.get ok
12.10 18:08:50 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 18:08:50 -<<-: core/cache.get ok
12.10 18:08:50 NET: Client login (conid:35188151, id:33, name:uid33)
12.10 18:08:50 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 18:08:50 -<<-: core/user.loginPost null
12.10 18:08:50 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 18:08:50 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 18:08:56 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 18:08:56 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 18:08:58 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 18:08:58 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:08:58 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:08:58 TIME: tournament.getAvailableTournament 3.46 ms
12.10 18:08:58 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:09:01 TIMER: Check auto-disconnect...
12.10 18:09:01 STATS: vdl.0 cache, locks:2
12.10 18:09:02 ++ NET: uid33 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
12.10 18:09:02 ->>-: vdl/cache.tournament.addUsers { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 18:09:02 -<<-: vdl/cache.tournament.addUsers { errorCode => _requestException, _type => vdl/cache.tournament.addUsers }
12.10 18:09:02 TRACE: tournament.addUsers : cacheRequest exception { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 18:09:02 TRACE: tournament.addUsers : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 306
Called from modules/VDLTournamentModule.hx line 129
Called from modules/VDLTournamentModule.hx line 61
Called from snipe/slave/Server.hx line 1176
12.10 18:11:17 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 18:11:17 -<<-: server.login ok
12.10 18:11:17 DB: SELECT * FROM LocalizationStrings
12.10 18:11:17 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:17 TIMER: Starting timer...
12.10 18:11:17 TIMER: Timer running...
12.10 18:11:17 DB: SELECT * FROM GameVars
12.10 18:11:17 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:17 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 18:11:17 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:17 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 18:11:17 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:17 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 18:11:17 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:17 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 18:11:17 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:17 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 18:11:17 -<<-: core/quest.getDaily ok
12.10 18:11:17 DB: SELECT * FROM UserAttributeTypes
12.10 18:11:17 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:17 DB: SELECT * FROM UserVariableTypes
12.10 18:11:17 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:17 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 18:11:17 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:17 DB: SELECT * FROM ItemGroups
12.10 18:11:17 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:17 DB: SELECT * FROM Bundles ORDER BY ID
12.10 18:11:17 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:17 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 18:11:17 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:17 SHOP: loading items...
12.10 18:11:17 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 18:11:17 -<<-: core/shop.getList ok
12.10 18:11:17 SHOP: 0 items loaded (0.001 sec)
12.10 18:11:17 DB: SELECT * FROM EffectAttributeTypes
12.10 18:11:17 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:17 DB: SELECT * FROM Effects
12.10 18:11:17 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:17 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 18:11:17 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:17 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 18:11:17 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:17 DB: SELECT * FROM Badges
12.10 18:11:17 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 18:11:17 -<<-: core/server.query ok
12.10 18:11:55 NET: Client (conid:91704002) connected to vdl.0 (clients:1)
12.10 18:11:56 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 18:11:56 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 18:11:56 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 18:11:56 -<<-: core/server.query ok
12.10 18:11:56 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 18:11:56 -<<-: core/user.isOnlineID ok
12.10 18:11:56 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 18:11:56 -<<-: core/cache.get ok
12.10 18:11:56 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 18:11:56 -<<-: core/cache.get ok
12.10 18:11:56 NET: Client login (conid:91704002, id:33, name:uid33)
12.10 18:11:56 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 18:11:56 -<<-: core/user.loginPost null
12.10 18:11:56 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 18:11:56 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 18:12:02 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 18:12:02 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 18:12:04 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 18:12:04 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:12:04 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:12:04 TIME: tournament.getAvailableTournament 3.72 ms
12.10 18:12:04 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:12:08 ++ NET: uid33 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
12.10 18:12:08 ->>-: vdl/cache.tournament.addUsers { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 18:12:08 -<<-: vdl/cache.tournament.addUsers { errorCode => _requestException, _type => vdl/cache.tournament.addUsers }
12.10 18:12:08 TRACE: tournament.addUsers : cacheRequest exception { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 18:12:08 TRACE: tournament.addUsers : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 306
Called from modules/VDLTournamentModule.hx line 129
Called from modules/VDLTournamentModule.hx line 61
Called from snipe/slave/Server.hx line 1176
12.10 18:16:11 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 18:16:11 -<<-: server.login ok
12.10 18:16:11 DB: SELECT * FROM LocalizationStrings
12.10 18:16:11 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:11 TIMER: Starting timer...
12.10 18:16:11 DB: SELECT * FROM GameVars
12.10 18:16:11 TIMER: Timer running...
12.10 18:16:11 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:11 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 18:16:11 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:11 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 18:16:11 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:11 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 18:16:11 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:11 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 18:16:11 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:11 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 18:16:11 -<<-: core/quest.getDaily ok
12.10 18:16:11 DB: SELECT * FROM UserAttributeTypes
12.10 18:16:11 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:11 DB: SELECT * FROM UserVariableTypes
12.10 18:16:11 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:11 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 18:16:11 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:11 DB: SELECT * FROM ItemGroups
12.10 18:16:11 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:11 DB: SELECT * FROM Bundles ORDER BY ID
12.10 18:16:11 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:11 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 18:16:11 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:11 SHOP: loading items...
12.10 18:16:11 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 18:16:11 -<<-: core/shop.getList ok
12.10 18:16:11 SHOP: 0 items loaded (0 sec)
12.10 18:16:11 DB: SELECT * FROM EffectAttributeTypes
12.10 18:16:11 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:11 DB: SELECT * FROM Effects
12.10 18:16:11 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:11 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 18:16:11 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:11 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 18:16:11 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:11 DB: SELECT * FROM Badges
12.10 18:16:11 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 18:16:11 -<<-: core/server.query ok
12.10 18:16:45 NET: Client (conid:88537006) connected to vdl.0 (clients:1)
12.10 18:16:46 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 18:16:46 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 18:16:46 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 18:16:46 -<<-: core/server.query ok
12.10 18:16:46 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 18:16:46 -<<-: core/user.isOnlineID ok
12.10 18:16:46 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 18:16:46 -<<-: core/cache.get ok
12.10 18:16:46 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 18:16:46 -<<-: core/cache.get ok
12.10 18:16:46 NET: Client login (conid:88537006, id:33, name:uid33)
12.10 18:16:46 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 18:16:46 -<<-: core/user.loginPost null
12.10 18:16:46 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 18:16:46 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 18:16:55 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 18:16:55 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:16:55 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:16:55 TIME: tournament.getAvailableTournament 3.67 ms
12.10 18:16:55 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:16:56 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 18:16:56 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 18:17:03 ++ NET: uid33 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
12.10 18:17:03 ->>-: vdl/cache.tournament.addUsers { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 18:17:03 -<<-: vdl/cache.tournament.addUsers { errorCode => _requestException, _type => vdl/cache.tournament.addUsers }
12.10 18:17:03 TRACE: tournament.addUsers : cacheRequest exception { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 18:17:03 TRACE: tournament.addUsers : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 306
Called from modules/VDLTournamentModule.hx line 129
Called from modules/VDLTournamentModule.hx line 61
Called from snipe/slave/Server.hx line 1176
12.10 18:18:52 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 18:18:52 -<<-: server.login ok
12.10 18:18:52 DB: SELECT * FROM LocalizationStrings
12.10 18:18:52 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 TIMER: Starting timer...
12.10 18:18:52 TIMER: Timer running...
12.10 18:18:52 DB: SELECT * FROM GameVars
12.10 18:18:52 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 18:18:52 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 18:18:52 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 18:18:52 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 18:18:52 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 18:18:52 -<<-: core/quest.getDaily ok
12.10 18:18:52 DB: SELECT * FROM UserAttributeTypes
12.10 18:18:52 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 DB: SELECT * FROM UserVariableTypes
12.10 18:18:52 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 18:18:52 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 DB: SELECT * FROM ItemGroups
12.10 18:18:52 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 DB: SELECT * FROM Bundles ORDER BY ID
12.10 18:18:52 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 18:18:52 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 SHOP: loading items...
12.10 18:18:52 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 18:18:52 -<<-: core/shop.getList ok
12.10 18:18:52 SHOP: 0 items loaded (0 sec)
12.10 18:18:52 DB: SELECT * FROM EffectAttributeTypes
12.10 18:18:52 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 DB: SELECT * FROM Effects
12.10 18:18:52 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 18:18:52 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 18:18:52 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 DB: SELECT * FROM Badges
12.10 18:18:52 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 18:18:52 -<<-: core/server.query ok
12.10 18:18:52 TIMER: Check auto-disconnect...
12.10 18:18:52 STATS: vdl.0 cache, locks:0
12.10 18:19:58 NET: Client (conid:61278318) connected to vdl.0 (clients:1)
12.10 18:19:59 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 18:19:59 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 18:19:59 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 18:19:59 -<<-: core/server.query ok
12.10 18:19:59 STATS: vdl.0 cache connection, 21 calls, total 0.0689313411712646 sec spent, avg 3.28 ms
12.10 18:19:59 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 18:19:59 -<<-: core/user.isOnlineID ok
12.10 18:19:59 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 18:19:59 -<<-: core/cache.get ok
12.10 18:19:59 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 18:19:59 -<<-: core/cache.get ok
12.10 18:19:59 NET: Client login (conid:61278318, id:33, name:uid33)
12.10 18:19:59 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 18:19:59 -<<-: core/user.loginPost null
12.10 18:19:59 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 18:19:59 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 18:20:06 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 18:20:06 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:20:06 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:20:06 TIME: tournament.getAvailableTournament 4 ms
12.10 18:20:06 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:20:07 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 18:20:07 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 18:20:10 ++ NET: uid33 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
12.10 18:20:10 ->>-: vdl/cache.tournament.addUsers { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 18:20:10 -<<-: vdl/cache.tournament.addUsers { errorCode => _requestException, _type => vdl/cache.tournament.addUsers }
12.10 18:20:10 TRACE: tournament.addUsers : cacheRequest exception { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 18:20:10 TRACE: tournament.addUsers : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 306
Called from modules/VDLTournamentModule.hx line 129
Called from modules/VDLTournamentModule.hx line 61
Called from snipe/slave/Server.hx line 1176
12.10 18:21:34 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 18:21:34 -<<-: server.login ok
12.10 18:21:34 DB: SELECT * FROM LocalizationStrings
12.10 18:21:34 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:34 TIMER: Starting timer...
12.10 18:21:34 TIMER: Timer running...
12.10 18:21:34 DB: SELECT * FROM GameVars
12.10 18:21:34 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:34 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 18:21:34 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:34 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 18:21:34 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:34 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 18:21:34 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:34 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 18:21:34 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:34 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 18:21:34 -<<-: core/quest.getDaily ok
12.10 18:21:34 DB: SELECT * FROM UserAttributeTypes
12.10 18:21:34 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:34 DB: SELECT * FROM UserVariableTypes
12.10 18:21:34 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:34 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 18:21:34 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:34 DB: SELECT * FROM ItemGroups
12.10 18:21:34 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:34 DB: SELECT * FROM Bundles ORDER BY ID
12.10 18:21:34 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:34 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 18:21:34 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:34 SHOP: loading items...
12.10 18:21:34 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 18:21:34 -<<-: core/shop.getList ok
12.10 18:21:34 SHOP: 0 items loaded (0.002 sec)
12.10 18:21:34 DB: SELECT * FROM EffectAttributeTypes
12.10 18:21:34 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:34 DB: SELECT * FROM Effects
12.10 18:21:34 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:34 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 18:21:34 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:34 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 18:21:34 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:34 DB: SELECT * FROM Badges
12.10 18:21:34 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 18:21:34 -<<-: core/server.query ok
12.10 18:21:57 NET: Client (conid:56065702) connected to vdl.0 (clients:1)
12.10 18:21:58 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 18:21:58 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 18:21:58 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 18:21:58 -<<-: core/server.query ok
12.10 18:21:58 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 18:21:58 -<<-: core/user.isOnlineID ok
12.10 18:21:58 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 18:21:58 -<<-: core/cache.get ok
12.10 18:21:58 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 18:21:58 -<<-: core/cache.get ok
12.10 18:21:58 NET: Client login (conid:56065702, id:33, name:uid33)
12.10 18:21:58 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 18:21:58 -<<-: core/user.loginPost null
12.10 18:21:58 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 18:21:58 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 18:22:02 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 18:22:02 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:22:02 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:22:02 TIME: tournament.getAvailableTournament 3.69 ms
12.10 18:22:02 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:22:04 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 18:22:04 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 18:22:06 ++ NET: uid33 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
12.10 18:22:06 ->>-: vdl/cache.tournament.addUsers { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 18:22:06 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
12.10 18:22:06 TIME: tournament.addUsers 3.96 ms
12.10 18:22:06 == NET: uid33 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
12.10 18:22:20 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 18:22:20 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:22:20 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => {"params":{"usersList":[{"name":"uid33","id":33}]}}, id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:22:20 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => {"params":{"usersList":[{"name":"uid33","id":33}]}}, id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:22:20 TIME: tournament.getAvailableTournament 2.98 ms
12.10 18:22:34 TIMER: Check auto-disconnect...
12.10 18:22:34 STATS: vdl.0 cache, locks:2
12.10 18:22:34 TIMER: Check auto-disconnect...
12.10 18:22:34 STATS: vdl.0 cache, locks:2
12.10 18:22:34 TIMER: Check auto-disconnect...
12.10 18:22:34 STATS: vdl.0 cache, locks:2
12.10 18:24:45 NET: Client (name:uid33 conid:56065702 TCP) disconnected from vdl.0 (clients:0)
12.10 18:24:45 ++ NET: uid33 req: user.logout { messageType => user.logout }
12.10 18:24:45 TRACE: user.logout : No such module: user
12.10 18:24:45 TRACE: user.logout : 
Called from snipe/slave/Server.hx line 1159
12.10 18:24:45 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 18:24:45 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 18:24:45 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 18:24:45 STATS: vdl.0 cache connection, 30 calls, total 0.0931031703948975 sec spent, avg 3.1 ms
12.10 18:24:45 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 18:24:45 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 18:24:45 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 18:24:45 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
12.10 18:24:45 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 18:24:45 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 18:24:45 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 18:24:45 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 18:24:45 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 18:24:45 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 18:24:50 NET: Client (conid:88954615) connected to vdl.0 (clients:1)
12.10 18:24:51 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 18:24:51 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 18:24:51 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 18:24:51 -<<-: core/server.query { list => {{ name => uid33, networkid => , isbanned => false, id => 33 }}, errorCode => ok, _type => core/server.query }
12.10 18:24:51 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 18:24:51 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 18:24:51 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 18:24:51 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid33, deleted => false, email => , networktype =>   , password => uid33, isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476272110, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 2, id => 33 } }
12.10 18:24:51 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 18:24:51 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 33 } }
12.10 18:24:51 NET: Client login (conid:88954615, id:33, name:uid33)
12.10 18:24:51 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 18:24:51 -<<-: core/user.loginPost { _type => core/user.loginPost }
12.10 18:24:51 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 18:24:51 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 18:24:55 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 18:24:55 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:24:55 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => {"params":{"usersList":[{"name":"uid33","id":33}]}}, id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:24:55 TIME: tournament.getAvailableTournament 2.65 ms
12.10 18:24:55 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => {"params":{"usersList":[{"name":"uid33","id":33}]}}, id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:24:59 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 18:24:59 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
12.10 18:25:06 ++ NET: uid33 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
12.10 18:25:06 ->>-: vdl/cache.tournament.addUsers { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 18:25:06 -<<-: vdl/cache.tournament.addUsers { errorCode => userExist, _type => vdl/cache.tournament.addUsers }
12.10 18:25:06 TIME: tournament.addUsers 4.32 ms
12.10 18:25:06 == NET: uid33 ret: tournament.addUsers { type => tournament.addUsers, errorCode => userExist, _type => vdl/cache.tournament.addUsers }
12.10 18:40:40 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 18:40:40 -<<-: server.login ok
12.10 18:40:40 DB: SELECT * FROM LocalizationStrings
12.10 18:40:40 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 18:40:40 -<<-: core/server.query ok
12.10 18:40:40 TIMER: Starting timer...
12.10 18:40:40 TIMER: Timer running...
12.10 18:40:40 DB: SELECT * FROM GameVars
12.10 18:40:40 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 18:40:40 -<<-: core/server.query ok
12.10 18:40:40 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 18:40:40 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 18:40:40 -<<-: core/server.query ok
12.10 18:40:40 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 18:40:40 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 18:40:40 -<<-: core/server.query ok
12.10 18:40:40 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 18:40:40 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 18:40:40 -<<-: core/server.query ok
12.10 18:40:40 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 18:40:40 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 18:40:40 -<<-: core/server.query ok
12.10 18:40:40 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 18:40:40 -<<-: core/quest.getDaily ok
12.10 18:40:40 DB: SELECT * FROM UserAttributeTypes
12.10 18:40:40 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 18:40:40 -<<-: core/server.query ok
12.10 18:40:40 DB: SELECT * FROM UserVariableTypes
12.10 18:40:40 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 18:40:40 -<<-: core/server.query ok
12.10 18:40:40 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 18:40:40 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 18:40:40 -<<-: core/server.query ok
12.10 18:40:40 DB: SELECT * FROM ItemGroups
12.10 18:40:40 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 18:40:40 -<<-: core/server.query ok
12.10 18:40:40 DB: SELECT * FROM Bundles ORDER BY ID
12.10 18:40:40 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 18:40:40 -<<-: core/server.query ok
12.10 18:40:40 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 18:40:40 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 18:40:40 -<<-: core/server.query ok
12.10 18:40:40 SHOP: loading items...
12.10 18:40:40 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 18:40:40 -<<-: core/shop.getList ok
12.10 18:40:40 SHOP: 0 items loaded (0 sec)
12.10 18:40:40 DB: SELECT * FROM EffectAttributeTypes
12.10 18:40:40 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 18:40:40 -<<-: core/server.query ok
12.10 18:40:40 DB: SELECT * FROM Effects
12.10 18:40:41 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 18:40:41 -<<-: core/server.query ok
12.10 18:40:41 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 18:40:41 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 18:40:41 -<<-: core/server.query ok
12.10 18:40:41 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 18:40:41 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 18:40:41 -<<-: core/server.query ok
12.10 18:40:41 DB: SELECT * FROM Badges
12.10 18:40:41 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 18:40:41 -<<-: core/server.query ok
12.10 18:40:41 TIMER: Check auto-disconnect...
12.10 18:40:41 STATS: vdl.0 cache, locks:0
12.10 18:41:52 NET: Client (conid:90454048) connected to vdl.0 (clients:1)
12.10 18:41:53 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 18:41:53 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 18:41:53 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 18:41:53 -<<-: core/server.query ok
12.10 18:41:53 STATS: vdl.0 cache connection, 21 calls, total 0.0658950805664062 sec spent, avg 3.14 ms
12.10 18:41:53 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 18:41:53 -<<-: core/user.isOnlineID ok
12.10 18:41:53 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 18:41:53 -<<-: core/cache.get ok
12.10 18:41:53 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 18:41:53 -<<-: core/cache.get ok
12.10 18:41:53 NET: Client login (conid:90454048, id:33, name:uid33)
12.10 18:41:53 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 18:41:53 -<<-: core/user.loginPost null
12.10 18:41:53 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 18:41:53 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 18:42:01 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 18:42:01 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 18:42:02 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 18:42:02 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:42:02 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, userList => [], battleActive => [], startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:42:02 TIME: tournament.getAvailableTournament 5.37 ms
12.10 18:42:02 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, userList => [], battleActive => [], startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:43:46 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 18:43:46 -<<-: server.login ok
12.10 18:43:46 DB: SELECT * FROM LocalizationStrings
12.10 18:43:46 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 TIMER: Starting timer...
12.10 18:43:46 DB: SELECT * FROM GameVars
12.10 18:43:46 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 18:43:46 TIMER: Timer running...
12.10 18:43:46 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 18:43:46 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 18:43:46 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 18:43:46 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 18:43:46 -<<-: core/quest.getDaily ok
12.10 18:43:46 DB: SELECT * FROM UserAttributeTypes
12.10 18:43:46 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 DB: SELECT * FROM UserVariableTypes
12.10 18:43:46 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 18:43:46 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 DB: SELECT * FROM ItemGroups
12.10 18:43:46 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 DB: SELECT * FROM Bundles ORDER BY ID
12.10 18:43:46 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 18:43:46 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 SHOP: loading items...
12.10 18:43:46 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 18:43:46 -<<-: core/shop.getList ok
12.10 18:43:46 SHOP: 0 items loaded (0 sec)
12.10 18:43:46 DB: SELECT * FROM EffectAttributeTypes
12.10 18:43:46 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 DB: SELECT * FROM Effects
12.10 18:43:46 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 18:43:46 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 18:43:46 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 DB: SELECT * FROM Badges
12.10 18:43:46 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 18:43:46 -<<-: core/server.query ok
12.10 18:43:46 TIMER: Check auto-disconnect...
12.10 18:43:46 STATS: vdl.0 cache, locks:0
12.10 18:43:46 TIMER: Check auto-disconnect...
12.10 18:43:46 STATS: vdl.0 cache, locks:0
12.10 18:46:30 NET: Client (conid:93236252) connected to vdl.0 (clients:1)
12.10 18:46:31 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 18:46:31 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 18:46:31 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 18:46:31 -<<-: core/server.query ok
12.10 18:46:31 STATS: vdl.0 cache connection, 21 calls, total 0.0852196216583252 sec spent, avg 4.06 ms
12.10 18:46:31 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 18:46:31 -<<-: core/user.isOnlineID ok
12.10 18:46:31 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 18:46:31 -<<-: core/cache.get ok
12.10 18:46:31 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 18:46:31 -<<-: core/cache.get ok
12.10 18:46:31 NET: Client login (conid:93236252, id:33, name:uid33)
12.10 18:46:31 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 18:46:31 -<<-: core/user.loginPost null
12.10 18:46:31 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 18:46:31 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 18:46:36 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 18:46:36 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 18:46:39 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 18:46:39 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:46:39 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:46:39 TIME: tournament.getAvailableTournament 4.47 ms
12.10 18:46:39 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:46:46 TIMER: Check auto-disconnect...
12.10 18:46:46 STATS: vdl.0 cache, locks:2
12.10 18:46:48 ++ NET: uid33 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
12.10 18:46:48 ->>-: vdl/cache.tournament.addUsers { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 18:46:48 -<<-: vdl/cache.tournament.addUsers { errorCode => userExist, _type => vdl/cache.tournament.addUsers }
12.10 18:46:48 TIME: tournament.addUsers 2.44 ms
12.10 18:46:48 == NET: uid33 ret: tournament.addUsers { type => tournament.addUsers, errorCode => userExist, _type => vdl/cache.tournament.addUsers }
12.10 18:48:00 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 18:48:00 -<<-: server.login ok
12.10 18:48:00 DB: SELECT * FROM LocalizationStrings
12.10 18:48:00 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:00 TIMER: Starting timer...
12.10 18:48:00 TIMER: Timer running...
12.10 18:48:00 DB: SELECT * FROM GameVars
12.10 18:48:00 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:00 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 18:48:00 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:00 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 18:48:00 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:00 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 18:48:00 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:00 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 18:48:00 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:00 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 18:48:00 -<<-: core/quest.getDaily ok
12.10 18:48:00 DB: SELECT * FROM UserAttributeTypes
12.10 18:48:00 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:00 DB: SELECT * FROM UserVariableTypes
12.10 18:48:00 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:00 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 18:48:00 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:00 DB: SELECT * FROM ItemGroups
12.10 18:48:00 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:00 DB: SELECT * FROM Bundles ORDER BY ID
12.10 18:48:00 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:00 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 18:48:00 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:00 SHOP: loading items...
12.10 18:48:00 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 18:48:00 -<<-: core/shop.getList ok
12.10 18:48:00 SHOP: 0 items loaded (0 sec)
12.10 18:48:00 DB: SELECT * FROM EffectAttributeTypes
12.10 18:48:00 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:00 DB: SELECT * FROM Effects
12.10 18:48:00 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:00 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 18:48:00 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:00 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 18:48:00 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:00 DB: SELECT * FROM Badges
12.10 18:48:00 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 18:48:00 -<<-: core/server.query ok
12.10 18:48:57 NET: Client (conid:7266393) connected to vdl.0 (clients:1)
12.10 18:48:58 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 18:48:58 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 18:48:58 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 18:48:58 -<<-: core/server.query ok
12.10 18:48:58 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 18:48:58 -<<-: core/user.isOnlineID ok
12.10 18:48:58 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 18:48:58 -<<-: core/cache.get ok
12.10 18:48:58 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 18:48:58 -<<-: core/cache.get ok
12.10 18:48:58 NET: Client login (conid:7266393, id:33, name:uid33)
12.10 18:48:58 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 18:48:58 -<<-: core/user.loginPost null
12.10 18:48:58 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 18:48:58 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 18:49:00 TIMER: Check auto-disconnect...
12.10 18:49:00 STATS: vdl.0 cache, locks:2
12.10 18:49:05 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 18:49:05 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 18:49:05 STATS: vdl.0 cache connection, 26 calls, total 0.0917010307312012 sec spent, avg 3.53 ms
12.10 18:49:05 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 18:49:05 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:49:05 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid33, id => 33 }], battleActive => null, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:49:05 TIME: tournament.getAvailableTournament 4.32 ms
12.10 18:49:05 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid33, id => 33 }], battleActive => null, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 18:50:00 TIMER: Check auto-disconnect...
12.10 18:50:00 STATS: vdl.0 cache, locks:2
12.10 18:50:00 TIMER: Check auto-disconnect...
12.10 18:50:00 STATS: vdl.0 cache, locks:2
12.10 18:50:00 TIMER: Check auto-disconnect...
12.10 18:50:00 STATS: vdl.0 cache, locks:2
12.10 18:50:00 TIMER: Check auto-disconnect...
12.10 18:50:00 NET: Client (name:uid33 conid:7266393 TCP) disconnected from vdl.0 (clients:0)
12.10 18:50:00 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 18:50:00 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 18:50:00 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 18:50:00 STATS: vdl.0 cache connection, 28 calls, total 0.0985279083251953 sec spent, avg 3.52 ms
12.10 18:50:00 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 18:50:00 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 18:50:00 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 18:50:00 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
12.10 18:50:00 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 18:50:00 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 18:50:00 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 18:50:00 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 18:50:00 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 18:50:00 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 18:50:00 STATS: vdl.0 cache, locks:0
12.10 18:50:00 TIMER: Check auto-disconnect...
12.10 18:50:00 STATS: vdl.0 cache, locks:0
12.10 18:50:00 TIMER: Check auto-disconnect...
12.10 18:50:00 STATS: vdl.0 cache, locks:0
12.10 18:50:00 TIMER: Check auto-disconnect...
12.10 18:50:00 STATS: vdl.0 cache, locks:0
12.10 18:50:00 TIMER: Check auto-disconnect...
12.10 18:50:00 STATS: vdl.0 cache, locks:0
12.10 18:50:00 TIMER: Check auto-disconnect...
12.10 18:50:00 STATS: vdl.0 cache, locks:0
12.10 18:50:00 TIMER: Check auto-disconnect...
12.10 18:50:00 STATS: vdl.0 cache, locks:0
12.10 18:50:00 TIMER: Check auto-disconnect...
12.10 18:50:00 STATS: vdl.0 cache, locks:0
