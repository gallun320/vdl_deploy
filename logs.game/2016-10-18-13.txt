18.10 13:02:20 STATS: vdl.0 cache, locks:0
18.10 13:03:19 TIMER: Check auto-disconnect...
18.10 13:03:20 STATS: vdl.0 cache, locks:0
18.10 13:04:19 TIMER: Check auto-disconnect...
18.10 13:04:20 STATS: vdl.0 cache, locks:0
18.10 13:05:19 TIMER: Check auto-disconnect...
18.10 13:05:20 STATS: vdl.0 cache, locks:0
18.10 13:05:22 NET: Client (conid:58537825) connected to vdl.0 (clients:1)
18.10 13:05:23 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
18.10 13:05:23 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
18.10 13:05:23 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
18.10 13:05:23 -<<-: core/server.query ok
18.10 13:05:23 STATS: vdl.0 cache connection, 24 calls, total 0.157315731048584 sec spent, avg 6.55 ms
18.10 13:05:23 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
18.10 13:05:23 -<<-: core/user.isOnlineID ok
18.10 13:05:23 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
18.10 13:05:23 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid36, deleted => false, email => , networktype =>   , password => uid36, isbanned => false, regdate => 2016-10-14 18:14:45.120358+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476702920, lastLoginDate => 291, lastLoadDate => 1018 }, effects => { list => [] } }}, version => 0, id => 36 } }
18.10 13:05:23 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
18.10 13:05:23 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 36 } }
18.10 13:05:23 NET: Client login (conid:58537825, id:36, name:uid36)
18.10 13:05:23 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
18.10 13:05:23 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.10 13:05:23 DB: SELECT ID FROM TempUserLogins WHERE UserID = 36 AND Date = 'today'::timestamp
18.10 13:05:23 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 36 AND Date = 'today'::timestamp, _type => core/server.query }
18.10 13:05:23 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.10 13:05:23 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (36, 'today'::timestamp)
18.10 13:05:23 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
18.10 13:05:23 == NET: uid36 ret: user.join { name => uid36, type => user.join }
18.10 13:05:23 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (36, 'today'::timestamp), _type => core/server.pending }} }
18.10 13:05:23 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
18.10 13:05:30 ->>-: core/cache.update { diff => {language => en, params => { attrs => { lastLoginDate => 292, lastLoadDate => 1019 } }}, type => user, unlock => false, id => 36, _type => core/cache.update }
18.10 13:05:30 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.10 13:06:19 TIMER: Check auto-disconnect...
18.10 13:06:52 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
18.10 13:06:52 -<<-: server.login ok
18.10 13:06:53 DB: SELECT * FROM LocalizationStrings
18.10 13:06:53 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 TIMER: Starting timer...
18.10 13:06:53 TIMER: Timer running...
18.10 13:06:53 DB: SELECT * FROM GameVars
18.10 13:06:53 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.10 13:06:53 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.10 13:06:53 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.10 13:06:53 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.10 13:06:53 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.10 13:06:53 -<<-: core/quest.getDaily ok
18.10 13:06:53 DB: SELECT * FROM UserAttributeTypes
18.10 13:06:53 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 DB: SELECT * FROM UserVariableTypes
18.10 13:06:53 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.10 13:06:53 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 DB: SELECT * FROM ItemGroups
18.10 13:06:53 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 DB: SELECT * FROM Bundles ORDER BY ID
18.10 13:06:53 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 DB: SELECT * FROM BundleItems ORDER BY ID
18.10 13:06:53 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 SHOP: loading items...
18.10 13:06:53 ->>-: core/shop.getList { _type => core/shop.getList }
18.10 13:06:53 -<<-: core/shop.getList ok
18.10 13:06:53 SHOP: 0 items loaded (0.001 sec)
18.10 13:06:53 DB: SELECT * FROM EffectAttributeTypes
18.10 13:06:53 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 DB: SELECT * FROM Effects
18.10 13:06:53 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.10 13:06:53 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.10 13:06:53 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 DB: SELECT * FROM Badges
18.10 13:06:53 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.10 13:06:53 -<<-: core/server.query ok
18.10 13:06:53 TIMER: Check auto-disconnect...
18.10 13:06:53 STATS: vdl.0 cache, locks:0
18.10 13:06:53 TIMER: Check auto-disconnect...
18.10 13:06:53 STATS: vdl.0 cache, locks:0
18.10 13:06:53 TIMER: Check auto-disconnect...
18.10 13:06:53 STATS: vdl.0 cache, locks:0
18.10 13:06:53 TIMER: Check auto-disconnect...
18.10 13:06:53 STATS: vdl.0 cache, locks:0
18.10 13:11:17 NET: Client (conid:12754633) connected to vdl.0 (clients:1)
18.10 13:11:18 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
18.10 13:11:18 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
18.10 13:11:18 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
18.10 13:11:18 -<<-: core/server.query ok
18.10 13:11:18 STATS: vdl.0 cache connection, 21 calls, total 0.0826067924499512 sec spent, avg 3.93 ms
18.10 13:11:18 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
18.10 13:11:18 -<<-: core/user.isOnlineID ok
18.10 13:11:18 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
18.10 13:11:18 -<<-: core/cache.get ok
18.10 13:11:18 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
18.10 13:11:18 -<<-: core/cache.get ok
18.10 13:11:18 NET: Client login (conid:12754633, id:36, name:uid36)
18.10 13:11:18 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
18.10 13:11:18 -<<-: core/user.loginPost null
18.10 13:11:18 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
18.10 13:11:18 == NET: uid36 ret: user.join { name => uid36, type => user.join }
18.10 13:11:26 ++ NET: uid36 req: user.logout { messageType => user.logout }
18.10 13:11:26 TRACE: user.logout : No such module: user
18.10 13:11:26 TRACE: user.logout : 
Called from snipe/slave/Server.hx line 1159
18.10 13:11:28 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
18.10 13:11:28 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.10 13:11:49 ++ NET: uid36 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
18.10 13:11:49 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
18.10 13:11:49 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
18.10 13:11:49 TIME: tournament.getAvailableTournament 12.7 ms
18.10 13:11:49 == NET: uid36 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => null, round => 1, id => 1, status => active, userList => [{ name => uid36, id => 36 },{ name => uid37, id => 37 }], battleActive => [48,49], startdate => 2016-14-10 20:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
18.10 13:11:53 ++ NET: uid36 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
18.10 13:11:53 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
18.10 13:11:53 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [36,37] }
18.10 13:11:53 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 36, player2 => 37 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid }
18.10 13:11:53 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 36, player2 => 37 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
18.10 13:11:53 TIME: tournament.grid 1.79 ms
18.10 13:11:53 == NET: uid36 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 36, player2 => 37 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
18.10 13:11:53 TIMER: Check auto-disconnect...
18.10 13:11:53 STATS: vdl.0 cache, locks:2
18.10 13:11:53 TIMER: Check auto-disconnect...
18.10 13:11:53 STATS: vdl.0 cache, locks:2
18.10 13:11:53 TIMER: Check auto-disconnect...
18.10 13:11:53 STATS: vdl.0 cache, locks:2
18.10 13:11:53 TIMER: Check auto-disconnect...
18.10 13:11:53 NET: Client (name:uid36 conid:12754633 TCP) disconnected from vdl.0 (clients:0)
18.10 13:11:53 DB: SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true
18.10 13:11:53 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true, _type => core/server.query }
18.10 13:11:53 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.10 13:11:53 STATS: vdl.0 cache connection, 30 calls, total 0.134164333343506 sec spent, avg 4.47 ms
18.10 13:11:53 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.10 13:11:53 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
18.10 13:11:53 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.10 13:11:53 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 214
Called from modules/VDLBattleModule.hx line 227
Called from snipe/slave/Server.hx line 994
18.10 13:11:53 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 36, _type => core/cache.update }
18.10 13:11:53 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
18.10 13:11:53 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 36, _type => core/cache.update }
18.10 13:11:53 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.10 13:11:53 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 36, _type => core/user.logoutPost }
18.10 13:11:53 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.10 13:11:53 STATS: vdl.0 cache, locks:0
18.10 13:11:53 TIMER: Check auto-disconnect...
18.10 13:11:53 STATS: vdl.0 cache, locks:0
18.10 13:11:53 TIMER: Check auto-disconnect...
18.10 13:11:53 STATS: vdl.0 cache, locks:0
18.10 13:11:53 TIMER: Check auto-disconnect...
18.10 13:11:53 STATS: vdl.0 cache, locks:0
18.10 13:11:53 TIMER: Check auto-disconnect...
18.10 13:11:53 STATS: vdl.0 cache, locks:0
18.10 13:11:53 TIMER: Check auto-disconnect...
18.10 13:11:53 STATS: vdl.0 cache, locks:0
18.10 13:11:53 TIMER: Check auto-disconnect...
18.10 13:11:53 STATS: vdl.0 cache, locks:0
18.10 13:11:53 TIMER: Check auto-disconnect...
18.10 13:11:53 STATS: vdl.0 cache, locks:0
18.10 13:11:53 TIMER: Check auto-disconnect...
18.10 13:11:53 STATS: vdl.0 cache, locks:0
18.10 13:11:53 TIMER: Check auto-disconnect...
18.10 13:11:53 STATS: vdl.0 cache, locks:0
18.10 13:11:53 TIMER: Check auto-disconnect...
18.10 13:11:53 STATS18.10 13:40:13 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
18.10 13:40:13 -<<-: server.login ok
18.10 13:40:13 DB: SELECT * FROM LocalizationStrings
18.10 13:40:13 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 TIMER: Starting timer...
18.10 13:40:13 TIMER: Timer running...
18.10 13:40:13 DB: SELECT * FROM GameVars
18.10 13:40:13 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.10 13:40:13 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.10 13:40:13 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.10 13:40:13 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.10 13:40:13 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.10 13:40:13 -<<-: core/quest.getDaily ok
18.10 13:40:13 DB: SELECT * FROM UserAttributeTypes
18.10 13:40:13 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 DB: SELECT * FROM UserVariableTypes
18.10 13:40:13 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.10 13:40:13 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 DB: SELECT * FROM ItemGroups
18.10 13:40:13 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 DB: SELECT * FROM Bundles ORDER BY ID
18.10 13:40:13 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 DB: SELECT * FROM BundleItems ORDER BY ID
18.10 13:40:13 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 SHOP: loading items...
18.10 13:40:13 ->>-: core/shop.getList { _type => core/shop.getList }
18.10 13:40:13 -<<-: core/shop.getList ok
18.10 13:40:13 SHOP: 0 items loaded (0.003 sec)
18.10 13:40:13 DB: SELECT * FROM EffectAttributeTypes
18.10 13:40:13 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 DB: SELECT * FROM Effects
18.10 13:40:13 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.10 13:40:13 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.10 13:40:13 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 DB: SELECT * FROM Badges
18.10 13:40:13 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.10 13:40:13 -<<-: core/server.query ok
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:40:13 STATS: vdl.0 cache, locks:0
18.10 13:40:13 TIMER: Check auto-disconnect...
18.10 13:58:14 STATS: vdl.0 cache, locks:0
18.10 13:59:13 TIMER: Check auto-disconnect...
18.10 13:59:14 STATS: vdl.0 cache, locks:0
