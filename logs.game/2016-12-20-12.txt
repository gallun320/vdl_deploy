20.12 12:00:16 NET: Client (conid:56183215) connected to vdl.0 (clients:1)
20.12 12:00:16 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTEy }
20.12 12:00:16 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid112' AND Password = 'uid112'
20.12 12:00:16 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid112' AND Password = 'uid112', _type => core/server.query }
20.12 12:00:16 -<<-: core/server.query { list => {{ name => uid112, networkid => , isbanned => false, id => 112 }}, errorCode => ok, _type => core/server.query }
20.12 12:00:16 ->>-: core/user.isOnlineID { id => 112, _type => core/user.isOnlineID }
20.12 12:00:16 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.12 12:00:16 ->>-: core/cache.get { type => user, v => -1, id => 112, _type => core/cache.get }
20.12 12:00:16 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid112, deleted => false, year => , email => mail, networktype =>   , password => uid112, isbanned => false, regdate => 2016-11-20 16:49:02.85795+00, city => , language => en, networkid => , params => { attrs => { _lastTime.24hr => 1482233198, lastLoginDate => 355, lastLoadDate => 1221 }, effects => { list => [] } }}, version => 0, id => 112 } }
20.12 12:00:16 ->>-: core/cache.get { type => questdata, v => -1, id => 112, _type => core/cache.get }
20.12 12:00:16 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 112 } }
20.12 12:00:16 NET: Client login (conid:56183215, id:112, name:uid112)
20.12 12:00:16 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 112, _type => core/user.loginPost, ipAddr => 91.225.76.192 }
20.12 12:00:16 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.12 12:00:16 DB: SELECT token FROM tokens WHERE userid = 112
20.12 12:00:16 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 112, _type => core/server.query }
20.12 12:00:16 -<<-: core/server.query { list => {{ token => b9b344ddb63b34ea57fc74ab83d687ac }}, errorCode => ok, _type => core/server.query }
20.12 12:00:16 == NET: uid112 ret: user.login { name => uid112, type => user.login, errorCode => ok, id => 112, token => b9b344ddb63b34ea57fc74ab83d687ac }
20.12 12:00:16 == NET: uid112 ret: user.join { name => uid112, type => user.join }
20.12 12:00:20 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:00:20 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:00:20 TIME: user.ping 0.13 ms
20.12 12:00:24 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 112, _type => core/cache.update }
20.12 12:00:24 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.12 12:00:24 STATS: vdl.0 cache connection, 250 calls, total 0.177488327026367 sec spent, avg 0.71 ms
20.12 12:00:48 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:00:48 TIME: user.ping 0.22 ms
20.12 12:00:48 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:00:54 TIMER: Check auto-disconnect...
20.12 12:00:54 STATS: vdl.0 cache, locks:2
20.12 12:01:12 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:01:12 TIME: user.ping 0.12 ms
20.12 12:01:12 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:01:38 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:01:38 TIME: user.ping 0.11 ms
20.12 12:01:38 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:01:54 TIMER: Check auto-disconnect...
20.12 12:01:54 STATS: vdl.0 cache, locks:2
20.12 12:02:05 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:02:05 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:02:05 TIME: user.ping 0.21 ms
20.12 12:02:32 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:02:32 TIME: user.ping 0.19 ms
20.12 12:02:32 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:02:54 TIMER: Check auto-disconnect...
20.12 12:02:54 STATS: vdl.0 cache, locks:2
20.12 12:03:00 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:03:00 TIME: user.ping 0.14 ms
20.12 12:03:00 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:03:28 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:03:28 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:03:28 TIME: user.ping 0.25 ms
20.12 12:03:54 TIMER: Check auto-disconnect...
20.12 12:03:54 STATS: vdl.0 cache, locks:2
20.12 12:03:58 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:03:58 TIME: user.ping 0.13 ms
20.12 12:03:58 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:04:19 NET: Client (name:uid112 conid:56183215 TCP) disconnected from vdl.0 (clients:0)
20.12 12:04:19 DB: SELECT id FROM battle WHERE firstid=112 OR secondid=112 AND finished <> true
20.12 12:04:19 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=112 OR secondid=112 AND finished <> true, _type => core/server.query }
20.12 12:04:19 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.12 12:04:19 STATS: vdl.0 cache connection, 251 calls, total 0.178532361984253 sec spent, avg 0.71 ms
20.12 12:04:19 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.12 12:04:19 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
20.12 12:04:19 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.12 12:04:19 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 1009
20.12 12:04:19 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 112, _type => core/cache.update }
20.12 12:04:19 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
20.12 12:04:19 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 112, _type => core/cache.update }
20.12 12:04:19 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.12 12:04:19 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 112, _type => core/user.logoutPost }
20.12 12:04:19 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.12 12:04:26 NET: Client (conid:11275293) connected to vdl.0 (clients:1)
20.12 12:04:27 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTEy }
20.12 12:04:27 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid112' AND Password = 'uid112'
20.12 12:04:27 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid112' AND Password = 'uid112', _type => core/server.query }
20.12 12:04:27 -<<-: core/server.query { list => {{ name => uid112, networkid => , isbanned => false, id => 112 }}, errorCode => ok, _type => core/server.query }
20.12 12:04:27 ->>-: core/user.isOnlineID { id => 112, _type => core/user.isOnlineID }
20.12 12:04:27 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.12 12:04:27 ->>-: core/cache.get { type => user, v => -1, id => 112, _type => core/cache.get }
20.12 12:04:27 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid112, deleted => false, year => , email => mail, networktype =>   , password => uid112, isbanned => false, regdate => 2016-11-20 16:49:02.85795+00, city => , language => en, networkid => , params => { attrs => { _lastTime.24hr => 1482233198, lastLoginDate => 355, lastLoadDate => 1221 }, effects => { list => [] } }}, version => 2, id => 112 } }
20.12 12:04:27 ->>-: core/cache.get { type => questdata, v => -1, id => 112, _type => core/cache.get }
20.12 12:04:27 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 112 } }
20.12 12:04:27 NET: Client login (conid:11275293, id:112, name:uid112)
20.12 12:04:27 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 112, _type => core/user.loginPost, ipAddr => 91.225.76.192 }
20.12 12:04:27 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.12 12:04:27 DB: SELECT token FROM tokens WHERE userid = 112
20.12 12:04:27 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 112, _type => core/server.query }
20.12 12:04:27 -<<-: core/server.query { list => {{ token => b9b344ddb63b34ea57fc74ab83d687ac }}, errorCode => ok, _type => core/server.query }
20.12 12:04:27 == NET: uid112 ret: user.login { name => uid112, type => user.login, errorCode => ok, id => 112, token => b9b344ddb63b34ea57fc74ab83d687ac }
20.12 12:04:27 == NET: uid112 ret: user.join { name => uid112, type => user.join }
20.12 12:04:31 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:04:31 TIME: user.ping 0.19 ms
20.12 12:04:31 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:04:34 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 112, _type => core/cache.update }
20.12 12:04:34 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
20.12 12:04:54 TIMER: Check auto-disconnect...
20.12 12:04:54 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:04:54 TIME: user.ping 0.15 ms
20.12 12:04:54 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:04:54 STATS: vdl.0 cache, locks:2
20.12 12:05:22 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:05:22 TIME: user.ping 0.14 ms
20.12 12:05:22 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:05:49 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:05:49 TIME: user.ping 0.14 ms
20.12 12:05:49 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:30:16 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3020, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3020 }
20.12 12:30:16 -<<-: server.login ok
20.12 12:30:16 DB: SELECT * FROM LocalizationStrings
20.12 12:30:16 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:16 TIMER: Starting timer...
20.12 12:30:16 DB: SELECT * FROM GameVars
20.12 12:30:16 TIMER: Timer running...
20.12 12:30:16 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:16 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
20.12 12:30:16 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:16 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
20.12 12:30:16 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:16 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
20.12 12:30:16 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:16 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
20.12 12:30:16 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:16 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
20.12 12:30:16 -<<-: core/quest.getDaily ok
20.12 12:30:16 DB: SELECT * FROM UserAttributeTypes
20.12 12:30:16 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:16 DB: SELECT * FROM UserVariableTypes
20.12 12:30:16 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:16 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
20.12 12:30:16 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:16 DB: SELECT * FROM ItemGroups
20.12 12:30:16 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:16 DB: SELECT * FROM Bundles ORDER BY ID
20.12 12:30:16 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:16 DB: SELECT * FROM BundleItems ORDER BY ID
20.12 12:30:16 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:16 SHOP: loading items...
20.12 12:30:16 ->>-: core/shop.getList { _type => core/shop.getList }
20.12 12:30:16 -<<-: core/shop.getList ok
20.12 12:30:16 SHOP: 0 items loaded (0 sec)
20.12 12:30:16 DB: SELECT * FROM EffectAttributeTypes
20.12 12:30:16 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:16 DB: SELECT * FROM Effects
20.12 12:30:16 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:16 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
20.12 12:30:16 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:16 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
20.12 12:30:16 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:16 DB: SELECT * FROM Badges
20.12 12:30:16 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
20.12 12:30:16 -<<-: core/server.query ok
20.12 12:30:17 NET: Client (conid:72483354) connected to vdl.0 (clients:1)
20.12 12:30:17 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTEy }
20.12 12:30:17 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid112' AND Password = 'uid112'
20.12 12:30:17 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid112' AND Password = 'uid112', _type => core/server.query }
20.12 12:30:17 -<<-: core/server.query ok
20.12 12:30:17 ->>-: core/user.isOnlineID { id => 112, _type => core/user.isOnlineID }
20.12 12:30:17 -<<-: core/user.isOnlineID ok
20.12 12:30:17 ->>-: core/cache.get { type => user, v => -1, id => 112, _type => core/cache.get }
20.12 12:30:17 -<<-: core/cache.get ok
20.12 12:30:17 ->>-: core/cache.get { type => questdata, v => -1, id => 112, _type => core/cache.get }
20.12 12:30:17 -<<-: core/cache.get ok
20.12 12:30:17 NET: Client login (conid:72483354, id:112, name:uid112)
20.12 12:30:17 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 112, _type => core/user.loginPost, ipAddr => 91.225.76.192 }
20.12 12:30:17 -<<-: core/user.loginPost null
20.12 12:30:17 DB: SELECT token FROM tokens WHERE userid = 112
20.12 12:30:17 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 112, _type => core/server.query }
20.12 12:30:17 -<<-: core/server.query { list => {{ token => b9b344ddb63b34ea57fc74ab83d687ac }}, errorCode => ok, _type => core/server.query }
20.12 12:30:17 == NET: uid112 ret: user.login { name => uid112, type => user.login, errorCode => ok, id => 112, token => b9b344ddb63b34ea57fc74ab83d687ac }
20.12 12:30:17 == NET: uid112 ret: user.join { name => uid112, type => user.join }
20.12 12:30:19 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:30:19 TIME: user.ping 0.19 ms
20.12 12:30:19 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:30:26 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 112, _type => core/cache.update }
20.12 12:30:26 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.12 12:30:47 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:30:47 TIME: user.ping 0.16 ms
20.12 12:30:47 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:31:13 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:31:13 TIME: user.ping 0.13 ms
20.12 12:31:13 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:31:16 TIMER: Check auto-disconnect...
20.12 12:31:16 STATS: vdl.0 cache, locks:2
20.12 12:31:31 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:31:31 TIME: user.ping 0.14 ms
20.12 12:31:31 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:31:49 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:31:49 TIME: user.ping 0.16 ms
20.12 12:31:49 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:32:07 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:32:07 TIME: user.ping 0.2 ms
20.12 12:32:07 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:32:16 TIMER: Check auto-disconnect...
20.12 12:32:16 STATS: vdl.0 cache, locks:2
20.12 12:32:23 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:32:23 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:32:23 TIME: user.ping 0.13 ms
20.12 12:32:41 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:32:41 TIME: user.ping 0.12 ms
20.12 12:32:41 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:32:59 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:32:59 TIME: user.ping 0.12 ms
20.12 12:32:59 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:33:16 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:33:16 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:33:16 TIME: user.ping 0.2 ms
20.12 12:33:16 TIMER: Check auto-disconnect...
20.12 12:33:16 STATS: vdl.0 cache, locks:2
20.12 12:33:33 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:33:33 TIME: user.ping 0.15 ms
20.12 12:33:33 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:33:52 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:33:52 TIME: user.ping 0.12 ms
20.12 12:33:52 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:34:11 NET: Client (name:uid112 conid:72483354 TCP) disconnected from vdl.0 (clients:0)
20.12 12:34:11 DB: SELECT id FROM battle WHERE firstid=112 OR secondid=112 AND finished <> true
20.12 12:34:11 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=112 OR secondid=112 AND finished <> true, _type => core/server.query }
20.12 12:34:11 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.12 12:34:11 STATS: vdl.0 cache connection, 28 calls, total 0.029076099395752 sec spent, avg 1.04 ms
20.12 12:34:11 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.12 12:34:11 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
20.12 12:34:11 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.12 12:34:11 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 1009
20.12 12:34:11 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 112, _type => core/cache.update }
20.12 12:34:11 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
20.12 12:34:11 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 112, _type => core/cache.update }
20.12 12:34:11 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.12 12:34:11 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 112, _type => core/user.logoutPost }
20.12 12:34:11 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.12 12:34:14 NET: Client (conid:38982219) connected to vdl.0 (clients:1)
20.12 12:34:15 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTEy }
20.12 12:34:15 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid112' AND Password = 'uid112'
20.12 12:34:15 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid112' AND Password = 'uid112', _type => core/server.query }
20.12 12:34:15 -<<-: core/server.query { list => {{ name => uid112, networkid => , isbanned => false, id => 112 }}, errorCode => ok, _type => core/server.query }
20.12 12:34:15 ->>-: core/user.isOnlineID { id => 112, _type => core/user.isOnlineID }
20.12 12:34:15 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.12 12:34:15 ->>-: core/cache.get { type => user, v => -1, id => 112, _type => core/cache.get }
20.12 12:34:15 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid112, deleted => false, year => , email => mail, networktype =>   , password => uid112, isbanned => false, regdate => 2016-11-20 16:49:02.85795+00, city => , language => en, networkid => , params => { attrs => { _lastTime.24hr => 1482233198, lastLoginDate => 355, lastLoadDate => 1221 }, effects => { list => [] } }}, version => 2, id => 112 } }
20.12 12:34:15 ->>-: core/cache.get { type => questdata, v => -1, id => 112, _type => core/cache.get }
20.12 12:34:15 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 112 } }
20.12 12:34:15 NET: Client login (conid:38982219, id:112, name:uid112)
20.12 12:34:15 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 112, _type => core/user.loginPost, ipAddr => 91.225.76.192 }
20.12 12:34:15 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.12 12:34:15 DB: SELECT token FROM tokens WHERE userid = 112
20.12 12:34:15 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 112, _type => core/server.query }
20.12 12:34:15 -<<-: core/server.query { list => {{ token => b9b344ddb63b34ea57fc74ab83d687ac }}, errorCode => ok, _type => core/server.query }
20.12 12:34:15 == NET: uid112 ret: user.login { name => uid112, type => user.login, errorCode => ok, id => 112, token => b9b344ddb63b34ea57fc74ab83d687ac }
20.12 12:34:15 == NET: uid112 ret: user.join { name => uid112, type => user.join }
20.12 12:34:16 TIMER: Check auto-disconnect...
20.12 12:34:16 STATS: vdl.0 cache, locks:2
20.12 12:34:18 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:34:18 TIME: user.ping 0.21 ms
20.12 12:34:18 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:34:21 ++ NET: uid112 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
20.12 12:34:21 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
20.12 12:34:21 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ price => -1, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 3, status => starting, userList => [], battleActive => null, rounddate => 2016-21-11 19:00, startdate => 2016-21-11 15:00 },{ price => -1, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 6, status => starting, userList => [{ name => nelli, id => 124 },{ name => forest, id => 117 }], battleActive => null, rounddate => 2016-23-11 17:00, startdate => 2016-23-11 14:00 },{ price => -1, name => test2, type => once, winner => -1, battleFinished => null, round => 1, id => 7, status => starting, userList => [{ name => nelli, id => 124 }], battleActive => null, rounddate => 2016-24-11 14:18, startdate => 2016-23-11 14:19 },{ price => -1, name => вап, type => once, winner => -1, battleFinished => null, round => 1, id => 8, status => starting, userList => [], battleActive => null, rounddate => 2016-11-16 18:34, startdate => 2016-11-09 18:34 },{ price => -1, name => впреаон, type => once, winner => -1, battleFinished => null, round => 1, id => 9, status => starting, userList => [], battleActive => null, rounddate => 2016-11-25 18:34, startdate => 2016-11-23 18:34 },{ price => -1, name => 12, type => once, winner => -1, battleFinished => null, round => 1, id => 4, status => starting, userList => [], battleActive => null, rounddate => 2016-11-12 15:15, startdate => 2016-11-19 15:15 },{ price => -1, name => test, type => periodically, winner => -1, battleFinished => null, round => 1, id => 11, status => starting, userList => [], battleActive => null, rounddate => 2016-11-24 15:44, startdate => 2016-11-24 15:44 },{ price => -1, name => sec, type => security, winner => -1, battleFinished => null, round => 1, id => 10, status => starting, userList => [], battleActive => null, rounddate => 2016-11-24 16:02, startdate => 2016-11-24 16:02 },{ price => 100, name => test3, type => once, winner => -1, battleFinished => null, round => 1, id => 12, status => starting, userList => [], battleActive => null, rounddate => 2016-11-25 16:53, startdate => 2016-11-25 16:53 }], count => 9, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
20.12 12:34:21 TIME: tournament.getAvailableTournament 8.49 ms
20.12 12:34:21 == NET: uid112 ret: tournament.getAvailableTournament { list => [{ price => -1, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 3, status => starting, userList => [], battleActive => null, rounddate => 2016-21-11 19:00, startdate => 2016-21-11 15:00 },{ price => -1, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 6, status => starting, userList => [{ name => nelli, id => 124 },{ name => forest, id => 117 }], battleActive => null, rounddate => 2016-23-11 17:00, startdate => 2016-23-11 14:00 },{ price => -1, name => test2, type => once, winner => -1, battleFinished => null, round => 1, id => 7, status => starting, userList => [{ name => nelli, id => 124 }], battleActive => null, rounddate => 2016-24-11 14:18, startdate => 2016-23-11 14:19 },{ price => -1, name => вап, type => once, winner => -1, battleFinished => null, round => 1, id => 8, status => starting, userList => [], battleActive => null, rounddate => 2016-11-16 18:34, startdate => 2016-11-09 18:34 },{ price => -1, name => впреаон, type => once, winner => -1, battleFinished => null, round => 1, id => 9, status => starting, userList => [], battleActive => null, rounddate => 2016-11-25 18:34, startdate => 2016-11-23 18:34 },{ price => -1, name => 12, type => once, winner => -1, battleFinished => null, round => 1, id => 4, status => starting, userList => [], battleActive => null, rounddate => 2016-11-12 15:15, startdate => 2016-11-19 15:15 },{ price => -1, name => test, type => periodically, winner => -1, battleFinished => null, round => 1, id => 11, status => starting, userList => [], battleActive => null, rounddate => 2016-11-24 15:44, startdate => 2016-11-24 15:44 },{ price => -1, name => sec, type => security, winner => -1, battleFinished => null, round => 1, id => 10, status => starting, userList => [], battleActive => null, rounddate => 2016-11-24 16:02, startdate => 2016-11-24 16:02 },{ price => 100, name => test3, type => once, winner => -1, battleFinished => null, round => 1, id => 12, status => starting, userList => [], battleActive => null, rounddate => 2016-11-25 16:53, startdate => 2016-11-25 16:53 }], count => 9, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
20.12 12:34:21 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 112, _type => core/cache.update }
20.12 12:34:21 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
20.12 12:34:38 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:34:38 TIME: user.ping 0.12 ms
20.12 12:34:38 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:35:03 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:35:03 TIME: user.ping 0.13 ms
20.12 12:35:03 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:35:16 TIMER: Check auto-disconnect...
20.12 12:35:16 STATS: vdl.0 cache, locks:2
20.12 12:35:27 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:35:27 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:35:27 TIME: user.ping 0.18 ms
20.12 12:35:49 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:35:49 TIME: user.ping 0.13 ms
20.12 12:35:49 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:36:12 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:36:12 TIME: user.ping 0.13 ms
20.12 12:36:12 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:36:16 TIMER: Check auto-disconnect...
20.12 12:36:16 STATS: vdl.0 cache, locks:2
20.12 12:36:35 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:36:35 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:36:35 TIME: user.ping 0.12 ms
20.12 12:36:57 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:36:57 TIME: user.ping 0.22 ms
20.12 12:36:57 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:37:16 TIMER: Check auto-disconnect...
20.12 12:37:16 STATS: vdl.0 cache, locks:2
20.12 12:37:20 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:37:20 TIME: user.ping 0.1 ms
20.12 12:37:20 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:37:43 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:37:43 TIME: user.ping 0.11 ms
20.12 12:37:43 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:38:06 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:38:06 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:38:06 TIME: user.ping 0.23 ms
20.12 12:38:16 TIMER: Check auto-disconnect...
20.12 12:38:16 STATS: vdl.0 cache, locks:2
20.12 12:38:25 NET: Client (name:uid112 conid:38982219 TCP) disconnected from vdl.0 (clients:0)
20.12 12:38:25 DB: SELECT id FROM battle WHERE firstid=112 OR secondid=112 AND finished <> true
20.12 12:38:25 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=112 OR secondid=112 AND finished <> true, _type => core/server.query }
20.12 12:38:25 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.12 12:38:25 STATS: vdl.0 cache connection, 41 calls, total 0.042569637298584 sec spent, avg 1.04 ms
20.12 12:38:25 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.12 12:38:25 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
20.12 12:38:25 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.12 12:38:25 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 1009
20.12 12:38:25 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 112, _type => core/cache.update }
20.12 12:38:25 -<<-: core/cache.update { errorCode => ok, version => 4, _type => core/cache.update }
20.12 12:38:25 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 112, _type => core/cache.update }
20.12 12:38:25 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
20.12 12:38:25 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 112, _type => core/user.logoutPost }
20.12 12:38:25 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.12 12:38:28 NET: Client (conid:5531376) connected to vdl.0 (clients:1)
20.12 12:38:29 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTEy }
20.12 12:38:29 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid112' AND Password = 'uid112'
20.12 12:38:29 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = 'uid112' AND Password = 'uid112', _type => core/server.query }
20.12 12:38:29 -<<-: core/server.query { list => {{ name => uid112, networkid => , isbanned => false, id => 112 }}, errorCode => ok, _type => core/server.query }
20.12 12:38:29 ->>-: core/user.isOnlineID { id => 112, _type => core/user.isOnlineID }
20.12 12:38:29 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.12 12:38:29 ->>-: core/cache.get { type => user, v => -1, id => 112, _type => core/cache.get }
20.12 12:38:29 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid112, deleted => false, year => , email => mail, networktype =>   , password => uid112, isbanned => false, regdate => 2016-11-20 16:49:02.85795+00, city => , language => en, networkid => , params => { attrs => { _lastTime.24hr => 1482233198, lastLoginDate => 355, lastLoadDate => 1221 }, effects => { list => [] } }}, version => 4, id => 112 } }
20.12 12:38:29 ->>-: core/cache.get { type => questdata, v => -1, id => 112, _type => core/cache.get }
20.12 12:38:29 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 2, id => 112 } }
20.12 12:38:29 NET: Client login (conid:5531376, id:112, name:uid112)
20.12 12:38:29 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 112, _type => core/user.loginPost, ipAddr => 91.225.76.192 }
20.12 12:38:29 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.12 12:38:29 DB: SELECT token FROM tokens WHERE userid = 112
20.12 12:38:29 ->>-: core/server.query { q => SELECT token FROM tokens WHERE userid = 112, _type => core/server.query }
20.12 12:38:29 -<<-: core/server.query { list => {{ token => b9b344ddb63b34ea57fc74ab83d687ac }}, errorCode => ok, _type => core/server.query }
20.12 12:38:29 == NET: uid112 ret: user.login { name => uid112, type => user.login, errorCode => ok, id => 112, token => b9b344ddb63b34ea57fc74ab83d687ac }
20.12 12:38:29 == NET: uid112 ret: user.join { name => uid112, type => user.join }
20.12 12:38:33 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:38:33 TIME: user.ping 0.17 ms
20.12 12:38:33 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:38:36 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 112, _type => core/cache.update }
20.12 12:38:36 -<<-: core/cache.update { errorCode => ok, version => 5, _type => core/cache.update }
20.12 12:38:37 ++ NET: uid112 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
20.12 12:38:37 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
20.12 12:38:37 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ price => -1, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 3, status => starting, userList => [], battleActive => null, rounddate => 2016-21-11 19:00, startdate => 2016-21-11 15:00 },{ price => -1, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 6, status => starting, userList => [{ name => nelli, id => 124 },{ name => forest, id => 117 }], battleActive => null, rounddate => 2016-23-11 17:00, startdate => 2016-23-11 14:00 },{ price => -1, name => test2, type => once, winner => -1, battleFinished => null, round => 1, id => 7, status => starting, userList => [{ name => nelli, id => 124 }], battleActive => null, rounddate => 2016-24-11 14:18, startdate => 2016-23-11 14:19 },{ price => -1, name => вап, type => once, winner => -1, battleFinished => null, round => 1, id => 8, status => starting, userList => [], battleActive => null, rounddate => 2016-11-16 18:34, startdate => 2016-11-09 18:34 },{ price => -1, name => впреаон, type => once, winner => -1, battleFinished => null, round => 1, id => 9, status => starting, userList => [], battleActive => null, rounddate => 2016-11-25 18:34, startdate => 2016-11-23 18:34 },{ price => -1, name => 12, type => once, winner => -1, battleFinished => null, round => 1, id => 4, status => starting, userList => [], battleActive => null, rounddate => 2016-11-12 15:15, startdate => 2016-11-19 15:15 },{ price => -1, name => test, type => periodically, winner => -1, battleFinished => null, round => 1, id => 11, status => starting, userList => [], battleActive => null, rounddate => 2016-11-24 15:44, startdate => 2016-11-24 15:44 },{ price => -1, name => sec, type => security, winner => -1, battleFinished => null, round => 1, id => 10, status => starting, userList => [], battleActive => null, rounddate => 2016-11-24 16:02, startdate => 2016-11-24 16:02 },{ price => 100, name => test3, type => once, winner => -1, battleFinished => null, round => 1, id => 12, status => starting, userList => [], battleActive => null, rounddate => 2016-11-25 16:53, startdate => 2016-11-25 16:53 }], count => 9, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
20.12 12:38:37 TIME: tournament.getAvailableTournament 6.48 ms
20.12 12:38:37 == NET: uid112 ret: tournament.getAvailableTournament { list => [{ price => -1, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 3, status => starting, userList => [], battleActive => null, rounddate => 2016-21-11 19:00, startdate => 2016-21-11 15:00 },{ price => -1, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 6, status => starting, userList => [{ name => nelli, id => 124 },{ name => forest, id => 117 }], battleActive => null, rounddate => 2016-23-11 17:00, startdate => 2016-23-11 14:00 },{ price => -1, name => test2, type => once, winner => -1, battleFinished => null, round => 1, id => 7, status => starting, userList => [{ name => nelli, id => 124 }], battleActive => null, rounddate => 2016-24-11 14:18, startdate => 2016-23-11 14:19 },{ price => -1, name => вап, type => once, winner => -1, battleFinished => null, round => 1, id => 8, status => starting, userList => [], battleActive => null, rounddate => 2016-11-16 18:34, startdate => 2016-11-09 18:34 },{ price => -1, name => впреаон, type => once, winner => -1, battleFinished => null, round => 1, id => 9, status => starting, userList => [], battleActive => null, rounddate => 2016-11-25 18:34, startdate => 2016-11-23 18:34 },{ price => -1, name => 12, type => once, winner => -1, battleFinished => null, round => 1, id => 4, status => starting, userList => [], battleActive => null, rounddate => 2016-11-12 15:15, startdate => 2016-11-19 15:15 },{ price => -1, name => test, type => periodically, winner => -1, battleFinished => null, round => 1, id => 11, status => starting, userList => [], battleActive => null, rounddate => 2016-11-24 15:44, startdate => 2016-11-24 15:44 },{ price => -1, name => sec, type => security, winner => -1, battleFinished => null, round => 1, id => 10, status => starting, userList => [], battleActive => null, rounddate => 2016-11-24 16:02, startdate => 2016-11-24 16:02 },{ price => 100, name => test3, type => once, winner => -1, battleFinished => null, round => 1, id => 12, status => starting, userList => [], battleActive => null, rounddate => 2016-11-25 16:53, startdate => 2016-11-25 16:53 }], count => 9, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
20.12 12:38:59 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:38:59 TIME: user.ping 0.15 ms
20.12 12:38:59 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:39:16 TIMER: Check auto-disconnect...
20.12 12:39:16 STATS: vdl.0 cache, locks:2
20.12 12:39:23 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:39:23 TIME: user.ping 0.12 ms
20.12 12:39:23 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:39:47 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:39:47 TIME: user.ping 0.13 ms
20.12 12:39:47 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:40:12 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:40:12 TIME: user.ping 0.12 ms
20.12 12:40:12 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:40:16 TIMER: Check auto-disconnect...
20.12 12:40:16 STATS: vdl.0 cache, locks:2
20.12 12:40:36 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:40:36 TIME: user.ping 0.14 ms
20.12 12:40:36 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:41:00 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:41:00 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:41:00 TIME: user.ping 0.15 ms
20.12 12:41:16 TIMER: Check auto-disconnect...
20.12 12:41:16 STATS: vdl.0 cache, locks:2
20.12 12:41:24 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:41:24 TIME: user.ping 0.13 ms
20.12 12:41:24 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:41:48 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:41:48 TIME: user.ping 0.14 ms
20.12 12:41:48 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:42:12 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:42:12 TIME: user.ping 0.2 ms
20.12 12:42:12 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:42:16 TIMER: Check auto-disconnect...
20.12 12:42:16 STATS: vdl.0 cache, locks:2
20.12 12:42:36 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:42:36 TIME: user.ping 0.13 ms
20.12 12:42:36 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:43:01 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:43:01 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:43:01 TIME: user.ping 0.16 ms
20.12 12:43:16 TIMER: Check auto-disconnect...
20.12 12:43:16 STATS: vdl.0 cache, locks:2
20.12 12:43:25 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:43:25 TIME: user.ping 0.18 ms
20.12 12:43:25 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:43:49 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:43:49 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:43:49 TIME: user.ping 0.15 ms
20.12 12:44:13 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:44:13 TIME: user.ping 0.2 ms
20.12 12:44:13 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:44:16 TIMER: Check auto-disconnect...
20.12 12:44:16 STATS: vdl.0 cache, locks:2
20.12 12:44:38 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:44:38 TIME: user.ping 0.13 ms
20.12 12:44:38 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:45:02 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:45:02 TIME: user.ping 0.13 ms
20.12 12:45:02 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
20.12 12:45:16 TIMER: Check auto-disconnect...
20.12 12:45:16 STATS: vdl.0 cache, locks:2
20.12 12:45:26 ++ NET: uid112 req: user.ping { messageType => user.ping, msg => ok }
20.12 12:45:26 TIME: user.ping 0.11 ms
20.12 12:45:26 == NET: uid112 ret: user.ping { type => user.ping, errorCode => ok }
