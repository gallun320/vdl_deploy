15.11 17:28:18 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
15.11 17:28:18 -<<-: server.login ok
15.11 17:28:18 DB: SELECT * FROM LocalizationStrings
15.11 17:28:18 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
15.11 17:28:18 -<<-: core/server.query ok
15.11 17:28:18 TIMER: Starting timer...
15.11 17:28:18 TIMER: Timer running...
15.11 17:28:18 DB: SELECT * FROM GameVars
15.11 17:28:18 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
15.11 17:28:18 -<<-: core/server.query ok
15.11 17:28:18 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
15.11 17:28:18 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
15.11 17:28:18 -<<-: core/server.query ok
15.11 17:28:18 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
15.11 17:28:18 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
15.11 17:28:18 -<<-: core/server.query ok
15.11 17:28:18 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
15.11 17:28:18 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
15.11 17:28:18 -<<-: core/server.query ok
15.11 17:28:18 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
15.11 17:28:18 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
15.11 17:28:18 -<<-: core/server.query ok
15.11 17:28:18 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
15.11 17:28:18 -<<-: core/quest.getDaily ok
15.11 17:28:18 DB: SELECT * FROM UserAttributeTypes
15.11 17:28:18 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
15.11 17:28:18 -<<-: core/server.query ok
15.11 17:28:18 DB: SELECT * FROM UserVariableTypes
15.11 17:28:18 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
15.11 17:28:18 -<<-: core/server.query ok
15.11 17:28:18 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
15.11 17:28:18 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
15.11 17:28:18 -<<-: core/server.query ok
15.11 17:28:18 DB: SELECT * FROM ItemGroups
15.11 17:28:18 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
15.11 17:28:18 -<<-: core/server.query ok
15.11 17:28:18 DB: SELECT * FROM Bundles ORDER BY ID
15.11 17:28:18 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
15.11 17:28:18 -<<-: core/server.query ok
15.11 17:28:18 DB: SELECT * FROM BundleItems ORDER BY ID
15.11 17:28:18 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
15.11 17:28:18 -<<-: core/server.query ok
15.11 17:28:18 SHOP: loading items...
15.11 17:28:18 ->>-: core/shop.getList { _type => core/shop.getList }
15.11 17:28:18 -<<-: core/shop.getList ok
15.11 17:28:18 SHOP: 0 items loaded (0 sec)
15.11 17:28:18 DB: SELECT * FROM EffectAttributeTypes
15.11 17:28:18 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
15.11 17:28:18 -<<-: core/server.query ok
15.11 17:28:18 DB: SELECT * FROM Effects
15.11 17:28:18 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
15.11 17:28:18 -<<-: core/server.query ok
15.11 17:28:18 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(15.11 17:29:46 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2010 }
15.11 17:29:46 -<<-: server.login ok
15.11 17:29:46 DB: SELECT * FROM LocalizationStrings
15.11 17:29:46 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
15.11 17:29:46 -<<-: core/server.query ok
15.11 17:29:46 TIMER: Starting timer...
15.11 17:29:46 TIMER: Timer running...
15.11 17:29:46 DB: SELECT * FROM GameVars
15.11 17:29:46 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
15.11 17:29:46 -<<-: core/server.query ok
15.11 17:29:46 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
15.11 17:29:46 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
15.11 17:29:46 -<<-: core/server.query ok
15.11 17:29:46 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
15.11 17:29:46 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
15.11 17:29:46 -<<-: core/server.query ok
15.11 17:29:46 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
15.11 17:29:46 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
15.11 17:29:46 -<<-: core/server.query ok
15.11 17:29:46 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
15.11 17:29:46 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
15.11 17:29:46 -<<-: core/server.query ok
15.11 17:29:46 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
15.11 17:29:46 -<<-: core/quest.getDaily ok
15.11 17:29:46 DB: SELECT * FROM UserAttributeTypes
15.11 17:29:46 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
15.11 17:29:46 -<<-: core/server.query ok
15.11 17:29:46 DB: SELECT * FROM UserVariableTypes
15.11 17:29:46 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
15.11 17:29:46 -<<-: core/server.query ok
15.11 17:29:46 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
15.11 17:29:46 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
15.11 17:29:46 -<<-: core/server.query ok
15.11 17:29:46 DB: SELECT * FROM ItemGroups
15.11 17:29:46 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
15.11 17:29:46 -<<-: core/server.query ok
15.11 17:29:46 DB: SELECT * FROM Bundles ORDER BY ID
15.11 17:29:46 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
15.11 17:29:46 -<<-: core/server.query ok
15.11 17:29:46 DB: SELECT * FROM BundleItems ORDER BY ID
15.11 17:29:46 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
15.11 17:29:46 -<<-: core/server.query ok
15.11 17:29:46 SHOP: loading items...
15.11 17:29:46 ->>-: core/shop.getList { _type => core/shop.getList }
15.11 17:29:46 -<<-: core/shop.getList ok
15.11 17:29:46 SHOP: 0 items loaded (0 sec)
15.11 17:29:46 DB: SELECT * FROM EffectAttributeTypes
15.11 17:29:46 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
15.11 17:29:46 -<<-: core/server.query ok
15.11 17:29:46 DB: SELECT * FROM Effects
15.11 17:29:46 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
15.11 17:29:46 -<<-: core/server.query ok
15.11 17:29:46 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(15.11 17:34:39 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2010 }
15.11 17:34:39 -<<-: server.login ok
15.11 17:34:39 DB: SELECT * FROM LocalizationStrings
15.11 17:34:39 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 TIMER: Starting timer...
15.11 17:34:39 TIMER: Timer running...
15.11 17:34:39 DB: SELECT * FROM GameVars
15.11 17:34:39 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
15.11 17:34:39 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
15.11 17:34:39 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
15.11 17:34:39 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
15.11 17:34:39 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
15.11 17:34:39 -<<-: core/quest.getDaily ok
15.11 17:34:39 DB: SELECT * FROM UserAttributeTypes
15.11 17:34:39 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 DB: SELECT * FROM UserVariableTypes
15.11 17:34:39 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
15.11 17:34:39 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 DB: SELECT * FROM ItemGroups
15.11 17:34:39 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 DB: SELECT * FROM Bundles ORDER BY ID
15.11 17:34:39 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 DB: SELECT * FROM BundleItems ORDER BY ID
15.11 17:34:39 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 SHOP: loading items...
15.11 17:34:39 ->>-: core/shop.getList { _type => core/shop.getList }
15.11 17:34:39 -<<-: core/shop.getList ok
15.11 17:34:39 SHOP: 0 items loaded (0 sec)
15.11 17:34:39 DB: SELECT * FROM EffectAttributeTypes
15.11 17:34:39 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 DB: SELECT * FROM Effects
15.11 17:34:39 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
15.11 17:34:39 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
15.11 17:34:39 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 DB: SELECT * FROM Badges
15.11 17:34:39 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
15.11 17:34:39 -<<-: core/server.query ok
15.11 17:34:39 TIMER: Check auto-disconnect...
15.11 17:34:39 STATS: vdl.0 cache, locks:0
15.11 17:34:39 TIMER: Check auto-disconnect...
15.11 17:34:39 STATS: vdl.0 cache, locks:0
15.11 17:34:39 TIMER: Check auto-disconnect...
15.11 17:34:39 STATS: vdl.0 cache, locks:0
15.11 17:34:39 TIMER: Check auto-disconnect...
15.11 17:34:39 STATS: vdl.0 cache, locks:0
15.11 17:34:39 TIMER: Check auto-disconnect...
15.11 17:34:39 STATS: vdl.0 cache, locks:0
15.11 17:34:39 TIMER: Check auto-disconnect...
15.11 17:34:39 STATS: vdl.0 cache, locks:0
15.11 17:34:39 TIMER: Check auto-disconnect...
15.11 17:34:39 STATS: vdl.0 cache, locks:0
15.11 17:34:39 TIMER: Check auto-disconnect...
15.11 17:34:39 STATS: vdl.0 cache, locks:0
15.11 17:34:39 TIMER: Check auto-disconnect...
15.11 17:34:39 STATS: vdl.0 cache, locks:0
15.11 17:34:39 TIMER: Check auto-disconnect...
15.11 17:34:39 STATS: vdl.0 cache, locks:0
15.11 17:34:39 TIMER: Check auto-disconnect...
15.11 17:34:39 STATS: vdl.0 cache, locks:0
15.11 17:34:39 TIMER: Check auto-disconnect...
15.11 17:34:39 STATS: vdl.0 cache, locks:0
15.11 17:34:39 TIMER: Check auto-disconnect...
15.11 17:34:39 STATS: vdl.0 cache, locks:0
15.11 17:34:39 TIMER: Check auto-disconnect...
15.11 17:34:39 STATS: vdl.0 cache, locks:0
15.11 17:34:39 TIMER: Check auto-disconnect...
15.11 17:34:39 STATS: vdl.0 cache, locks:0
15.11 17:34:39 TIMER: Check auto-disconnect...
15.11 17:34:39 STATS: vdl.0 cache, locks:0
15.11 17:51:34 NET: Client (conid:37609426) connected to vdl.0 (clients:1)
15.11 17:51:35 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTI= }
15.11 17:51:35 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid12' AND Password = E'uid12'
15.11 17:51:35 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid12' AND Password = E'uid12', _type => core/server.query }
15.11 17:51:35 -<<-: core/server.query ok
15.11 17:51:35 STATS: vdl.0 cache connection, 21 calls, total 0.213095188140869 sec spent, avg 10.15 ms
15.11 17:51:35 ->>-: core/user.isOnlineID { id => 12, _type => core/user.isOnlineID }
15.11 17:51:35 -<<-: core/user.isOnlineID ok
15.11 17:51:35 ->>-: core/cache.get { type => user, v => -1, id => 12, _type => core/cache.get }
15.11 17:51:35 -<<-: core/cache.get ok
15.11 17:51:35 ->>-: core/cache.get { type => questdata, v => -1, id => 12, _type => core/cache.get }
15.11 17:51:35 -<<-: core/cache.get ok
15.11 17:51:35 NET: Client login (conid:37609426, id:12, name:uid12)
15.11 17:51:35 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 12, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
15.11 17:51:35 -<<-: core/user.loginPost null
15.11 17:51:35 DB: SELECT ID FROM TempUserLogins WHERE UserID = 12 AND Date = 'today'::timestamp
15.11 17:51:35 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 12 AND Date = 'today'::timestamp, _type => core/server.query }
15.11 17:51:35 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
15.11 17:51:35 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (12, 'today'::timestamp)
15.11 17:51:35 == NET: uid12 ret: user.login { name => uid12, type => user.login, errorCode => ok, id => 12 }
15.11 17:51:35 == NET: uid12 ret: user.join { name => uid12, type => user.join }
15.11 17:51:35 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (12, 'today'::timestamp), _type => core/server.pending }} }
15.11 17:51:35 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
15.11 17:51:39 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
15.11 17:51:39 TIME: user.ping 0.08 ms
15.11 17:51:39 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
15.11 17:51:39 TIMER: Check auto-disconnect...
15.11 17:51:39 STATS: vdl.0 cache, locks:2
15.11 17:51:44 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1479221495, lastLoginDate => 320, lastLoadDate => 1116 } }}, type => user, unlock => false, id => 12, _type => core/cache.update }
15.11 17:51:44 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
15.11 17:51:56 ++ NET: uid12 req: user.searchEnemy { name => asdasdasdasd, messageType => user.searchEnemy }
15.11 17:51:56 DB: SELECT id, name FROM users WHERE name LIKE '%asdasdasdasd%'
15.11 17:51:56 ->>-: core/server.query { q => SELECT id, name FROM users WHERE name LIKE '%asdasdasdasd%', _type => core/server.query }
15.11 17:51:56 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
15.11 17:51:56 TIME: user.searchEnemy 1.37 ms
15.11 17:51:56 == NET: uid12 ret: user.searchEnemy { list => [], type => user.searchEnemy, errorCode => ok }
15.11 17:52:13 ++ NET: uid12 req: user.searchEnemy { name => uid12, messageType => user.searchEnemy }
15.11 17:52:13 DB: SELECT id, name FROM users WHERE name LIKE '%uid12%'
15.11 17:52:13 ->>-: core/server.query { q => SELECT id, name FROM users WHERE name LIKE '%uid12%', _type => core/server.query }
15.11 17:52:13 -<<-: core/server.query { list => {{ name => uid12, id => 12 }, { name => uid120, id => 120 }, { name => uid121, id => 121 }, { name => uid122, id => 122 }, { name => uid124, id => 124 }}, errorCode => ok, _type => core/server.query }
15.11 17:52:13 TIME: user.searchEnemy 0.85 ms
15.11 17:52:13 == NET: uid12 ret: user.searchEnemy { list => [{ name => uid12, id => 12 },{ name => uid120, id => 120 },{ name => uid121, id => 121 },{ name => uid122, id => 122 },{ name => uid124, id => 124 }], type => user.searchEnemy, errorCode => ok }
15.11 17:52:14 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
15.11 17:52:14 TIME: user.ping 0.07 ms
15.11 17:52:14 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
15.11 17:52:39 TIMER: Check auto-disconnect...
15.11 17:52:39 STATS: vdl.0 cache, locks:2
15.11 17:52:49 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
15.11 17:52:49 TIME: user.ping 0.09 ms
15.11 17:52:49 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
15.11 17:53:23 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
15.11 17:53:23 TIME: user.ping 0.1 ms
15.11 17:53:23 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
15.11 17:53:39 TIMER: Check auto-disconnect...
15.11 17:53:40 STATS: vdl.0 cache, locks:2
15.11 17:53:58 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
15.11 17:53:58 TIME: user.ping 0.16 ms
15.11 17:53:58 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
15.11 17:54:33 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
15.11 17:54:33 TIME: user.ping 0.07 ms
15.11 17:54:33 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
15.11 17:54:39 TIMER: Check auto-disconnect...
15.11 17:54:40 STATS: vdl.0 cache, locks:2
15.11 17:55:07 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
15.11 17:55:07 TIME: user.ping 0.08 ms
15.11 17:55:07 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
15.11 17:55:39 TIMER: Check auto-disconnect...
15.11 17:55:40 STATS: vdl.0 cache, locks:2
15.11 17:55:41 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
15.11 17:55:41 TIME: user.ping 0.1 ms
15.11 17:55:41 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
15.11 17:56:16 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
15.11 17:56:16 TIME: user.ping 0.09 ms
15.11 17:56:16 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
15.11 17:56:39 TIMER: Check auto-disconnect...
15.11 17:56:40 STATS: vdl.0 cache, locks:2
15.11 17:56:51 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
15.11 17:56:51 TIME: user.ping 0.09 ms
15.11 17:56:51 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
15.11 17:57:26 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
15.11 17:57:26 TIME: user.ping 0.13 ms
15.11 17:57:26 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
15.11 17:57:39 TIMER: Check auto-disconnect...
15.11 17:57:40 STATS: vdl.0 cache, locks:2
15.11 17:58:02 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
15.11 17:58:02 TIME: user.ping 0.12 ms
15.11 17:58:02 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
15.11 17:58:35 ++ NET: uid12 req: user.ping { messageType => user.ping, msg => ok }
15.11 17:58:35 TIME: user.ping 0.14 ms
15.11 17:58:35 == NET: uid12 ret: user.ping { type => user.ping, errorCode => ok }
15.11 17:58:39 TIMER: Check auto-disconnect...
15.11 17:58:40 STATS: vdl.0 cache, locks:2
