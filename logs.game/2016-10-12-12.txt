12.10 12:33:26 NET: Client (conid:24367725) connected to vdl.0 (clients:1)
12.10 12:33:27 ++ NET: null req: user.register { game => vdl, password => random78, name => player, messageType => user.register }
12.10 12:33:27 DB: SELECT * FROM users
12.10 12:33:27 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 12:33:27 -<<-: core/server.query { list => {{ password => , name => --- DEFAULT ATTRIBUTES ---, networkid => , params => {"attrs":{},"inventory":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:45:16.008574+03, language =>   , id => 1, deleted => false }, { password => test, name => test3, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:08.364133+03, language =>   , id => 4, deleted => false }, { password => test, name => test4, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:11.728197+03, language =>   , id => 5, deleted => false }, { password => test, name => test5, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:15.596579+03, language =>   , id => 6, deleted => false }, { password => test, name => test6, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:19.233499+03, language =>   , id => 7, deleted => false }, { password => test, name => test7, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-09-07 16:46:43.688817+03, language =>   , id => 8, deleted => false }, { password => uid9, name => uid9, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-11 20:36:09.090394+03, language =>   , id => 9, deleted => false }, { password => test, name => test1, networkid => , params => {"attrs":{"_lastTime.24hr":1476204122,"lastLoginDate":285,"lastLoadDate":1012},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, id => 2, deleted => false }, { password => uid10, name => uid10, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 11:12:48.168059+03, language =>   , id => 10, deleted => false }, { password => test, name => test2, networkid => , params => {"attrs":{"_lastTime.24hr":1472825979,"lastLoginDate":246,"lastLoadDate":903},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, id => 3, deleted => false }}, errorCode => ok, _type => core/server.query }
12.10 12:33:27 STATS: vdl.0 cache connection, 27 calls, total 0.194852113723755 sec spent, avg 7.22 ms
12.10 12:33:27 == NET: null ret: user.auth { type => user.auth, token => dWlkMTE= }
12.10 12:33:27 DB: SELECT ID FROM Users WHERE Name = E'uid11'
12.10 12:33:27 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid11', _type => core/server.query }
12.10 12:33:27 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 12:33:27 DB: SELECT nextval('Users_id_seq') AS id
12.10 12:33:27 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 12:33:27 -<<-: core/server.query { list => {{ id => 11 }}, errorCode => ok, _type => core/server.query }
12.10 12:33:27 ->>-: core/user.register { password => uid11, name => uid11, fullParams => { game => vdl, password => uid11, name => uid11, networkid => , networktype => , messageType => user.register, id => 11 }, networkid => , connectionID => 24367725, networktype => , email => , id => 11, _type => core/user.register }
12.10 12:33:27 -<<-: core/user.register { errorCode => ok, _type => core/user.register }
12.10 12:33:27 -<<-: core/user.registerResponse { password => uid11, name => uid11, _isNotify => true, fullParams => { game => vdl, password => uid11, name => uid11, networkid => , networktype => , messageType => user.register, id => 11 }, networkid => , connectionID => 24367725, networktype => , email => , id => 11, _type => core/user.registerResponse }
12.10 12:33:27 == NET: null ret: user.register { type => user.register, errorCode => ok }
12.10 12:33:33 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMTE= }
12.10 12:33:33 TRACE: Invalid field access : length
12.10 12:33:33 TRACE: 
Called from /usr/share/haxe/std/StringTools.hx line 229
Called from /usr/share/haxe/std/StringTools.hx line 253
Called from snipe/slave/modules/UserModuleCore.hx line 334
Called from snipe/slave/Server.hx line 887
Called from snipe/slave/Server.hx line 1124
12.10 12:33:33 TRACE: Could not login.
12.10 12:33:33 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
12.10 12:42:31 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 12:42:31 -<<-: server.login ok
12.10 12:42:31 DB: SELECT * FROM LocalizationStrings
12.10 12:42:31 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 TIMER: Starting timer...
12.10 12:42:31 DB: SELECT * FROM GameVars
12.10 12:42:31 TIMER: Timer running...
12.10 12:42:31 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 12:42:31 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 12:42:31 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 12:42:31 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 12:42:31 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 12:42:31 -<<-: core/quest.getDaily ok
12.10 12:42:31 DB: SELECT * FROM UserAttributeTypes
12.10 12:42:31 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 DB: SELECT * FROM UserVariableTypes
12.10 12:42:31 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 12:42:31 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 DB: SELECT * FROM ItemGroups
12.10 12:42:31 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 DB: SELECT * FROM Bundles ORDER BY ID
12.10 12:42:31 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 12:42:31 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 SHOP: loading items...
12.10 12:42:31 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 12:42:31 -<<-: core/shop.getList ok
12.10 12:42:31 SHOP: 0 items loaded (0 sec)
12.10 12:42:31 DB: SELECT * FROM EffectAttributeTypes
12.10 12:42:31 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 DB: SELECT * FROM Effects
12.10 12:42:31 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 12:42:31 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 12:42:31 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 DB: SELECT * FROM Badges
12.10 12:42:31 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 12:42:31 -<<-: core/server.query ok
12.10 12:42:31 TIMER: Check auto-disconnect...
12.10 12:42:31 STATS: vdl.0 cache, locks:0
12.10 12:42:31 TIMER: Check auto-disconnect...
12.10 12:42:31 STATS: vdl.0 cache, locks:0
12.10 12:42:31 TIMER: Check auto-disconnect...
12.10 12:42:31 STATS: vdl.0 cache, locks:0
12.10 12:42:31 TIMER: Check auto-disconnect...
12.10 12:42:31 STATS: vdl.0 cache, locks:0
12.10 12:47:26 NET: Client (conid:48377867) connected to vdl.0 (clients:1)
12.10 12:47:26 ++ NET: null req: user.register { messageType => user.register }
12.10 12:47:26 DB: SELECT * FROM users
12.10 12:47:26 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 12:47:26 -<<-: core/server.query ok
12.10 12:47:26 STATS: vdl.0 cache connection, 21 calls, total 0.0374329090118408 sec spent, avg 1.78 ms
12.10 12:47:26 == NET: null ret: user.auth { type => user.auth, token => dWlkMTI= }
12.10 12:47:26 DB: SELECT ID FROM Users WHERE Name = E'uid12'
12.10 12:47:26 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid12', _type => core/server.query }
12.10 12:47:26 -<<-: core/server.query ok
12.10 12:47:26 DB: SELECT nextval('Users_id_seq') AS id
12.10 12:47:26 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 12:47:26 -<<-: core/server.query ok
12.10 12:47:26 ->>-: core/user.register { password => uid12, name => uid12, fullParams => { password => uid12, name => uid12, networkid => , networktype => , messageType => user.register, id => 12 }, networkid => , connectionID => 48377867, networktype => , email => , id => 12, _type => core/user.register }
12.10 12:47:26 -<<-: core/user.register ok
12.10 12:47:26 -<<-: core/user.registerResponse null
12.10 12:47:26 == NET: null ret: user.register { type => user.register, errorCode => ok }
12.10 12:47:26 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTI= }
12.10 12:47:26 TRACE: Invalid field access : length
12.10 12:47:26 TRACE: 
Called from /usr/share/haxe/std/StringTools.hx line 229
Called from /usr/share/haxe/std/StringTools.hx line 253
Called from snipe/slave/modules/UserModuleCore.hx line 334
Called from snipe/slave/Server.hx line 887
Called from snipe/slave/Server.hx line 1124
12.10 12:47:26 TRACE: Could not login.
12.10 12:47:26 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
12.10 12:47:31 TIMER: Check auto-disconnect...
12.10 12:47:31 STATS: vdl.0 cache, locks:0
12.10 12:47:31 TIMER: Check auto-disconnect...
12.10 12:47:31 STATS: vdl.0 cache, locks:0
12.10 12:47:31 TIMER: Check auto-disconnect...
12.10 12:47:31 STATS: vdl.0 cache, locks:0
12.10 12:47:31 TIMER: Check auto-disconnect...
12.10 12:47:31 NET: Client (name:null conid:48377867 TCP) disconnected from vdl.0 (clients:0)
12.10 12:47:31 STATS: vdl.0 cache, locks:0
12.10 12:51:07 NET: Client (conid:16722522) connected to vdl.0 (clients:1)
12.10 12:51:08 ++ NET: null req: user.register { password => , name => , messageType => user.register }
12.10 12:51:08 DB: SELECT * FROM users
12.10 12:51:08 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 12:51:08 -<<-: core/server.query ok
12.10 12:51:08 STATS: vdl.0 cache connection, 25 calls, total 0.0601670742034912 sec spent, avg 2.41 ms
12.10 12:51:08 == NET: null ret: user.auth { type => user.auth, token => dWlkMTM= }
12.10 12:51:08 DB: SELECT ID FROM Users WHERE Name = E'uid13'
12.10 12:51:08 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid13', _type => core/server.query }
12.10 12:51:08 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 12:51:08 DB: SELECT nextval('Users_id_seq') AS id
12.10 12:51:08 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 12:51:08 -<<-: core/server.query { list => {{ id => 13 }}, errorCode => ok, _type => core/server.query }
12.10 12:51:08 ->>-: core/user.register { password => uid13, name => uid13, fullParams => { password => uid13, name => uid13, networkid => , networktype => , messageType => user.register, id => 13 }, networkid => , connectionID => 16722522, networktype => , email => , id => 13, _type => core/user.register }
12.10 12:51:08 -<<-: core/user.register { errorCode => ok, _type => core/user.register }
12.10 12:51:08 -<<-: core/user.registerResponse { password => uid13, name => uid13, _isNotify => true, fullParams => { password => uid13, name => uid13, networkid => , networktype => , messageType => user.register, id => 13 }, networkid => , connectionID => 16722522, networktype => , email => , id => 13, _type => core/user.registerResponse }
12.10 12:51:08 == NET: null ret: user.register { type => user.register, errorCode => ok }
12.10 12:51:09 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMTM= }
12.10 12:51:09 TRACE: Invalid field access : length
12.10 12:51:09 TRACE: 
Called from /usr/share/haxe/std/StringTools.hx line 229
Called from /usr/share/haxe/std/StringTools.hx line 253
Called from snipe/slave/modules/UserModuleCore.hx line 334
Called from snipe/slave/Server.hx line 887
Called from snipe/slave/Server.hx line 1124
12.10 12:51:09 TRACE: Could not login.
12.10 12:51:09 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
12.10 12:51:31 TIMER: Check auto-disconnect...
12.10 12:51:31 STATS: vdl.0 cache, locks:0
12.10 12:51:31 TIMER: Check auto-disconnect...
12.10 12:51:31 STATS: vdl.0 cache, locks:0
12.10 12:53:27 NET: Client (name:null conid:16722522 TCP) disconnected from vdl.0 (clients:0)
12.10 12:53:31 TIMER: Check auto-disconnect...
12.10 12:53:31 STATS: vdl.0 cache, locks:0
12.10 12:53:33 NET: Client (conid:21222625) connected to vdl.0 (clients:1)
12.10 12:53:34 ++ NET: null req: user.register { messageType => user.register }
12.10 12:53:34 DB: SELECT * FROM users
12.10 12:53:34 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 12:53:34 -<<-: core/server.query { list => {{ password => , name => --- DEFAULT ATTRIBUTES ---, networkid => , params => {"attrs":{},"inventory":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:45:16.008574+03, language =>   , id => 1, deleted => false }, { password => test, name => test3, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:08.364133+03, language =>   , id => 4, deleted => false }, { password => test, name => test4, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:11.728197+03, language =>   , id => 5, deleted => false }, { password => test, name => test5, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:15.596579+03, language =>   , id => 6, deleted => false }, { password => test, name => test6, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:19.233499+03, language =>   , id => 7, deleted => false }, { password => test, name => test7, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-09-07 16:46:43.688817+03, language =>   , id => 8, deleted => false }, { password => uid9, name => uid9, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-11 20:36:09.090394+03, language =>   , id => 9, deleted => false }, { password => test, name => test1, networkid => , params => {"attrs":{"_lastTime.24hr":1476204122,"lastLoginDate":285,"lastLoadDate":1012},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, id => 2, deleted => false }, { password => uid10, name => uid10, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 11:12:48.168059+03, language =>   , id => 10, deleted => false }, { password => uid11, name => uid11, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:33:27.3109+03, language =>   , id => 11, deleted => false }, { password => uid12, name => uid12, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:47:26.670465+03, language =>   , id => 12, deleted => false }, { password => uid13, name => uid13, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:51:08.341292+03, language =>   , id => 13, deleted => false }, { password => test, name => test2, networkid => , params => {"attrs":{"_lastTime.24hr":1472825979,"lastLoginDate":246,"lastLoadDate":903},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, id => 3, deleted => false }}, errorCode => ok, _type => core/server.query }
12.10 12:53:34 STATS: vdl.0 cache connection, 29 calls, total 0.0656530857086182 sec spent, avg 2.26 ms
12.10 12:53:34 DB: SELECT ID FROM Users WHERE Name = E'uid14'
12.10 12:53:34 == NET: null ret: user.auth { type => user.auth, token => dWlkMTQ= }
12.10 12:53:34 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid14', _type => core/server.query }
12.10 12:53:34 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 12:53:34 DB: SELECT nextval('Users_id_seq') AS id
12.10 12:53:34 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 12:53:34 -<<-: core/server.query { list => {{ id => 14 }}, errorCode => ok, _type => core/server.query }
12.10 12:53:34 ->>-: core/user.register { password => uid14, name => uid14, fullParams => { password => uid14, name => uid14, networkid => , networktype => , messageType => user.register, id => 14 }, networkid => , connectionID => 21222625, networktype => , email => , id => 14, _type => core/user.register }
12.10 12:53:34 -<<-: core/user.register { errorCode => ok, _type => core/user.register }
12.10 12:53:34 -<<-: core/user.registerResponse { password => uid14, name => uid14, _isNotify => true, fullParams => { password => uid14, name => uid14, networkid => , networktype => , messageType => user.register, id => 14 }, networkid => , connectionID => 21222625, networktype => , email => , id => 14, _type => core/user.registerResponse }
12.10 12:53:34 == NET: null ret: user.register { type => user.register, errorCode => ok }
12.10 12:53:35 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMTQ= }
12.10 12:53:35 TRACE: Invalid field access : length
12.10 12:53:35 TRACE: 
Called from /usr/share/haxe/std/StringTools.hx line 229
Called from /usr/share/haxe/std/StringTools.hx line 253
Called from snipe/slave/modules/UserModuleCore.hx line 334
Called from snipe/slave/Server.hx line 887
Called from snipe/slave/Server.hx line 1124
12.10 12:53:35 TRACE: Could not login.
12.10 12:53:35 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
12.10 12:54:31 TIMER: Check auto-disconnect...
12.10 12:54:31 STATS: vdl.0 cache, locks:0
12.10 12:55:13 NET: Client (conid:6964749) connected to vdl.0 (clients:2)
12.10 12:55:14 ++ NET: null req: user.register { messageType => user.register }
12.10 12:55:14 DB: SELECT * FROM users
12.10 12:55:14 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 12:55:14 -<<-: core/server.query { list => {{ password => , name => --- DEFAULT ATTRIBUTES ---, networkid => , params => {"attrs":{},"inventory":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:45:16.008574+03, language =>   , id => 1, deleted => false }, { password => test, name => test3, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:08.364133+03, language =>   , id => 4, deleted => false }, { password => test, name => test4, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:11.728197+03, language =>   , id => 5, deleted => false }, { password => test, name => test5, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:15.596579+03, language =>   , id => 6, deleted => false }, { password => test, name => test6, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:19.233499+03, language =>   , id => 7, deleted => false }, { password => test, name => test7, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-09-07 16:46:43.688817+03, language =>   , id => 8, deleted => false }, { password => uid9, name => uid9, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-11 20:36:09.090394+03, language =>   , id => 9, deleted => false }, { password => test, name => test1, networkid => , params => {"attrs":{"_lastTime.24hr":1476204122,"lastLoginDate":285,"lastLoadDate":1012},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, id => 2, deleted => false }, { password => uid10, name => uid10, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 11:12:48.168059+03, language =>   , id => 10, deleted => false }, { password => uid11, name => uid11, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:33:27.3109+03, language =>   , id => 11, deleted => false }, { password => uid12, name => uid12, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:47:26.670465+03, language =>   , id => 12, deleted => false }, { password => uid13, name => uid13, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:51:08.341292+03, language =>   , id => 13, deleted => false }, { password => uid14, name => uid14, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:53:34.360658+03, language =>   , id => 14, deleted => false }, { password => test, name => test2, networkid => , params => {"attrs":{"_lastTime.24hr":1472825979,"lastLoginDate":246,"lastLoadDate":903},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, id => 3, deleted => false }}, errorCode => ok, _type => core/server.query }
12.10 12:55:14 STATS: vdl.0 cache connection, 33 calls, total 0.0918624401092529 sec spent, avg 2.78 ms
12.10 12:55:14 DB: SELECT ID FROM Users WHERE Name = E'uid15'
12.10 12:55:14 == NET: null ret: user.auth { type => user.auth, token => dWlkMTU= }
12.10 12:55:14 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid15', _type => core/server.query }
12.10 12:55:14 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 12:55:14 DB: SELECT nextval('Users_id_seq') AS id
12.10 12:55:14 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 12:55:14 -<<-: core/server.query { list => {{ id => 15 }}, errorCode => ok, _type => core/server.query }
12.10 12:55:14 ->>-: core/user.register { password => uid15, name => uid15, fullParams => { password => uid15, name => uid15, networkid => , networktype => , messageType => user.register, id => 15 }, networkid => , connectionID => 6964749, networktype => , email => , id => 15, _type => core/user.register }
12.10 12:55:14 -<<-: core/user.register { errorCode => ok, _type => core/user.register }
12.10 12:55:14 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login, token => dWlkMTU= }
12.10 12:55:14 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
12.10 12:55:14 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
12.10 12:55:14 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
12.10 12:55:14 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
12.10 12:55:14 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 12:55:14 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
12.10 12:55:14 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1476204122, lastLoginDate => 285, lastLoadDate => 1012 }, effects => { list => [] } }}, version => 0, id => 2 } }
12.10 12:55:14 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
12.10 12:55:14 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
12.10 12:55:14 NET: Client login (conid:6964749, id:2, name:test1)
12.10 12:55:14 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.35.23 }
12.10 12:55:14 -<<-: core/user.loginPost { _type => core/user.loginPost }
12.10 12:55:14 DB: SELECT ID FROM TempUserLogins WHERE UserID = 2 AND Date = 'today'::timestamp
12.10 12:55:14 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 2 AND Date = 'today'::timestamp, _type => core/server.query }
12.10 12:55:14 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 12:55:14 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (2, 'today'::timestamp)
12.10 12:55:14 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
12.10 12:55:14 == NET: null ret: user.join { name => test1, type => user.join }
12.10 12:55:14 == NET: test1 ret: user.join { name => null, type => user.join }
12.10 12:55:14 == NET: test1 ret: user.join { name => test1, type => user.join }
12.10 12:55:14 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (2, 'today'::timestamp), _type => core/server.pending }} }
12.10 12:55:14 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
12.10 12:55:14 -<<-: core/user.registerResponse { password => uid15, name => uid15, _isNotify => true, fullParams => { password => uid15, name => uid15, networkid => , networktype => , messageType => user.register, id => 15 }, networkid => , connectionID => 6964749, networktype => , email => , id => 15, _type => core/user.registerResponse }
12.10 12:55:14 == NET: test1 ret: user.register { type => user.register, errorCode => ok }
12.10 12:55:21 ->>-: core/cache.update { diff => {language => en, params => { attrs => { lastLoginDate => 286, lastLoadDate => 1013 } }}, type => user, unlock => false, id => 2, _type => core/cache.update }
12.10 12:55:21 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 12:59:14 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 12:59:14 -<<-: server.login ok
12.10 12:59:14 DB: SELECT * FROM LocalizationStrings
12.10 12:59:14 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:14 TIMER: Starting timer...
12.10 12:59:14 TIMER: Timer running...
12.10 12:59:14 DB: SELECT * FROM GameVars
12.10 12:59:14 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:14 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 12:59:14 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:14 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 12:59:14 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:14 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 12:59:14 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:14 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 12:59:14 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:14 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 12:59:14 -<<-: core/quest.getDaily ok
12.10 12:59:14 DB: SELECT * FROM UserAttributeTypes
12.10 12:59:14 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:14 DB: SELECT * FROM UserVariableTypes
12.10 12:59:14 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:14 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 12:59:14 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:14 DB: SELECT * FROM ItemGroups
12.10 12:59:14 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:14 DB: SELECT * FROM Bundles ORDER BY ID
12.10 12:59:14 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:14 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 12:59:14 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:14 SHOP: loading items...
12.10 12:59:14 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 12:59:14 -<<-: core/shop.getList ok
12.10 12:59:14 SHOP: 0 items loaded (0 sec)
12.10 12:59:14 DB: SELECT * FROM EffectAttributeTypes
12.10 12:59:14 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:14 DB: SELECT * FROM Effects
12.10 12:59:14 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:14 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 12:59:14 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:14 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 12:59:14 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:14 DB: SELECT * FROM Badges
12.10 12:59:14 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 12:59:14 -<<-: core/server.query ok
12.10 12:59:18 NET: Client (conid:31686983) connected to vdl.0 (clients:1)
12.10 12:59:18 ++ NET: null req: user.register { messageType => user.register }
12.10 12:59:18 DB: SELECT * FROM users
12.10 12:59:18 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
12.10 12:59:18 -<<-: core/server.query ok
12.10 12:59:18 == NET: null ret: user.auth { type => user.auth, token => dWlkMTY= }
12.10 12:59:18 DB: SELECT ID FROM Users WHERE Name = E'uid16'
12.10 12:59:18 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid16', _type => core/server.query }
12.10 12:59:18 -<<-: core/server.query ok
12.10 12:59:18 DB: SELECT nextval('Users_id_seq') AS id
12.10 12:59:18 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
12.10 12:59:18 -<<-: core/server.query ok
12.10 12:59:18 ->>-: core/user.register { password => uid16, name => uid16, fullParams => { password => uid16, name => uid16, networkid => , networktype => , messageType => user.register, id => 16 }, networkid => , connectionID => 31686983, networktype => , email => , id => 16, _type => core/user.register }
12.10 12:59:18 -<<-: core/user.register ok
12.10 12:59:18 -<<-: core/user.registerResponse null
12.10 12:59:18 == NET: null ret: user.register { type => user.register, errorCode => ok }
12.10 12:59:18 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login, token =>  }
12.10 12:59:18 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
12.10 12:59:18 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
12.10 12:59:18 -<<-: core/server.query ok
12.10 12:59:18 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
12.10 12:59:18 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 12:59:18 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
12.10 12:59:18 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1476204122, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 0, id => 2 } }
12.10 12:59:18 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
12.10 12:59:18 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
12.10 12:59:18 NET: Client login (conid:31686983, id:2, name:test1)
12.10 12:59:18 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.35.23 }
12.10 12:59:18 -<<-: core/user.loginPost { _type => core/user.loginPost }
12.10 12:59:18 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
12.10 12:59:18 == NET: test1 ret: user.join { name => test1, type => user.join }
12.10 12:59:24 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
12.10 12:59:24 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
