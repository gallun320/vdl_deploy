12.10 17:00:16 TIMER: Check auto-disconnect...
12.10 17:00:18 STATS: vdl.0 cache, locks:2
12.10 17:01:16 TIMER: Check auto-disconnect...
12.10 17:01:16 NET: Client (name:uid33 conid:73789012 TCP) disconnected from vdl.0 (clients:0)
12.10 17:01:16 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 17:01:16 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 17:01:16 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 17:01:16 STATS: vdl.0 cache connection, 190 calls, total 0.338085412979126 sec spent, avg 1.78 ms
12.10 17:01:16 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 17:01:16 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 17:01:16 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 17:01:16 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
12.10 17:01:16 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 17:01:16 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 17:01:16 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 17:01:16 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:01:16 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 17:01:16 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 17:01:18 STATS: vdl.0 cache, locks:0
12.10 17:02:16 TIMER: Check auto-disconnect...
12.10 17:02:18 STATS: vdl.0 cache, locks:0
12.10 17:03:16 TIMER: Check auto-disconnect...
12.10 17:03:18 STATS: vdl.0 cache, locks:0
12.10 17:04:16 TIMER: Check auto-disconnect...
12.10 17:04:18 STATS: vdl.0 cache, locks:0
12.10 17:05:16 TIMER: Check auto-disconnect...
12.10 17:05:18 STATS: vdl.0 cache, locks:0
12.10 17:06:16 TIMER: Check auto-disconnect...
12.10 17:06:18 STATS: vdl.0 cache, locks:0
12.10 17:07:16 TIMER: Check auto-disconnect...
12.10 17:07:18 STATS: vdl.0 cache, locks:0
12.10 17:08:16 TIMER: Check auto-disconnect...
12.10 17:08:18 STATS: vdl.0 cache, locks:0
12.10 17:09:16 TIMER: Check auto-disconnect...
12.10 17:09:18 STATS: vdl.0 cache, locks:0
12.10 17:10:16 TIMER: Check auto-disconnect...
12.10 17:10:18 STATS: vdl.0 cache, locks:0
12.10 17:11:16 TIMER: Check auto-disconnect...
12.10 17:11:18 STATS: vdl.0 cache, locks:0
12.10 17:12:16 TIMER: Check auto-disconnect...
12.10 17:12:18 STATS: vdl.0 cache, locks:0
12.10 17:13:16 TIMER: Check auto-disconnect...
12.10 17:13:18 STATS: vdl.0 cache, locks:0
12.10 17:14:16 TIMER: Check auto-disconnect...
12.10 17:14:18 STATS: vdl.0 cache, locks:0
12.10 17:15:16 TIMER: Check auto-disconnect...
12.10 17:15:18 STATS: vdl.0 cache, locks:0
12.10 17:16:16 TIMER: Check auto-disconnect...
12.10 17:16:18 STATS: vdl.0 cache, locks:0
12.10 17:17:16 TIMER: Check auto-disconnect...
12.10 17:17:18 STATS: vdl.0 cache, locks:0
12.10 17:18:16 TIMER: Check auto-disconnect...
12.10 17:18:18 STATS: vdl.0 cache, locks:0
12.10 17:19:16 TIMER: Check auto-disconnect...
12.10 17:19:18 STATS: vdl.0 cache, locks:0
12.10 17:20:16 TIMER: Check auto-disconnect...
12.10 17:20:18 STATS: vdl.0 cache, locks:0
12.10 17:21:16 TIMER: Check auto-disconnect...
12.10 17:21:18 STATS: vdl.0 cache, locks:0
12.10 17:22:16 TIMER: Check auto-disconnect...
12.10 17:22:18 STATS: vdl.0 cache, locks:0
12.10 17:23:16 TIMER: Check auto-disconnect...
12.10 17:23:18 TIMER: vdl:0 Check tournament...
12.10 17:23:18 STATS: vdl.0 cache, locks:0
12.10 17:23:18 DB: SELECT * FROM tournament WHERE startdate = cast( 1476282.19820477 as text) AND winner = -1 AND status = 'starting'
12.10 17:23:18 ->>-: core/server.query { q => SELECT * FROM tournament WHERE startdate = cast( 1476282.19820477 as text) AND winner = -1 AND status = 'starting', _type => core/server.query }
12.10 17:23:18 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 17:23:18 STATS: vdl.0 cache connection, 195 calls, total 0.343463182449341 sec spent, avg 1.76 ms
12.10 17:24:16 TIMER: Check auto-disconnect...
12.10 17:24:18 STATS: vdl.0 cache, locks:0
12.10 17:25:16 TIMER: Check auto-disconnect...
12.10 17:25:18 STATS: vdl.0 cache, locks:0
12.10 17:26:16 TIMER: Check auto-disconnect...
12.10 17:26:18 STATS: vdl.0 cache, locks:0
12.10 17:27:16 TIMER: Check auto-disconnect...
12.10 17:27:18 STATS: vdl.0 cache, locks:0
12.10 17:28:16 TIMER: Check auto-disconnect...
12.10 17:28:18 STATS: vdl.0 cache, locks:0
12.10 17:29:16 TIMER: Check auto-disconnect...
12.10 17:29:18 STATS: vdl.0 cache, locks:0
12.10 17:30:16 TIMER: Check auto-disconnect...
12.10 17:30:18 STATS: vdl.0 cache, locks:0
12.10 17:30:20 NET: Client (conid:26081053) connected to vdl.0 (clients:1)
12.10 17:30:21 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 17:30:21 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 17:30:21 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 17:30:21 -<<-: core/server.query { list => {{ name => uid33, networkid => , isbanned => false, id => 33 }}, errorCode => ok, _type => core/server.query }
12.10 17:30:21 STATS: vdl.0 cache connection, 196 calls, total 0.344965219497681 sec spent, avg 1.76 ms
12.10 17:30:21 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 17:30:21 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 17:30:21 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 17:30:21 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid33, deleted => false, email => , networktype =>   , password => uid33, isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476272110, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 0, id => 33 } }
12.10 17:30:21 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 17:30:21 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 33 } }
12.10 17:30:21 NET: Client login (conid:26081053, id:33, name:uid33)
12.10 17:30:21 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 17:30:21 -<<-: core/user.loginPost { _type => core/user.loginPost }
12.10 17:30:21 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 17:30:21 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 17:30:28 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 17:30:28 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:30:38 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 17:30:38 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:30:38 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:30:38 TIME: tournament.getAvailableTournament 1.65 ms
12.10 17:30:38 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:31:16 TIMER: Check auto-disconnect...
12.10 17:31:18 STATS: vdl.0 cache, locks:2
12.10 17:32:16 TIMER: Check auto-disconnect...
12.10 17:32:18 STATS: vdl.0 cache, locks:2
12.10 17:33:16 TIMER: Check auto-disconnect...
12.10 17:33:18 STATS: vdl.0 cache, locks:2
12.10 17:34:16 TIMER: Check auto-disconnect...
12.10 17:34:16 NET: Client (name:uid33 conid:26081053 TCP) disconnected from vdl.0 (clients:0)
12.10 17:34:16 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 17:34:16 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 17:34:16 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 17:34:16 STATS: vdl.0 cache connection, 203 calls, total 0.354142427444458 sec spent, avg 1.74 ms
12.10 17:34:16 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 17:34:16 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 17:34:16 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 17:34:16 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
12.10 17:34:16 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 17:34:16 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 17:34:16 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 17:34:16 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:34:16 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 17:34:16 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 17:34:18 STATS: vdl.0 cache, locks:0
12.10 17:35:16 TIMER: Check auto-disconnect...
12.10 17:39:12 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 17:39:12 -<<-: server.login ok
12.10 17:39:12 DB: SELECT * FROM LocalizationStrings
12.10 17:39:12 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 TIMER: Starting timer...
12.10 17:39:12 TIMER: Timer running...
12.10 17:39:12 DB: SELECT * FROM GameVars
12.10 17:39:12 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 17:39:12 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 17:39:12 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 17:39:12 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 17:39:12 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 17:39:12 -<<-: core/quest.getDaily ok
12.10 17:39:12 DB: SELECT * FROM UserAttributeTypes
12.10 17:39:12 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 DB: SELECT * FROM UserVariableTypes
12.10 17:39:12 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 17:39:12 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 DB: SELECT * FROM ItemGroups
12.10 17:39:12 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 DB: SELECT * FROM Bundles ORDER BY ID
12.10 17:39:12 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 17:39:12 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 SHOP: loading items...
12.10 17:39:12 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 17:39:12 -<<-: core/shop.getList ok
12.10 17:39:12 SHOP: 0 items loaded (0.001 sec)
12.10 17:39:12 DB: SELECT * FROM EffectAttributeTypes
12.10 17:39:12 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 DB: SELECT * FROM Effects
12.10 17:39:12 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 17:39:12 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 17:39:12 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 DB: SELECT * FROM Badges
12.10 17:39:12 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 NET: Client (conid:49414081) connected to vdl.0 (clients:1)
12.10 17:39:12 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 17:39:12 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 17:39:12 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 17:39:12 -<<-: core/server.query ok
12.10 17:39:12 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 17:39:12 -<<-: core/user.isOnlineID ok
12.10 17:39:12 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 17:39:12 -<<-: core/cache.get ok
12.10 17:39:12 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 17:39:12 -<<-: core/cache.get ok
12.10 17:39:12 NET: Client login (conid:49414081, id:33, name:uid33)
12.10 17:39:12 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 17:39:12 -<<-: core/user.loginPost null
12.10 17:39:12 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 17:39:12 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 17:39:22 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 17:39:22 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:39:52 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 17:39:52 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:39:52 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:39:52 TIME: tournament.getAvailableTournament 4.06 ms
12.10 17:39:52 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:40:12 TIMER: Check auto-disconnect...
12.10 17:40:12 STATS: vdl.0 cache, locks:2
12.10 17:41:05 ++ NET: uid33 req: user.logout { messageType => user.logout }
12.10 17:41:05 TRACE: user.logout : No such module: user
12.10 17:41:05 TRACE: user.logout : 
Called from snipe/slave/Server.hx line 1159
12.10 17:41:05 NET: Client (name:uid33 conid:49414081 TCP) disconnected from vdl.0 (clients:0)
12.10 17:41:05 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 17:41:05 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 17:41:05 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 17:41:05 STATS: vdl.0 cache connection, 28 calls, total 0.101659059524536 sec spent, avg 3.63 ms
12.10 17:41:05 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 17:41:05 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 17:41:05 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 17:41:05 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
12.10 17:41:05 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 17:41:05 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 17:41:05 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 17:41:05 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:41:05 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 17:41:05 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 17:41:12 TIMER: Check auto-disconnect...
12.10 17:41:12 STATS: vdl.0 cache, locks:0
12.10 17:41:13 NET: Client (conid:81973136) connected to vdl.0 (clients:1)
12.10 17:41:14 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 17:41:14 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 17:41:14 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 17:41:14 -<<-: core/server.query { list => {{ name => uid33, networkid => , isbanned => false, id => 33 }}, errorCode => ok, _type => core/server.query }
12.10 17:41:14 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 17:41:14 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 17:41:14 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 17:41:14 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid33, deleted => false, email => , networktype =>   , password => uid33, isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476272110, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 2, id => 33 } }
12.10 17:41:14 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 17:41:14 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 33 } }
12.10 17:41:14 NET: Client login (conid:81973136, id:33, name:uid33)
12.10 17:41:14 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 17:41:14 -<<-: core/user.loginPost { _type => core/user.loginPost }
12.10 17:41:14 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 17:41:14 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 17:41:20 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 17:41:20 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:41:20 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:41:20 TIME: tournament.getAvailableTournament 1.99 ms
12.10 17:41:20 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:41:48 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 17:41:48 -<<-: server.login ok
12.10 17:41:48 DB: SELECT * FROM LocalizationStrings
12.10 17:41:48 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 TIMER: Starting timer...
12.10 17:41:48 TIMER: Timer running...
12.10 17:41:48 DB: SELECT * FROM GameVars
12.10 17:41:48 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 17:41:48 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 17:41:48 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 17:41:48 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 17:41:48 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 17:41:48 -<<-: core/quest.getDaily ok
12.10 17:41:48 DB: SELECT * FROM UserAttributeTypes
12.10 17:41:48 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 DB: SELECT * FROM UserVariableTypes
12.10 17:41:48 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 17:41:48 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 DB: SELECT * FROM ItemGroups
12.10 17:41:48 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 DB: SELECT * FROM Bundles ORDER BY ID
12.10 17:41:48 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 17:41:48 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 SHOP: loading items...
12.10 17:41:48 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 17:41:48 -<<-: core/shop.getList ok
12.10 17:41:48 SHOP: 0 items loaded (0 sec)
12.10 17:41:48 DB: SELECT * FROM EffectAttributeTypes
12.10 17:41:48 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 DB: SELECT * FROM Effects
12.10 17:41:48 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 17:41:48 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 17:41:48 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 DB: SELECT * FROM Badges
12.10 17:41:48 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 17:41:48 -<<-: core/server.query ok
12.10 17:41:48 TIMER: Check auto-disconnect...
12.10 17:41:48 STATS: vdl.0 cache, locks:0
12.10 17:41:48 TIMER: Check auto-disconnect...
12.10 17:41:48 STATS: vdl.0 cache, locks:0
12.10 17:44:10 NET: Client (conid:42174973) connected to vdl.0 (clients:1)
12.10 17:44:12 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 17:44:12 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 17:44:12 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 17:44:12 -<<-: core/server.query ok
12.10 17:44:12 STATS: vdl.0 cache connection, 21 calls, total 0.0587732791900635 sec spent, avg 2.8 ms
12.10 17:44:12 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 17:44:12 -<<-: core/user.isOnlineID ok
12.10 17:44:12 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 17:44:12 -<<-: core/cache.get ok
12.10 17:44:12 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 17:44:12 -<<-: core/cache.get ok
12.10 17:44:12 NET: Client login (conid:42174973, id:33, name:uid33)
12.10 17:44:12 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 17:44:12 -<<-: core/user.loginPost null
12.10 17:44:12 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 17:44:12 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 17:44:16 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 17:44:16 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:44:16 -<<-: vdl/cache.tournament.getAvailableTournament { errorCode => _requestException, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:44:16 TRACE: tournament.getAvailableTournament : cacheRequest exception { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:44:16 TRACE: tournament.getAvailableTournament : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 143
Called from modules/VDLTournamentModule.hx line 59
Called from snipe/slave/Server.hx line 1176
12.10 17:44:18 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 17:44:18 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:46:45 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
12.10 17:46:45 -<<-: server.login ok
12.10 17:46:45 DB: SELECT * FROM LocalizationStrings
12.10 17:46:45 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:46:45 TIMER: Starting timer...
12.10 17:46:45 TIMER: Timer running...
12.10 17:46:45 DB: SELECT * FROM GameVars
12.10 17:46:45 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:46:45 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
12.10 17:46:45 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:46:45 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
12.10 17:46:45 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:46:45 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
12.10 17:46:45 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:46:45 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
12.10 17:46:45 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:46:45 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
12.10 17:46:45 -<<-: core/quest.getDaily ok
12.10 17:46:45 DB: SELECT * FROM UserAttributeTypes
12.10 17:46:45 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:46:45 DB: SELECT * FROM UserVariableTypes
12.10 17:46:45 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:46:45 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
12.10 17:46:45 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:46:45 DB: SELECT * FROM ItemGroups
12.10 17:46:45 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:46:45 DB: SELECT * FROM Bundles ORDER BY ID
12.10 17:46:45 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:46:45 DB: SELECT * FROM BundleItems ORDER BY ID
12.10 17:46:45 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:46:45 SHOP: loading items...
12.10 17:46:45 ->>-: core/shop.getList { _type => core/shop.getList }
12.10 17:46:45 -<<-: core/shop.getList ok
12.10 17:46:45 SHOP: 0 items loaded (0 sec)
12.10 17:46:45 DB: SELECT * FROM EffectAttributeTypes
12.10 17:46:45 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:46:45 DB: SELECT * FROM Effects
12.10 17:46:45 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:46:45 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
12.10 17:46:45 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:46:45 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
12.10 17:46:45 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:46:45 DB: SELECT * FROM Badges
12.10 17:46:45 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
12.10 17:46:45 -<<-: core/server.query ok
12.10 17:47:36 NET: Client (conid:1028628) connected to vdl.0 (clients:1)
12.10 17:47:41 ++ NET: null req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 17:47:41 TRACE: User not logon yet.
12.10 17:47:45 ++ NET: null req: user.logout { messageType => user.logout }
12.10 17:47:45 TRACE: User not logon yet.
12.10 17:47:45 NET: Client (name:null conid:1028628 TCP) disconnected from vdl.0 (clients:0)
12.10 17:47:45 TIMER: Check auto-disconnect...
12.10 17:47:45 STATS: vdl.0 cache, locks:0
12.10 17:47:49 NET: Client (conid:33942085) connected to vdl.0 (clients:1)
12.10 17:47:50 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 17:47:50 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 17:47:50 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 17:47:50 -<<-: core/server.query ok
12.10 17:47:50 STATS: vdl.0 cache connection, 21 calls, total 0.0668809413909912 sec spent, avg 3.18 ms
12.10 17:47:50 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 17:47:50 -<<-: core/user.isOnlineID ok
12.10 17:47:50 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 17:47:50 -<<-: core/cache.get ok
12.10 17:47:50 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 17:47:50 -<<-: core/cache.get ok
12.10 17:47:50 NET: Client login (conid:33942085, id:33, name:uid33)
12.10 17:47:50 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 17:47:50 -<<-: core/user.loginPost null
12.10 17:47:50 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 17:47:50 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 17:47:55 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 17:47:55 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:47:56 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 17:47:56 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:47:56 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:47:56 TIME: tournament.getAvailableTournament 16.97 ms
12.10 17:47:56 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:48:32 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 17:48:32 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:48:32 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:48:32 TIME: tournament.getAvailableTournament 4.2 ms
12.10 17:48:32 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:48:45 TIMER: Check auto-disconnect...
12.10 17:48:45 STATS: vdl.0 cache, locks:2
12.10 17:48:45 TIMER: Check auto-disconnect...
12.10 17:48:45 STATS: vdl.0 cache, locks:2
12.10 17:48:45 TIMER: Check auto-disconnect...
12.10 17:48:45 STATS: vdl.0 cache, locks:2
12.10 17:48:45 TIMER: Check auto-disconnect...
12.10 17:48:45 NET: Client (name:uid33 conid:33942085 TCP) disconnected from vdl.0 (clients:0)
12.10 17:48:45 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 17:48:45 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 17:48:45 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 17:48:45 STATS: vdl.0 cache connection, 29 calls, total 0.0986549854278564 sec spent, avg 3.4 ms
12.10 17:48:45 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 17:48:45 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 17:48:45 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 17:48:45 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
12.10 17:48:45 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 17:48:45 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 17:48:45 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 17:48:45 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:48:45 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 17:48:45 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 17:48:45 STATS: vdl.0 cache, locks:0
12.10 17:48:45 TIMER: Check auto-disconnect...
12.10 17:48:45 STATS: vdl.0 cache, locks:0
12.10 17:48:45 TIMER: Check auto-disconnect...
12.10 17:48:45 STATS: vdl.0 cache, locks:0
12.10 17:48:45 TIMER: Check auto-disconnect...
12.10 17:48:45 STATS: vdl.0 cache, locks:0
12.10 17:48:45 TIMER: Check auto-disconnect...
12.10 17:48:45 STATS: vdl.0 cache, locks:0
12.10 17:56:01 NET: Client (conid:68441854) connected to vdl.0 (clients:1)
12.10 17:56:02 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 17:56:02 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 17:56:02 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 17:56:02 -<<-: core/server.query { list => {{ name => uid33, networkid => , isbanned => false, id => 33 }}, errorCode => ok, _type => core/server.query }
12.10 17:56:02 STATS: vdl.0 cache connection, 34 calls, total 0.105742692947388 sec spent, avg 3.11 ms
12.10 17:56:02 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 17:56:02 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 17:56:02 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 17:56:02 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid33, deleted => false, email => , networktype =>   , password => uid33, isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476272110, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 0, id => 33 } }
12.10 17:56:02 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 17:56:02 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 33 } }
12.10 17:56:02 NET: Client login (conid:68441854, id:33, name:uid33)
12.10 17:56:02 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 17:56:02 -<<-: core/user.loginPost { _type => core/user.loginPost }
12.10 17:56:02 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 17:56:02 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 17:56:07 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 17:56:07 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:56:07 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:56:07 TIME: tournament.getAvailableTournament 2.24 ms
12.10 17:56:07 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:56:10 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 17:56:10 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:56:25 ++ NET: uid33 req: tournament.addUsers { messageType => tournament.addUsers, id => 1 }
12.10 17:56:25 ->>-: vdl/cache.tournament.addUsers { userId => 33, tournament => null, _type => vdl/cache.tournament.addUsers }
12.10 17:56:25 -<<-: vdl/cache.tournament.addUsers { errorCode => _requestException, _type => vdl/cache.tournament.addUsers }
12.10 17:56:25 TRACE: tournament.addUsers : cacheRequest exception { userId => 33, tournament => null, _type => vdl/cache.tournament.addUsers }
12.10 17:56:25 TRACE: tournament.addUsers : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 306
Called from modules/VDLTournamentModule.hx line 129
Called from modules/VDLTournamentModule.hx line 61
Called from snipe/slave/Server.hx line 1176
12.10 17:56:45 TIMER: Check auto-disconnect...
12.10 17:56:45 STATS: vdl.0 cache, locks:2
12.10 17:56:45 TIMER: Check auto-disconnect...
12.10 17:56:45 STATS: vdl.0 cache, locks:2
12.10 17:56:45 TIMER: Check auto-disconnect...
12.10 17:56:45 STATS: vdl.0 cache, locks:2
12.10 17:59:37 ++ NET: uid33 req: user.logout { messageType => user.logout }
12.10 17:59:37 TRACE: user.logout : No such module: user
12.10 17:59:37 TRACE: user.logout : 
Called from snipe/slave/Server.hx line 1159
12.10 17:59:38 NET: Client (name:uid33 conid:68441854 TCP) disconnected from vdl.0 (clients:0)
12.10 17:59:38 DB: SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true
12.10 17:59:38 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=33 OR secondid=33 AND finished <> true, _type => core/server.query }
12.10 17:59:38 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
12.10 17:59:38 STATS: vdl.0 cache connection, 42 calls, total 0.11877179145813 sec spent, avg 2.83 ms
12.10 17:59:38 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 17:59:38 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
12.10 17:59:38 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
12.10 17:59:38 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 212
Called from modules/VDLBattleModule.hx line 225
Called from snipe/slave/Server.hx line 994
12.10 17:59:38 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 33, _type => core/cache.update }
12.10 17:59:38 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
12.10 17:59:38 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 33, _type => core/cache.update }
12.10 17:59:38 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
12.10 17:59:38 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 33, _type => core/user.logoutPost }
12.10 17:59:38 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
12.10 17:59:45 TIMER: Check auto-disconnect...
12.10 17:59:45 STATS: vdl.0 cache, locks:0
12.10 17:59:46 NET: Client (conid:55421202) connected to vdl.0 (clients:1)
12.10 17:59:47 ++ NET: null req: user.login { type => token, messageType => user.login, token => dWlkMzM= }
12.10 17:59:47 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33'
12.10 17:59:47 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid33' AND Password = E'uid33', _type => core/server.query }
12.10 17:59:47 -<<-: core/server.query { list => {{ name => uid33, networkid => , isbanned => false, id => 33 }}, errorCode => ok, _type => core/server.query }
12.10 17:59:47 ->>-: core/user.isOnlineID { id => 33, _type => core/user.isOnlineID }
12.10 17:59:47 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
12.10 17:59:47 ->>-: core/cache.get { type => user, v => -1, id => 33, _type => core/cache.get }
12.10 17:59:47 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid33, deleted => false, email => , networktype =>   , password => uid33, isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1476272110, lastLoginDate => 286, lastLoadDate => 1013 }, effects => { list => [] } }}, version => 2, id => 33 } }
12.10 17:59:47 ->>-: core/cache.get { type => questdata, v => -1, id => 33, _type => core/cache.get }
12.10 17:59:47 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 33 } }
12.10 17:59:47 NET: Client login (conid:55421202, id:33, name:uid33)
12.10 17:59:47 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 33, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
12.10 17:59:47 -<<-: core/user.loginPost { _type => core/user.loginPost }
12.10 17:59:47 == NET: uid33 ret: user.login { name => uid33, type => user.login, errorCode => ok, id => 33 }
12.10 17:59:47 == NET: uid33 ret: user.join { name => uid33, type => user.join }
12.10 17:59:52 ++ NET: uid33 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
12.10 17:59:52 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:59:52 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:59:52 TIME: tournament.getAvailableTournament 6.9 ms
12.10 17:59:52 == NET: uid33 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, round => 1, params => , id => 1, status => starting, startdate => 1476144000 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
12.10 17:59:55 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 33, _type => core/cache.update }
12.10 17:59:55 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
12.10 17:59:59 ++ NET: uid33 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
12.10 17:59:59 ->>-: vdl/cache.tournament.addUsers { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 17:59:59 -<<-: vdl/cache.tournament.addUsers { errorCode => _requestException, _type => vdl/cache.tournament.addUsers }
12.10 17:59:59 TRACE: tournament.addUsers : cacheRequest exception { userId => 33, tournament => 1, _type => vdl/cache.tournament.addUsers }
12.10 17:59:59 TRACE: tournament.addUsers : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 306
Called from modules/VDLTournamentModule.hx line 129
Called from modules/VDLTournamentModule.hx line 61
Called from snipe/slave/Server.hx line 1176
