03.11 23:00:00 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:00:00 TIME: user.ping 0.09 ms
03.11 23:00:00 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:00:06 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:00:06 TRACE: User not logon yet.
03.11 23:00:11 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:00:11 TIME: user.ping 0.22 ms
03.11 23:00:11 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:00:13 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:00:13 TIME: user.ping 0.12 ms
03.11 23:00:13 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:00:14 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:00:14 TRACE: User not logon yet.
03.11 23:00:14 TIMER: Check auto-disconnect...
03.11 23:00:14 ++ NET: uid116 req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 17 }
03.11 23:00:14 ->>-: vdl/cache.battle.infoRoom { roomId => 17, _type => vdl/cache.battle.infoRoom }
03.11 23:00:14 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
03.11 23:00:14 STATS: vdl.0 cache connection, 141 calls, total 0.30857515335083 sec spent, avg 2.19 ms
03.11 23:00:14 TIME: battle.sendtask 2.91 ms
03.11 23:00:14 == NET: uid116 ret: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 2, type => battle.sendtask, messageType => battle.sendtask, to => [0,0], battleId => 17 }
03.11 23:00:14 STATS: vdl.0 cache, locks:4
03.11 23:00:21 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:00:21 TRACE: User not logon yet.
03.11 23:00:25 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:00:25 TIME: user.ping 0.62 ms
03.11 23:00:25 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:00:28 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:00:28 TRACE: User not logon yet.
03.11 23:00:36 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:00:36 TRACE: User not logon yet.
03.11 23:00:36 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:00:36 TIME: user.ping 0.12 ms
03.11 23:00:36 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:00:38 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:00:38 TIME: user.ping 0.12 ms
03.11 23:00:38 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:00:43 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:00:43 TRACE: User not logon yet.
03.11 23:00:51 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:00:51 TIME: user.ping 0.11 ms
03.11 23:00:51 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:00:51 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:00:51 TRACE: User not logon yet.
03.11 23:00:58 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:00:58 TRACE: User not logon yet.
03.11 23:01:03 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:01:03 TIME: user.ping 0.1 ms
03.11 23:01:03 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:01:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:01:05 TRACE: User not logon yet.
03.11 23:01:13 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:01:13 TRACE: User not logon yet.
03.11 23:01:14 TIMER: Check auto-disconnect...
03.11 23:01:14 STATS: vdl.0 cache, locks:4
03.11 23:01:16 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:01:16 TIME: user.ping 0.09 ms
03.11 23:01:16 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:01:20 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:01:20 TRACE: User not logon yet.
03.11 23:01:28 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:01:28 TRACE: User not logon yet.
03.11 23:01:29 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:01:29 TIME: user.ping 0.08 ms
03.11 23:01:29 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:01:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:01:35 TRACE: User not logon yet.
03.11 23:01:41 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:01:41 TIME: user.ping 0.1 ms
03.11 23:01:41 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:01:43 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:01:43 TRACE: User not logon yet.
03.11 23:01:50 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:01:50 TRACE: User not logon yet.
03.11 23:01:54 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:01:54 TIME: user.ping 0.13 ms
03.11 23:01:54 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:01:57 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:01:57 TRACE: User not logon yet.
03.11 23:02:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:02:05 TRACE: User not logon yet.
03.11 23:02:06 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:02:06 TIME: user.ping 0.2 ms
03.11 23:02:06 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:02:12 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:02:12 TRACE: User not logon yet.
03.11 23:02:14 TIMER: Check auto-disconnect...
03.11 23:02:14 STATS: vdl.0 cache, locks:4
03.11 23:02:19 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:02:19 TIME: user.ping 0.08 ms
03.11 23:02:19 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:02:20 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:02:20 TRACE: User not logon yet.
03.11 23:02:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:02:27 TRACE: User not logon yet.
03.11 23:02:32 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:02:32 TIME: user.ping 0.14 ms
03.11 23:02:32 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:02:34 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:02:34 TRACE: User not logon yet.
03.11 23:02:42 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:02:42 TRACE: User not logon yet.
03.11 23:02:44 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:02:44 TIME: user.ping 0.1 ms
03.11 23:02:44 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:03:00 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
03.11 23:03:00 -<<-: server.login ok
03.11 23:03:00 DB: SELECT * FROM LocalizationStrings
03.11 23:03:00 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:00 TIMER: Starting timer...
03.11 23:03:00 TIMER: Timer running...
03.11 23:03:00 DB: SELECT * FROM GameVars
03.11 23:03:00 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:00 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
03.11 23:03:00 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:00 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
03.11 23:03:00 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:00 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
03.11 23:03:00 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:00 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
03.11 23:03:00 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:00 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
03.11 23:03:00 -<<-: core/quest.getDaily ok
03.11 23:03:00 DB: SELECT * FROM UserAttributeTypes
03.11 23:03:00 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:00 DB: SELECT * FROM UserVariableTypes
03.11 23:03:00 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:00 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
03.11 23:03:00 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:00 DB: SELECT * FROM ItemGroups
03.11 23:03:00 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:00 DB: SELECT * FROM Bundles ORDER BY ID
03.11 23:03:00 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:00 DB: SELECT * FROM BundleItems ORDER BY ID
03.11 23:03:00 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:00 SHOP: loading items...
03.11 23:03:00 ->>-: core/shop.getList { _type => core/shop.getList }
03.11 23:03:00 -<<-: core/shop.getList ok
03.11 23:03:00 SHOP: 0 items loaded (0 sec)
03.11 23:03:00 DB: SELECT * FROM EffectAttributeTypes
03.11 23:03:00 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:00 DB: SELECT * FROM Effects
03.11 23:03:00 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:00 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
03.11 23:03:00 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:00 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
03.11 23:03:00 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:00 DB: SELECT * FROM Badges
03.11 23:03:00 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
03.11 23:03:00 -<<-: core/server.query ok
03.11 23:03:04 NET: Client (conid:92007125) connected to vdl.0 (clients:1)
03.11 23:03:06 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:03:06 TRACE: User not logon yet.
03.11 23:03:10 NET: Client (conid:89886596) connected to vdl.0 (clients:2)
03.11 23:03:13 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:03:13 TRACE: User not logon yet.
03.11 23:03:13 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:03:13 TRACE: User not logon yet.
03.11 23:03:21 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:03:21 TRACE: User not logon yet.
03.11 23:03:25 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:03:25 TRACE: User not logon yet.
03.11 23:03:28 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:03:28 TRACE: User not logon yet.
03.11 23:03:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:03:35 TRACE: User not logon yet.
03.11 23:03:38 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:03:38 TRACE: User not logon yet.
03.11 23:03:42 NET: Client (name:null conid:89886596 TCP) disconnected from vdl.0 (clients:1)
03.11 23:03:43 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:03:43 TRACE: User not logon yet.
03.11 23:03:47 NET: Client (conid:85973311) connected to vdl.0 (clients:2)
03.11 23:03:48 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 23:03:48 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 23:03:48 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 23:03:48 -<<-: core/server.query ok
03.11 23:03:48 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 23:03:48 -<<-: core/user.isOnlineID ok
03.11 23:03:48 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 23:03:48 -<<-: core/cache.get ok
03.11 23:03:48 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 23:03:48 -<<-: core/cache.get ok
03.11 23:03:48 NET: Client login (conid:85973311, id:107, name:uid107)
03.11 23:03:48 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 23:03:48 -<<-: core/user.loginPost null
03.11 23:03:48 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 23:03:48 == NET: null ret: user.join { name => uid107, type => user.join }
03.11 23:03:48 == NET: uid107 ret: user.join { name => null, type => user.join }
03.11 23:03:48 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 23:03:50 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:03:50 TRACE: User not logon yet.
03.11 23:03:52 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:03:52 TIME: user.ping 0.17 ms
03.11 23:03:52 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:03:55 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 23:03:55 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:03:58 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:03:58 TRACE: User not logon yet.
03.11 23:04:00 TIMER: Check auto-disconnect...
03.11 23:04:00 STATS: vdl.0 cache, locks:2
03.11 23:04:01 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:04:01 TIME: user.ping 0.13 ms
03.11 23:04:01 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:04:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:04:05 TRACE: User not logon yet.
03.11 23:04:10 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:04:10 TIME: user.ping 0.09 ms
03.11 23:04:10 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:04:12 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:04:12 TRACE: User not logon yet.
03.11 23:04:18 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:04:18 TIME: user.ping 0.11 ms
03.11 23:04:18 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:04:20 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:04:20 TRACE: User not logon yet.
03.11 23:04:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:04:27 TRACE: User not logon yet.
03.11 23:04:27 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:04:27 TIME: user.ping 0.21 ms
03.11 23:04:27 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:04:32 NET: Client (conid:63166675) connected to vdl.0 (clients:3)
03.11 23:04:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:04:35 TRACE: User not logon yet.
03.11 23:04:36 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE2 }
03.11 23:04:36 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116'
03.11 23:04:36 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116', _type => core/server.query }
03.11 23:04:36 -<<-: core/server.query { list => {{ name => uid116, networkid => , isbanned => false, id => 116 }}, errorCode => ok, _type => core/server.query }
03.11 23:04:36 STATS: vdl.0 cache connection, 27 calls, total 0.0265326499938965 sec spent, avg 0.98 ms
03.11 23:04:36 ->>-: core/user.isOnlineID { id => 116, _type => core/user.isOnlineID }
03.11 23:04:36 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 23:04:36 ->>-: core/cache.get { type => user, v => -1, id => 116, _type => core/cache.get }
03.11 23:04:36 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid116, deleted => false, email => , networktype =>   , password => uid116, isbanned => false, regdate => 2016-11-03 21:26:31.138113+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1478199280, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 116 } }
03.11 23:04:36 ->>-: core/cache.get { type => questdata, v => -1, id => 116, _type => core/cache.get }
03.11 23:04:36 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 116 } }
03.11 23:04:36 NET: Client login (conid:63166675, id:116, name:uid116)
03.11 23:04:36 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 116, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
03.11 23:04:36 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 23:04:36 == NET: uid107 ret: user.join { name => uid116, type => user.join }
03.11 23:04:36 == NET: uid116 ret: user.login { name => uid116, type => user.login, errorCode => ok, id => 116 }
03.11 23:04:36 == NET: null ret: user.join { name => uid116, type => user.join }
03.11 23:04:36 == NET: uid116 ret: user.join { name => null, type => user.join }
03.11 23:04:36 == NET: uid116 ret: user.join { name => uid107, type => user.join }
03.11 23:04:36 == NET: uid116 ret: user.join { name => uid116, type => user.join }
03.11 23:04:36 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:04:36 TIME: user.ping 0.17 ms
03.11 23:04:36 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:04:42 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:04:42 TRACE: User not logon yet.
03.11 23:04:45 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:04:45 TIME: user.ping 0.1 ms
03.11 23:04:45 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:04:45 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 116, _type => core/cache.update }
03.11 23:04:45 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:04:49 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:04:49 TIME: user.ping 0.12 ms
03.11 23:04:49 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:04:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:04:49 TRACE: User not logon yet.
03.11 23:04:52 ++ NET: uid116 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 23:04:52 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 116 }, _type => vdl/cache.battle.findRandom }
03.11 23:04:52 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 23:04:52 TIME: battle.find 0.22 ms
03.11 23:04:52 == NET: uid116 ret: battle.find { type => battle.find, errorCode => ok }
03.11 23:04:54 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:04:54 TIME: user.ping 0.2 ms
03.11 23:04:54 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:04:57 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 23:04:57 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 107 }, _type => vdl/cache.battle.findRandom }
03.11 23:04:57 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 2, battleId => 18, player => 1 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
03.11 23:04:57 -<<-: battle.enemyEvent { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 1, battleId => 18, player => 2 }, _isNotify => true, id => 116, _type => battle.enemyEvent }
03.11 23:04:57 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 23:04:57 TIME: battle.find 37.88 ms
03.11 23:04:57 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
03.11 23:04:57 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 2, battleId => 18, player => 1 }, type => battle.enemy }
03.11 23:04:57 == NET: uid116 ret: battle.enemy { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 1, battleId => 18, player => 2 }, type => battle.enemy }
03.11 23:04:57 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:04:57 TRACE: User not logon yet.
03.11 23:05:00 TIMER: Check auto-disconnect...
03.11 23:05:00 STATS: vdl.0 cache, locks:4
03.11 23:05:04 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:05:04 TRACE: User not logon yet.
03.11 23:05:04 ++ NET: uid107 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 18 }
03.11 23:05:04 ->>-: vdl/cache.battle.infoRoom { roomId => 18, _type => vdl/cache.battle.infoRoom }
03.11 23:05:04 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
03.11 23:05:04 == NET: uid107 ret: battle.sendtask { name => throw, type => battle.sendtask, dices => [2,3,0,4,4,3], errorCode => ok, _type => battle.task }
03.11 23:05:04 TIME: battle.sendtask 0.49 ms
03.11 23:05:04 == NET: uid116 ret: battle.task { name => throw, type => battle.task, dices => [2,3,0,4,4,3], errorCode => ok }
03.11 23:05:04 == NET: uid107 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
03.11 23:05:07 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:05:07 TIME: user.ping 0.17 ms
03.11 23:05:07 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:05:12 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:05:12 TRACE: User not logon yet.
03.11 23:05:16 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:05:16 TIME: user.ping 0.2 ms
03.11 23:05:16 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:05:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:05:19 TRACE: User not logon yet.
03.11 23:05:20 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:05:20 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:05:20 TIME: user.ping 0.21 ms
03.11 23:05:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:05:27 TRACE: User not logon yet.
03.11 23:05:33 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:05:33 TIME: user.ping 0.22 ms
03.11 23:05:33 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:05:34 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:05:34 TRACE: User not logon yet.
03.11 23:05:40 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:05:40 TIME: user.ping 0.11 ms
03.11 23:05:40 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:05:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:05:41 TRACE: User not logon yet.
03.11 23:05:47 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:05:47 TIME: user.ping 0.12 ms
03.11 23:05:47 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:05:47 ++ NET: uid107 req: battle.sendtask { dice => 3, from => [7,3], name => swap, side => 2, messageType => battle.sendtask, to => [8,3], battleId => 18 }
03.11 23:05:47 ->>-: vdl/cache.battle.infoRoom { roomId => 18, _type => vdl/cache.battle.infoRoom }
03.11 23:05:47 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
03.11 23:05:47 STATS: vdl.0 cache connection, 36 calls, total 0.0690324306488037 sec spent, avg 1.92 ms
03.11 23:05:47 TIME: battle.sendtask 1.16 ms
03.11 23:05:47 == NET: uid107 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,10,5,5,15,5,0,0],[0,0,0,5,10,15,5,5,0,0],[0,0,0,5,15,10,5,5,0,0],[0,0,0,15,5,5,10,5,0,0],[0,0,0,5,5,5,5,10,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [2,0,4,4,3] }
03.11 23:05:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:05:49 TRACE: User not logon yet.
03.11 23:05:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:05:56 TRACE: User not logon yet.
03.11 23:06:00 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:06:00 TIME: user.ping 0.2 ms
03.11 23:06:00 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:06:00 TIMER: Check auto-disconnect...
03.11 23:06:00 STATS: vdl.0 cache, locks:4
03.11 23:06:04 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:06:04 TRACE: User not logon yet.
03.11 23:06:05 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:06:05 TIME: user.ping 0.16 ms
03.11 23:06:05 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:06:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:06:11 TRACE: User not logon yet.
03.11 23:06:13 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:06:13 TIME: user.ping 0.16 ms
03.11 23:06:13 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:06:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:06:18 TRACE: User not logon yet.
03.11 23:06:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:06:26 TRACE: User not logon yet.
03.11 23:06:26 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:06:26 TIME: user.ping 0.13 ms
03.11 23:06:26 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:06:30 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:06:30 TIME: user.ping 0.15 ms
03.11 23:06:30 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:06:33 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:06:33 TRACE: User not logon yet.
03.11 23:06:39 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:06:39 TIME: user.ping 0.24 ms
03.11 23:06:39 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:06:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:06:41 TRACE: User not logon yet.
03.11 23:06:48 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:06:48 TRACE: User not logon yet.
03.11 23:06:52 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:06:52 TIME: user.ping 0.08 ms
03.11 23:06:52 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:06:54 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:06:54 TIME: user.ping 0.1 ms
03.11 23:06:54 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:06:55 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:06:55 TRACE: User not logon yet.
03.11 23:07:00 TIMER: Check auto-disconnect...
03.11 23:07:00 STATS: vdl.0 cache, locks:4
03.11 23:07:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:07:03 TRACE: User not logon yet.
03.11 23:07:03 ++ NET: uid107 req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 18 }
03.11 23:07:03 ->>-: vdl/cache.battle.infoRoom { roomId => 18, _type => vdl/cache.battle.infoRoom }
03.11 23:07:03 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
03.11 23:07:03 STATS: vdl.0 cache connection, 37 calls, total 0.0700833797454834 sec spent, avg 1.89 ms
03.11 23:07:03 TIME: battle.sendtask 1.56 ms
03.11 23:07:03 == NET: uid107 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,10,5,5,15,5,0,0],[0,0,0,5,10,15,5,5,0,0],[0,0,0,5,15,10,5,5,0,0],[0,0,0,15,5,5,10,5,0,0],[0,0,0,5,5,5,5,10,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [2,4,4,3] }
03.11 23:07:05 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:07:05 TIME: user.ping 0.17 ms
03.11 23:07:05 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:07:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:07:11 TRACE: User not logon yet.
03.11 23:07:18 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:07:18 TIME: user.ping 0.1 ms
03.11 23:07:18 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:07:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:07:18 TRACE: User not logon yet.
03.11 23:07:19 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:07:19 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:07:19 TIME: user.ping 0.09 ms
03.11 23:07:25 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:07:25 TRACE: User not logon yet.
03.11 23:07:31 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:07:31 TIME: user.ping 0.09 ms
03.11 23:07:31 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:07:33 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:07:33 TRACE: User not logon yet.
03.11 23:07:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:07:41 TRACE: User not logon yet.
03.11 23:07:43 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:07:43 TIME: user.ping 0.1 ms
03.11 23:07:43 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:07:44 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:07:44 TIME: user.ping 0.08 ms
03.11 23:07:44 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:07:48 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:07:48 TRACE: User not logon yet.
03.11 23:07:55 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:07:55 TRACE: User not logon yet.
03.11 23:07:57 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:07:57 TIME: user.ping 0.09 ms
03.11 23:07:57 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:08:06 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
03.11 23:08:06 -<<-: server.login ok
03.11 23:08:06 DB: SELECT * FROM LocalizationStrings
03.11 23:08:06 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:06 TIMER: Starting timer...
03.11 23:08:06 TIMER: Timer running...
03.11 23:08:06 DB: SELECT * FROM GameVars
03.11 23:08:06 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:06 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
03.11 23:08:06 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:06 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
03.11 23:08:06 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:06 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
03.11 23:08:06 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:06 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
03.11 23:08:06 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:06 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
03.11 23:08:06 -<<-: core/quest.getDaily ok
03.11 23:08:06 DB: SELECT * FROM UserAttributeTypes
03.11 23:08:06 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:06 DB: SELECT * FROM UserVariableTypes
03.11 23:08:06 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:06 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
03.11 23:08:06 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:06 DB: SELECT * FROM ItemGroups
03.11 23:08:06 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:06 DB: SELECT * FROM Bundles ORDER BY ID
03.11 23:08:06 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:06 DB: SELECT * FROM BundleItems ORDER BY ID
03.11 23:08:06 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:06 SHOP: loading items...
03.11 23:08:06 ->>-: core/shop.getList { _type => core/shop.getList }
03.11 23:08:06 -<<-: core/shop.getList ok
03.11 23:08:06 SHOP: 0 items loaded (0 sec)
03.11 23:08:06 DB: SELECT * FROM EffectAttributeTypes
03.11 23:08:06 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:06 DB: SELECT * FROM Effects
03.11 23:08:06 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:06 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
03.11 23:08:06 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:06 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
03.11 23:08:06 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:06 DB: SELECT * FROM Badges
03.11 23:08:06 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
03.11 23:08:06 -<<-: core/server.query ok
03.11 23:08:18 NET: Client (conid:8958822) connected to vdl.0 (clients:1)
03.11 23:08:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:08:19 TRACE: User not logon yet.
03.11 23:08:22 NET: Client (conid:73598519) connected to vdl.0 (clients:2)
03.11 23:08:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:08:26 TRACE: User not logon yet.
03.11 23:08:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:08:27 TRACE: User not logon yet.
03.11 23:08:34 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:08:34 TRACE: User not logon yet.
03.11 23:08:39 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:08:39 TRACE: User not logon yet.
03.11 23:08:42 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:08:42 TRACE: User not logon yet.
03.11 23:08:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:08:49 TRACE: User not logon yet.
03.11 23:08:51 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:08:51 TRACE: User not logon yet.
03.11 23:08:57 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:08:57 TRACE: User not logon yet.
03.11 23:09:04 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
03.11 23:09:04 -<<-: server.login ok
03.11 23:09:04 DB: SELECT * FROM LocalizationStrings
03.11 23:09:04 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:04 TIMER: Starting timer...
03.11 23:09:04 TIMER: Timer running...
03.11 23:09:04 DB: SELECT * FROM GameVars
03.11 23:09:04 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:04 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
03.11 23:09:04 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:04 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
03.11 23:09:04 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:04 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
03.11 23:09:04 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:04 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
03.11 23:09:04 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:04 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
03.11 23:09:04 -<<-: core/quest.getDaily ok
03.11 23:09:04 DB: SELECT * FROM UserAttributeTypes
03.11 23:09:04 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:04 DB: SELECT * FROM UserVariableTypes
03.11 23:09:04 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:04 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
03.11 23:09:04 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:04 DB: SELECT * FROM ItemGroups
03.11 23:09:04 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:04 DB: SELECT * FROM Bundles ORDER BY ID
03.11 23:09:04 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:04 DB: SELECT * FROM BundleItems ORDER BY ID
03.11 23:09:04 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:04 SHOP: loading items...
03.11 23:09:04 ->>-: core/shop.getList { _type => core/shop.getList }
03.11 23:09:04 -<<-: core/shop.getList ok
03.11 23:09:04 SHOP: 0 items loaded (0 sec)
03.11 23:09:04 DB: SELECT * FROM EffectAttributeTypes
03.11 23:09:04 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:04 DB: SELECT * FROM Effects
03.11 23:09:04 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:04 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
03.11 23:09:04 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:04 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
03.11 23:09:04 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:04 DB: SELECT * FROM Badges
03.11 23:09:04 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
03.11 23:09:04 -<<-: core/server.query ok
03.11 23:09:11 NET: Client (conid:39407427) connected to vdl.0 (clients:1)
03.11 23:09:13 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:09:13 TRACE: User not logon yet.
03.11 23:09:21 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:09:21 TRACE: User not logon yet.
03.11 23:09:28 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:09:28 TRACE: User not logon yet.
03.11 23:09:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:09:35 TRACE: User not logon yet.
03.11 23:09:43 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:09:43 TRACE: User not logon yet.
03.11 23:09:50 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:09:50 TRACE: User not logon yet.
03.11 23:09:58 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:09:58 TRACE: User not logon yet.
03.11 23:10:04 TIMER: Check auto-disconnect...
03.11 23:10:04 STATS: vdl.0 cache, locks:0
03.11 23:10:04 NET: Client (conid:75191570) connected to vdl.0 (clients:2)
03.11 23:10:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:10:05 TRACE: User not logon yet.
03.11 23:10:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:10:11 TRACE: User not logon yet.
03.11 23:10:12 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:10:12 TRACE: User not logon yet.
03.11 23:10:20 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:10:20 TRACE: User not logon yet.
03.11 23:10:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:10:27 TRACE: User not logon yet.
03.11 23:10:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:10:35 TRACE: User not logon yet.
03.11 23:10:37 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:10:37 TRACE: User not logon yet.
03.11 23:10:42 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:10:42 TRACE: User not logon yet.
03.11 23:10:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:10:49 TRACE: User not logon yet.
03.11 23:10:57 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:10:57 TRACE: User not logon yet.
03.11 23:11:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:11:03 TRACE: User not logon yet.
03.11 23:11:04 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:11:04 TRACE: User not logon yet.
03.11 23:11:04 TIMER: Check auto-disconnect...
03.11 23:11:04 STATS: vdl.0 cache, locks:0
03.11 23:11:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:11:11 TRACE: User not logon yet.
03.11 23:11:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:11:19 TRACE: User not logon yet.
03.11 23:11:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:11:26 TRACE: User not logon yet.
03.11 23:11:29 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:11:29 TRACE: User not logon yet.
03.11 23:11:34 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:11:34 TRACE: User not logon yet.
03.11 23:11:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:11:41 TRACE: User not logon yet.
03.11 23:11:48 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:11:48 TRACE: User not logon yet.
03.11 23:11:55 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:11:55 TRACE: User not logon yet.
03.11 23:11:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:11:56 TRACE: User not logon yet.
03.11 23:12:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:12:03 TRACE: User not logon yet.
03.11 23:12:04 TIMER: Check auto-disconnect...
03.11 23:12:04 STATS: vdl.0 cache, locks:0
03.11 23:12:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:12:11 TRACE: User not logon yet.
03.11 23:12:14 NET: Client (name:null conid:75191570 TCP) disconnected from vdl.0 (clients:1)
03.11 23:12:17 NET: Client (conid:38607273) connected to vdl.0 (clients:2)
03.11 23:12:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:12:18 TRACE: User not logon yet.
03.11 23:12:18 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 23:12:18 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 23:12:18 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 23:12:18 -<<-: core/server.query ok
03.11 23:12:18 STATS: vdl.0 cache connection, 21 calls, total 0.0237197875976562 sec spent, avg 1.13 ms
03.11 23:12:18 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 23:12:18 -<<-: core/user.isOnlineID ok
03.11 23:12:18 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 23:12:18 -<<-: core/cache.get ok
03.11 23:12:18 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 23:12:18 -<<-: core/cache.get ok
03.11 23:12:18 NET: Client login (conid:38607273, id:107, name:uid107)
03.11 23:12:18 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 23:12:18 -<<-: core/user.loginPost null
03.11 23:12:18 == NET: null ret: user.join { name => uid107, type => user.join }
03.11 23:12:18 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 23:12:18 == NET: uid107 ret: user.join { name => null, type => user.join }
03.11 23:12:18 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 23:12:22 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:12:22 TIME: user.ping 0.13 ms
03.11 23:12:22 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:12:24 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 23:12:24 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:12:25 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:12:25 TRACE: User not logon yet.
03.11 23:12:31 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:12:31 TIME: user.ping 0.1 ms
03.11 23:12:31 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:12:33 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:12:33 TRACE: User not logon yet.
03.11 23:12:36 NET: Client (conid:85031237) connected to vdl.0 (clients:3)
03.11 23:12:40 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE2 }
03.11 23:12:40 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116'
03.11 23:12:40 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116', _type => core/server.query }
03.11 23:12:40 -<<-: core/server.query { list => {{ name => uid116, networkid => , isbanned => false, id => 116 }}, errorCode => ok, _type => core/server.query }
03.11 23:12:40 ->>-: core/user.isOnlineID { id => 116, _type => core/user.isOnlineID }
03.11 23:12:40 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 23:12:40 ->>-: core/cache.get { type => user, v => -1, id => 116, _type => core/cache.get }
03.11 23:12:40 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid116, deleted => false, email => , networktype =>   , password => uid116, isbanned => false, regdate => 2016-11-03 21:26:31.138113+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1478199280, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 116 } }
03.11 23:12:40 ->>-: core/cache.get { type => questdata, v => -1, id => 116, _type => core/cache.get }
03.11 23:12:40 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 116 } }
03.11 23:12:40 NET: Client login (conid:85031237, id:116, name:uid116)
03.11 23:12:40 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 116, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
03.11 23:12:40 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 23:12:40 == NET: uid116 ret: user.login { name => uid116, type => user.login, errorCode => ok, id => 116 }
03.11 23:12:40 == NET: uid107 ret: user.join { name => uid116, type => user.join }
03.11 23:12:40 == NET: null ret: user.join { name => uid116, type => user.join }
03.11 23:12:40 == NET: uid116 ret: user.join { name => null, type => user.join }
03.11 23:12:40 == NET: uid116 ret: user.join { name => uid107, type => user.join }
03.11 23:12:40 == NET: uid116 ret: user.join { name => uid116, type => user.join }
03.11 23:12:40 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:12:40 TIME: user.ping 0.09 ms
03.11 23:12:40 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:12:40 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:12:40 TRACE: User not logon yet.
03.11 23:12:48 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:12:48 TRACE: User not logon yet.
03.11 23:12:49 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:12:49 TIME: user.ping 0.1 ms
03.11 23:12:49 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:12:49 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 116, _type => core/cache.update }
03.11 23:12:49 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:12:52 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:12:52 TIME: user.ping 0.12 ms
03.11 23:12:52 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:12:55 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:12:55 TRACE: User not logon yet.
03.11 23:12:56 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 23:12:56 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 107 }, _type => vdl/cache.battle.findRandom }
03.11 23:12:56 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 23:12:56 TIME: battle.find 0.55 ms
03.11 23:12:56 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
03.11 23:13:00 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:13:00 TIME: user.ping 0.1 ms
03.11 23:13:00 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:13:02 ++ NET: uid116 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 23:13:02 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 116 }, _type => vdl/cache.battle.findRandom }
03.11 23:13:02 -<<-: battle.enemyEvent { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 2, battleId => 19, player => 1 }, _isNotify => true, id => 116, _type => battle.enemyEvent }
03.11 23:13:02 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 1, battleId => 19, player => 2 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
03.11 23:13:02 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 23:13:02 TIME: battle.find 38.52 ms
03.11 23:13:02 == NET: uid116 ret: battle.find { type => battle.find, errorCode => ok }
03.11 23:13:02 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 1, battleId => 19, player => 2 }, type => battle.enemy }
03.11 23:13:02 == NET: uid116 ret: battle.enemy { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 2, battleId => 19, player => 1 }, type => battle.enemy }
03.11 23:13:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:13:03 TRACE: User not logon yet.
03.11 23:13:04 TIMER: Check auto-disconnect...
03.11 23:13:04 STATS: vdl.0 cache, locks:4
03.11 23:13:08 ++ NET: uid116 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 19 }
03.11 23:13:08 ->>-: vdl/cache.battle.infoRoom { roomId => 19, _type => vdl/cache.battle.infoRoom }
03.11 23:13:08 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
03.11 23:13:08 == NET: uid116 ret: battle.sendtask { name => throw, type => battle.sendtask, dices => [4,5,2,0,2,5], errorCode => ok, _type => battle.task }
03.11 23:13:08 TIME: battle.sendtask 0.63 ms
03.11 23:13:08 == NET: uid107 ret: battle.task { name => throw, type => battle.task, dices => [4,5,2,0,2,5], errorCode => ok }
03.11 23:13:08 == NET: uid116 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
03.11 23:13:10 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:13:10 TRACE: User not logon yet.
03.11 23:13:14 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:13:14 TIME: user.ping 0.13 ms
03.11 23:13:14 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:13:17 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:13:17 TIME: user.ping 0.12 ms
03.11 23:13:17 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:13:17 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:13:17 TRACE: User not logon yet.
03.11 23:13:20 ++ NET: uid116 req: battle.sendtask { dice => 5, from => [7,4], name => swap, side => 2, messageType => battle.sendtask, to => [8,4], battleId => 19 }
03.11 23:13:20 ->>-: vdl/cache.battle.infoRoom { roomId => 19, _type => vdl/cache.battle.infoRoom }
03.11 23:13:20 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
03.11 23:13:20 STATS: vdl.0 cache connection, 36 calls, total 0.0772528648376465 sec spent, avg 2.15 ms
03.11 23:13:20 TIME: battle.sendtask 2.09 ms
03.11 23:13:20 == NET: uid116 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,5,5,5,5,10,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [4,2,0,2,5], errorCode => cannotSwap }
03.11 23:13:25 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:13:25 TRACE: User not logon yet.
03.11 23:13:27 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:13:27 TIME: user.ping 0.2 ms
03.11 23:13:27 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:13:32 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:13:32 TRACE: User not logon yet.
03.11 23:13:40 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:13:40 TRACE: User not logon yet.
03.11 23:13:40 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:13:40 TIME: user.ping 0.13 ms
03.11 23:13:40 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:13:42 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:13:42 TIME: user.ping 0.15 ms
03.11 23:13:42 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:13:47 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:13:47 TRACE: User not logon yet.
03.11 23:13:53 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:13:53 TIME: user.ping 0.18 ms
03.11 23:13:53 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:13:55 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:13:55 TRACE: User not logon yet.
03.11 23:14:02 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:14:02 TRACE: User not logon yet.
03.11 23:14:04 TIMER: Check auto-disconnect...
03.11 23:14:04 STATS: vdl.0 cache, locks:4
03.11 23:14:06 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:14:06 TIME: user.ping 0.12 ms
03.11 23:14:06 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:14:07 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:14:07 TIME: user.ping 0.1 ms
03.11 23:14:07 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:14:09 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:14:09 TRACE: User not logon yet.
03.11 23:14:17 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:14:17 TRACE: User not logon yet.
03.11 23:14:19 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:14:19 TIME: user.ping 0.13 ms
03.11 23:14:19 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:14:24 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:14:24 TRACE: User not logon yet.
03.11 23:14:32 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:14:32 TRACE: User not logon yet.
03.11 23:14:32 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:14:32 TIME: user.ping 0.09 ms
03.11 23:14:32 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:14:33 NET: Client (name:uid116 conid:85031237 TCP) disconnected from vdl.0 (clients:2)
03.11 23:14:33 DB: SELECT id FROM battle WHERE firstid=116 OR secondid=116 AND finished <> true
03.11 23:14:33 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=116 OR secondid=116 AND finished <> true, _type => core/server.query }
03.11 23:14:33 -<<-: core/server.query { list => {{ id => 10 }, { id => 12 }, { id => 13 }, { id => 14 }, { id => 16 }, { id => 17 }, { id => 18 }, { id => 19 }}, errorCode => ok, _type => core/server.query }
03.11 23:14:33 STATS: vdl.0 cache connection, 37 calls, total 0.0782358646392822 sec spent, avg 2.11 ms
03.11 23:14:33 ->>-: vdl/cache.battle.infoRoom { roomId => 19, _type => vdl/cache.battle.infoRoom }
03.11 23:14:33 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
03.11 23:14:33 ->>-: vdl/cache.battle.finishRoom { roomId => 19, _type => vdl/cache.battle.finishRoom }
03.11 23:14:33 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
03.11 23:14:33 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 116, _type => core/cache.update }
03.11 23:14:33 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
03.11 23:14:33 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 116, _type => core/cache.update }
03.11 23:14:33 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:14:33 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 116, _type => core/user.logoutPost }
03.11 23:14:33 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 23:14:33 == NET: uid107 ret: battle.end { type => battle.end }
03.11 23:14:39 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:14:39 TRACE: User not logon yet.
03.11 23:14:46 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:14:46 TIME: user.ping 0.09 ms
03.11 23:14:46 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:14:46 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:14:46 TRACE: User not logon yet.
03.11 23:14:54 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:14:54 TRACE: User not logon yet.
03.11 23:14:59 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:14:59 TIME: user.ping 0.12 ms
03.11 23:14:59 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:15:01 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:15:01 TRACE: User not logon yet.
03.11 23:15:04 TIMER: Check auto-disconnect...
03.11 23:15:04 STATS: vdl.0 cache, locks:2
03.11 23:15:09 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:15:09 TRACE: User not logon yet.
03.11 23:15:16 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:15:16 TRACE: User not logon yet.
03.11 23:15:23 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:15:23 TRACE: User not logon yet.
03.11 23:15:31 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:15:31 TRACE: User not logon yet.
03.11 23:15:38 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:15:38 TRACE: User not logon yet.
03.11 23:15:46 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:15:46 TRACE: User not logon yet.
03.11 23:15:53 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:15:53 TRACE: User not logon yet.
03.11 23:16:00 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:16:00 TRACE: User not logon yet.
03.11 23:16:04 TIMER: Check auto-disconnect...
03.11 23:16:04 STATS: vdl.0 cache, locks:2
03.11 23:16:08 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:16:08 TRACE: User not logon yet.
03.11 23:16:15 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:16:15 TRACE: User not logon yet.
03.11 23:16:23 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:16:23 TRACE: User not logon yet.
03.11 23:16:30 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:16:30 TRACE: User not logon yet.
03.11 23:16:38 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:16:38 TRACE: User not logon yet.
03.11 23:16:45 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:16:45 TRACE: User not logon yet.
03.11 23:16:52 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:16:52 TRACE: User not logon yet.
03.11 23:17:00 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:17:00 TRACE: User not logon yet.
03.11 23:17:04 TIMER: Check auto-disconnect...
03.11 23:17:04 STATS: vdl.0 cache, locks:2
03.11 23:17:07 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:17:07 TRACE: User not logon yet.
03.11 23:17:10 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:17:10 TIME: user.ping 0.14 ms
03.11 23:17:10 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:17:25 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
03.11 23:17:25 -<<-: server.login ok
03.11 23:17:25 DB: SELECT * FROM LocalizationStrings
03.11 23:17:25 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:25 TIMER: Starting timer...
03.11 23:17:25 TIMER: Timer running...
03.11 23:17:25 DB: SELECT * FROM GameVars
03.11 23:17:25 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:25 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
03.11 23:17:25 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:25 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
03.11 23:17:25 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:25 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
03.11 23:17:25 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:25 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
03.11 23:17:25 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:25 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
03.11 23:17:25 -<<-: core/quest.getDaily ok
03.11 23:17:25 DB: SELECT * FROM UserAttributeTypes
03.11 23:17:25 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:25 DB: SELECT * FROM UserVariableTypes
03.11 23:17:25 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:25 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
03.11 23:17:25 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:25 DB: SELECT * FROM ItemGroups
03.11 23:17:25 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:25 DB: SELECT * FROM Bundles ORDER BY ID
03.11 23:17:25 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:25 DB: SELECT * FROM BundleItems ORDER BY ID
03.11 23:17:25 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:25 SHOP: loading items...
03.11 23:17:25 ->>-: core/shop.getList { _type => core/shop.getList }
03.11 23:17:25 -<<-: core/shop.getList ok
03.11 23:17:25 SHOP: 0 items loaded (0 sec)
03.11 23:17:25 DB: SELECT * FROM EffectAttributeTypes
03.11 23:17:25 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:25 DB: SELECT * FROM Effects
03.11 23:17:25 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:25 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
03.11 23:17:25 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:25 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
03.11 23:17:25 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:25 DB: SELECT * FROM Badges
03.11 23:17:25 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
03.11 23:17:25 -<<-: core/server.query ok
03.11 23:17:29 NET: Client (conid:14355918) connected to vdl.0 (clients:1)
03.11 23:17:31 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:17:31 TRACE: User not logon yet.
03.11 23:17:38 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:17:38 TRACE: User not logon yet.
03.11 23:17:46 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:17:46 TRACE: User not logon yet.
03.11 23:17:53 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:17:53 TRACE: User not logon yet.
03.11 23:18:00 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:18:00 TRACE: User not logon yet.
03.11 23:18:08 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:18:08 TRACE: User not logon yet.
03.11 23:18:15 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:18:15 TRACE: User not logon yet.
03.11 23:18:23 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:18:23 TRACE: User not logon yet.
03.11 23:18:25 TIMER: Check auto-disconnect...
03.11 23:18:25 STATS: vdl.0 cache, locks:0
03.11 23:18:30 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:18:30 TRACE: User not logon yet.
03.11 23:18:37 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:18:37 TRACE: User not logon yet.
03.11 23:18:45 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:18:45 TRACE: User not logon yet.
03.11 23:18:52 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:18:52 TRACE: User not logon yet.
03.11 23:19:00 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:19:00 TRACE: User not logon yet.
03.11 23:19:07 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:19:07 TRACE: User not logon yet.
03.11 23:19:14 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:19:14 TRACE: User not logon yet.
03.11 23:19:22 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:19:22 TRACE: User not logon yet.
03.11 23:19:25 TIMER: Check auto-disconnect...
03.11 23:19:25 STATS: vdl.0 cache, locks:0
03.11 23:19:29 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:19:29 TRACE: User not logon yet.
03.11 23:19:37 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:19:37 TRACE: User not logon yet.
03.11 23:19:44 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:19:44 TRACE: User not logon yet.
03.11 23:19:51 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:19:51 TRACE: User not logon yet.
03.11 23:19:59 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:19:59 TRACE: User not logon yet.
03.11 23:20:05 NET: Client (conid:50205599) connected to vdl.0 (clients:2)
03.11 23:20:06 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 23:20:06 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 23:20:06 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 23:20:06 -<<-: core/server.query ok
03.11 23:20:06 STATS: vdl.0 cache connection, 21 calls, total 0.0325527191162109 sec spent, avg 1.55 ms
03.11 23:20:06 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 23:20:06 -<<-: core/user.isOnlineID ok
03.11 23:20:06 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 23:20:06 -<<-: core/cache.get ok
03.11 23:20:06 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 23:20:06 -<<-: core/cache.get ok
03.11 23:20:06 NET: Client login (conid:50205599, id:107, name:uid107)
03.11 23:20:06 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 23:20:06 -<<-: core/user.loginPost null
03.11 23:20:06 == NET: null ret: user.join { name => uid107, type => user.join }
03.11 23:20:06 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 23:20:06 == NET: uid107 ret: user.join { name => null, type => user.join }
03.11 23:20:06 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 23:20:06 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:20:06 TRACE: User not logon yet.
03.11 23:20:11 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:20:11 TIME: user.ping 0.09 ms
03.11 23:20:11 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:20:12 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 23:20:12 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 107 }, _type => vdl/cache.battle.findRandom }
03.11 23:20:12 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 23:20:12 TIME: battle.find 0.31 ms
03.11 23:20:12 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
03.11 23:20:13 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:20:13 TRACE: User not logon yet.
03.11 23:20:14 NET: Client (conid:63527204) connected to vdl.0 (clients:3)
03.11 23:20:15 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 23:20:15 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:20:18 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE2 }
03.11 23:20:18 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116'
03.11 23:20:18 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116', _type => core/server.query }
03.11 23:20:18 -<<-: core/server.query { list => {{ name => uid116, networkid => , isbanned => false, id => 116 }}, errorCode => ok, _type => core/server.query }
03.11 23:20:18 ->>-: core/user.isOnlineID { id => 116, _type => core/user.isOnlineID }
03.11 23:20:18 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 23:20:18 ->>-: core/cache.get { type => user, v => -1, id => 116, _type => core/cache.get }
03.11 23:20:18 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid116, deleted => false, email => , networktype =>   , password => uid116, isbanned => false, regdate => 2016-11-03 21:26:31.138113+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1478199280, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 116 } }
03.11 23:20:18 ->>-: core/cache.get { type => questdata, v => -1, id => 116, _type => core/cache.get }
03.11 23:20:18 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 116 } }
03.11 23:20:18 NET: Client login (conid:63527204, id:116, name:uid116)
03.11 23:20:18 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 116, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
03.11 23:20:18 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 23:20:18 == NET: uid107 ret: user.join { name => uid116, type => user.join }
03.11 23:20:18 == NET: null ret: user.join { name => uid116, type => user.join }
03.11 23:20:18 == NET: uid116 ret: user.login { name => uid116, type => user.login, errorCode => ok, id => 116 }
03.11 23:20:18 == NET: uid116 ret: user.join { name => null, type => user.join }
03.11 23:20:18 == NET: uid116 ret: user.join { name => uid107, type => user.join }
03.11 23:20:18 == NET: uid116 ret: user.join { name => uid116, type => user.join }
03.11 23:20:21 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:20:21 TRACE: User not logon yet.
03.11 23:20:25 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:20:25 TIME: user.ping 0.08 ms
03.11 23:20:25 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:20:25 TIMER: Check auto-disconnect...
03.11 23:20:25 STATS: vdl.0 cache, locks:4
03.11 23:20:25 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 116, _type => core/cache.update }
03.11 23:20:25 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:20:28 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:20:28 TRACE: User not logon yet.
03.11 23:20:28 ++ NET: uid116 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 23:20:28 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 116 }, _type => vdl/cache.battle.findRandom }
03.11 23:20:28 -<<-: battle.enemyEvent { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 2, battleId => 20, player => 1 }, _isNotify => true, id => 116, _type => battle.enemyEvent }
03.11 23:20:28 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 1, battleId => 20, player => 2 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
03.11 23:20:28 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 23:20:28 TIME: battle.find 33.85 ms
03.11 23:20:28 == NET: uid116 ret: battle.find { type => battle.find, errorCode => ok }
03.11 23:20:28 == NET: uid116 ret: battle.enemy { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 2, battleId => 20, player => 1 }, type => battle.enemy }
03.11 23:20:28 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 1, battleId => 20, player => 2 }, type => battle.enemy }
03.11 23:20:32 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:20:32 TIME: user.ping 0.18 ms
03.11 23:20:32 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:20:36 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:20:36 TRACE: User not logon yet.
03.11 23:20:36 ++ NET: uid116 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 20 }
03.11 23:20:36 ->>-: vdl/cache.battle.infoRoom { roomId => 20, _type => vdl/cache.battle.infoRoom }
03.11 23:20:36 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
03.11 23:20:36 == NET: uid116 ret: battle.sendtask { name => throw, type => battle.sendtask, dices => [4,4,3,5,4,1], errorCode => ok, _type => battle.task }
03.11 23:20:36 TIME: battle.sendtask 0.79 ms
03.11 23:20:36 == NET: uid107 ret: battle.task { name => throw, type => battle.task, dices => [4,4,3,5,4,1], errorCode => ok }
03.11 23:20:36 == NET: uid116 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
03.11 23:20:39 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:20:39 TIME: user.ping 0.08 ms
03.11 23:20:39 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:20:43 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:20:43 TRACE: User not logon yet.
03.11 23:20:44 ++ NET: uid116 req: battle.sendtask { dice => 5, from => [7,5], name => swap, side => 2, messageType => battle.sendtask, to => [8,5], battleId => 20 }
03.11 23:20:44 ->>-: vdl/cache.battle.infoRoom { roomId => 20, _type => vdl/cache.battle.infoRoom }
03.11 23:20:44 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
03.11 23:20:44 TIME: battle.sendtask 0.85 ms
03.11 23:20:44 == NET: uid116 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,5,5,5,5,10,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [4,4,3,4,1], errorCode => cannotSwap }
03.11 23:20:50 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:20:50 TRACE: User not logon yet.
03.11 23:20:52 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:20:52 TIME: user.ping 0.07 ms
03.11 23:20:52 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:20:58 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:20:58 TRACE: User not logon yet.
03.11 23:20:59 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:20:59 TIME: user.ping 0.14 ms
03.11 23:20:59 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:21:05 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:21:05 TIME: user.ping 0.1 ms
03.11 23:21:05 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:21:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:21:05 TRACE: User not logon yet.
03.11 23:21:13 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:21:13 TRACE: User not logon yet.
03.11 23:21:18 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:21:18 TIME: user.ping 0.25 ms
03.11 23:21:18 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:21:20 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:21:20 TRACE: User not logon yet.
03.11 23:21:24 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:21:24 TIME: user.ping 0.19 ms
03.11 23:21:24 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:21:25 TIMER: Check auto-disconnect...
03.11 23:21:25 STATS: vdl.0 cache, locks:4
03.11 23:21:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:21:27 TRACE: User not logon yet.
03.11 23:21:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:21:35 TRACE: User not logon yet.
03.11 23:21:42 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:21:42 TRACE: User not logon yet.
03.11 23:21:50 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:21:50 TRACE: User not logon yet.
03.11 23:21:51 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:21:51 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:21:51 TIME: user.ping 0.08 ms
03.11 23:21:57 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:21:57 TRACE: User not logon yet.
03.11 23:22:04 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:22:04 TRACE: User not logon yet.
03.11 23:22:12 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:22:12 TRACE: User not logon yet.
03.11 23:22:17 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:22:17 TIME: user.ping 0.1 ms
03.11 23:22:17 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:22:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:22:19 TRACE: User not logon yet.
03.11 23:22:25 TIMER: Check auto-disconnect...
03.11 23:22:25 STATS: vdl.0 cache, locks:4
03.11 23:22:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:22:26 TRACE: User not logon yet.
03.11 23:22:34 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:22:34 TRACE: User not logon yet.
03.11 23:22:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:22:41 TRACE: User not logon yet.
03.11 23:22:44 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:22:44 TIME: user.ping 0.16 ms
03.11 23:22:44 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:22:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:22:49 TRACE: User not logon yet.
03.11 23:22:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:22:56 TRACE: User not logon yet.
03.11 23:23:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:23:03 TRACE: User not logon yet.
03.11 23:23:10 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:23:10 TIME: user.ping 0.09 ms
03.11 23:23:10 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:23:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:23:11 TRACE: User not logon yet.
03.11 23:23:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:23:18 TRACE: User not logon yet.
03.11 23:23:25 TIMER: Check auto-disconnect...
03.11 23:23:25 STATS: vdl.0 cache, locks:4
03.11 23:23:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:23:26 TRACE: User not logon yet.
03.11 23:23:33 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:23:33 TRACE: User not logon yet.
03.11 23:23:36 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:23:36 TIME: user.ping 0.08 ms
03.11 23:23:36 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:23:40 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:23:40 TRACE: User not logon yet.
03.11 23:23:59 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
03.11 23:23:59 -<<-: server.login ok
03.11 23:23:59 DB: SELECT * FROM LocalizationStrings
03.11 23:23:59 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:23:59 TIMER: Starting timer...
03.11 23:23:59 DB: SELECT * FROM GameVars
03.11 23:23:59 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
03.11 23:23:59 TIMER: Timer running...
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:23:59 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
03.11 23:23:59 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:23:59 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
03.11 23:23:59 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:23:59 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
03.11 23:23:59 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:23:59 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
03.11 23:23:59 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:23:59 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
03.11 23:23:59 -<<-: core/quest.getDaily ok
03.11 23:23:59 DB: SELECT * FROM UserAttributeTypes
03.11 23:23:59 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:23:59 DB: SELECT * FROM UserVariableTypes
03.11 23:23:59 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:23:59 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
03.11 23:23:59 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:23:59 DB: SELECT * FROM ItemGroups
03.11 23:23:59 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:23:59 DB: SELECT * FROM Bundles ORDER BY ID
03.11 23:23:59 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:23:59 DB: SELECT * FROM BundleItems ORDER BY ID
03.11 23:23:59 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:23:59 SHOP: loading items...
03.11 23:23:59 ->>-: core/shop.getList { _type => core/shop.getList }
03.11 23:23:59 -<<-: core/shop.getList ok
03.11 23:23:59 SHOP: 0 items loaded (0 sec)
03.11 23:23:59 DB: SELECT * FROM EffectAttributeTypes
03.11 23:23:59 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:23:59 DB: SELECT * FROM Effects
03.11 23:23:59 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:23:59 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
03.11 23:23:59 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:23:59 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
03.11 23:23:59 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:23:59 DB: SELECT * FROM Badges
03.11 23:23:59 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
03.11 23:23:59 -<<-: core/server.query ok
03.11 23:24:10 NET: Client (conid:7924123) connected to vdl.0 (clients:1)
03.11 23:24:12 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:24:12 TRACE: User not logon yet.
03.11 23:24:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:24:19 TRACE: User not logon yet.
03.11 23:24:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:24:27 TRACE: User not logon yet.
03.11 23:24:34 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:24:34 TRACE: User not logon yet.
03.11 23:24:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:24:41 TRACE: User not logon yet.
03.11 23:24:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:24:49 TRACE: User not logon yet.
03.11 23:24:54 NET: Client (conid:43544522) connected to vdl.0 (clients:2)
03.11 23:24:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:24:56 TRACE: User not logon yet.
03.11 23:24:59 TIMER: Check auto-disconnect...
03.11 23:24:59 STATS: vdl.0 cache, locks:0
03.11 23:25:00 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:25:00 TRACE: User not logon yet.
03.11 23:25:04 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:25:04 TRACE: User not logon yet.
03.11 23:25:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:25:11 TRACE: User not logon yet.
03.11 23:25:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:25:18 TRACE: User not logon yet.
03.11 23:25:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:25:26 TRACE: User not logon yet.
03.11 23:25:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:25:26 TRACE: User not logon yet.
03.11 23:25:33 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:25:33 TRACE: User not logon yet.
03.11 23:25:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:25:41 TRACE: User not logon yet.
03.11 23:25:48 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:25:48 TRACE: User not logon yet.
03.11 23:25:52 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:25:52 TRACE: User not logon yet.
03.11 23:25:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:25:56 TRACE: User not logon yet.
03.11 23:25:59 TIMER: Check auto-disconnect...
03.11 23:25:59 STATS: vdl.0 cache, locks:0
03.11 23:26:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:26:03 TRACE: User not logon yet.
03.11 23:26:10 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:26:10 TRACE: User not logon yet.
03.11 23:26:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:26:18 TRACE: User not logon yet.
03.11 23:26:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:26:18 TRACE: User not logon yet.
03.11 23:26:25 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:26:25 TRACE: User not logon yet.
03.11 23:26:32 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:26:32 TRACE: User not logon yet.
03.11 23:26:40 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:26:40 TRACE: User not logon yet.
03.11 23:26:44 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:26:44 TRACE: User not logon yet.
03.11 23:26:47 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:26:47 TRACE: User not logon yet.
03.11 23:26:55 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:26:55 TRACE: User not logon yet.
03.11 23:26:59 TIMER: Check auto-disconnect...
03.11 23:26:59 STATS: vdl.0 cache, locks:0
03.11 23:27:02 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:27:02 TRACE: User not logon yet.
03.11 23:27:09 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:27:09 TRACE: User not logon yet.
03.11 23:27:10 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:27:10 TRACE: User not logon yet.
03.11 23:27:17 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:27:17 TRACE: User not logon yet.
03.11 23:27:24 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:27:24 TRACE: User not logon yet.
03.11 23:27:32 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:27:32 TRACE: User not logon yet.
03.11 23:27:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:27:35 TRACE: User not logon yet.
03.11 23:27:39 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:27:39 TRACE: User not logon yet.
03.11 23:27:46 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:27:46 TRACE: User not logon yet.
03.11 23:27:54 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:27:54 TRACE: User not logon yet.
03.11 23:27:59 TIMER: Check auto-disconnect...
03.11 23:27:59 STATS: vdl.0 cache, locks:0
03.11 23:28:01 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:28:01 TRACE: User not logon yet.
03.11 23:28:01 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:28:01 TRACE: User not logon yet.
03.11 23:28:09 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:28:09 TRACE: User not logon yet.
03.11 23:28:16 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:28:16 TRACE: User not logon yet.
03.11 23:28:24 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:28:24 TRACE: User not logon yet.
03.11 23:28:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:28:27 TRACE: User not logon yet.
03.11 23:28:31 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:28:31 TRACE: User not logon yet.
03.11 23:28:38 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:28:38 TRACE: User not logon yet.
03.11 23:28:46 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:28:46 TRACE: User not logon yet.
03.11 23:28:53 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:28:53 TRACE: User not logon yet.
03.11 23:28:53 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:28:53 TRACE: User not logon yet.
03.11 23:28:59 TIMER: Check auto-disconnect...
03.11 23:28:59 STATS: vdl.0 cache, locks:0
03.11 23:29:01 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:29:01 TRACE: User not logon yet.
03.11 23:29:08 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:29:08 TRACE: User not logon yet.
03.11 23:29:16 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:29:16 TRACE: User not logon yet.
03.11 23:29:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:29:18 TRACE: User not logon yet.
03.11 23:29:22 NET: Client (name:null conid:43544522 TCP) disconnected from vdl.0 (clients:1)
03.11 23:29:23 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:29:23 TRACE: User not logon yet.
03.11 23:29:30 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:29:30 TRACE: User not logon yet.
03.11 23:29:38 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:29:38 TRACE: User not logon yet.
03.11 23:29:45 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:29:45 TRACE: User not logon yet.
03.11 23:29:52 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:29:52 TRACE: User not logon yet.
03.11 23:29:59 TIMER: Check auto-disconnect...
03.11 23:29:59 STATS: vdl.0 cache, locks:0
03.11 23:30:00 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:30:00 TRACE: User not logon yet.
03.11 23:30:07 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:30:07 TRACE: User not logon yet.
03.11 23:30:15 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:30:15 TRACE: User not logon yet.
03.11 23:30:22 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:30:22 TRACE: User not logon yet.
03.11 23:30:29 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:30:29 TRACE: User not logon yet.
03.11 23:30:37 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:30:37 TRACE: User not logon yet.
03.11 23:30:44 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:30:44 TRACE: User not logon yet.
03.11 23:30:52 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:30:52 TRACE: User not logon yet.
03.11 23:30:59 TIMER: Check auto-disconnect...
03.11 23:30:59 STATS: vdl.0 cache, locks:0
03.11 23:30:59 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:30:59 TRACE: User not logon yet.
03.11 23:31:07 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:31:07 TRACE: User not logon yet.
03.11 23:31:14 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:31:14 TRACE: User not logon yet.
03.11 23:31:21 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:31:21 TRACE: User not logon yet.
03.11 23:31:29 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:31:29 TRACE: User not logon yet.
03.11 23:31:36 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:31:36 TRACE: User not logon yet.
03.11 23:31:43 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:31:43 TRACE: User not logon yet.
03.11 23:31:51 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:31:51 TRACE: User not logon yet.
03.11 23:31:58 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:31:58 TRACE: User not logon yet.
03.11 23:31:59 TIMER: Check auto-disconnect...
03.11 23:31:59 STATS: vdl.0 cache, locks:0
03.11 23:32:06 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:32:06 TRACE: User not logon yet.
03.11 23:32:13 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:32:13 TRACE: User not logon yet.
03.11 23:32:20 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:32:20 TRACE: User not logon yet.
03.11 23:32:28 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:32:28 TRACE: User not logon yet.
03.11 23:32:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:32:35 TRACE: User not logon yet.
03.11 23:32:43 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:32:43 TRACE: User not logon yet.
03.11 23:32:50 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:32:50 TRACE: User not logon yet.
03.11 23:32:57 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:32:57 TRACE: User not logon yet.
03.11 23:32:59 TIMER: Check auto-disconnect...
03.11 23:32:59 STATS: vdl.0 cache, locks:0
03.11 23:33:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:33:05 TRACE: User not logon yet.
03.11 23:33:12 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:33:12 TRACE: User not logon yet.
03.11 23:33:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:33:19 TRACE: User not logon yet.
03.11 23:33:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:33:27 TRACE: User not logon yet.
03.11 23:33:34 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:33:34 TRACE: User not logon yet.
03.11 23:33:42 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:33:42 TRACE: User not logon yet.
03.11 23:33:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:33:49 TRACE: User not logon yet.
03.11 23:33:57 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:33:57 TRACE: User not logon yet.
03.11 23:33:59 TIMER: Check auto-disconnect...
03.11 23:33:59 STATS: vdl.0 cache, locks:0
03.11 23:34:04 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:34:04 TRACE: User not logon yet.
03.11 23:34:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:34:11 TRACE: User not logon yet.
03.11 23:34:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:34:19 TRACE: User not logon yet.
03.11 23:34:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:34:26 TRACE: User not logon yet.
03.11 23:34:34 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:34:34 TRACE: User not logon yet.
03.11 23:34:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:34:41 TRACE: User not logon yet.
03.11 23:34:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:34:49 TRACE: User not logon yet.
03.11 23:34:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:34:56 TRACE: User not logon yet.
03.11 23:34:59 TIMER: Check auto-disconnect...
03.11 23:34:59 STATS: vdl.0 cache, locks:0
03.11 23:35:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:35:03 TRACE: User not logon yet.
03.11 23:35:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:35:11 TRACE: User not logon yet.
03.11 23:35:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:35:18 TRACE: User not logon yet.
03.11 23:35:25 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:35:25 TRACE: User not logon yet.
03.11 23:35:33 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:35:33 TRACE: User not logon yet.
03.11 23:35:40 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:35:40 TRACE: User not logon yet.
03.11 23:35:48 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:35:48 TRACE: User not logon yet.
03.11 23:35:55 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:35:55 TRACE: User not logon yet.
03.11 23:35:59 TIMER: Check auto-disconnect...
03.11 23:35:59 STATS: vdl.0 cache, locks:0
03.11 23:36:02 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:36:02 TRACE: User not logon yet.
03.11 23:36:10 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:36:10 TRACE: User not logon yet.
03.11 23:36:17 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:36:17 TRACE: User not logon yet.
03.11 23:36:25 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:36:25 TRACE: User not logon yet.
03.11 23:36:32 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:36:32 TRACE: User not logon yet.
03.11 23:36:39 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:36:39 TRACE: User not logon yet.
03.11 23:36:47 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:36:47 TRACE: User not logon yet.
03.11 23:36:54 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:36:54 TRACE: User not logon yet.
03.11 23:36:59 TIMER: Check auto-disconnect...
03.11 23:36:59 STATS: vdl.0 cache, locks:0
03.11 23:37:02 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:37:02 TRACE: User not logon yet.
03.11 23:37:09 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:37:09 TRACE: User not logon yet.
03.11 23:37:16 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:37:16 TRACE: User not logon yet.
03.11 23:37:24 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:37:24 TRACE: User not logon yet.
03.11 23:37:31 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:37:31 TRACE: User not logon yet.
03.11 23:37:38 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:37:38 TRACE: User not logon yet.
03.11 23:37:46 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:37:46 TRACE: User not logon yet.
03.11 23:37:53 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:37:53 TRACE: User not logon yet.
03.11 23:37:59 TIMER: Check auto-disconnect...
03.11 23:37:59 STATS: vdl.0 cache, locks:0
03.11 23:38:01 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:38:01 TRACE: User not logon yet.
03.11 23:38:08 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:38:08 TRACE: User not logon yet.
03.11 23:38:15 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:38:15 TRACE: User not logon yet.
03.11 23:38:23 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:38:23 TRACE: User not logon yet.
03.11 23:38:30 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:38:30 TRACE: User not logon yet.
03.11 23:38:38 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:38:38 TRACE: User not logon yet.
03.11 23:38:45 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:38:45 TRACE: User not logon yet.
03.11 23:38:52 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:38:52 TRACE: User not logon yet.
03.11 23:38:59 TIMER: Check auto-disconnect...
03.11 23:38:59 STATS: vdl.0 cache, locks:0
03.11 23:39:00 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:39:00 TRACE: User not logon yet.
03.11 23:39:07 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:39:07 TRACE: User not logon yet.
03.11 23:39:15 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:39:15 TRACE: User not logon yet.
03.11 23:39:22 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:39:22 TRACE: User not logon yet.
03.11 23:39:29 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:39:29 TRACE: User not logon yet.
03.11 23:39:37 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:39:37 TRACE: User not logon yet.
03.11 23:39:44 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:39:44 TRACE: User not logon yet.
03.11 23:39:51 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:39:51 TRACE: User not logon yet.
03.11 23:39:59 TIMER: Check auto-disconnect...
03.11 23:39:59 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:39:59 TRACE: User not logon yet.
03.11 23:39:59 STATS: vdl.0 cache, locks:0
03.11 23:40:06 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:40:06 TRACE: User not logon yet.
03.11 23:40:14 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:40:14 TRACE: User not logon yet.
03.11 23:40:21 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:40:21 TRACE: User not logon yet.
03.11 23:40:28 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:40:28 TRACE: User not logon yet.
03.11 23:40:36 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:40:36 TRACE: User not logon yet.
03.11 23:40:43 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:40:43 TRACE: User not logon yet.
03.11 23:40:51 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:40:51 TRACE: User not logon yet.
03.11 23:40:58 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:40:58 TRACE: User not logon yet.
03.11 23:40:59 TIMER: Check auto-disconnect...
03.11 23:40:59 STATS: vdl.0 cache, locks:0
03.11 23:41:06 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:41:06 TRACE: User not logon yet.
03.11 23:41:13 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:41:13 TRACE: User not logon yet.
03.11 23:41:20 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:41:20 TRACE: User not logon yet.
03.11 23:41:28 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:41:28 TRACE: User not logon yet.
03.11 23:41:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:41:35 TRACE: User not logon yet.
03.11 23:41:42 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:41:42 TRACE: User not logon yet.
03.11 23:41:50 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:41:50 TRACE: User not logon yet.
03.11 23:41:57 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:41:57 TRACE: User not logon yet.
03.11 23:41:59 TIMER: Check auto-disconnect...
03.11 23:41:59 STATS: vdl.0 cache, locks:0
03.11 23:42:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:42:05 TRACE: User not logon yet.
03.11 23:42:12 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:42:12 TRACE: User not logon yet.
03.11 23:42:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:42:19 TRACE: User not logon yet.
03.11 23:42:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:42:27 TRACE: User not logon yet.
03.11 23:42:34 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:42:34 TRACE: User not logon yet.
03.11 23:42:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:42:41 TRACE: User not logon yet.
03.11 23:42:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:42:49 TRACE: User not logon yet.
03.11 23:42:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:42:56 TRACE: User not logon yet.
03.11 23:42:59 TIMER: Check auto-disconnect...
03.11 23:42:59 STATS: vdl.0 cache, locks:0
03.11 23:43:04 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:43:04 TRACE: User not logon yet.
03.11 23:43:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:43:11 TRACE: User not logon yet.
03.11 23:43:27 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
03.11 23:43:27 -<<-: server.login ok
03.11 23:43:27 DB: SELECT * FROM LocalizationStrings
03.11 23:43:27 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
03.11 23:43:27 -<<-: core/server.query ok
03.11 23:43:27 TIMER: Starting timer...
03.11 23:43:27 TIMER: Timer running...
03.11 23:43:27 DB: SELECT * FROM GameVars
03.11 23:43:27 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
03.11 23:43:27 -<<-: core/server.query ok
03.11 23:43:27 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
03.11 23:43:27 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
03.11 23:43:27 -<<-: core/server.query ok
03.11 23:43:27 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
03.11 23:43:27 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
03.11 23:43:27 -<<-: core/server.query ok
03.11 23:43:27 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
03.11 23:43:27 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
03.11 23:43:27 -<<-: core/server.query ok
03.11 23:43:27 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
03.11 23:43:27 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
03.11 23:43:27 -<<-: core/server.query ok
03.11 23:43:27 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
03.11 23:43:27 -<<-: core/quest.getDaily ok
03.11 23:43:27 DB: SELECT * FROM UserAttributeTypes
03.11 23:43:27 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
03.11 23:43:27 -<<-: core/server.query ok
03.11 23:43:27 DB: SELECT * FROM UserVariableTypes
03.11 23:43:27 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
03.11 23:43:27 -<<-: core/server.query ok
03.11 23:43:27 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
03.11 23:43:27 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
03.11 23:43:27 -<<-: core/server.query ok
03.11 23:43:27 DB: SELECT * FROM ItemGroups
03.11 23:43:27 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
03.11 23:43:27 -<<-: core/server.query ok
03.11 23:43:27 DB: SELECT * FROM Bundles ORDER BY ID
03.11 23:43:27 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
03.11 23:43:27 -<<-: core/server.query ok
03.11 23:43:27 DB: SELECT * FROM BundleItems ORDER BY ID
03.11 23:43:27 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
03.11 23:43:27 -<<-: core/server.query ok
03.11 23:43:27 SHOP: loading items...
03.11 23:43:27 ->>-: core/shop.getList { _type => core/shop.getList }
03.11 23:43:27 -<<-: core/shop.getList ok
03.11 23:43:27 SHOP: 0 items loaded (0 sec)
03.11 23:43:27 DB: SELECT * FROM EffectAttributeTypes
03.11 23:43:27 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
03.11 23:43:27 -<<-: core/server.query ok
03.11 23:43:27 DB: SELECT * FROM Effects
03.11 23:43:28 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
03.11 23:43:28 -<<-: core/server.query ok
03.11 23:43:28 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
03.11 23:43:28 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
03.11 23:43:28 -<<-: core/server.query ok
03.11 23:43:28 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
03.11 23:43:28 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
03.11 23:43:28 -<<-: core/server.query ok
03.11 23:43:28 DB: SELECT * FROM Badges
03.11 23:43:28 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
03.11 23:43:28 -<<-: core/server.query ok
03.11 23:43:33 NET: Client (conid:90311780) connected to vdl.0 (clients:1)
03.11 23:43:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:43:35 TRACE: User not logon yet.
03.11 23:43:42 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:43:42 TRACE: User not logon yet.
03.11 23:43:50 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:43:50 TRACE: User not logon yet.
03.11 23:43:57 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:43:57 TRACE: User not logon yet.
03.11 23:44:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:44:05 TRACE: User not logon yet.
03.11 23:44:12 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:44:12 TRACE: User not logon yet.
03.11 23:44:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:44:19 TRACE: User not logon yet.
03.11 23:44:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:44:27 TRACE: User not logon yet.
03.11 23:44:28 TIMER: Check auto-disconnect...
03.11 23:44:28 STATS: vdl.0 cache, locks:0
03.11 23:44:34 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:44:34 TRACE: User not logon yet.
03.11 23:44:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:44:41 TRACE: User not logon yet.
03.11 23:44:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:44:49 TRACE: User not logon yet.
03.11 23:44:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:44:56 TRACE: User not logon yet.
03.11 23:45:04 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:45:04 TRACE: User not logon yet.
03.11 23:45:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:45:11 TRACE: User not logon yet.
03.11 23:45:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:45:19 TRACE: User not logon yet.
03.11 23:45:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:45:26 TRACE: User not logon yet.
03.11 23:45:28 TIMER: Check auto-disconnect...
03.11 23:45:28 STATS: vdl.0 cache, locks:0
03.11 23:45:34 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:45:34 TRACE: User not logon yet.
03.11 23:45:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:45:41 TRACE: User not logon yet.
03.11 23:45:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:45:49 TRACE: User not logon yet.
03.11 23:45:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:45:56 TRACE: User not logon yet.
03.11 23:46:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:46:03 TRACE: User not logon yet.
03.11 23:46:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:46:11 TRACE: User not logon yet.
03.11 23:46:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:46:18 TRACE: User not logon yet.
03.11 23:46:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:46:26 TRACE: User not logon yet.
03.11 23:46:28 TIMER: Check auto-disconnect...
03.11 23:46:28 STATS: vdl.0 cache, locks:0
03.11 23:46:33 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:46:33 TRACE: User not logon yet.
03.11 23:46:40 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:46:40 TRACE: User not logon yet.
03.11 23:46:48 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:46:48 TRACE: User not logon yet.
03.11 23:46:55 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:46:55 TRACE: User not logon yet.
03.11 23:47:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:47:03 TRACE: User not logon yet.
03.11 23:47:10 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:47:10 TRACE: User not logon yet.
03.11 23:47:17 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:47:17 TRACE: User not logon yet.
03.11 23:47:25 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:47:25 TRACE: User not logon yet.
03.11 23:47:28 TIMER: Check auto-disconnect...
03.11 23:47:28 STATS: vdl.0 cache, locks:0
03.11 23:47:32 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:47:32 TRACE: User not logon yet.
03.11 23:47:40 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:47:40 TRACE: User not logon yet.
03.11 23:47:47 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:47:47 TRACE: User not logon yet.
03.11 23:47:54 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:47:54 TRACE: User not logon yet.
03.11 23:48:02 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:48:02 TRACE: User not logon yet.
03.11 23:48:09 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:48:09 TRACE: User not logon yet.
03.11 23:48:15 NET: Client (conid:91578165) connected to vdl.0 (clients:2)
03.11 23:48:17 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:48:17 TRACE: User not logon yet.
03.11 23:48:19 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE2 }
03.11 23:48:19 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116'
03.11 23:48:19 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116', _type => core/server.query }
03.11 23:48:19 -<<-: core/server.query ok
03.11 23:48:19 STATS: vdl.0 cache connection, 21 calls, total 0.0271997451782227 sec spent, avg 1.3 ms
03.11 23:48:19 ->>-: core/user.isOnlineID { id => 116, _type => core/user.isOnlineID }
03.11 23:48:19 -<<-: core/user.isOnlineID ok
03.11 23:48:19 ->>-: core/cache.get { type => user, v => -1, id => 116, _type => core/cache.get }
03.11 23:48:19 -<<-: core/cache.get ok
03.11 23:48:19 ->>-: core/cache.get { type => questdata, v => -1, id => 116, _type => core/cache.get }
03.11 23:48:19 -<<-: core/cache.get ok
03.11 23:48:19 NET: Client login (conid:91578165, id:116, name:uid116)
03.11 23:48:19 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 116, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
03.11 23:48:19 -<<-: core/user.loginPost null
03.11 23:48:19 == NET: null ret: user.join { name => uid116, type => user.join }
03.11 23:48:19 == NET: uid116 ret: user.login { name => uid116, type => user.login, errorCode => ok, id => 116 }
03.11 23:48:19 == NET: uid116 ret: user.join { name => null, type => user.join }
03.11 23:48:19 == NET: uid116 ret: user.join { name => uid116, type => user.join }
03.11 23:48:24 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:48:24 TRACE: User not logon yet.
03.11 23:48:28 TIMER: Check auto-disconnect...
03.11 23:48:28 STATS: vdl.0 cache, locks:2
03.11 23:48:28 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 116, _type => core/cache.update }
03.11 23:48:28 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:48:31 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:48:31 TIME: user.ping 0.09 ms
03.11 23:48:31 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:48:31 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:48:31 TRACE: User not logon yet.
03.11 23:48:39 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:48:39 TRACE: User not logon yet.
03.11 23:48:46 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:48:46 TRACE: User not logon yet.
03.11 23:48:51 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:48:51 TIME: user.ping 0.14 ms
03.11 23:48:51 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:48:54 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:48:54 TRACE: User not logon yet.
03.11 23:49:01 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:49:01 TRACE: User not logon yet.
03.11 23:49:08 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:49:08 TRACE: User not logon yet.
03.11 23:49:11 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:49:11 TIME: user.ping 0.18 ms
03.11 23:49:11 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:49:16 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:49:16 TRACE: User not logon yet.
03.11 23:49:23 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:49:23 TRACE: User not logon yet.
03.11 23:49:28 TIMER: Check auto-disconnect...
03.11 23:49:28 STATS: vdl.0 cache, locks:2
03.11 23:49:31 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:49:31 TRACE: User not logon yet.
03.11 23:49:31 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:49:31 TIME: user.ping 0.09 ms
03.11 23:49:31 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:49:38 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:49:38 TRACE: User not logon yet.
03.11 23:49:45 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:49:45 TRACE: User not logon yet.
03.11 23:49:51 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:49:51 TIME: user.ping 0.1 ms
03.11 23:49:51 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:49:53 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:49:53 TRACE: User not logon yet.
03.11 23:50:00 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:50:00 TRACE: User not logon yet.
03.11 23:50:08 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:50:08 TRACE: User not logon yet.
03.11 23:50:12 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:50:12 TIME: user.ping 0.09 ms
03.11 23:50:12 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:50:15 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:50:15 TRACE: User not logon yet.
03.11 23:50:22 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:50:22 TRACE: User not logon yet.
03.11 23:50:28 TIMER: Check auto-disconnect...
03.11 23:50:28 STATS: vdl.0 cache, locks:2
03.11 23:50:30 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:50:30 TRACE: User not logon yet.
03.11 23:50:32 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:50:32 TIME: user.ping 0.1 ms
03.11 23:50:32 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:50:37 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:50:37 TRACE: User not logon yet.
03.11 23:50:44 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:50:44 TRACE: User not logon yet.
03.11 23:50:52 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:50:52 TIME: user.ping 0.17 ms
03.11 23:50:52 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:50:52 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:50:52 TRACE: User not logon yet.
03.11 23:50:59 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:50:59 TRACE: User not logon yet.
03.11 23:51:07 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:51:07 TRACE: User not logon yet.
03.11 23:51:12 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:51:12 TIME: user.ping 0.19 ms
03.11 23:51:12 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:51:14 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:51:14 TRACE: User not logon yet.
03.11 23:51:22 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:51:22 TRACE: User not logon yet.
03.11 23:51:28 TIMER: Check auto-disconnect...
03.11 23:51:28 STATS: vdl.0 cache, locks:2
03.11 23:51:29 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:51:29 TRACE: User not logon yet.
03.11 23:51:32 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:51:32 TIME: user.ping 0.08 ms
03.11 23:51:32 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:51:36 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:51:36 TRACE: User not logon yet.
03.11 23:51:44 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:51:44 TRACE: User not logon yet.
03.11 23:51:47 NET: Client (conid:79190414) connected to vdl.0 (clients:3)
03.11 23:51:48 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 23:51:48 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 23:51:48 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 23:51:48 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
03.11 23:51:48 STATS: vdl.0 cache connection, 27 calls, total 0.0335793495178223 sec spent, avg 1.24 ms
03.11 23:51:48 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 23:51:48 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 23:51:48 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 23:51:48 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1478178267, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 107 } }
03.11 23:51:48 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 23:51:48 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
03.11 23:51:48 NET: Client login (conid:79190414, id:107, name:uid107)
03.11 23:51:48 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 23:51:48 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 23:51:48 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 23:51:48 == NET: null ret: user.join { name => uid107, type => user.join }
03.11 23:51:48 == NET: uid116 ret: user.join { name => uid107, type => user.join }
03.11 23:51:48 == NET: uid107 ret: user.join { name => null, type => user.join }
03.11 23:51:48 == NET: uid107 ret: user.join { name => uid116, type => user.join }
03.11 23:51:48 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 23:51:51 ++ NET: uid116 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 23:51:51 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 116 }, _type => vdl/cache.battle.findRandom }
03.11 23:51:51 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 23:51:51 == NET: uid116 ret: battle.find { type => battle.find, errorCode => ok }
03.11 23:51:51 TIME: battle.find 0.34 ms
03.11 23:51:52 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:51:52 TRACE: User not logon yet.
03.11 23:51:52 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:51:52 TIME: user.ping 0.1 ms
03.11 23:51:52 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:51:54 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:51:54 TIME: user.ping 0.08 ms
03.11 23:51:54 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:51:58 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 23:51:58 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:51:58 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 23:51:58 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 107 }, _type => vdl/cache.battle.findRandom }
03.11 23:51:58 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 2, battleId => 21, player => 1 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
03.11 23:51:58 -<<-: battle.enemyEvent { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 1, battleId => 21, player => 2 }, _isNotify => true, id => 116, _type => battle.enemyEvent }
03.11 23:51:58 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 23:51:58 TIME: battle.find 28.49 ms
03.11 23:51:58 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
03.11 23:51:58 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 2, battleId => 21, player => 1 }, type => battle.enemy }
03.11 23:51:58 == NET: uid116 ret: battle.enemy { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 1, battleId => 21, player => 2 }, type => battle.enemy }
03.11 23:51:59 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:51:59 TRACE: User not logon yet.
03.11 23:52:02 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:52:02 TIME: user.ping 0.11 ms
03.11 23:52:02 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:52:06 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:52:06 TRACE: User not logon yet.
03.11 23:52:09 ++ NET: uid107 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 21 }
03.11 23:52:09 ->>-: vdl/cache.battle.infoRoom { roomId => 21, _type => vdl/cache.battle.infoRoom }
03.11 23:52:09 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
03.11 23:52:09 == NET: uid107 ret: battle.sendtask { name => throw, type => battle.sendtask, dices => [0,4,5,5,2,3], errorCode => ok, _type => battle.task }
03.11 23:52:09 TIME: battle.sendtask 0.52 ms
03.11 23:52:09 == NET: uid116 ret: battle.task { name => throw, type => battle.task, dices => [0,4,5,5,2,3], errorCode => ok }
03.11 23:52:09 == NET: uid107 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
03.11 23:52:12 NET: Client (conid:43882953) connected to vdl.0 (clients:4)
03.11 23:52:14 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:52:14 TRACE: User not logon yet.
03.11 23:52:14 ++ NET: null req: user.register { messageType => user.register }
03.11 23:52:14 DB: SELECT * FROM users
03.11 23:52:14 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
03.11 23:52:14 -<<-: core/server.query { list => {{ password => test, name => test3, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:08.364133+03, language =>   , id => 4, deleted => false }, { password => test, name => test5, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:15.596579+03, language =>   , id => 6, deleted => false }, { password => test, name => test6, networkid => , params => , networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:19.233499+03, language =>   , id => 7, deleted => false }, { password => uid24, name => uid24, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:36:42.292969+03, language =>   , id => 24, deleted => false }, { password => uid25, name => uid25, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:42:14.268266+03, language =>   , id => 25, deleted => false }, { password => test, name => test7, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-09-07 16:46:43.688817+03, language =>   , id => 8, deleted => false }, { password => uid26, name => uid26, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:52:51.409771+03, language =>   , id => 26, deleted => false }, { password => uid37, name => uid37, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476461351,"lastLoginDate":288,"lastLoadDate":1015},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-14 19:09:11.07001+03, language => en, id => 37, deleted => false }, { password => uid9, name => uid9, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-11 20:36:09.090394+03, language =>   , id => 9, deleted => false }, { password => uid32, name => uid32, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476271969,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 14:32:48.215636+03, language => en, id => 32, deleted => false }, { password => uid27, name => uid27, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476269621,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:53:40.789776+03, language => en, id => 27, deleted => false }, { password => uid10, name => uid10, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 11:12:48.168059+03, language =>   , id => 10, deleted => false }, { password => uid11, name => uid11, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:33:27.3109+03, language =>   , id => 11, deleted => false }, { password => uid12, name => uid12, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:47:26.670465+03, language =>   , id => 12, deleted => false }, { password => uid13, name => uid13, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:51:08.341292+03, language =>   , id => 13, deleted => false }, { password => uid14, name => uid14, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:53:34.360658+03, language =>   , id => 14, deleted => false }, { password => uid15, name => uid15, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:55:14.160619+03, language =>   , id => 15, deleted => false }, { password => uid28, name => uid28, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476269710,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:55:09.527211+03, language => en, id => 28, deleted => false }, { password => uid16, name => uid16, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 12:59:18.86185+03, language =>   , id => 16, deleted => false }, { password => test, name => test2, networkid => , params => {"attrs":{"_lastTime.24hr":1476808882,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, id => 3, deleted => false }, { password => test, name => test11, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 12:18:04.647106+03, language =>   , id => 39, deleted => false }, { password => uid29, name => uid29, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476271397,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 14:23:17.10609+03, language => en, id => 29, deleted => false }, { password => uid17, name => uid17, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:07:15.262858+03, language =>   , id => 17, deleted => false }, { password => uid18, name => uid18, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:10:03.885555+03, language =>   , id => 18, deleted => false }, { password => uid19, name => uid19, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:11:41.868111+03, language =>   , id => 19, deleted => false }, { password => uid20, name => uid20, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:13:57.605493+03, language =>   , id => 20, deleted => false }, { password => uid21, name => uid21, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:16:21.670662+03, language =>   , id => 21, deleted => false }, { password => uid22, name => uid22, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:18:13.422519+03, language =>   , id => 22, deleted => false }, { password => uid23, name => uid23, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 13:33:08.78413+03, language =>   , id => 23, deleted => false }, { password => uid34, name => uid34, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476437991,"lastLoginDate":288,"lastLoadDate":1015},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-14 12:39:51.725362+03, language => en, id => 34, deleted => false }, { password => uid30, name => uid30, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476271613,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 14:26:51.842745+03, language => en, id => 30, deleted => false }, { password => test, name => test12, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 12:21:55.316231+03, language =>   , id => 40, deleted => false }, { password => uid31, name => uid31, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476271703,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 14:28:22.51548+03, language => en, id => 31, deleted => false }, { password => uid35, name => uid35, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476458014,"lastLoginDate":288,"lastLoadDate":1015},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-14 18:13:33.360887+03, language => en, id => 35, deleted => false }, { password => uid33, name => uid33, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476272110,"lastLoginDate":286,"lastLoadDate":1013},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-12 14:35:09.155569+03, language => en, id => 33, deleted => false }, { password => test, name => test13, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 12:30:08.433611+03, language =>   , id => 41, deleted => false }, { password => uid38, name => uid38, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476782075,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 12:14:32.809+03, language => en, id => 38, deleted => false }, { password => test, name => test14, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 12:31:52.285659+03, language =>   , id => 42, deleted => false }, { password => test, name => test15, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 12:40:42.354135+03, language =>   , id => 43, deleted => false }, { password => , name => --- DEFAULT ATTRIBUTES ---, networkid => , params => {"inventory":{"list":[]},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:45:16.008574+03, language =>   , id => 1, deleted => false }, { password => uid36, name => uid36, networkid => , params => {"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476789639,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-14 18:14:45.120358+03, language => en, id => 36, deleted => false }, { password => uid45, name => uid45, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476793290,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 15:21:30.078736+03, language => en, id => 45, deleted => false }, { password => uid46, name => uid46, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476793424,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 15:23:44.261533+03, language => en, id => 46, deleted => false }, { password => uid47, name => uid47, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476793513,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 15:25:12.83212+03, language => en, id => 47, deleted => false }, { password => test, name => test4, networkid => , params => {"attrs":{"_lastTime.24hr":1476809210,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:48:11.728197+03, language => en, id => 5, deleted => false }, { password => test, name => test1, networkid => , params => {"attrs":{"_lastTime.24hr":1477308461,"lastLoginDate":298,"lastLoadDate":1025},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, id => 2, deleted => false }, { password => uid64, name => uid64, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476877181,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 14:39:41.700061+03, language => en, id => 64, deleted => false }, { password => uid58, name => uid58, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476809753,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:55:53.508049+03, language => en, id => 58, deleted => false }, { password => uid48, name => uid48, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476807085,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:11:25.882545+03, language => en, id => 48, deleted => false }, { password => uid49, name => uid49, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476807618,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:20:16.265259+03, language => en, id => 49, deleted => false }, { password => uid50, name => uid50, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476807854,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:24:12.892256+03, language => en, id => 50, deleted => false }, { password => uid59, name => uid59, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476809815,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:56:55.344336+03, language => en, id => 59, deleted => false }, { password => uid51, name => uid51, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476808189,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:29:47.381194+03, language => en, id => 51, deleted => false }, { password => uid52, name => uid52, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476808378,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:32:58.719756+03, language => en, id => 52, deleted => false }, { password => uid53, name => uid53, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476808795,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:39:54.973899+03, language => en, id => 53, deleted => false }, { password => uid54, name => uid54, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476808869,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:41:09.113701+03, language => en, id => 54, deleted => false }, { password => uid67, name => uid67, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476886636,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 17:17:16.853975+03, language => en, id => 67, deleted => false }, { password => uid55, name => uid55, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476809185,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:46:25.229927+03, language => en, id => 55, deleted => false }, { password => uid65, name => uid65, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476879545,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 15:19:05.058893+03, language => en, id => 65, deleted => false }, { password => uid60, name => uid60, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476809868,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:57:48.24719+03, language => en, id => 60, deleted => false }, { password => uid56, name => uid56, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476809466,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:51:06.257024+03, language => en, id => 56, deleted => false }, { password => uid57, name => uid57, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476809529,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 19:52:09.241918+03, language => en, id => 57, deleted => false }, { password => uid61, name => uid61, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476810127,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 20:02:07.43066+03, language => en, id => 61, deleted => false }, { password => uid62, name => uid62, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476810165,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 20:02:45.274383+03, language => en, id => 62, deleted => false }, { password => qweqwe, name => asdasd, networkid => , params => {"info":{"city":"Dsadasd","year":"1231","email":"asdasdas"},"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 17:53:08.822508+03, language =>   , id => 69, deleted => false }, { password => uid66, name => uid66, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476882998,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 16:16:38.334095+03, language => en, id => 66, deleted => false }, { password => uid63, name => uid63, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476810879,"lastLoginDate":292,"lastLoadDate":1019},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 20:14:39.877987+03, language => en, id => 63, deleted => false }, { password => uid73, name => uid73, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476889025,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 17:57:04.529542+03, language => en, id => 73, deleted => false }, { password => uid71, name => uid71, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476888930,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 17:55:29.621522+03, language => en, id => 71, deleted => false }, { password => uid68, name => uid68, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476888788,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 17:53:08.78775+03, language => en, id => 68, deleted => false }, { password => 123123, name => 123123, networkid => , params => {"info":{"city":"Weqwe","year":"1231","email":"123123"},"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 17:54:22.233721+03, language =>   , id => 70, deleted => false }, { password => qweqwe, name => 1qweqwe, networkid => , params => {"info":{"city":"Qweqwe","year":"1231","email":"qweqwe"},"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 17:56:17.221331+03, language =>   , id => 72, deleted => false }, { password => 123123, name => 123qwe, networkid => , params => {"info":{"city":"Wqe","year":"1233","email":"123qwe"},"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 17:59:29.773441+03, language =>   , id => 74, deleted => false }, { password => uid75, name => uid75, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476889477,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 18:04:35.916538+03, language => en, id => 75, deleted => false }, { password => test, name => test16, networkid => , params => {"info":{"city":"kazan"},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476890115,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-18 12:43:02.694689+03, language => en, id => 44, deleted => false }, { password => uid77, name => uid77, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476889607,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 18:06:46.41184+03, language => en, id => 77, deleted => false }, { password => 123456, name => test20, networkid => , params => {"info":{"city":"Weqwe","year":"1231","email":"123"},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477646178,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 12:16:18.03489+03, language => en, id => 96, deleted => false }, { password => uid78, name => uid78, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476890199,"lastLoginDate":293,"lastLoadDate":1020},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 18:16:37.399803+03, language => en, id => 78, deleted => false }, { password => uid83, name => uid83, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476961590,"lastLoginDate":294,"lastLoadDate":1021},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 14:06:28.765885+03, language => en, id => 83, deleted => false }, { password => uid79, name => uid79, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476959779,"lastLoginDate":294,"lastLoadDate":1021},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 13:36:18.869521+03, language => en, id => 79, deleted => false }, { password => uid89, name => uid89, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477308423,"lastLoginDate":298,"lastLoadDate":1025},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-24 14:26:57.401644+03, language => en, id => 89, deleted => false }, { password => uid84, name => uid84, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476961768,"lastLoginDate":294,"lastLoadDate":1021},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 14:09:27.02443+03, language => en, id => 84, deleted => false }, { password => uid102, name => uid102, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477660100,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:08:15.479957+03, language => en, id => 102, deleted => false }, { password => uid80, name => uid80, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476960874,"lastLoginDate":294,"lastLoadDate":1021},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 13:54:32.93048+03, language => en, id => 80, deleted => false }, { password => uid81, name => uid81, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476961061,"lastLoginDate":294,"lastLoadDate":1021},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 13:57:40.114003+03, language => en, id => 81, deleted => false }, { password => uid85, name => uid85, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476962319,"lastLoginDate":294,"lastLoadDate":1021},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 14:18:38.418977+03, language => en, id => 85, deleted => false }, { password => 123123, name => Tester, networkid => , params => {"info":{"city":"Dsda","year":"1231","email":"123123"},"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 14:58:49.229528+03, language =>   , id => 86, deleted => false }, { password => qweqwe, name => Acterix, networkid => , params => {"info":{"city":"Weqwe","year":"2312","email":"eqwe123"},"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-25 15:39:29.554557+03, language =>   , id => 90, deleted => false }, { password => uid91, name => uid91, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477399413,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-25 15:43:32.477232+03, language => en, id => 91, deleted => false }, { password => uid82, name => uid82, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476961257,"lastLoginDate":294,"lastLoadDate":1021},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 14:00:56.513148+03, language => en, id => 82, deleted => false }, { password => uid87, name => uid87, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1476968972,"lastLoginDate":294,"lastLoadDate":1021},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-20 16:09:31.194602+03, language => en, id => 87, deleted => false }, { password => uid88, name => uid88, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477049264,"lastLoginDate":295,"lastLoadDate":1022},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-21 14:27:43.099186+03, language => en, id => 88, deleted => false }, { password => 123456, name => test17, networkid => , params => {"info":{"city":"","year":"","email":"asda"},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477399457,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-25 15:44:17.274208+03, language => en, id => 92, deleted => false }, { password => uid95, name => uid95, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477489312,"lastLoginDate":300,"lastLoadDate":1027},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, id => 95, deleted => false }, { password => uid93, name => uid93, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477400907,"lastLoginDate":299,"lastLoadDate":1026},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-25 16:08:27.066262+03, language => en, id => 93, deleted => false }, { password => uid94, name => uid94, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477655031,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, id => 94, deleted => false }, { password => kO2YJdf, name => Aimer, networkid => , params => {"info":{"city":"Kazan","year":"1993","email":"rabpoll1@ya.ru"},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477646117,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, id => 76, deleted => false }, { password => uid98, name => uid98, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477659590,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 15:59:47.355767+03, language => en, id => 98, deleted => false }, { password => uid97, name => uid97, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477647307,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 12:35:05.771011+03, language => en, id => 97, deleted => false }, { password => uid99, name => uid99, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477659641,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:00:39.9083+03, language => en, id => 99, deleted => false }, { password => uid103, name => uid103, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477660355,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:12:35.388519+03, language => en, id => 103, deleted => false }, { password => qwerty, name => nelli8, networkid => , params => {"info":{"city":"Kazan","year":"","email":"nlqbunskaha@mail.ru"},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477750390,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:03:03.386319+03, language => en, id => 101, deleted => false }, { password => uid105, name => uid105, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477661095,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:24:51.972524+03, language => en, id => 105, deleted => false }, { password => test, name => test67, networkid => , params => {"info":{"city":"","year":"","email":""},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477750490,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:02:55.698999+03, language => en, id => 100, deleted => false }, { password => uid106, name => uid106, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477661732,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:35:25.243155+03, language => en, id => 106, deleted => false }, { password => qwerty, name => qwerty, networkid => , params => {"info":{"city":"Qwety","year":"123","email":"qwrtty"},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477748645,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:12:35.945256+03, language => en, id => 104, deleted => false }, { password => uid108, name => uid108, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477661911,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:38:24.62117+03, language => en, id => 108, deleted => false }, { password => uid109, name => uid109, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477661920,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:38:37.423978+03, language => en, id => 109, deleted => false }, { password => uid111, name => uid111, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477662049,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:40:47.262501+03, language => en, id => 111, deleted => false }, { password => ass12, name => ass12, networkid => , params => {"info":{"city":"","year":"","email":""},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477661977,"lastLoginDate":302,"lastLoadDate":1029},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:39:37.381394+03, language => en, id => 110, deleted => false }, { password => uid112, name => uid112, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477747925,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-29 16:31:59.278542+03, language => en, id => 112, deleted => false }, { password => uid113, name => uid113, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1477750380,"lastLoginDate":303,"lastLoadDate":1030},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-29 17:12:53.911759+03, language => en, id => 113, deleted => false }, { password => uid115, name => uid115, networkid => , params => {"attrs":{"_lastTime.24hr":1478188735,"lastLoginDate":308,"lastLoadDate":1104},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-11-03 18:37:16.527174+03, language => en, id => 115, deleted => false }, { password => uid116, name => uid116, networkid => , params => {"attrs":{"_lastTime.24hr":1478199280,"lastLoginDate":308,"lastLoadDate":1104},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-11-03 21:26:31.138113+03, language => en, id => 116, deleted => false }, { password => uid114, name => uid114, networkid => , params => {"attrs":{"_lastTime.24hr":1478182566,"lastLoginDate":308,"lastLoadDate":1104},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-11-03 17:12:46.234491+03, language => en, id => 114, deleted => false }, { password => uid107, name => uid107, networkid => , params => {"info":{"city":null,"year":null,"email":null},"inventory":{"list":[]},"vars":{},"attrs":{"_lastTime.24hr":1478178267,"lastLoginDate":308,"lastLoadDate":1104},"effects":{"list":[]}}, networktype =>   , email => , isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, id => 107, deleted => false }}, errorCode => ok, _type => core/server.query }
03.11 23:52:14 == NET: null ret: user.auth { type => user.auth, token => dWlkMTE3 }
03.11 23:52:14 DB: SELECT ID FROM Users WHERE Name = E'uid117'
03.11 23:52:14 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid117', _type => core/server.query }
03.11 23:52:14 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
03.11 23:52:14 DB: SELECT nextval('Users_id_seq') AS id
03.11 23:52:14 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
03.11 23:52:14 -<<-: core/server.query { list => {{ id => 117 }}, errorCode => ok, _type => core/server.query }
03.11 23:52:14 ->>-: core/user.register { password => uid117, name => uid117, fullParams => { password => uid117, name => uid117, networkid => , networktype => , messageType => user.register, id => 117 }, networkid => , connectionID => 43882953, networktype => , email => , id => 117, _type => core/user.register }
03.11 23:52:14 -<<-: core/user.register { errorCode => ok, _type => core/user.register }
03.11 23:52:14 -<<-: core/user.registerResponse { password => uid117, name => uid117, _isNotify => true, fullParams => { password => uid117, name => uid117, networkid => , networktype => , messageType => user.register, id => 117 }, networkid => , connectionID => 43882953, networktype => , email => , id => 117, _type => core/user.registerResponse }
03.11 23:52:14 == NET: null ret: user.register { type => user.register, errorCode => ok }
03.11 23:52:15 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:52:15 TIME: user.ping 0.08 ms
03.11 23:52:15 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:52:16 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE3 }
03.11 23:52:16 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid117' AND Password = E'uid117'
03.11 23:52:16 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid117' AND Password = E'uid117', _type => core/server.query }
03.11 23:52:16 -<<-: core/server.query { list => {{ name => uid117, networkid => , isbanned => false, id => 117 }}, errorCode => ok, _type => core/server.query }
03.11 23:52:16 ->>-: core/user.isOnlineID { id => 117, _type => core/user.isOnlineID }
03.11 23:52:16 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 23:52:16 ->>-: core/cache.get { type => user, v => -1, id => 117, _type => core/cache.get }
03.11 23:52:16 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid117, deleted => false, email => null, year => null, networktype =>   , password => uid117, isbanned => false, regdate => 2016-11-03 23:52:14.286671+03, language =>   , city => , networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => {}, effects => { list => [] } }}, version => 4, id => 117 } }
03.11 23:52:16 ->>-: core/cache.get { type => questdata, v => -1, id => 117, _type => core/cache.get }
03.11 23:52:16 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 117 } }
03.11 23:52:16 NET: Client login (conid:43882953, id:117, name:uid117)
03.11 23:52:16 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 117, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 23:52:16 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 23:52:16 DB: SELECT ID FROM TempUserLogins WHERE UserID = 117 AND Date = 'today'::timestamp
03.11 23:52:16 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 117 AND Date = 'today'::timestamp, _type => core/server.query }
03.11 23:52:16 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
03.11 23:52:16 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (117, 'today'::timestamp)
03.11 23:52:16 == NET: uid117 ret: user.login { name => uid117, type => user.login, errorCode => ok, id => 117 }
03.11 23:52:16 == NET: null ret: user.join { name => uid117, type => user.join }
03.11 23:52:16 == NET: uid107 ret: user.join { name => uid117, type => user.join }
03.11 23:52:16 ++ NET: uid117 req: user.login { messageType => user.login, token => dWlkMTE3 }
03.11 23:52:16 TRACE: User already logon.
03.11 23:52:16 TRACE: 
Called from snipe/slave/Server.hx line 870
Called from snipe/slave/Server.hx line 1124
03.11 23:52:16 == NET: uid117 ret: user.join { name => null, type => user.join }
03.11 23:52:16 == NET: uid116 ret: user.join { name => uid117, type => user.join }
03.11 23:52:16 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1478206336, lastLoginDate => 308, lastLoadDate => 1104 } }}, type => user, unlock => true, id => 117, _type => core/cache.update, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (117, 'today'::timestamp), _type => core/server.pending }} }
03.11 23:52:16 == NET: uid117 ret: user.join { name => uid116, type => user.join }
03.11 23:52:16 == NET: uid117 ret: user.join { name => uid107, type => user.join }
03.11 23:52:16 == NET: uid117 ret: user.join { name => uid117, type => user.join }
03.11 23:52:16 -<<-: core/cache.update { errorCode => ok, version => 5, _type => core/cache.update }
03.11 23:52:16 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 117, _type => core/cache.update }
03.11 23:52:16 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:52:16 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 117, _type => core/user.logoutPost }
03.11 23:52:16 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 23:52:16 TRACE: Could not login.
03.11 23:52:16 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
03.11 23:52:20 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:52:20 TIME: user.ping 0.08 ms
03.11 23:52:20 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:52:21 NET: Client (name:uid117 conid:43882953 TCP) disconnected from vdl.0 (clients:3)
03.11 23:52:21 DB: SELECT id FROM battle WHERE firstid=117 OR secondid=117 AND finished <> true
03.11 23:52:21 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=117 OR secondid=117 AND finished <> true, _type => core/server.query }
03.11 23:52:21 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
03.11 23:52:21 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
03.11 23:52:21 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
03.11 23:52:21 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
03.11 23:52:21 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 418
Called from modules/VDLBattleModule.hx line 431
Called from snipe/slave/Server.hx line 994
03.11 23:52:21 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 117, _type => core/cache.update }
03.11 23:52:21 -<<-: core/cache.update { errorCode => mustBeLocked, version => 0, _type => core/cache.update }
03.11 23:52:21 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 117, _type => core/cache.update }
03.11 23:52:21 -<<-: core/cache.update { errorCode => mustBeLocked, version => 0, _type => core/cache.update }
03.11 23:52:21 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 117, _type => core/user.logoutPost }
03.11 23:52:21 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 23:52:21 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:52:21 TRACE: User not logon yet.
03.11 23:52:27 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:52:27 TIME: user.ping 0.11 ms
03.11 23:52:27 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:52:28 TIMER: Check auto-disconnect...
03.11 23:52:28 STATS: vdl.0 cache, locks:4
03.11 23:52:29 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:52:29 TRACE: User not logon yet.
03.11 23:52:36 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:52:36 TRACE: User not logon yet.
03.11 23:52:39 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:52:39 TIME: user.ping 0.09 ms
03.11 23:52:39 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:52:44 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:52:44 TRACE: User not logon yet.
03.11 23:52:44 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:52:44 TIME: user.ping 0.07 ms
03.11 23:52:44 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:52:51 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:52:51 TRACE: User not logon yet.
03.11 23:52:58 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:52:58 TRACE: User not logon yet.
03.11 23:53:06 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:53:06 TRACE: User not logon yet.
03.11 23:53:09 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:53:09 TIME: user.ping 0.1 ms
03.11 23:53:09 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:53:13 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:53:13 TRACE: User not logon yet.
03.11 23:53:20 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:53:20 TRACE: User not logon yet.
03.11 23:53:26 NET: Client (name:uid107 conid:79190414 TCP) disconnected from vdl.0 (clients:2)
03.11 23:53:26 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
03.11 23:53:26 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
03.11 23:53:26 -<<-: core/server.query { list => {{ id => 9 }, { id => 11 }, { id => 12 }, { id => 15 }, { id => 17 }, { id => 18 }, { id => 20 }, { id => 21 }}, errorCode => ok, _type => core/server.query }
03.11 23:53:26 STATS: vdl.0 cache connection, 54 calls, total 0.109167337417603 sec spent, avg 2.02 ms
03.11 23:53:26 ->>-: vdl/cache.battle.infoRoom { roomId => 21, _type => vdl/cache.battle.infoRoom }
03.11 23:53:26 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
03.11 23:53:26 ->>-: vdl/cache.battle.finishRoom { roomId => 21, _type => vdl/cache.battle.finishRoom }
03.11 23:53:26 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
03.11 23:53:26 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
03.11 23:53:26 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
03.11 23:53:26 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
03.11 23:53:26 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:53:26 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
03.11 23:53:26 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 23:53:26 == NET: uid116 ret: battle.end { type => battle.end }
03.11 23:53:28 TIMER: Check auto-disconnect...
03.11 23:53:28 STATS: vdl.0 cache, locks:2
03.11 23:53:28 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:53:28 TRACE: User not logon yet.
03.11 23:53:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:53:35 TRACE: User not logon yet.
03.11 23:53:37 NET: Client (name:uid116 conid:91578165 TCP) disconnected from vdl.0 (clients:1)
03.11 23:53:37 DB: SELECT id FROM battle WHERE firstid=116 OR secondid=116 AND finished <> true
03.11 23:53:37 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=116 OR secondid=116 AND finished <> true, _type => core/server.query }
03.11 23:53:37 -<<-: core/server.query { list => {{ id => 10 }, { id => 12 }, { id => 13 }, { id => 14 }, { id => 16 }, { id => 17 }, { id => 18 }, { id => 19 }, { id => 20 }}, errorCode => ok, _type => core/server.query }
03.11 23:53:37 ->>-: vdl/cache.battle.infoRoom { roomId => 20, _type => vdl/cache.battle.infoRoom }
03.11 23:53:37 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
03.11 23:53:37 ->>-: vdl/cache.battle.finishRoom { roomId => 20, _type => vdl/cache.battle.finishRoom }
03.11 23:53:37 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
03.11 23:53:37 ->>-: core/user.sendTo { id => 107, _type => core/user.sendTo, msg => { _type => battle.end } }
03.11 23:53:37 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
03.11 23:53:37 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 116, _type => core/cache.update }
03.11 23:53:37 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
03.11 23:53:37 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 116, _type => core/cache.update }
03.11 23:53:37 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:53:37 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 116, _type => core/user.logoutPost }
03.11 23:53:37 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 23:53:43 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:53:43 TRACE: User not logon yet.
03.11 23:53:48 NET: Client (conid:5528731) connected to vdl.0 (clients:2)
03.11 23:53:49 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 23:53:49 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 23:53:49 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 23:53:49 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
03.11 23:53:49 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 23:53:49 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 23:53:49 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 23:53:49 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1478178267, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 107 } }
03.11 23:53:49 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 23:53:49 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
03.11 23:53:49 NET: Client login (conid:5528731, id:107, name:uid107)
03.11 23:53:49 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 23:53:49 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 23:53:49 == NET: null ret: user.join { name => uid107, type => user.join }
03.11 23:53:49 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 23:53:49 == NET: uid107 ret: user.join { name => null, type => user.join }
03.11 23:53:49 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 23:53:50 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:53:50 TRACE: User not logon yet.
03.11 23:53:53 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:53:53 TIME: user.ping 0.15 ms
03.11 23:53:53 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:53:58 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:53:58 TRACE: User not logon yet.
03.11 23:53:58 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 23:53:58 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:54:02 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:54:02 TIME: user.ping 0.09 ms
03.11 23:54:02 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:54:02 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 23:54:02 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 107 }, _type => vdl/cache.battle.findRandom }
03.11 23:54:02 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 23:54:02 TIME: battle.find 0.22 ms
03.11 23:54:02 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
03.11 23:54:02 NET: Client (conid:55323294) connected to vdl.0 (clients:3)
03.11 23:54:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:54:05 TRACE: User not logon yet.
03.11 23:54:05 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE2 }
03.11 23:54:05 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116'
03.11 23:54:05 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116', _type => core/server.query }
03.11 23:54:05 -<<-: core/server.query { list => {{ name => uid116, networkid => , isbanned => false, id => 116 }}, errorCode => ok, _type => core/server.query }
03.11 23:54:05 ->>-: core/user.isOnlineID { id => 116, _type => core/user.isOnlineID }
03.11 23:54:05 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 23:54:05 ->>-: core/cache.get { type => user, v => -1, id => 116, _type => core/cache.get }
03.11 23:54:05 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid116, deleted => false, email => , networktype =>   , password => uid116, isbanned => false, regdate => 2016-11-03 21:26:31.138113+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1478199280, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 116 } }
03.11 23:54:05 ->>-: core/cache.get { type => questdata, v => -1, id => 116, _type => core/cache.get }
03.11 23:54:05 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 116 } }
03.11 23:54:05 NET: Client login (conid:55323294, id:116, name:uid116)
03.11 23:54:05 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 116, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
03.11 23:54:05 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 23:54:05 == NET: uid116 ret: user.login { name => uid116, type => user.login, errorCode => ok, id => 116 }
03.11 23:54:05 == NET: null ret: user.join { name => uid116, type => user.join }
03.11 23:54:05 == NET: uid116 ret: user.join { name => null, type => user.join }
03.11 23:54:05 == NET: uid107 ret: user.join { name => uid116, type => user.join }
03.11 23:54:05 == NET: uid116 ret: user.join { name => uid107, type => user.join }
03.11 23:54:05 == NET: uid116 ret: user.join { name => uid116, type => user.join }
03.11 23:54:12 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:54:12 TRACE: User not logon yet.
03.11 23:54:13 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 116, _type => core/cache.update }
03.11 23:54:13 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:54:14 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:54:14 TIME: user.ping 0.09 ms
03.11 23:54:14 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:54:18 ++ NET: uid116 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 23:54:18 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 116 }, _type => vdl/cache.battle.findRandom }
03.11 23:54:18 -<<-: battle.enemyEvent { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 2, battleId => 22, player => 1 }, _isNotify => true, id => 116, _type => battle.enemyEvent }
03.11 23:54:18 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 1, battleId => 22, player => 2 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
03.11 23:54:18 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 23:54:18 TIME: battle.find 37.9 ms
03.11 23:54:18 == NET: uid116 ret: battle.find { type => battle.find, errorCode => ok }
03.11 23:54:18 == NET: uid116 ret: battle.enemy { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 2, battleId => 22, player => 1 }, type => battle.enemy }
03.11 23:54:18 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 1, battleId => 22, player => 2 }, type => battle.enemy }
03.11 23:54:20 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:54:20 TRACE: User not logon yet.
03.11 23:54:20 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:54:20 TIME: user.ping 0.08 ms
03.11 23:54:20 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:54:26 ++ NET: uid116 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 22 }
03.11 23:54:26 ->>-: vdl/cache.battle.infoRoom { roomId => 22, _type => vdl/cache.battle.infoRoom }
03.11 23:54:26 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
03.11 23:54:26 STATS: vdl.0 cache connection, 81 calls, total 0.161391735076904 sec spent, avg 1.99 ms
03.11 23:54:26 TIME: battle.sendtask 0.67 ms
03.11 23:54:26 == NET: uid116 ret: battle.sendtask { name => throw, type => battle.sendtask, dices => [4,4,1,5,0,1], errorCode => ok, _type => battle.task }
03.11 23:54:26 == NET: uid116 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
03.11 23:54:26 == NET: uid107 ret: battle.task { name => throw, type => battle.task, dices => [4,4,1,5,0,1], errorCode => ok }
03.11 23:54:27 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:54:27 TIME: user.ping 0.1 ms
03.11 23:54:27 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:54:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:54:27 TRACE: User not logon yet.
03.11 23:54:28 TIMER: Check auto-disconnect...
03.11 23:54:28 STATS: vdl.0 cache, locks:4
03.11 23:54:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:54:35 TRACE: User not logon yet.
03.11 23:54:37 ++ NET: uid116 req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 22 }
03.11 23:54:37 ->>-: vdl/cache.battle.infoRoom { roomId => 22, _type => vdl/cache.battle.infoRoom }
03.11 23:54:37 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
03.11 23:54:37 TIME: battle.sendtask 1.56 ms
03.11 23:54:37 == NET: uid116 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,5,5,5,5,10,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [4,4,1,5,1], errorCode => cannotSwap }
03.11 23:54:39 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:54:39 TIME: user.ping 0.08 ms
03.11 23:54:39 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:54:42 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:54:42 TRACE: User not logon yet.
03.11 23:54:43 NET: Client (name:uid107 conid:5528731 TCP) disconnected from vdl.0 (clients:2)
03.11 23:54:43 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
03.11 23:54:43 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
03.11 23:54:43 -<<-: core/server.query { list => {{ id => 9 }, { id => 11 }, { id => 12 }, { id => 15 }, { id => 17 }, { id => 18 }, { id => 21 }, { id => 22 }}, errorCode => ok, _type => core/server.query }
03.11 23:54:43 ->>-: vdl/cache.battle.infoRoom { roomId => 22, _type => vdl/cache.battle.infoRoom }
03.11 23:54:43 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
03.11 23:54:43 ->>-: vdl/cache.battle.finishRoom { roomId => 22, _type => vdl/cache.battle.finishRoom }
03.11 23:54:43 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
03.11 23:54:43 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
03.11 23:54:43 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
03.11 23:54:43 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
03.11 23:54:43 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:54:43 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
03.11 23:54:43 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 23:54:43 == NET: uid116 ret: battle.end { type => battle.end }
03.11 23:54:45 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:54:45 TIME: user.ping 0.09 ms
03.11 23:54:45 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:54:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:54:49 TRACE: User not logon yet.
03.11 23:54:50 NET: Client (name:uid116 conid:55323294 TCP) disconnected from vdl.0 (clients:1)
03.11 23:54:50 DB: SELECT id FROM battle WHERE firstid=116 OR secondid=116 AND finished <> true
03.11 23:54:50 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=116 OR secondid=116 AND finished <> true, _type => core/server.query }
03.11 23:54:50 -<<-: core/server.query { list => {{ id => 10 }, { id => 12 }, { id => 13 }, { id => 14 }, { id => 16 }, { id => 17 }, { id => 18 }, { id => 19 }, { id => 20 }, { id => 22 }}, errorCode => ok, _type => core/server.query }
03.11 23:54:50 ->>-: vdl/cache.battle.infoRoom { roomId => 22, _type => vdl/cache.battle.infoRoom }
03.11 23:54:50 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 116, _type => vdl/cache.battle.infoRoom, turnId => 116 }
03.11 23:54:50 ->>-: vdl/cache.battle.finishRoom { roomId => 22, _type => vdl/cache.battle.finishRoom }
03.11 23:54:50 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
03.11 23:54:50 ->>-: core/user.sendTo { id => 107, _type => core/user.sendTo, msg => { _type => battle.end } }
03.11 23:54:50 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
03.11 23:54:50 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 116, _type => core/cache.update }
03.11 23:54:50 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
03.11 23:54:50 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 116, _type => core/cache.update }
03.11 23:54:50 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:54:50 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 116, _type => core/user.logoutPost }
03.11 23:54:50 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 23:54:57 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:54:57 TRACE: User not logon yet.
03.11 23:55:00 NET: Client (conid:12648290) connected to vdl.0 (clients:2)
03.11 23:55:00 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 23:55:00 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 23:55:00 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 23:55:00 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
03.11 23:55:00 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 23:55:00 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 23:55:00 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 23:55:00 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1478178267, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 107 } }
03.11 23:55:00 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 23:55:00 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
03.11 23:55:00 NET: Client login (conid:12648290, id:107, name:uid107)
03.11 23:55:00 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 23:55:00 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 23:55:00 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 23:55:00 == NET: uid107 ret: user.join { name => null, type => user.join }
03.11 23:55:00 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 23:55:00 == NET: null ret: user.join { name => uid107, type => user.join }
03.11 23:55:04 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:55:04 TRACE: User not logon yet.
03.11 23:55:04 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:55:04 TIME: user.ping 0.09 ms
03.11 23:55:04 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:55:08 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 23:55:08 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:55:12 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:55:12 TRACE: User not logon yet.
03.11 23:55:12 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:55:12 TIME: user.ping 0.08 ms
03.11 23:55:12 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:55:13 NET: Client (conid:75715697) connected to vdl.0 (clients:3)
03.11 23:55:16 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE2 }
03.11 23:55:16 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116'
03.11 23:55:16 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid116' AND Password = E'uid116', _type => core/server.query }
03.11 23:55:16 -<<-: core/server.query { list => {{ name => uid116, networkid => , isbanned => false, id => 116 }}, errorCode => ok, _type => core/server.query }
03.11 23:55:16 ->>-: core/user.isOnlineID { id => 116, _type => core/user.isOnlineID }
03.11 23:55:16 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 23:55:16 ->>-: core/cache.get { type => user, v => -1, id => 116, _type => core/cache.get }
03.11 23:55:16 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid116, deleted => false, email => , networktype =>   , password => uid116, isbanned => false, regdate => 2016-11-03 21:26:31.138113+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1478199280, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 116 } }
03.11 23:55:16 ->>-: core/cache.get { type => questdata, v => -1, id => 116, _type => core/cache.get }
03.11 23:55:16 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 116 } }
03.11 23:55:16 NET: Client login (conid:75715697, id:116, name:uid116)
03.11 23:55:16 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 116, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
03.11 23:55:16 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 23:55:16 == NET: uid116 ret: user.login { name => uid116, type => user.login, errorCode => ok, id => 116 }
03.11 23:55:16 == NET: null ret: user.join { name => uid116, type => user.join }
03.11 23:55:16 == NET: uid107 ret: user.join { name => uid116, type => user.join }
03.11 23:55:16 == NET: uid116 ret: user.join { name => null, type => user.join }
03.11 23:55:16 == NET: uid116 ret: user.join { name => uid107, type => user.join }
03.11 23:55:16 == NET: uid116 ret: user.join { name => uid116, type => user.join }
03.11 23:55:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:55:19 TRACE: User not logon yet.
03.11 23:55:20 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:55:20 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:55:20 TIME: user.ping 0.12 ms
03.11 23:55:23 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 116, _type => core/cache.update }
03.11 23:55:23 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 23:55:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:55:26 TRACE: User not logon yet.
03.11 23:55:28 TIMER: Check auto-disconnect...
03.11 23:55:28 STATS: vdl.0 cache, locks:4
03.11 23:55:28 ++ NET: uid116 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 23:55:28 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 116 }, _type => vdl/cache.battle.findRandom }
03.11 23:55:28 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 23:55:28 STATS: vdl.0 cache connection, 108 calls, total 0.178699731826782 sec spent, avg 1.65 ms
03.11 23:55:28 TIME: battle.find 0.31 ms
03.11 23:55:28 == NET: uid116 ret: battle.find { type => battle.find, errorCode => ok }
03.11 23:55:29 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:55:29 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:55:29 TIME: user.ping 0.1 ms
03.11 23:55:31 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:55:31 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:55:31 TIME: user.ping 0.08 ms
03.11 23:55:34 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:55:34 TRACE: User not logon yet.
03.11 23:55:36 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 23:55:36 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 107 }, _type => vdl/cache.battle.findRandom }
03.11 23:55:36 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 2, battleId => 23, player => 1 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
03.11 23:55:36 -<<-: battle.enemyEvent { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 1, battleId => 23, player => 2 }, _isNotify => true, id => 116, _type => battle.enemyEvent }
03.11 23:55:36 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 23:55:36 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
03.11 23:55:36 TIME: battle.find 21.39 ms
03.11 23:55:36 == NET: uid116 ret: battle.enemy { data => { name => uid116, enemy.id => 107, enemy.name => uid107, id => 116, enemy.num => 1, battleId => 23, player => 2 }, type => battle.enemy }
03.11 23:55:36 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 116, enemy.name => uid116, id => 107, enemy.num => 2, battleId => 23, player => 1 }, type => battle.enemy }
03.11 23:55:38 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:55:38 TIME: user.ping 0.13 ms
03.11 23:55:38 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:55:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:55:41 TRACE: User not logon yet.
03.11 23:55:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:55:49 TRACE: User not logon yet.
03.11 23:55:50 ++ NET: uid107 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 23 }
03.11 23:55:50 ->>-: vdl/cache.battle.infoRoom { roomId => 23, _type => vdl/cache.battle.infoRoom }
03.11 23:55:50 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
03.11 23:55:50 TIME: battle.sendtask 0.32 ms
03.11 23:55:50 == NET: uid107 ret: battle.sendtask { name => throw, type => battle.task, dices => [1,4,1,5,1,2], errorCode => ok }
03.11 23:55:50 == NET: uid116 ret: battle.task { name => throw, type => battle.task, dices => [1,4,1,5,1,2], errorCode => ok }
03.11 23:55:50 == NET: uid107 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
03.11 23:55:50 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:55:50 TIME: user.ping 0.12 ms
03.11 23:55:50 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:55:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:55:56 TRACE: User not logon yet.
03.11 23:55:57 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:55:57 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:55:57 TIME: user.ping 0.11 ms
03.11 23:55:58 ++ NET: uid107 req: battle.sendtask { dice => 5, from => [7,4], name => swap, side => 2, messageType => battle.sendtask, to => [8,4], battleId => 23 }
03.11 23:55:58 ->>-: vdl/cache.battle.infoRoom { roomId => 23, _type => vdl/cache.battle.infoRoom }
03.11 23:55:58 -<<-: vdl/cache.battle.infoRoom { secondId => 116, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
03.11 23:55:58 TIME: battle.sendtask 0.87 ms
03.11 23:55:58 == NET: uid107 ret: battle.sendtask { pole => [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,10,5,5,5,5,15,0,0],[0,0,5,10,5,5,15,5,0,0],[0,0,5,5,10,15,5,5,0,0],[0,0,5,5,15,10,5,5,0,0],[0,0,5,15,5,5,10,5,0,0],[0,0,15,5,5,5,5,10,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], type => battle.sendtask, dices => [1,4,1,1,2], errorCode => cannotSwap }
03.11 23:56:03 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:56:03 TIME: user.ping 0.08 ms
03.11 23:56:03 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:56:04 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:56:04 TRACE: User not logon yet.
03.11 23:56:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:56:11 TRACE: User not logon yet.
03.11 23:56:16 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:56:16 TIME: user.ping 0.11 ms
03.11 23:56:16 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:56:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:56:18 TRACE: User not logon yet.
03.11 23:56:21 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:56:21 TIME: user.ping 0.08 ms
03.11 23:56:21 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:56:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:56:26 TRACE: User not logon yet.
03.11 23:56:28 TIMER: Check auto-disconnect...
03.11 23:56:28 STATS: vdl.0 cache, locks:4
03.11 23:56:28 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:56:28 TIME: user.ping 0.08 ms
03.11 23:56:28 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:56:33 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:56:33 TRACE: User not logon yet.
03.11 23:56:40 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:56:40 TIME: user.ping 0.11 ms
03.11 23:56:40 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:56:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:56:41 TRACE: User not logon yet.
03.11 23:56:45 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:56:45 TIME: user.ping 0.13 ms
03.11 23:56:45 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:56:48 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:56:48 TRACE: User not logon yet.
03.11 23:56:52 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:56:52 TIME: user.ping 0.11 ms
03.11 23:56:52 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:56:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:56:56 TRACE: User not logon yet.
03.11 23:57:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:57:03 TRACE: User not logon yet.
03.11 23:57:04 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:57:04 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:57:04 TIME: user.ping 0.08 ms
03.11 23:57:09 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:57:09 TIME: user.ping 0.22 ms
03.11 23:57:09 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:57:10 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:57:10 TRACE: User not logon yet.
03.11 23:57:16 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:57:16 TIME: user.ping 0.07 ms
03.11 23:57:16 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:57:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:57:18 TRACE: User not logon yet.
03.11 23:57:25 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:57:25 TRACE: User not logon yet.
03.11 23:57:28 TIMER: Check auto-disconnect...
03.11 23:57:28 STATS: vdl.0 cache, locks:4
03.11 23:57:32 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:57:32 TRACE: User not logon yet.
03.11 23:57:34 ++ NET: uid116 req: user.ping { messageType => user.ping, msg => ok }
03.11 23:57:34 TIME: user.ping 0.31 ms
03.11 23:57:34 == NET: uid116 ret: user.ping { type => user.ping, errorCode => ok }
03.11 23:57:40 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:57:40 TRACE: User not logon yet.
03.11 23:58:03 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
03.11 23:58:03 -<<-: server.login ok
03.11 23:58:03 DB: SELECT * FROM LocalizationStrings
03.11 23:58:03 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:03 TIMER: Starting timer...
03.11 23:58:03 DB: SELECT * FROM GameVars
03.11 23:58:03 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
03.11 23:58:03 TIMER: Timer running...
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:03 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
03.11 23:58:03 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:03 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
03.11 23:58:03 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:03 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
03.11 23:58:03 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:03 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
03.11 23:58:03 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:03 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
03.11 23:58:03 -<<-: core/quest.getDaily ok
03.11 23:58:03 DB: SELECT * FROM UserAttributeTypes
03.11 23:58:03 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:03 DB: SELECT * FROM UserVariableTypes
03.11 23:58:03 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:03 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
03.11 23:58:03 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:03 DB: SELECT * FROM ItemGroups
03.11 23:58:03 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:03 DB: SELECT * FROM Bundles ORDER BY ID
03.11 23:58:03 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:03 DB: SELECT * FROM BundleItems ORDER BY ID
03.11 23:58:03 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:03 SHOP: loading items...
03.11 23:58:03 ->>-: core/shop.getList { _type => core/shop.getList }
03.11 23:58:03 -<<-: core/shop.getList ok
03.11 23:58:03 SHOP: 0 items loaded (0 sec)
03.11 23:58:03 DB: SELECT * FROM EffectAttributeTypes
03.11 23:58:03 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:03 DB: SELECT * FROM Effects
03.11 23:58:03 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:03 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
03.11 23:58:03 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:03 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
03.11 23:58:03 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:03 DB: SELECT * FROM Badges
03.11 23:58:03 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
03.11 23:58:03 -<<-: core/server.query ok
03.11 23:58:09 NET: Client (conid:82011342) connected to vdl.0 (clients:1)
03.11 23:58:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:58:11 TRACE: User not logon yet.
03.11 23:58:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:58:19 TRACE: User not logon yet.
03.11 23:58:22 NET: Client (conid:17303967) connected to vdl.0 (clients:2)
03.11 23:58:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:58:26 TRACE: User not logon yet.
03.11 23:58:29 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:58:29 TRACE: User not logon yet.
03.11 23:58:34 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:58:34 TRACE: User not logon yet.
03.11 23:58:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:58:41 TRACE: User not logon yet.
03.11 23:58:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:58:49 TRACE: User not logon yet.
03.11 23:58:53 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:58:53 TRACE: User not logon yet.
03.11 23:58:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:58:56 TRACE: User not logon yet.
03.11 23:59:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:59:03 TRACE: User not logon yet.
03.11 23:59:03 TIMER: Check auto-disconnect...
03.11 23:59:04 STATS: vdl.0 cache, locks:0
03.11 23:59:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:59:11 TRACE: User not logon yet.
03.11 23:59:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:59:18 TRACE: User not logon yet.
03.11 23:59:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:59:18 TRACE: User not logon yet.
03.11 23:59:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:59:26 TRACE: User not logon yet.
03.11 23:59:33 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:59:33 TRACE: User not logon yet.
03.11 23:59:40 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:59:40 TRACE: User not logon yet.
03.11 23:59:42 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:59:42 TRACE: User not logon yet.
03.11 23:59:48 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:59:48 TRACE: User not logon yet.
03.11 23:59:55 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 23:59:55 TRACE: User not logon yet.
