25.10 19:00:02 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 2, messageType => tournament.grid }
25.10 19:00:02 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 19:00:02 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
25.10 19:00:02 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 19:00:02 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 95, round => 1, player1 => 94, player2 => 95 },{ winner => -1, round => 2, player1 => 95, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:00:02 TIME: tournament.grid 1.08 ms
25.10 19:00:02 == NET: uid95 ret: tournament.grid { list => [{ winner => 95, round => 1, player1 => 94, player2 => 95 },{ winner => -1, round => 2, player1 => 95, player2 => 95 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:00:04 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:00:04 TIME: user.ping 0.12 ms
25.10 19:00:04 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:00:06 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:00:06 TIME: user.ping 0.17 ms
25.10 19:00:06 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:00:16 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:00:16 TIME: user.ping 0.19 ms
25.10 19:00:16 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:00:26 TIMER: Check auto-disconnect...
25.10 19:00:26 STATS: vdl.0 cache, locks:4
25.10 19:00:27 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:00:27 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:00:27 TIME: user.ping 0.23 ms
25.10 19:00:28 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:00:28 TIME: user.ping 0.19 ms
25.10 19:00:28 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:00:47 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:00:47 TIME: user.ping 0.18 ms
25.10 19:00:47 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:01:07 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:01:07 TIME: user.ping 0.14 ms
25.10 19:01:07 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:01:26 TIMER: Check auto-disconnect...
25.10 19:01:26 STATS: vdl.0 cache, locks:4
25.10 19:01:27 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:01:27 TIME: user.ping 0.12 ms
25.10 19:01:27 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:01:31 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:01:31 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:01:31 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [81], round => 2, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:58, startdate => 2016-25-10 18:58 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:01:31 STATS: vdl.0 cache connection, 105 calls, total 0.162479162216187 sec spent, avg 1.55 ms
25.10 19:01:31 TIME: tournament.getAvailableTournament 3.2 ms
25.10 19:01:31 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [81], round => 2, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:58, startdate => 2016-25-10 18:58 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:01:35 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 2, messageType => tournament.grid }
25.10 19:01:35 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 19:01:35 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
25.10 19:01:35 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 19:01:35 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 95, round => 1, player1 => 94, player2 => 95 },{ winner => -1, round => 2, player1 => 95, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:01:35 TIME: tournament.grid 1.44 ms
25.10 19:01:35 == NET: uid95 ret: tournament.grid { list => [{ winner => 95, round => 1, player1 => 94, player2 => 95 },{ winner => -1, round => 2, player1 => 95, player2 => 95 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:01:37 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:01:37 TIME: user.ping 0.14 ms
25.10 19:01:37 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:01:48 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:01:48 TIME: user.ping 0.17 ms
25.10 19:01:48 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:01:49 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:01:49 TIME: user.ping 0.2 ms
25.10 19:01:49 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:02:01 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:02:01 TIME: user.ping 0.19 ms
25.10 19:02:01 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:02:08 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:02:08 TIME: user.ping 0.18 ms
25.10 19:02:08 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:02:12 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:02:12 TIME: user.ping 0.19 ms
25.10 19:02:12 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:02:26 TIMER: Check auto-disconnect...
25.10 19:02:26 STATS: vdl.0 cache, locks:4
25.10 19:02:28 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:02:28 TIME: user.ping 0.14 ms
25.10 19:02:28 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:02:50 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:02:50 TIME: user.ping 0.1 ms
25.10 19:02:50 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:03:11 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:03:11 TIME: user.ping 0.09 ms
25.10 19:03:11 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:03:26 TIMER: Check auto-disconnect...
25.10 19:03:26 STATS: vdl.0 cache, locks:4
25.10 19:03:33 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:03:33 TIME: user.ping 0.16 ms
25.10 19:03:33 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:03:53 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:03:53 TIME: user.ping 0.09 ms
25.10 19:03:53 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:04:14 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:04:14 TIME: user.ping 0.17 ms
25.10 19:04:14 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:04:26 TIMER: Check auto-disconnect...
25.10 19:04:26 STATS: vdl.0 cache, locks:4
25.10 19:04:34 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:04:34 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:04:34 TIME: user.ping 0.17 ms
25.10 19:04:55 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:04:55 TIME: user.ping 0.19 ms
25.10 19:04:55 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:05:15 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:05:15 TIME: user.ping 0.18 ms
25.10 19:05:15 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:05:24 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:05:24 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:05:24 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [81], round => 2, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:58, startdate => 2016-25-10 18:58 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:05:24 STATS: vdl.0 cache connection, 108 calls, total 0.16669750213623 sec spent, avg 1.54 ms
25.10 19:05:24 TIME: tournament.getAvailableTournament 3.23 ms
25.10 19:05:24 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [81], round => 2, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:58, startdate => 2016-25-10 18:58 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:05:26 TIMER: Check auto-disconnect...
25.10 19:05:26 NET: Client (name:uid95 conid:76247501 TCP) disconnected from vdl.0 (clients:1)
25.10 19:05:26 DB: SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true
25.10 19:05:26 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true, _type => core/server.query }
25.10 19:05:26 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 19:05:26 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 19:05:26 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 19:05:26 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 19:05:26 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
25.10 19:05:26 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 95, _type => core/cache.update }
25.10 19:05:26 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 19:05:26 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 95, _type => core/cache.update }
25.10 19:05:26 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:05:26 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 95, _type => core/user.logoutPost }
25.10 19:05:26 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 19:05:26 STATS: vdl.0 cache, locks:2
25.10 19:05:27 ++ NET: uid94 req: tournament.grid { tournamentId => 1, round => 2, messageType => tournament.grid }
25.10 19:05:27 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 19:05:27 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
25.10 19:05:27 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 19:05:27 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 95, round => 1, player1 => 94, player2 => 95 },{ winner => -1, round => 2, player1 => 95, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:05:27 TIME: tournament.grid 1.2 ms
25.10 19:05:27 == NET: uid94 ret: tournament.grid { list => [{ winner => 95, round => 1, player1 => 94, player2 => 95 },{ winner => -1, round => 2, player1 => 95, player2 => 95 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:05:39 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:05:39 TIME: user.ping 0.14 ms
25.10 19:05:39 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:06:26 TIMER: Check auto-disconnect...
25.10 19:06:26 STATS: vdl.0 cache, locks:2
25.10 19:06:26 TIMER: Check auto-disconnect...
25.10 19:06:26 STATS: vdl.0 cache, locks:2
25.10 19:06:26 TIMER: Check auto-disconnect...
25.10 19:06:26 STATS: vdl.0 cache, locks:2
25.10 19:06:26 TIMER: Check auto-disconnect...
25.10 19:06:26 NET: Client (name:uid94 conid:24646381 TCP) disconnected from vdl.0 (clients:0)
25.10 19:06:26 DB: SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true
25.10 19:06:26 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true, _type => core/server.query }
25.10 19:06:26 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 19:06:26 STATS: vdl.0 cache connection, 116 calls, total 0.179370641708374 sec spent, avg 1.55 ms
25.10 19:06:26 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 19:06:26 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 19:06:26 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 19:06:26 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
25.10 19:06:26 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 94, _type => core/cache.update }
25.10 19:06:26 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 19:06:26 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 94, _type => core/cache.update }
25.10 19:06:26 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:06:26 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 94, _type => core/user.logoutPost }
25.10 19:06:26 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 19:06:26 STATS: vdl.0 cache, locks:0
25.10 19:06:26 TIMER: Check auto-disconnect...
25.10 19:06:26 STATS: vdl.0 cache, locks:0
25.10 19:06:26 TIMER: Check auto-disconnect...
25.10 19:06:26 STATS: vdl.0 cache, locks:0
25.10 19:06:26 TIMER: Check auto-disconnect...
25.10 19:06:26 STATS: vdl.0 cache, locks:0
25.10 19:13:22 NET: Client (conid:32981606) connected to vdl.0 (clients:1)
25.10 19:13:23 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
25.10 19:13:23 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 19:13:23 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 19:13:23 -<<-: core/server.query { list => {{ name => uid95, networkid => , isbanned => false, id => 95 }}, errorCode => ok, _type => core/server.query }
25.10 19:13:23 STATS: vdl.0 cache connection, 121 calls, total 0.183142900466919 sec spent, avg 1.51 ms
25.10 19:13:23 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 19:13:23 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 19:13:23 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 19:13:23 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid95, deleted => false, email => , networktype =>   , password => uid95, isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402835, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 95 } }
25.10 19:13:23 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 19:13:23 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 95 } }
25.10 19:13:23 NET: Client login (conid:32981606, id:95, name:uid95)
25.10 19:13:23 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 19:13:23 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 19:13:23 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
25.10 19:13:23 == NET: uid95 ret: user.join { name => uid95, type => user.join }
25.10 19:13:26 TIMER: Check auto-disconnect...
25.10 19:13:26 STATS: vdl.0 cache, locks:2
25.10 19:13:27 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:13:27 TIME: user.ping 0.18 ms
25.10 19:13:27 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:13:27 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:13:27 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:13:27 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 19:17, startdate => 2016-25-10 19:17 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:13:27 TIME: tournament.getAvailableTournament 2.05 ms
25.10 19:13:27 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 19:17, startdate => 2016-25-10 19:17 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:13:31 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 19:13:31 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:13:35 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:13:35 TIME: user.ping 0.11 ms
25.10 19:13:35 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:13:42 ++ NET: uid95 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 19:13:42 ->>-: vdl/cache.tournament.addUsers { userId => 95, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 19:13:42 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 19:13:42 TIME: tournament.addUsers 2.19 ms
25.10 19:13:42 == NET: uid95 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 19:13:42 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:13:42 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:13:42 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 19:17, startdate => 2016-25-10 19:17 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:13:42 TIME: tournament.getAvailableTournament 2.45 ms
25.10 19:13:42 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 19:17, startdate => 2016-25-10 19:17 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:13:43 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:13:43 TIME: user.ping 0.13 ms
25.10 19:13:43 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:13:50 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:13:50 TIME: user.ping 0.15 ms
25.10 19:13:50 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:13:51 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
25.10 19:13:51 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 19:13:51 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
25.10 19:13:51 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 19:13:51 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95] }
25.10 19:13:51 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => null, player2 => 95 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
25.10 19:13:51 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => null, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:13:51 TIME: tournament.grid 5.14 ms
25.10 19:13:51 == NET: uid95 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => null, player2 => 95 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:13:58 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:13:58 TIME: user.ping 0.11 ms
25.10 19:13:58 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:14:08 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:14:08 TIME: user.ping 0.19 ms
25.10 19:14:08 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:14:16 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:14:16 TIME: user.ping 0.16 ms
25.10 19:14:16 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:14:24 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:14:24 TIME: user.ping 0.14 ms
25.10 19:14:24 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:14:26 TIMER: Check auto-disconnect...
25.10 19:14:26 STATS: vdl.0 cache, locks:2
25.10 19:14:31 NET: Client (conid:71385908) connected to vdl.0 (clients:2)
25.10 19:14:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:14:32 TIME: user.ping 0.08 ms
25.10 19:14:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:14:33 ++ NET: null req: tournament.end { lose => 94, dateRound => 2016-25-10 18:58, winner => 95, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 94, player2 => 95, battleId => 81 }
25.10 19:14:33 TRACE: User not logon yet.
25.10 19:14:33 NET: Client (name:null conid:71385908 TCP) disconnected from vdl.0 (clients:1)
25.10 19:14:39 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:14:39 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:14:39 TIME: user.ping 0.17 ms
25.10 19:14:46 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:14:46 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:14:46 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 19:17, startdate => 2016-25-10 19:17 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:14:46 STATS: vdl.0 cache connection, 133 calls, total 0.204136371612549 sec spent, avg 1.53 ms
25.10 19:14:46 TIME: tournament.getAvailableTournament 4.04 ms
25.10 19:14:46 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 19:17, startdate => 2016-25-10 19:17 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:14:48 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:14:48 TIME: user.ping 0.16 ms
25.10 19:14:48 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:14:53 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
25.10 19:14:53 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 19:14:53 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
25.10 19:14:53 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 19:14:53 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95] }
25.10 19:14:53 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => null, player2 => 95 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
25.10 19:14:53 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => null, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:14:53 TIME: tournament.grid 1.94 ms
25.10 19:14:53 == NET: uid95 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => null, player2 => 95 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:14:55 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:14:55 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:14:55 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 19:17, startdate => 2016-25-10 19:17 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:14:55 TIME: tournament.getAvailableTournament 1.86 ms
25.10 19:14:55 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 19:17, startdate => 2016-25-10 19:17 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:14:56 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:14:56 TIME: user.ping 0.12 ms
25.10 19:14:56 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:14:59 NET: Client (conid:19489073) connected to vdl.0 (clients:2)
25.10 19:15:02 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
25.10 19:15:02 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 19:15:02 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
25.10 19:15:02 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 19:15:02 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95] }
25.10 19:15:02 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => null, player2 => 95 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
25.10 19:15:02 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => null, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:15:02 TIME: tournament.grid 1.62 ms
25.10 19:15:02 == NET: uid95 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => null, player2 => 95 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:15:04 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
25.10 19:15:04 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 19:15:04 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 19:15:04 -<<-: core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
25.10 19:15:04 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 19:15:04 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 19:15:04 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 19:15:04 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 94 } }
25.10 19:15:04 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 19:15:04 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
25.10 19:15:04 NET: Client login (conid:19489073, id:94, name:uid94)
25.10 19:15:04 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 19:15:04 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 19:15:04 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
25.10 19:15:04 == NET: uid95 ret: user.join { name => uid94, type => user.join }
25.10 19:15:04 == NET: uid94 ret: user.join { name => uid95, type => user.join }
25.10 19:15:04 == NET: uid94 ret: user.join { name => uid94, type => user.join }
25.10 19:15:09 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:15:09 TIME: user.ping 0.11 ms
25.10 19:15:09 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:15:11 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 19:15:11 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:15:16 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:15:16 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:15:16 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 19:17, startdate => 2016-25-10 19:17 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:15:16 TIME: tournament.getAvailableTournament 2.64 ms
25.10 19:15:16 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 19:17, startdate => 2016-25-10 19:17 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:15:16 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:15:16 TIME: user.ping 0.09 ms
25.10 19:15:16 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:15:20 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:15:20 TIME: user.ping 0.11 ms
25.10 19:15:20 ++ NET: uid94 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 19:15:20 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:15:20 ->>-: vdl/cache.tournament.addUsers { userId => 94, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 19:15:20 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 19:15:20 TIME: tournament.addUsers 0.58 ms
25.10 19:15:20 == NET: uid94 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 19:15:24 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:15:24 TIME: user.ping 0.21 ms
25.10 19:15:24 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:15:25 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:15:25 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:15:25 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 19:17, startdate => 2016-25-10 19:17 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:15:25 TIME: tournament.getAvailableTournament 2.02 ms
25.10 19:15:25 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 19:17, startdate => 2016-25-10 19:17 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:15:26 TIMER: Check auto-disconnect...
25.10 19:15:26 STATS: vdl.0 cache, locks:4
25.10 19:15:34 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:15:34 TIME: user.ping 0.13 ms
25.10 19:15:34 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:15:41 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:15:41 TIME: user.ping 0.07 ms
25.10 19:15:41 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:15:42 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:15:42 TIME: user.ping 0.16 ms
25.10 19:15:42 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:15:50 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:15:50 TIME: user.ping 0.14 ms
25.10 19:15:50 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:15:58 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:15:58 TIME: user.ping 0.12 ms
25.10 19:15:58 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:16:01 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:16:01 TIME: user.ping 0.2 ms
25.10 19:16:01 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:16:06 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:16:06 TIME: user.ping 0.13 ms
25.10 19:16:06 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:16:14 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:16:14 TIME: user.ping 0.09 ms
25.10 19:16:14 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:16:21 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:16:21 TIME: user.ping 0.18 ms
25.10 19:16:21 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:16:22 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:16:22 TIME: user.ping 0.16 ms
25.10 19:16:22 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:16:26 TIMER: Check auto-disconnect...
25.10 19:16:26 STATS: vdl.0 cache, locks:4
25.10 19:16:30 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:16:30 TIME: user.ping 0.14 ms
25.10 19:16:30 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:16:38 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:16:38 TIME: user.ping 0.08 ms
25.10 19:16:38 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:16:42 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:16:42 TIME: user.ping 0.2 ms
25.10 19:16:42 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:16:43 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:16:43 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:16:43 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 19:17, startdate => 2016-25-10 19:17 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:16:43 STATS: vdl.0 cache connection, 150 calls, total 0.226825952529907 sec spent, avg 1.51 ms
25.10 19:16:43 TIME: tournament.getAvailableTournament 2.4 ms
25.10 19:16:43 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 19:17, startdate => 2016-25-10 19:17 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:16:46 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:16:46 TIME: user.ping 0.09 ms
25.10 19:16:46 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:16:54 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:16:54 TIME: user.ping 0.22 ms
25.10 19:16:54 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:17:02 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:17:02 TIME: user.ping 0.08 ms
25.10 19:17:02 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:17:02 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:17:02 TIME: user.ping 0.16 ms
25.10 19:17:02 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:17:10 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:17:10 TIME: user.ping 0.17 ms
25.10 19:17:10 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:17:18 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:17:18 TIME: user.ping 0.17 ms
25.10 19:17:18 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:17:22 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:17:22 TIME: user.ping 0.13 ms
25.10 19:17:22 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:17:26 TIMER: Check auto-disconnect...
25.10 19:17:26 STATS: vdl.0 cache, locks:4
25.10 19:17:26 -<<-: tournament.enemyEvent { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-25-10 19:17, id => 94, enemy.num => 2, battleId => 82, player => 1 }, _isNotify => true, id => 94, _type => tournament.enemyEvent }
25.10 19:17:26 -<<-: tournament.enemyEvent { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-25-10 19:17, id => 95, enemy.num => 1, battleId => 82, player => 2 }, _isNotify => true, id => 95, _type => tournament.enemyEvent }
25.10 19:17:26 == NET: uid94 ret: tournament.enemy { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-25-10 19:17, id => 94, enemy.num => 2, battleId => 82, player => 1 }, type => tournament.enemy }
25.10 19:17:26 == NET: uid95 ret: tournament.enemy { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-25-10 19:17, id => 95, enemy.num => 1, battleId => 82, player => 2 }, type => tournament.enemy }
25.10 19:17:27 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:17:27 TIME: user.ping 0.17 ms
25.10 19:17:27 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:17:37 ++ NET: uid94 req: tournament.lose { winner => 95, messageType => tournament.lose }
25.10 19:17:37 TIME: tournament.lose 0.1 ms
25.10 19:17:37 == NET: uid94 ret: tournament.lose { type => tournament.lose, errorCode => ok }
25.10 19:17:37 == NET: uid95 ret: battle.leave { type => battle.leave }
25.10 19:17:37 ++ NET: uid95 req: tournament.end { lose => 94, dateRound => 2016-25-10 19:17, winner => 95, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 94, player2 => 95, battleId => 82 }
25.10 19:17:37 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 19:17:37 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => active }
25.10 19:17:37 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
25.10 19:17:37 -<<-: vdl/cache.tournament.getBattlesTournaments [82]
25.10 19:17:37 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 19:17:37 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95,94] }
25.10 19:17:37 ->>-: vdl/cache.battle.finishRoom { roomId => 82, _type => vdl/cache.battle.finishRoom }
25.10 19:17:37 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
25.10 19:17:37 ->>-: vdl/cache.battle.deleteRoom { roomId => 82, _type => vdl/cache.battle.deleteRoom }
25.10 19:17:38 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
25.10 19:17:38 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [82] }
25.10 19:17:38 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
25.10 19:17:38 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [95], _type => vdl/cache.tournament.setUsersTournament }
25.10 19:17:38 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
25.10 19:17:38 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 95, round => 1, player1 => 94, player2 => 95 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 19:17:38 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => null, player2 => 95 },{ winner => -1, round => 2, player1 => 95, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:17:38 ->>-: vdl/cache.tournament.addRound { dateRound => 2016-25-10 19:17, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
25.10 19:17:38 -<<-: vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
25.10 19:17:38 ->>-: vdl/cache.tournament.finish { winner => 95, tournamentId => 1, _type => vdl/cache.tournament.finish }
25.10 19:17:38 -<<-: vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
25.10 19:17:38 TIME: tournament.end 23.16 ms
25.10 19:17:38 == NET: uid95 ret: tournament.end { type => tournament.end, errorCode => TournamentEnd }
25.10 19:17:38 == NET: uid94 ret: battle.end { type => battle.end }
25.10 19:17:40 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:17:40 TIME: user.ping 0.16 ms
25.10 19:17:40 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:17:43 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:17:43 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:17:43 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [82], round => 2, id => 1, status => finished, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 19:17, startdate => 2016-25-10 19:17 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:17:43 STATS: vdl.0 cache connection, 161 calls, total 0.251843214035034 sec spent, avg 1.56 ms
25.10 19:17:43 TIME: tournament.getAvailableTournament 2.36 ms
25.10 19:17:43 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [82], round => 2, id => 1, status => finished, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 19:17, startdate => 2016-25-10 19:17 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:17:47 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:17:47 TIME: user.ping 0.15 ms
25.10 19:17:47 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:17:48 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 2, messageType => tournament.grid }
25.10 19:17:48 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 19:17:48 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
25.10 19:17:48 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 19:17:48 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => null, player2 => 95 },{ winner => -1, round => 2, player1 => 95, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:17:48 TIME: tournament.grid 1.11 ms
25.10 19:17:48 == NET: uid95 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => null, player2 => 95 },{ winner => -1, round => 2, player1 => 95, player2 => null }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:17:53 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:17:53 TIME: user.ping 0.12 ms
25.10 19:17:53 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:18:04 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:18:04 TIME: user.ping 0.61 ms
25.10 19:18:04 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:18:07 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:18:07 TIME: user.ping 0.12 ms
25.10 19:18:07 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:18:15 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:18:15 TIME: user.ping 0.13 ms
25.10 19:18:15 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:18:26 TIMER: Check auto-disconnect...
25.10 19:18:26 STATS: vdl.0 cache, locks:4
25.10 19:18:27 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:18:27 TIME: user.ping 0.11 ms
25.10 19:18:27 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:18:27 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:18:27 TIME: user.ping 0.07 ms
25.10 19:18:27 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:18:38 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:18:38 TIME: user.ping 0.1 ms
25.10 19:18:38 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:18:47 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:18:47 TIME: user.ping 0.17 ms
25.10 19:18:47 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:18:50 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:18:50 TIME: user.ping 0.14 ms
25.10 19:18:50 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:19:01 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:19:01 TIME: user.ping 0.17 ms
25.10 19:19:01 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:19:08 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:19:08 TIME: user.ping 0.17 ms
25.10 19:19:08 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:19:12 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:19:12 TIME: user.ping 0.09 ms
25.10 19:19:12 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:19:24 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:19:24 TIME: user.ping 0.08 ms
25.10 19:19:24 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:19:26 TIMER: Check auto-disconnect...
25.10 19:19:26 STATS: vdl.0 cache, locks:4
25.10 19:19:28 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:19:28 TIME: user.ping 0.25 ms
25.10 19:19:28 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:19:35 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:19:35 TIME: user.ping 0.19 ms
25.10 19:19:35 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:19:46 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:19:46 TIME: user.ping 0.14 ms
25.10 19:19:46 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:19:48 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:19:48 TIME: user.ping 0.23 ms
25.10 19:19:48 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:19:58 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:19:58 TIME: user.ping 0.16 ms
25.10 19:19:58 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:20:08 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:20:08 TIME: user.ping 0.16 ms
25.10 19:20:08 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:20:09 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:20:09 TIME: user.ping 0.13 ms
25.10 19:20:09 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:20:21 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:20:21 TIME: user.ping 0.18 ms
25.10 19:20:21 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:20:26 TIMER: Check auto-disconnect...
25.10 19:20:26 STATS: vdl.0 cache, locks:4
25.10 19:20:27 ++ NET: uid95 req: tournament.end { lose => 94, dateRound => 2016-25-10 19:17, winner => 95, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 94, player2 => 95, battleId => 82 }
25.10 19:20:27 NET: Client (name:uid95 conid:32981606 TCP) disconnected from vdl.0 (clients:1)
25.10 19:20:27 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 19:20:27 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
25.10 19:20:27 STATS: vdl.0 cache connection, 164 calls, total 0.253573894500732 sec spent, avg 1.55 ms
25.10 19:20:27 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
25.10 19:20:27 -<<-: vdl/cache.tournament.getBattlesTournaments []
25.10 19:20:27 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 19:20:27 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95] }
25.10 19:20:27 ->>-: vdl/cache.battle.finishRoom { roomId => 82, _type => vdl/cache.battle.finishRoom }
25.10 19:20:27 -<<-: vdl/cache.battle.finishRoom { errorCode => _requestException, _type => vdl/cache.battle.finishRoom }
25.10 19:20:27 TRACE: tournament.end : cacheRequest exception { roomId => 82, _type => vdl/cache.battle.finishRoom }
25.10 19:20:27 TRACE: tournament.end : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 509
Called from modules/VDLTournamentModule.hx line 386
Called from a C function
Called from modules/VDLTournamentModule.hx line 151
Called from modules/VDLTournamentModule.hx line 67
Called from snipe/slave/Server.hx line 1176
25.10 19:20:27 DB: SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true
25.10 19:20:27 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true, _type => core/server.query }
25.10 19:20:27 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 19:20:27 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 19:20:27 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 19:20:27 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 19:20:27 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
25.10 19:20:27 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 95, _type => core/cache.update }
25.10 19:20:27 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 19:20:27 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 95, _type => core/cache.update }
25.10 19:20:27 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:20:27 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 95, _type => core/user.logoutPost }
25.10 19:20:27 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 19:20:27 == NET: uid94 ret: battle.end { type => battle.end }
25.10 19:20:28 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:20:28 TIME: user.ping 0.16 ms
25.10 19:20:28 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:20:49 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:20:49 TIME: user.ping 0.11 ms
25.10 19:20:49 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:21:55 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
25.10 19:21:55 -<<-: server.login ok
25.10 19:21:55 DB: SELECT * FROM LocalizationStrings
25.10 19:21:55 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:21:55 TIMER: Starting timer...
25.10 19:21:55 TIMER: Timer running...
25.10 19:21:55 DB: SELECT * FROM GameVars
25.10 19:21:55 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:21:55 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.10 19:21:55 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:21:55 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.10 19:21:55 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:21:55 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.10 19:21:55 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:21:55 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.10 19:21:55 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:21:55 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
25.10 19:21:55 -<<-: core/quest.getDaily ok
25.10 19:21:55 DB: SELECT * FROM UserAttributeTypes
25.10 19:21:55 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:21:55 DB: SELECT * FROM UserVariableTypes
25.10 19:21:55 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:21:55 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.10 19:21:55 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:21:55 DB: SELECT * FROM ItemGroups
25.10 19:21:55 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:21:55 DB: SELECT * FROM Bundles ORDER BY ID
25.10 19:21:55 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:21:55 DB: SELECT * FROM BundleItems ORDER BY ID
25.10 19:21:55 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:21:55 SHOP: loading items...
25.10 19:21:55 ->>-: core/shop.getList { _type => core/shop.getList }
25.10 19:21:55 -<<-: core/shop.getList ok
25.10 19:21:55 SHOP: 0 items loaded (0 sec)
25.10 19:21:55 DB: SELECT * FROM EffectAttributeTypes
25.10 19:21:55 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:21:55 DB: SELECT * FROM Effects
25.10 19:21:55 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:21:55 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 19:21:55 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:21:55 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 19:21:55 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:21:55 DB: SELECT * FROM Badges
25.10 19:21:55 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.10 19:21:55 -<<-: core/server.query ok
25.10 19:22:09 NET: Client (conid:59456667) connected to vdl.0 (clients:1)
25.10 19:22:13 NET: Client (name:null conid:59456667 TCP) disconnected from vdl.0 (clients:0)
25.10 19:22:40 NET: Client (conid:19781322) connected to vdl.0 (clients:1)
25.10 19:22:45 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
25.10 19:22:45 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 19:22:45 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 19:22:45 -<<-: core/server.query ok
25.10 19:22:45 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 19:22:45 -<<-: core/user.isOnlineID ok
25.10 19:22:45 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 19:22:45 -<<-: core/cache.get ok
25.10 19:22:45 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 19:22:45 -<<-: core/cache.get ok
25.10 19:22:45 NET: Client login (conid:19781322, id:94, name:uid94)
25.10 19:22:45 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 19:22:45 -<<-: core/user.loginPost null
25.10 19:22:45 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
25.10 19:22:45 == NET: uid94 ret: user.join { name => uid94, type => user.join }
25.10 19:22:50 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 19:22:50 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:22:55 TIMER: Check auto-disconnect...
25.10 19:22:55 STATS: vdl.0 cache, locks:2
25.10 19:22:58 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:22:58 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:22:58 TIME: user.ping 0.17 ms
25.10 19:23:30 NET: Client (conid:18426993) connected to vdl.0 (clients:2)
25.10 19:23:31 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
25.10 19:23:31 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 19:23:31 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 19:23:31 -<<-: core/server.query { list => {{ name => uid95, networkid => , isbanned => false, id => 95 }}, errorCode => ok, _type => core/server.query }
25.10 19:23:31 STATS: vdl.0 cache connection, 27 calls, total 0.0348036289215088 sec spent, avg 1.29 ms
25.10 19:23:31 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 19:23:31 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 19:23:31 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 19:23:31 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid95, deleted => false, email => , networktype =>   , password => uid95, isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402835, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 95 } }
25.10 19:23:31 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 19:23:31 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 95 } }
25.10 19:23:31 NET: Client login (conid:18426993, id:95, name:uid95)
25.10 19:23:31 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 19:23:31 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 19:23:31 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
25.10 19:23:31 == NET: uid94 ret: user.join { name => uid95, type => user.join }
25.10 19:23:31 == NET: uid95 ret: user.join { name => uid94, type => user.join }
25.10 19:23:31 == NET: uid95 ret: user.join { name => uid95, type => user.join }
25.10 19:23:35 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:23:35 TIME: user.ping 0.08 ms
25.10 19:23:35 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:23:40 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 19:23:40 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:23:44 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:23:44 TIME: user.ping 0.1 ms
25.10 19:23:44 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:23:46 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:23:46 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:23:46 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 19:27, startdate => 2016-25-10 19:27 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:23:46 TIME: tournament.getAvailableTournament 3.98 ms
25.10 19:23:46 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 19:27, startdate => 2016-25-10 19:27 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:23:50 ++ NET: uid95 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 19:23:50 ->>-: vdl/cache.tournament.addUsers { userId => 95, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 19:23:50 -<<-: vdl/cache.tournament.addUsers { errorCode => _requestException, _type => vdl/cache.tournament.addUsers }
25.10 19:23:50 TRACE: tournament.addUsers : cacheRequest exception { userId => 95, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 19:23:50 TRACE: tournament.addUsers : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 474
Called from modules/VDLTournamentModule.hx line 211
Called from modules/VDLTournamentModule.hx line 63
Called from snipe/slave/Server.hx line 1176
25.10 19:23:54 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:23:54 TIME: user.ping 0.17 ms
25.10 19:23:54 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:23:55 TIMER: Check auto-disconnect...
25.10 19:23:55 STATS: vdl.0 cache, locks:4
25.10 19:23:57 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:23:57 TIME: user.ping 0.13 ms
25.10 19:23:57 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:24:08 ++ NET: uid95 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 19:24:08 ->>-: vdl/cache.tournament.addUsers { userId => 95, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 19:24:08 -<<-: vdl/cache.tournament.addUsers { errorCode => _requestException, _type => vdl/cache.tournament.addUsers }
25.10 19:24:08 TRACE: tournament.addUsers : cacheRequest exception { userId => 95, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 19:24:08 TRACE: tournament.addUsers : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 474
Called from modules/VDLTournamentModule.hx line 211
Called from modules/VDLTournamentModule.hx line 63
Called from snipe/slave/Server.hx line 1176
25.10 19:24:12 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:24:12 TIME: user.ping 0.08 ms
25.10 19:24:12 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:24:30 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
25.10 19:24:30 -<<-: server.login ok
25.10 19:24:30 DB: SELECT * FROM LocalizationStrings
25.10 19:24:30 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:24:30 TIMER: Starting timer...
25.10 19:24:30 TIMER: Timer running...
25.10 19:24:30 DB: SELECT * FROM GameVars
25.10 19:24:30 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:24:30 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.10 19:24:30 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:24:30 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.10 19:24:30 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:24:30 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.10 19:24:30 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:24:30 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.10 19:24:30 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:24:30 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
25.10 19:24:30 -<<-: core/quest.getDaily ok
25.10 19:24:30 DB: SELECT * FROM UserAttributeTypes
25.10 19:24:30 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:24:30 DB: SELECT * FROM UserVariableTypes
25.10 19:24:30 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:24:30 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.10 19:24:30 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:24:30 DB: SELECT * FROM ItemGroups
25.10 19:24:30 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:24:30 DB: SELECT * FROM Bundles ORDER BY ID
25.10 19:24:30 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:24:30 DB: SELECT * FROM BundleItems ORDER BY ID
25.10 19:24:30 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:24:30 SHOP: loading items...
25.10 19:24:30 ->>-: core/shop.getList { _type => core/shop.getList }
25.10 19:24:30 -<<-: core/shop.getList ok
25.10 19:24:30 SHOP: 0 items loaded (0 sec)
25.10 19:24:30 DB: SELECT * FROM EffectAttributeTypes
25.10 19:24:30 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:24:30 DB: SELECT * FROM Effects
25.10 19:24:30 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:24:30 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 19:24:30 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:24:30 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 19:24:30 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:24:30 DB: SELECT * FROM Badges
25.10 19:24:30 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.10 19:24:30 -<<-: core/server.query ok
25.10 19:25:25 NET: Client (conid:33822812) connected to vdl.0 (clients:1)
25.10 19:25:30 TIMER: Check auto-disconnect...
25.10 19:25:30 STATS: vdl.0 cache, locks:0
25.10 19:25:30 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 19:25:30 TRACE: User not logon yet.
25.10 19:25:51 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 19:25:51 TRACE: User not logon yet.
25.10 19:26:12 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 19:26:12 TRACE: User not logon yet.
25.10 19:26:30 TIMER: Check auto-disconnect...
25.10 19:26:30 STATS: vdl.0 cache, locks:0
25.10 19:26:36 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 19:26:36 TRACE: User not logon yet.
25.10 19:26:41 NET: Client (conid:65340941) connected to vdl.0 (clients:2)
25.10 19:26:42 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
25.10 19:26:42 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 19:26:42 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 19:26:42 -<<-: core/server.query ok
25.10 19:26:42 STATS: vdl.0 cache connection, 21 calls, total 0.0323338508605957 sec spent, avg 1.54 ms
25.10 19:26:42 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 19:26:42 -<<-: core/user.isOnlineID ok
25.10 19:26:42 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 19:26:42 -<<-: core/cache.get ok
25.10 19:26:42 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 19:26:42 -<<-: core/cache.get ok
25.10 19:26:42 NET: Client login (conid:65340941, id:95, name:uid95)
25.10 19:26:42 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 19:26:42 -<<-: core/user.loginPost null
25.10 19:26:42 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
25.10 19:26:42 == NET: null ret: user.join { name => uid95, type => user.join }
25.10 19:26:42 == NET: uid95 ret: user.join { name => null, type => user.join }
25.10 19:26:42 == NET: uid95 ret: user.join { name => uid95, type => user.join }
25.10 19:26:45 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:26:45 TIME: user.ping 0.16 ms
25.10 19:26:45 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:26:47 NET: Client (name:null conid:33822812 TCP) disconnected from vdl.0 (clients:1)
25.10 19:26:50 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 19:26:50 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:26:54 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:26:54 TIME: user.ping 0.09 ms
25.10 19:26:54 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:27:03 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:27:03 TIME: user.ping 0.13 ms
25.10 19:27:03 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:27:10 NET: Client (conid:44199094) connected to vdl.0 (clients:2)
25.10 19:27:16 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
25.10 19:27:16 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 19:27:16 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 19:27:16 -<<-: core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
25.10 19:27:16 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 19:27:16 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 19:27:16 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 19:27:16 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 94 } }
25.10 19:27:16 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 19:27:16 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
25.10 19:27:16 NET: Client login (conid:44199094, id:94, name:uid94)
25.10 19:27:16 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 19:27:16 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 19:27:16 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
25.10 19:27:16 == NET: uid95 ret: user.join { name => uid94, type => user.join }
25.10 19:27:16 == NET: uid94 ret: user.join { name => uid95, type => user.join }
25.10 19:27:16 == NET: uid94 ret: user.join { name => uid94, type => user.join }
25.10 19:27:20 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:27:20 TIME: user.ping 0.11 ms
25.10 19:27:20 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:27:21 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:27:21 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:27:21 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 19:30, startdate => 2016-25-10 19:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:27:21 TIME: tournament.getAvailableTournament 4.07 ms
25.10 19:27:21 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 19:30, startdate => 2016-25-10 19:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:27:25 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 19:27:25 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:27:26 ++ NET: uid95 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 19:27:26 ->>-: vdl/cache.tournament.addUsers { userId => 95, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 19:27:26 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 19:27:26 TIME: tournament.addUsers 0.61 ms
25.10 19:27:26 == NET: uid95 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 19:27:27 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:27:27 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:27:27 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 19:30, startdate => 2016-25-10 19:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:27:27 TIME: tournament.getAvailableTournament 2.39 ms
25.10 19:27:27 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 19:30, startdate => 2016-25-10 19:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:27:28 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:27:28 TIME: user.ping 0.17 ms
25.10 19:27:28 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:27:30 TIMER: Check auto-disconnect...
25.10 19:27:30 STATS: vdl.0 cache, locks:4
25.10 19:27:31 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:27:31 TIME: user.ping 0.08 ms
25.10 19:27:31 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:27:33 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:27:33 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:27:33 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 19:30, startdate => 2016-25-10 19:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:27:33 TIME: tournament.getAvailableTournament 2.97 ms
25.10 19:27:33 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 19:30, startdate => 2016-25-10 19:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:27:37 ++ NET: uid94 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 19:27:37 ->>-: vdl/cache.tournament.addUsers { userId => 94, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 19:27:37 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 19:27:37 TIME: tournament.addUsers 0.74 ms
25.10 19:27:37 == NET: uid94 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 19:27:38 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:27:38 TIME: user.ping 0.22 ms
25.10 19:27:38 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:27:50 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:27:50 TIME: user.ping 0.18 ms
25.10 19:27:50 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:27:53 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:27:53 TIME: user.ping 0.17 ms
25.10 19:27:53 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:27:58 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:27:58 TIME: user.ping 0.13 ms
25.10 19:27:58 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:28:06 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:28:06 TIME: user.ping 0.19 ms
25.10 19:28:06 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:28:14 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:28:14 TIME: user.ping 0.17 ms
25.10 19:28:14 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:28:14 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:28:14 TIME: user.ping 0.22 ms
25.10 19:28:14 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:28:26 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:28:26 TIME: user.ping 0.14 ms
25.10 19:28:26 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:28:30 TIMER: Check auto-disconnect...
25.10 19:28:30 STATS: vdl.0 cache, locks:4
25.10 19:28:34 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:28:34 TIME: user.ping 0.06 ms
25.10 19:28:34 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:28:37 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:28:37 TIME: user.ping 0.18 ms
25.10 19:28:37 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:28:41 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:28:41 TIME: user.ping 0.11 ms
25.10 19:28:41 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:28:50 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:28:50 TIME: user.ping 0.16 ms
25.10 19:28:50 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:28:57 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:28:57 TIME: user.ping 0.17 ms
25.10 19:28:57 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:28:58 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:28:58 TIME: user.ping 0.07 ms
25.10 19:28:58 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:29:07 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:29:07 TIME: user.ping 0.12 ms
25.10 19:29:07 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:29:15 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:29:15 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:29:15 TIME: user.ping 0.21 ms
25.10 19:29:18 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:29:18 TIME: user.ping 0.13 ms
25.10 19:29:18 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:29:23 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:29:23 TIME: user.ping 0.08 ms
25.10 19:29:23 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:29:30 TIMER: Check auto-disconnect...
25.10 19:29:30 STATS: vdl.0 cache, locks:4
25.10 19:29:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:29:32 TIME: user.ping 0.27 ms
25.10 19:29:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:29:40 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:29:40 TIME: user.ping 0.16 ms
25.10 19:29:40 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:29:48 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:29:48 TIME: user.ping 0.21 ms
25.10 19:29:48 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:29:55 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:29:55 TIME: user.ping 0.11 ms
25.10 19:29:55 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:30:03 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:30:03 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:30:03 TIME: user.ping 0.15 ms
25.10 19:30:11 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:30:11 TIME: user.ping 0.14 ms
25.10 19:30:11 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:30:19 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:30:19 TIME: user.ping 0.15 ms
25.10 19:30:19 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:30:27 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:30:27 TIME: user.ping 0.16 ms
25.10 19:30:27 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:30:30 TIMER: Check auto-disconnect...
25.10 19:30:30 -<<-: tournament.enemyEvent { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-25-10 19:30, id => 94, enemy.num => 2, battleId => 83, player => 1 }, _isNotify => true, id => 94, _type => tournament.enemyEvent }
25.10 19:30:30 -<<-: tournament.enemyEvent { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-25-10 19:30, id => 95, enemy.num => 1, battleId => 83, player => 2 }, _isNotify => true, id => 95, _type => tournament.enemyEvent }
25.10 19:30:30 == NET: uid94 ret: tournament.enemy { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-25-10 19:30, id => 94, enemy.num => 2, battleId => 83, player => 1 }, type => tournament.enemy }
25.10 19:30:30 == NET: uid95 ret: tournament.enemy { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-25-10 19:30, id => 95, enemy.num => 1, battleId => 83, player => 2 }, type => tournament.enemy }
25.10 19:30:30 STATS: vdl.0 cache, locks:4
25.10 19:30:37 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:30:37 TIME: user.ping 0.27 ms
25.10 19:30:37 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:30:48 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:30:48 TIME: user.ping 0.18 ms
25.10 19:30:48 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:30:59 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:30:59 TIME: user.ping 0.2 ms
25.10 19:30:59 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:31:10 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:31:10 TIME: user.ping 0.2 ms
25.10 19:31:10 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:31:21 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:31:21 TIME: user.ping 0.08 ms
25.10 19:31:21 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:31:23 ++ NET: uid95 req: tournament.lose { winner => 94, messageType => tournament.lose }
25.10 19:31:23 TIME: tournament.lose 0.11 ms
25.10 19:31:23 == NET: uid95 ret: tournament.lose { type => tournament.lose, errorCode => ok }
25.10 19:31:23 == NET: uid94 ret: battle.leave { type => battle.leave }
25.10 19:31:30 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:31:30 TIME: user.ping 0.06 ms
25.10 19:31:30 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:31:30 TIMER: Check auto-disconnect...
25.10 19:31:30 STATS: vdl.0 cache, locks:4
25.10 19:31:31 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:31:31 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:31:31 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => active, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [83], rounddate => 2016-25-10 19:30, startdate => 2016-25-10 19:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:31:31 STATS: vdl.0 cache connection, 38 calls, total 0.071312427520752 sec spent, avg 1.88 ms
25.10 19:31:31 TIME: tournament.getAvailableTournament 3.85 ms
25.10 19:31:31 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => active, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [83], rounddate => 2016-25-10 19:30, startdate => 2016-25-10 19:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:31:37 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:31:37 TIME: user.ping 0.16 ms
25.10 19:31:37 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:31:40 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
25.10 19:31:40 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 19:31:40 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => active }
25.10 19:31:40 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => active }
25.10 19:31:40 -<<-: vdl/cache.tournament.setGrid { list => [], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:31:40 TIME: tournament.grid 0.85 ms
25.10 19:31:40 == NET: uid95 ret: tournament.grid { list => [], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:31:45 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:31:45 TIME: user.ping 0.15 ms
25.10 19:31:45 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:31:53 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:31:53 TIME: user.ping 0.18 ms
25.10 19:31:53 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:31:54 ++ NET: uid94 req: tournament.end { lose => 95, dateRound => 2016-25-10 19:30, winner => 94, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 94, player2 => 95, battleId => 83 }
25.10 19:31:54 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 19:31:54 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => active }
25.10 19:31:54 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
25.10 19:31:54 -<<-: vdl/cache.tournament.getBattlesTournaments [83]
25.10 19:31:54 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 19:31:54 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95,94] }
25.10 19:31:54 ->>-: vdl/cache.battle.finishRoom { roomId => 83, _type => vdl/cache.battle.finishRoom }
25.10 19:31:54 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
25.10 19:31:54 ->>-: vdl/cache.battle.deleteRoom { roomId => 83, _type => vdl/cache.battle.deleteRoom }
25.10 19:31:54 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
25.10 19:31:54 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [83] }
25.10 19:31:54 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
25.10 19:31:54 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [94], _type => vdl/cache.tournament.setUsersTournament }
25.10 19:31:54 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
25.10 19:31:54 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 94, round => 1, player1 => 94, player2 => 95 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 19:31:54 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 2, player1 => 94, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:31:54 ->>-: vdl/cache.tournament.addRound { dateRound => 2016-25-10 19:30, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
25.10 19:31:54 -<<-: vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
25.10 19:31:54 ->>-: vdl/cache.tournament.finish { winner => 94, tournamentId => 1, _type => vdl/cache.tournament.finish }
25.10 19:31:54 -<<-: vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
25.10 19:31:54 TIME: tournament.end 23.92 ms
25.10 19:31:54 == NET: uid94 ret: tournament.end { type => tournament.end, errorCode => TournamentEnd }
25.10 19:31:54 == NET: uid95 ret: battle.end { type => battle.end }
25.10 19:32:05 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:32:05 TIME: user.ping 0.22 ms
25.10 19:32:05 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:32:17 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:32:17 TIME: user.ping 0.09 ms
25.10 19:32:17 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:32:20 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:32:20 TIME: user.ping 0.17 ms
25.10 19:32:20 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:32:24 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:32:24 TIME: user.ping 0.15 ms
25.10 19:32:24 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:32:28 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:32:28 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:32:28 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 94, battleFinished => [83], round => 2, id => 1, status => finished, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 19:30, startdate => 2016-25-10 19:30 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:32:28 TIME: tournament.getAvailableTournament 4.8 ms
25.10 19:32:28 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => 94, battleFinished => [83], round => 2, id => 1, status => finished, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 19:30, startdate => 2016-25-10 19:30 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:32:30 TIMER: Check auto-disconnect...
25.10 19:32:30 STATS: vdl.0 cache, locks:4
25.10 19:32:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:32:32 TIME: user.ping 0.16 ms
25.10 19:32:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:32:34 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 2, messageType => tournament.grid }
25.10 19:32:34 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 19:32:34 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
25.10 19:32:34 STATS: vdl.0 cache connection, 52 calls, total 0.100741624832153 sec spent, avg 1.94 ms
25.10 19:32:34 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 19:32:34 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 2, player1 => 94, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:32:34 TIME: tournament.grid 1.15 ms
25.10 19:32:34 == NET: uid95 ret: tournament.grid { list => [{ winner => -1, round => 2, player1 => 94, player2 => null }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:32:41 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:32:41 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:32:41 TIME: user.ping 0.1 ms
25.10 19:32:49 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:32:49 TIME: user.ping 0.11 ms
25.10 19:32:49 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:32:56 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:32:56 TIME: user.ping 0.17 ms
25.10 19:32:56 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:32:57 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:32:57 TIME: user.ping 0.23 ms
25.10 19:32:57 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:33:05 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:33:05 TIME: user.ping 0.15 ms
25.10 19:33:05 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:33:13 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:33:13 TIME: user.ping 0.1 ms
25.10 19:33:13 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:33:21 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:33:21 TIME: user.ping 0.14 ms
25.10 19:33:21 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:33:29 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:33:29 TIME: user.ping 0.1 ms
25.10 19:33:29 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:33:30 TIMER: Check auto-disconnect...
25.10 19:33:30 STATS: vdl.0 cache, locks:4
25.10 19:33:34 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:33:34 TIME: user.ping 0.11 ms
25.10 19:33:34 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:33:37 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:33:37 TIME: user.ping 0.08 ms
25.10 19:33:37 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:33:45 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:33:45 TIME: user.ping 0.21 ms
25.10 19:33:45 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:33:53 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:33:53 TIME: user.ping 0.16 ms
25.10 19:33:53 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:34:01 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:34:01 TIME: user.ping 0.18 ms
25.10 19:34:01 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:34:09 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:34:09 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:34:09 TIME: user.ping 0.21 ms
25.10 19:34:17 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:34:17 TIME: user.ping 0.39 ms
25.10 19:34:17 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:38:44 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
25.10 19:38:44 -<<-: server.login ok
25.10 19:38:44 DB: SELECT * FROM LocalizationStrings
25.10 19:38:44 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 TIMER: Starting timer...
25.10 19:38:44 TIMER: Timer running...
25.10 19:38:44 DB: SELECT * FROM GameVars
25.10 19:38:44 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.10 19:38:44 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.10 19:38:44 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.10 19:38:44 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.10 19:38:44 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
25.10 19:38:44 -<<-: core/quest.getDaily ok
25.10 19:38:44 DB: SELECT * FROM UserAttributeTypes
25.10 19:38:44 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 DB: SELECT * FROM UserVariableTypes
25.10 19:38:44 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.10 19:38:44 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 DB: SELECT * FROM ItemGroups
25.10 19:38:44 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 DB: SELECT * FROM Bundles ORDER BY ID
25.10 19:38:44 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 DB: SELECT * FROM BundleItems ORDER BY ID
25.10 19:38:44 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 SHOP: loading items...
25.10 19:38:44 ->>-: core/shop.getList { _type => core/shop.getList }
25.10 19:38:44 -<<-: core/shop.getList ok
25.10 19:38:44 SHOP: 0 items loaded (0 sec)
25.10 19:38:44 DB: SELECT * FROM EffectAttributeTypes
25.10 19:38:44 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 DB: SELECT * FROM Effects
25.10 19:38:44 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 19:38:44 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 19:38:44 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 DB: SELECT * FROM Badges
25.10 19:38:44 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.10 19:38:44 -<<-: core/server.query ok
25.10 19:38:44 TIMER: Check auto-disconnect...
25.10 19:38:44 STATS: vdl.0 cache, locks:0
25.10 19:38:44 TIMER: Check auto-disconnect...
25.10 19:38:44 STATS: vdl.0 cache, locks:0
25.10 19:38:44 TIMER: Check auto-disconnect...
25.10 19:38:44 STATS: vdl.0 cache, locks:0
25.10 19:42:03 NET: Client (conid:24364516) connected to vdl.0 (clients:1)
25.10 19:42:04 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
25.10 19:42:04 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 19:42:04 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 19:42:04 -<<-: core/server.query ok
25.10 19:42:04 STATS: vdl.0 cache connection, 21 calls, total 0.0214927196502686 sec spent, avg 1.02 ms
25.10 19:42:04 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 19:42:04 -<<-: core/user.isOnlineID ok
25.10 19:42:04 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 19:42:04 -<<-: core/cache.get ok
25.10 19:42:04 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 19:42:04 -<<-: core/cache.get ok
25.10 19:42:04 NET: Client login (conid:24364516, id:95, name:uid95)
25.10 19:42:04 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 19:42:04 -<<-: core/user.loginPost null
25.10 19:42:04 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
25.10 19:42:04 == NET: uid95 ret: user.join { name => uid95, type => user.join }
25.10 19:42:07 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:42:07 TIME: user.ping 0.3 ms
25.10 19:42:07 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:42:14 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 19:42:14 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:42:15 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:42:15 TIME: user.ping 0.16 ms
25.10 19:42:15 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:42:24 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:42:24 TIME: user.ping 0.21 ms
25.10 19:42:24 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:42:24 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:42:24 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:42:24 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 19:44, startdate => 2016-25-10 19:44 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:42:24 TIME: tournament.getAvailableTournament 4.07 ms
25.10 19:42:24 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 19:44, startdate => 2016-25-10 19:44 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:42:29 ++ NET: uid95 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 19:42:29 ->>-: vdl/cache.tournament.addUsers { userId => 95, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 19:42:29 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 19:42:29 TIME: tournament.addUsers 0.58 ms
25.10 19:42:29 == NET: uid95 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 19:42:29 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:42:29 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:42:29 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 19:44, startdate => 2016-25-10 19:44 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:42:29 TIME: tournament.getAvailableTournament 2.46 ms
25.10 19:42:29 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 19:44, startdate => 2016-25-10 19:44 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:42:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:42:32 TIME: user.ping 0.2 ms
25.10 19:42:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:42:35 NET: Client (conid:59626421) connected to vdl.0 (clients:2)
25.10 19:42:41 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:42:41 TIME: user.ping 0.09 ms
25.10 19:42:41 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:42:41 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
25.10 19:42:41 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 19:42:41 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 19:42:41 -<<-: core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
25.10 19:42:41 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 19:42:41 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 19:42:41 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 19:42:41 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 94 } }
25.10 19:42:41 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 19:42:41 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
25.10 19:42:41 NET: Client login (conid:59626421, id:94, name:uid94)
25.10 19:42:41 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 19:42:41 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 19:42:41 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
25.10 19:42:41 == NET: uid94 ret: user.join { name => uid95, type => user.join }
25.10 19:42:41 == NET: uid94 ret: user.join { name => uid94, type => user.join }
25.10 19:42:41 == NET: uid95 ret: user.join { name => uid94, type => user.join }
25.10 19:42:44 TIMER: Check auto-disconnect...
25.10 19:42:44 STATS: vdl.0 cache, locks:4
25.10 19:42:49 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 19:42:49 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:42:53 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:42:53 TIME: user.ping 0.17 ms
25.10 19:42:53 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:42:53 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:42:53 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:42:53 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 19:44, startdate => 2016-25-10 19:44 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:42:53 TIME: tournament.getAvailableTournament 7.54 ms
25.10 19:42:53 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 19:44, startdate => 2016-25-10 19:44 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:42:57 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:42:57 TIME: user.ping 0.2 ms
25.10 19:42:57 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:42:57 ++ NET: uid94 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 19:42:57 ->>-: vdl/cache.tournament.addUsers { userId => 94, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 19:42:57 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 19:42:57 TIME: tournament.addUsers 0.74 ms
25.10 19:42:57 == NET: uid94 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 19:43:05 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:43:05 TIME: user.ping 0.12 ms
25.10 19:43:05 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:43:17 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:43:17 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:43:17 TIME: user.ping 0.16 ms
25.10 19:43:22 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:43:22 TIME: user.ping 0.17 ms
25.10 19:43:22 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:43:25 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:43:25 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:43:25 TIME: user.ping 0.16 ms
25.10 19:43:34 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:43:34 TIME: user.ping 0.19 ms
25.10 19:43:34 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:43:42 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:43:42 TIME: user.ping 0.11 ms
25.10 19:43:42 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:43:44 TIMER: Check auto-disconnect...
25.10 19:43:44 STATS: vdl.0 cache, locks:4
25.10 19:43:44 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:43:44 TIME: user.ping 0.18 ms
25.10 19:43:44 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:43:50 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:43:50 TIME: user.ping 0.2 ms
25.10 19:43:50 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:43:59 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:43:59 TIME: user.ping 0.07 ms
25.10 19:43:59 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:44:07 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:44:07 TIME: user.ping 0.24 ms
25.10 19:44:07 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:44:15 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:44:15 TIME: user.ping 0.11 ms
25.10 19:44:15 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:44:24 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:44:24 TIME: user.ping 0.13 ms
25.10 19:44:24 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:44:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:44:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:44:32 TIME: user.ping 0.22 ms
25.10 19:44:41 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:44:41 TIME: user.ping 0.1 ms
25.10 19:44:41 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:44:44 TIMER: Check auto-disconnect...
25.10 19:44:44 STATS: vdl.0 cache, locks:4
25.10 19:44:44 -<<-: tournament.enemyEvent { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-25-10 19:44, id => 94, enemy.num => 2, battleId => 84, player => 1 }, _isNotify => true, id => 94, _type => tournament.enemyEvent }
25.10 19:44:44 -<<-: tournament.enemyEvent { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-25-10 19:44, id => 95, enemy.num => 1, battleId => 84, player => 2 }, _isNotify => true, id => 95, _type => tournament.enemyEvent }
25.10 19:44:44 == NET: uid95 ret: tournament.enemy { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-25-10 19:44, id => 95, enemy.num => 1, battleId => 84, player => 2 }, type => tournament.enemy }
25.10 19:44:44 == NET: uid94 ret: tournament.enemy { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-25-10 19:44, id => 94, enemy.num => 2, battleId => 84, player => 1 }, type => tournament.enemy }
25.10 19:44:52 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:44:52 TIME: user.ping 0.13 ms
25.10 19:44:52 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:45:03 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:45:03 TIME: user.ping 0.18 ms
25.10 19:45:03 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:45:14 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:45:14 TIME: user.ping 0.17 ms
25.10 19:45:14 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:45:25 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:45:25 TIME: user.ping 0.12 ms
25.10 19:45:25 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:45:37 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:45:37 TIME: user.ping 0.14 ms
25.10 19:45:37 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:45:44 TIMER: Check auto-disconnect...
25.10 19:45:44 STATS: vdl.0 cache, locks:4
25.10 19:45:48 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:45:48 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:45:48 TIME: user.ping 0.21 ms
25.10 19:45:59 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:45:59 TIME: user.ping 0.18 ms
25.10 19:45:59 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:46:10 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:46:10 TIME: user.ping 0.23 ms
25.10 19:46:10 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:46:22 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:46:22 TIME: user.ping 0.18 ms
25.10 19:46:22 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:46:33 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:46:33 TIME: user.ping 0.13 ms
25.10 19:46:33 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:46:44 TIMER: Check auto-disconnect...
25.10 19:46:44 STATS: vdl.0 cache, locks:4
25.10 19:46:44 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:46:44 TIME: user.ping 0.12 ms
25.10 19:46:44 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:46:55 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:46:55 TIME: user.ping 0.16 ms
25.10 19:46:55 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:47:06 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:47:06 TIME: user.ping 0.16 ms
25.10 19:47:06 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:47:17 ++ NET: uid95 req: tournament.lose { winner => 94, messageType => tournament.lose }
25.10 19:47:17 TIME: tournament.lose 0.13 ms
25.10 19:47:17 == NET: uid95 ret: tournament.lose { type => tournament.lose, errorCode => ok }
25.10 19:47:17 == NET: uid94 ret: battle.leave { type => battle.leave }
25.10 19:47:18 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:47:18 TIME: user.ping 0.09 ms
25.10 19:47:18 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:47:26 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:47:26 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:47:26 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => active, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [84], rounddate => 2016-25-10 19:44, startdate => 2016-25-10 19:44 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:47:26 STATS: vdl.0 cache connection, 38 calls, total 0.0586411952972412 sec spent, avg 1.54 ms
25.10 19:47:26 TIME: tournament.getAvailableTournament 5.78 ms
25.10 19:47:26 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => active, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [84], rounddate => 2016-25-10 19:44, startdate => 2016-25-10 19:44 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:47:26 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:47:26 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:47:26 TIME: user.ping 0.06 ms
25.10 19:47:32 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
25.10 19:47:32 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 19:47:32 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => active }
25.10 19:47:32 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => active }
25.10 19:47:32 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 94, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:47:32 TIME: tournament.grid 1.7 ms
25.10 19:47:32 == NET: uid95 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 94, player2 => 95 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:47:34 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:47:34 TIME: user.ping 0.15 ms
25.10 19:47:34 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:47:34 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:47:34 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:47:34 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => active, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [84], rounddate => 2016-25-10 19:44, startdate => 2016-25-10 19:44 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:47:34 TIME: tournament.getAvailableTournament 2.47 ms
25.10 19:47:34 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => active, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [84], rounddate => 2016-25-10 19:44, startdate => 2016-25-10 19:44 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:47:43 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:47:43 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:47:43 TIME: user.ping 0.08 ms
25.10 19:47:44 TIMER: Check auto-disconnect...
25.10 19:47:44 NET: Client (name:uid94 conid:59626421 TCP) disconnected from vdl.0 (clients:1)
25.10 19:47:44 DB: SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true
25.10 19:47:44 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true, _type => core/server.query }
25.10 19:47:44 -<<-: core/server.query { list => {{ id => 84 }}, errorCode => ok, _type => core/server.query }
25.10 19:47:44 ->>-: vdl/cache.battle.infoRoom { roomId => 84, _type => vdl/cache.battle.infoRoom }
25.10 19:47:44 -<<-: vdl/cache.battle.infoRoom { secondId => 95, firstId => 94, _type => vdl/cache.battle.infoRoom, turnId => 94 }
25.10 19:47:44 ->>-: vdl/cache.battle.deleteRoom { roomId => 84, _type => vdl/cache.battle.deleteRoom }
25.10 19:47:44 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
25.10 19:47:44 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 94, _type => core/cache.update }
25.10 19:47:44 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 19:47:44 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 94, _type => core/cache.update }
25.10 19:47:44 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:47:44 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 94, _type => core/user.logoutPost }
25.10 19:47:44 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 19:47:44 == NET: uid95 ret: battle.end { type => battle.end }
25.10 19:47:44 STATS: vdl.0 cache, locks:2
25.10 19:47:51 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:47:51 TIME: user.ping 0.12 ms
25.10 19:47:51 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:48:01 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:48:01 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:48:01 TIME: user.ping 0.23 ms
25.10 19:48:03 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
25.10 19:48:03 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 19:48:03 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => active }
25.10 19:48:03 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => active }
25.10 19:48:03 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 94, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:48:03 TIME: tournament.grid 1.91 ms
25.10 19:48:03 == NET: uid95 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 94, player2 => 95 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:48:11 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:48:11 TIME: user.ping 0.18 ms
25.10 19:48:11 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:48:20 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:48:20 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:48:20 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => active, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [84], rounddate => 2016-25-10 19:44, startdate => 2016-25-10 19:44 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:48:20 TIME: tournament.getAvailableTournament 5.02 ms
25.10 19:48:20 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => active, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [84], rounddate => 2016-25-10 19:44, startdate => 2016-25-10 19:44 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:48:24 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:48:24 TIME: user.ping 0.23 ms
25.10 19:48:24 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:48:28 NET: Client (conid:53648654) connected to vdl.0 (clients:2)
25.10 19:48:33 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
25.10 19:48:33 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 19:48:33 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 19:48:33 -<<-: core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
25.10 19:48:33 STATS: vdl.0 cache connection, 51 calls, total 0.102867841720581 sec spent, avg 2.02 ms
25.10 19:48:33 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 19:48:33 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 19:48:33 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 19:48:33 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 94 } }
25.10 19:48:33 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 19:48:33 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
25.10 19:48:33 NET: Client login (conid:53648654, id:94, name:uid94)
25.10 19:48:33 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 19:48:33 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 19:48:33 == NET: uid95 ret: user.join { name => uid94, type => user.join }
25.10 19:48:33 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
25.10 19:48:33 == NET: uid94 ret: user.join { name => uid95, type => user.join }
25.10 19:48:33 == NET: uid94 ret: user.join { name => uid94, type => user.join }
25.10 19:48:39 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 19:48:39 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:48:41 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:48:41 TIME: user.ping 0.1 ms
25.10 19:48:41 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:48:44 TIMER: Check auto-disconnect...
25.10 19:48:44 STATS: vdl.0 cache, locks:4
25.10 19:48:48 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:48:48 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:48:48 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => active, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [84], rounddate => 2016-25-10 19:44, startdate => 2016-25-10 19:44 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:48:48 TIME: tournament.getAvailableTournament 5.68 ms
25.10 19:48:48 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => active, userList => [{ name => uid95, id => 95 },{ name => uid94, id => 94 }], battleActive => [84], rounddate => 2016-25-10 19:44, startdate => 2016-25-10 19:44 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:48:49 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:48:49 TIME: user.ping 0.19 ms
25.10 19:48:49 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:48:50 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:48:50 TIME: user.ping 0.19 ms
25.10 19:48:50 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:49:01 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:49:01 TIME: user.ping 0.18 ms
25.10 19:49:01 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:49:09 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:49:09 TIME: user.ping 0.18 ms
25.10 19:49:09 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:49:16 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:49:16 TIME: user.ping 0.17 ms
25.10 19:49:16 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:49:22 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:49:22 TIME: user.ping 0.33 ms
25.10 19:49:22 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:49:30 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:49:30 TIME: user.ping 0.07 ms
25.10 19:49:30 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:49:36 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:49:36 TIME: user.ping 0.15 ms
25.10 19:49:36 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:49:38 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:49:38 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:49:38 TIME: user.ping 0.08 ms
25.10 19:49:44 TIMER: Check auto-disconnect...
25.10 19:49:44 STATS: vdl.0 cache, locks:4
25.10 19:49:46 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:49:46 TIME: user.ping 0.08 ms
25.10 19:49:46 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:49:58 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:49:58 TIME: user.ping 0.21 ms
25.10 19:49:58 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:50:44 TIMER: Check auto-disconnect...
25.10 19:50:44 STATS: vdl.0 cache, locks:4
25.10 19:50:44 TIMER: Check auto-disconnect...
25.10 19:50:44 STATS: vdl.0 cache, locks:4
25.10 19:52:16 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:52:16 TIME: user.ping 0.16 ms
25.10 19:52:16 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:52:44 TIMER: Check auto-disconnect...
25.10 19:52:44 STATS: vdl.0 cache, locks:4
25.10 19:52:46 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:52:46 TIME: user.ping 0.2 ms
25.10 19:52:46 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:53:21 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:53:21 TIME: user.ping 0.13 ms
25.10 19:53:21 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:53:44 TIMER: Check auto-disconnect...
25.10 19:53:44 NET: Client (name:uid95 conid:24364516 TCP) disconnected from vdl.0 (clients:1)
25.10 19:53:44 DB: SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true
25.10 19:53:44 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true, _type => core/server.query }
25.10 19:53:44 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 19:53:44 STATS: vdl.0 cache connection, 58 calls, total 0.114157915115356 sec spent, avg 1.97 ms
25.10 19:53:44 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 19:53:44 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 19:53:44 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 19:53:44 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
25.10 19:53:44 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 95, _type => core/cache.update }
25.10 19:53:44 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 19:53:44 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 95, _type => core/cache.update }
25.10 19:53:44 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:53:44 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 95, _type => core/user.logoutPost }
25.10 19:53:44 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 19:53:44 STATS: vdl.0 cache, locks:2
25.10 19:53:44 TIMER: Check auto-disconnect...
25.10 19:53:44 STATS: vdl.0 cache, locks:2
25.10 19:53:44 TIMER: Check auto-disconnect...
25.10 19:53:44 STATS: vdl.0 cache, locks:2
25.10 19:56:10 NET: Client (conid:32578786) connected to vdl.0 (clients:2)
25.10 19:56:10 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
25.10 19:56:10 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 19:56:10 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 19:56:10 -<<-: core/server.query { list => {{ name => uid95, networkid => , isbanned => false, id => 95 }}, errorCode => ok, _type => core/server.query }
25.10 19:56:10 STATS: vdl.0 cache connection, 63 calls, total 0.119723081588745 sec spent, avg 1.9 ms
25.10 19:56:10 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 19:56:10 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 19:56:10 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 19:56:10 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid95, deleted => false, email => , networktype =>   , password => uid95, isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402835, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 95 } }
25.10 19:56:10 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 19:56:10 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 95 } }
25.10 19:56:10 NET: Client login (conid:32578786, id:95, name:uid95)
25.10 19:56:10 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 19:56:10 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 19:56:10 == NET: uid94 ret: user.join { name => uid95, type => user.join }
25.10 19:56:10 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
25.10 19:56:10 == NET: uid95 ret: user.join { name => uid94, type => user.join }
25.10 19:56:10 == NET: uid95 ret: user.join { name => uid95, type => user.join }
25.10 19:56:14 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:56:14 TIME: user.ping 0.16 ms
25.10 19:56:14 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:56:15 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:56:15 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:56:15 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [84], rounddate => 2016-26-10 19:44, startdate => 2016-26-10 19:44 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:56:15 TIME: tournament.getAvailableTournament 2.8 ms
25.10 19:56:15 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [84], rounddate => 2016-26-10 19:44, startdate => 2016-26-10 19:44 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:56:19 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 19:56:19 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:56:19 ++ NET: uid95 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 19:56:19 ->>-: vdl/cache.tournament.addUsers { userId => 95, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 19:56:19 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 19:56:19 == NET: uid95 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 19:56:19 TIME: tournament.addUsers 0.52 ms
25.10 19:56:20 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:56:20 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:56:20 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [84], rounddate => 2016-26-10 19:44, startdate => 2016-26-10 19:44 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:56:20 TIME: tournament.getAvailableTournament 1.16 ms
25.10 19:56:20 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [84], rounddate => 2016-26-10 19:44, startdate => 2016-26-10 19:44 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:56:21 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
25.10 19:56:21 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 19:56:21 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
25.10 19:56:21 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 19:56:21 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95] }
25.10 19:56:21 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => null, player2 => 95 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
25.10 19:56:21 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => null, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:56:21 TIME: tournament.grid 1.46 ms
25.10 19:56:21 == NET: uid95 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => null, player2 => 95 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:56:23 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:56:23 TIME: user.ping 0.15 ms
25.10 19:56:23 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:56:44 TIMER: Check auto-disconnect...
25.10 19:56:44 NET: Client (name:uid94 conid:53648654 TCP) disconnected from vdl.0 (clients:1)
25.10 19:56:44 DB: SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true
25.10 19:56:44 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true, _type => core/server.query }
25.10 19:56:44 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 19:56:44 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 19:56:44 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 19:56:44 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 19:56:44 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
25.10 19:56:44 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 94, _type => core/cache.update }
25.10 19:56:44 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 19:56:44 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 94, _type => core/cache.update }
25.10 19:56:44 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:56:44 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 94, _type => core/user.logoutPost }
25.10 19:56:44 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 19:56:44 STATS: vdl.0 cache, locks:2
25.10 19:57:40 NET: Client (name:uid95 conid:32578786 TCP) disconnected from vdl.0 (clients:0)
25.10 19:57:40 DB: SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true
25.10 19:57:40 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true, _type => core/server.query }
25.10 19:57:40 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 19:57:40 STATS: vdl.0 cache connection, 80 calls, total 0.136530876159668 sec spent, avg 1.71 ms
25.10 19:57:40 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 19:57:40 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 19:57:40 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 19:57:40 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
25.10 19:57:40 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 95, _type => core/cache.update }
25.10 19:57:40 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 19:57:40 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 95, _type => core/cache.update }
25.10 19:57:40 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 19:57:40 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 95, _type => core/user.logoutPost }
25.10 19:57:40 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 19:57:44 TIMER: Check auto-disconnect...
25.10 19:57:44 STATS: vdl.0 cache, locks:0
25.10 19:57:46 NET: Client (conid:49794242) connected to vdl.0 (clients:1)
25.10 19:57:47 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
25.10 19:57:47 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 19:57:47 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 19:57:47 -<<-: core/server.query { list => {{ name => uid95, networkid => , isbanned => false, id => 95 }}, errorCode => ok, _type => core/server.query }
25.10 19:57:47 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 19:57:47 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 19:57:47 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 19:57:47 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid95, deleted => false, email => , networktype =>   , password => uid95, isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402835, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 2, id => 95 } }
25.10 19:57:47 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 19:57:47 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 95 } }
25.10 19:57:47 NET: Client login (conid:49794242, id:95, name:uid95)
25.10 19:57:47 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 19:57:47 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 19:57:47 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
25.10 19:57:47 == NET: uid95 ret: user.join { name => uid95, type => user.join }
25.10 19:57:50 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:57:50 TIME: user.ping 0.21 ms
25.10 19:57:50 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:57:54 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 19:57:54 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
25.10 19:57:58 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:57:58 TIME: user.ping 0.24 ms
25.10 19:57:58 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:58:05 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:58:05 TIME: user.ping 0.28 ms
25.10 19:58:05 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:58:12 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:58:12 TIME: user.ping 0.07 ms
25.10 19:58:12 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:58:15 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 19:58:15 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:58:15 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [84], rounddate => 2016-26-10 19:44, startdate => 2016-26-10 19:44 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:58:15 TIME: tournament.getAvailableTournament 3.63 ms
25.10 19:58:15 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [84], rounddate => 2016-26-10 19:44, startdate => 2016-26-10 19:44 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 19:58:18 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
25.10 19:58:18 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 19:58:18 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
25.10 19:58:18 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 19:58:18 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95] }
25.10 19:58:18 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => null, player2 => 95 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
25.10 19:58:18 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => null, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:58:18 TIME: tournament.grid 1.22 ms
25.10 19:58:18 == NET: uid95 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => null, player2 => 95 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 19:58:20 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 19:58:20 TIME: user.ping 0.1 ms
25.10 19:58:20 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 19:58:27 NET: Client (name:uid95 conid:49794242 TCP) disconnected from vdl.0 (clients:0)
25.10 19:58:27 DB: SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true
25.10 19:58:27 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true, _type => core/server.query }
25.10 19:58:27 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 19:58:27 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 19:58:27 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 19:58:27 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 19:58:27 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
25.10 19:58:27 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 95, _type => core/cache.update }
25.10 19:58:27 -<<-: core/cache.update { errorCode => ok, version => 4, _type => core/cache.update }
25.10 19:58:27 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 95, _type => core/cache.update }
25.10 19:58:27 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 19:58:27 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 95, _type => core/user.logoutPost }
25.10 19:58:27 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
25.10 19:58:44 STATS: vdl.0 cache, locks:0
25.10 19:58:44 TIMER: Check auto-disconnect...
