17.10 17:20:05 NET: Client (conid:50879681) connected to vdl.0 (clients:1)
17.10 17:20:06 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzY= }
17.10 17:20:06 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36'
17.10 17:20:06 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid36' AND Password = E'uid36', _type => core/server.query }
17.10 17:20:06 -<<-: core/server.query ok
17.10 17:20:06 STATS: vdl.0 cache connection, 21 calls, total 0.0206458568572998 sec spent, avg 0.98 ms
17.10 17:20:06 ->>-: core/user.isOnlineID { id => 36, _type => core/user.isOnlineID }
17.10 17:20:06 -<<-: core/user.isOnlineID ok
17.10 17:20:06 ->>-: core/cache.get { type => user, v => -1, id => 36, _type => core/cache.get }
17.10 17:20:06 -<<-: core/cache.get ok
17.10 17:20:06 ->>-: core/cache.get { type => questdata, v => -1, id => 36, _type => core/cache.get }
17.10 17:20:06 -<<-: core/cache.get ok
17.10 17:20:06 NET: Client login (conid:50879681, id:36, name:uid36)
17.10 17:20:06 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 36, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
17.10 17:20:06 -<<-: core/user.loginPost null
17.10 17:20:06 == NET: uid36 ret: user.login { name => uid36, type => user.login, errorCode => ok, id => 36 }
17.10 17:20:06 == NET: uid36 ret: user.join { name => uid36, type => user.join }
17.10 17:20:14 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 36, _type => core/cache.update }
17.10 17:20:14 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:2
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:2
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:2
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 NET: Client (name:uid36 conid:50879681 TCP) disconnected from vdl.0 (clients:0)
17.10 17:20:54 DB: SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true
17.10 17:20:54 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=36 OR secondid=36 AND finished <> true, _type => core/server.query }
17.10 17:20:54 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
17.10 17:20:54 STATS: vdl.0 cache connection, 27 calls, total 0.026273250579834 sec spent, avg 0.97 ms
17.10 17:20:54 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
17.10 17:20:54 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
17.10 17:20:54 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
17.10 17:20:54 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 214
Called from modules/VDLBattleModule.hx line 227
Called from snipe/slave/Server.hx line 994
17.10 17:20:54 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 36, _type => core/cache.update }
17.10 17:20:54 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
17.10 17:20:54 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 36, _type => core/cache.update }
17.10 17:20:54 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
17.10 17:20:54 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 36, _type => core/user.logoutPost }
17.10 17:20:54 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:20:54 STATS: vdl.0 cache, locks:0
17.10 17:20:54 TIMER: Check auto-disconnect...
17.10 17:40:55 STATS: vdl.0 cache, locks:0
17.10 17:41:54 TIMER: Check auto-disconnect...
17.10 17:41:55 STATS: vdl.0 cache, locks:0
17.10 17:42:54 TIMER: Check auto-disconnect...
17.10 17:42:55 STATS: vdl.0 cache, locks:0
17.10 17:43:54 TIMER: Check auto-disconnect...
17.10 17:43:55 STATS: vdl.0 cache, locks:0
17.10 17:44:54 TIMER: Check auto-disconnect...
17.10 17:44:55 STATS: vdl.0 cache, locks:0
17.10 17:45:54 TIMER: Check auto-disconnect...
17.10 17:45:55 STATS: vdl.0 cache, locks:0
17.10 17:46:54 TIMER: Check auto-disconnect...
17.10 17:55:20 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
17.10 17:55:20 -<<-: server.login ok
17.10 17:55:20 DB: SELECT * FROM LocalizationStrings
17.10 17:55:20 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 TIMER: Starting timer...
17.10 17:55:20 TIMER: Timer running...
17.10 17:55:20 DB: SELECT * FROM GameVars
17.10 17:55:20 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
17.10 17:55:20 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
17.10 17:55:20 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
17.10 17:55:20 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
17.10 17:55:20 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
17.10 17:55:20 -<<-: core/quest.getDaily ok
17.10 17:55:20 DB: SELECT * FROM UserAttributeTypes
17.10 17:55:20 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 DB: SELECT * FROM UserVariableTypes
17.10 17:55:20 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
17.10 17:55:20 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 DB: SELECT * FROM ItemGroups
17.10 17:55:20 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 DB: SELECT * FROM Bundles ORDER BY ID
17.10 17:55:20 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 DB: SELECT * FROM BundleItems ORDER BY ID
17.10 17:55:20 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 SHOP: loading items...
17.10 17:55:20 ->>-: core/shop.getList { _type => core/shop.getList }
17.10 17:55:20 -<<-: core/shop.getList ok
17.10 17:55:20 SHOP: 0 items loaded (0 sec)
17.10 17:55:20 DB: SELECT * FROM EffectAttributeTypes
17.10 17:55:20 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 DB: SELECT * FROM Effects
17.10 17:55:20 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
17.10 17:55:20 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
17.10 17:55:20 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 DB: SELECT * FROM Badges
17.10 17:55:20 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
17.10 17:55:20 -<<-: core/server.query ok
17.10 17:55:20 TIMER: Check auto-disconnect...
17.10 17:55:20 STATS: vdl.0 cache, locks:0
17.10 17:55:20 TIMER: Check auto-disconnect...
17.10 17:55:20 STATS: vdl.0 cache, locks:0
17.10 17:55:20 TIMER: Check auto-disconnect...
17.10 17:55:20 STATS: vdl.0 cache, locks:0
17.10 17:55:20 TIMER: Check auto-disconnect...
17.10 17:55:20 STATS: vdl.0 cache, locks:0
17.10 17:55:20 TIMER: Check auto-disconnect...
17.10 17:55:20 STATS: vdl.0 cache, locks:0
