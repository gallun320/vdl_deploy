25.10 18:00:03 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:00:03 TIME: user.ping 0.14 ms
25.10 18:00:03 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:00:11 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:00:11 TIME: user.ping 0.16 ms
25.10 18:00:11 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:00:20 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:00:20 TIME: user.ping 0.08 ms
25.10 18:00:20 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:00:29 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:00:29 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:00:29 TIME: user.ping 0.19 ms
25.10 18:00:37 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:00:37 TIME: user.ping 0.1 ms
25.10 18:00:37 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:00:41 TIMER: Check auto-disconnect...
25.10 18:00:42 STATS: vdl.0 cache, locks:2
25.10 18:00:46 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:00:46 TIME: user.ping 0.22 ms
25.10 18:00:46 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:00:55 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:00:55 TIME: user.ping 0.12 ms
25.10 18:00:55 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:01:04 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:01:04 TIME: user.ping 0.18 ms
25.10 18:01:04 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:01:12 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:01:12 TIME: user.ping 0.13 ms
25.10 18:01:12 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:01:21 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:01:21 TIME: user.ping 0.16 ms
25.10 18:01:21 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:01:30 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:01:30 TIME: user.ping 0.12 ms
25.10 18:01:30 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:01:39 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:01:39 TIME: user.ping 0.16 ms
25.10 18:01:39 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:01:41 TIMER: Check auto-disconnect...
25.10 18:01:42 STATS: vdl.0 cache, locks:2
25.10 18:01:47 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:01:47 TIME: user.ping 0.16 ms
25.10 18:01:47 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:01:56 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:01:56 TIME: user.ping 0.14 ms
25.10 18:01:56 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:02:05 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:02:05 TIME: user.ping 0.16 ms
25.10 18:02:05 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:02:14 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:02:14 TIME: user.ping 0.11 ms
25.10 18:02:14 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:02:22 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:02:22 TIME: user.ping 0.12 ms
25.10 18:02:22 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:02:31 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:02:31 TIME: user.ping 0.2 ms
25.10 18:02:31 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:02:40 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:02:40 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:02:40 TIME: user.ping 0.2 ms
25.10 18:02:41 TIMER: Check auto-disconnect...
25.10 18:02:42 STATS: vdl.0 cache, locks:2
25.10 18:02:49 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:02:49 TIME: user.ping 0.13 ms
25.10 18:02:49 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:02:57 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:02:57 TIME: user.ping 0.11 ms
25.10 18:02:57 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:03:06 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:03:06 TIME: user.ping 0.08 ms
25.10 18:03:06 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:03:15 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:03:15 TIME: user.ping 0.13 ms
25.10 18:03:15 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:03:24 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:03:24 TIME: user.ping 0.17 ms
25.10 18:03:24 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:03:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:03:32 TIME: user.ping 0.15 ms
25.10 18:03:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:03:41 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:03:41 TIME: user.ping 0.13 ms
25.10 18:03:41 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:03:41 TIMER: Check auto-disconnect...
25.10 18:03:42 STATS: vdl.0 cache, locks:2
25.10 18:03:50 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:03:50 TIME: user.ping 0.14 ms
25.10 18:03:50 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:03:59 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:03:59 TIME: user.ping 0.18 ms
25.10 18:03:59 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:04:07 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:04:07 TIME: user.ping 0.09 ms
25.10 18:04:07 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:04:16 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:04:16 TIME: user.ping 0.21 ms
25.10 18:04:16 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:04:25 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:04:25 TIME: user.ping 0.2 ms
25.10 18:04:25 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:04:34 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:04:34 TIME: user.ping 0.15 ms
25.10 18:04:34 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:04:41 TIMER: Check auto-disconnect...
25.10 18:04:42 STATS: vdl.0 cache, locks:2
25.10 18:04:42 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:04:42 TIME: user.ping 0.1 ms
25.10 18:04:42 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:04:51 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:04:51 TIME: user.ping 0.18 ms
25.10 18:04:51 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:05:00 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:05:00 TIME: user.ping 0.15 ms
25.10 18:05:00 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:05:09 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:05:09 TIME: user.ping 0.72 ms
25.10 18:05:09 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:05:17 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:05:17 TIME: user.ping 0.07 ms
25.10 18:05:17 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:05:26 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:05:26 TIME: user.ping 0.14 ms
25.10 18:05:26 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:05:35 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:05:35 TIME: user.ping 0.17 ms
25.10 18:05:35 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:05:41 TIMER: Check auto-disconnect...
25.10 18:05:42 STATS: vdl.0 cache, locks:2
25.10 18:05:44 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:05:44 TIME: user.ping 0.23 ms
25.10 18:05:44 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:05:52 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:05:52 TIME: user.ping 0.11 ms
25.10 18:05:52 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:06:01 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:06:01 TIME: user.ping 0.23 ms
25.10 18:06:01 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:06:10 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:06:10 TIME: user.ping 0.15 ms
25.10 18:06:10 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:06:19 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:06:19 TIME: user.ping 0.23 ms
25.10 18:06:19 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:06:27 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:06:27 TIME: user.ping 0.16 ms
25.10 18:06:27 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:06:36 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:06:36 TIME: user.ping 0.08 ms
25.10 18:06:36 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:06:41 TIMER: Check auto-disconnect...
25.10 18:06:42 STATS: vdl.0 cache, locks:2
25.10 18:06:45 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:06:45 TIME: user.ping 0.08 ms
25.10 18:06:45 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:06:54 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:06:54 TIME: user.ping 0.13 ms
25.10 18:06:54 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:08:16 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
25.10 18:08:16 -<<-: server.login ok
25.10 18:08:16 DB: SELECT * FROM LocalizationStrings
25.10 18:08:16 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 TIMER: Starting timer...
25.10 18:08:16 TIMER: Timer running...
25.10 18:08:16 DB: SELECT * FROM GameVars
25.10 18:08:16 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.10 18:08:16 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.10 18:08:16 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.10 18:08:16 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.10 18:08:16 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
25.10 18:08:16 -<<-: core/quest.getDaily ok
25.10 18:08:16 DB: SELECT * FROM UserAttributeTypes
25.10 18:08:16 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 DB: SELECT * FROM UserVariableTypes
25.10 18:08:16 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.10 18:08:16 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 DB: SELECT * FROM ItemGroups
25.10 18:08:16 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 DB: SELECT * FROM Bundles ORDER BY ID
25.10 18:08:16 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 DB: SELECT * FROM BundleItems ORDER BY ID
25.10 18:08:16 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 SHOP: loading items...
25.10 18:08:16 ->>-: core/shop.getList { _type => core/shop.getList }
25.10 18:08:16 -<<-: core/shop.getList ok
25.10 18:08:16 SHOP: 0 items loaded (0 sec)
25.10 18:08:16 DB: SELECT * FROM EffectAttributeTypes
25.10 18:08:16 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 DB: SELECT * FROM Effects
25.10 18:08:16 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 18:08:16 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 18:08:16 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 DB: SELECT * FROM Badges
25.10 18:08:16 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.10 18:08:16 -<<-: core/server.query ok
25.10 18:08:16 NET: Client (conid:63101417) connected to vdl.0 (clients:1)
25.10 18:08:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:08:18 TRACE: User not logon yet.
25.10 18:08:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:08:26 TRACE: User not logon yet.
25.10 18:08:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:08:35 TRACE: User not logon yet.
25.10 18:08:44 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:08:44 TRACE: User not logon yet.
25.10 18:08:53 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:08:53 TRACE: User not logon yet.
25.10 18:09:02 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:09:02 TRACE: User not logon yet.
25.10 18:09:10 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:09:10 TRACE: User not logon yet.
25.10 18:09:16 TIMER: Check auto-disconnect...
25.10 18:09:16 STATS: vdl.0 cache, locks:0
25.10 18:09:19 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:09:19 TRACE: User not logon yet.
25.10 18:09:28 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:09:28 TRACE: User not logon yet.
25.10 18:09:36 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:09:36 TRACE: User not logon yet.
25.10 18:09:45 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:09:45 TRACE: User not logon yet.
25.10 18:09:54 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:09:54 TRACE: User not logon yet.
25.10 18:10:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:10:03 TRACE: User not logon yet.
25.10 18:10:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:10:11 TRACE: User not logon yet.
25.10 18:10:16 TIMER: Check auto-disconnect...
25.10 18:10:16 STATS: vdl.0 cache, locks:0
25.10 18:10:20 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:10:20 TRACE: User not logon yet.
25.10 18:10:29 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:10:29 TRACE: User not logon yet.
25.10 18:10:38 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:10:38 TRACE: User not logon yet.
25.10 18:10:46 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:10:46 TRACE: User not logon yet.
25.10 18:10:55 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:10:55 TRACE: User not logon yet.
25.10 18:11:04 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:11:04 TRACE: User not logon yet.
25.10 18:11:12 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:11:12 TRACE: User not logon yet.
25.10 18:11:16 TIMER: Check auto-disconnect...
25.10 18:11:16 STATS: vdl.0 cache, locks:0
25.10 18:11:21 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:11:21 TRACE: User not logon yet.
25.10 18:11:30 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:11:30 TRACE: User not logon yet.
25.10 18:11:39 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:11:39 TRACE: User not logon yet.
25.10 18:11:47 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:11:47 TRACE: User not logon yet.
25.10 18:11:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:11:56 TRACE: User not logon yet.
25.10 18:12:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:12:05 TRACE: User not logon yet.
25.10 18:12:14 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:12:14 TRACE: User not logon yet.
25.10 18:12:16 TIMER: Check auto-disconnect...
25.10 18:12:16 STATS: vdl.0 cache, locks:0
25.10 18:12:22 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:12:22 TRACE: User not logon yet.
25.10 18:12:31 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:12:31 TRACE: User not logon yet.
25.10 18:12:40 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:12:40 TRACE: User not logon yet.
25.10 18:12:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:12:49 TRACE: User not logon yet.
25.10 18:12:57 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:12:57 TRACE: User not logon yet.
25.10 18:13:06 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:13:06 TRACE: User not logon yet.
25.10 18:13:15 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:13:15 TRACE: User not logon yet.
25.10 18:13:16 TIMER: Check auto-disconnect...
25.10 18:13:16 STATS: vdl.0 cache, locks:0
25.10 18:13:24 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:13:24 TRACE: User not logon yet.
25.10 18:13:32 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:13:32 TRACE: User not logon yet.
25.10 18:13:41 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:13:41 TRACE: User not logon yet.
25.10 18:13:50 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:13:50 TRACE: User not logon yet.
25.10 18:13:59 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:13:59 TRACE: User not logon yet.
25.10 18:14:07 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:14:07 TRACE: User not logon yet.
25.10 18:14:16 TIMER: Check auto-disconnect...
25.10 18:14:16 STATS: vdl.0 cache, locks:0
25.10 18:14:16 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:14:16 TRACE: User not logon yet.
25.10 18:14:25 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:14:25 TRACE: User not logon yet.
25.10 18:14:34 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:14:34 TRACE: User not logon yet.
25.10 18:14:42 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:14:42 TRACE: User not logon yet.
25.10 18:14:51 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:14:51 TRACE: User not logon yet.
25.10 18:15:00 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:15:00 TRACE: User not logon yet.
25.10 18:15:09 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:15:09 TRACE: User not logon yet.
25.10 18:15:16 TIMER: Check auto-disconnect...
25.10 18:15:16 STATS: vdl.0 cache, locks:0
25.10 18:15:17 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:15:17 TRACE: User not logon yet.
25.10 18:15:26 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:15:26 TRACE: User not logon yet.
25.10 18:15:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:15:35 TRACE: User not logon yet.
25.10 18:15:44 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:15:44 TRACE: User not logon yet.
25.10 18:15:52 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:15:52 TRACE: User not logon yet.
25.10 18:16:01 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:16:01 TRACE: User not logon yet.
25.10 18:16:10 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:16:10 TRACE: User not logon yet.
25.10 18:16:16 TIMER: Check auto-disconnect...
25.10 18:16:16 STATS: vdl.0 cache, locks:0
25.10 18:16:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:16:18 TRACE: User not logon yet.
25.10 18:16:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:16:27 TRACE: User not logon yet.
25.10 18:16:36 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:16:36 TRACE: User not logon yet.
25.10 18:16:45 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:16:45 TRACE: User not logon yet.
25.10 18:16:53 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:16:53 TRACE: User not logon yet.
25.10 18:17:02 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:17:02 TRACE: User not logon yet.
25.10 18:17:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:17:11 TRACE: User not logon yet.
25.10 18:17:16 TIMER: Check auto-disconnect...
25.10 18:17:16 STATS: vdl.0 cache, locks:0
25.10 18:17:20 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:17:20 TRACE: User not logon yet.
25.10 18:17:28 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:17:28 TRACE: User not logon yet.
25.10 18:17:37 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:17:37 TRACE: User not logon yet.
25.10 18:17:46 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:17:46 TRACE: User not logon yet.
25.10 18:17:54 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:17:54 TRACE: User not logon yet.
25.10 18:18:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:18:03 TRACE: User not logon yet.
25.10 18:18:12 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:18:12 TRACE: User not logon yet.
25.10 18:18:16 TIMER: Check auto-disconnect...
25.10 18:18:16 STATS: vdl.0 cache, locks:0
25.10 18:18:21 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:18:21 TRACE: User not logon yet.
25.10 18:18:29 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:18:29 TRACE: User not logon yet.
25.10 18:18:38 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:18:38 TRACE: User not logon yet.
25.10 18:18:47 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:18:47 TRACE: User not logon yet.
25.10 18:18:56 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:18:56 TRACE: User not logon yet.
25.10 18:19:04 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:19:04 TRACE: User not logon yet.
25.10 18:19:13 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:19:13 TRACE: User not logon yet.
25.10 18:19:16 TIMER: Check auto-disconnect...
25.10 18:19:16 STATS: vdl.0 cache, locks:0
25.10 18:19:22 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:19:22 TRACE: User not logon yet.
25.10 18:19:31 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:19:31 TRACE: User not logon yet.
25.10 18:19:39 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:19:39 TRACE: User not logon yet.
25.10 18:19:48 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:19:48 TRACE: User not logon yet.
25.10 18:19:57 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:19:57 TRACE: User not logon yet.
25.10 18:20:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:20:05 TRACE: User not logon yet.
25.10 18:20:14 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:20:14 TRACE: User not logon yet.
25.10 18:20:16 TIMER: Check auto-disconnect...
25.10 18:20:16 STATS: vdl.0 cache, locks:0
25.10 18:20:23 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:20:23 TRACE: User not logon yet.
25.10 18:20:32 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:20:32 TRACE: User not logon yet.
25.10 18:20:40 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:20:40 TRACE: User not logon yet.
25.10 18:20:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
25.10 18:20:49 TRACE: User not logon yet.
25.10 18:32:04 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
25.10 18:32:04 -<<-: server.login ok
25.10 18:32:04 DB: SELECT * FROM LocalizationStrings
25.10 18:32:04 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:04 TIMER: Starting timer...
25.10 18:32:04 TIMER: Timer running...
25.10 18:32:04 DB: SELECT * FROM GameVars
25.10 18:32:04 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:04 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.10 18:32:04 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:04 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.10 18:32:04 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:04 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.10 18:32:04 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:04 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.10 18:32:04 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:04 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
25.10 18:32:04 -<<-: core/quest.getDaily ok
25.10 18:32:04 DB: SELECT * FROM UserAttributeTypes
25.10 18:32:04 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:04 DB: SELECT * FROM UserVariableTypes
25.10 18:32:04 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:04 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.10 18:32:04 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:04 DB: SELECT * FROM ItemGroups
25.10 18:32:04 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:04 DB: SELECT * FROM Bundles ORDER BY ID
25.10 18:32:04 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:04 DB: SELECT * FROM BundleItems ORDER BY ID
25.10 18:32:04 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:04 SHOP: loading items...
25.10 18:32:04 ->>-: core/shop.getList { _type => core/shop.getList }
25.10 18:32:04 -<<-: core/shop.getList ok
25.10 18:32:04 SHOP: 0 items loaded (0 sec)
25.10 18:32:04 DB: SELECT * FROM EffectAttributeTypes
25.10 18:32:04 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:04 DB: SELECT * FROM Effects
25.10 18:32:04 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:04 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 18:32:04 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:04 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 18:32:04 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:04 DB: SELECT * FROM Badges
25.10 18:32:04 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.10 18:32:04 -<<-: core/server.query ok
25.10 18:32:08 NET: Client (conid:9647317) connected to vdl.0 (clients:1)
25.10 18:32:08 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
25.10 18:32:08 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 18:32:08 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 18:32:08 -<<-: core/server.query ok
25.10 18:32:08 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 18:32:08 -<<-: core/user.isOnlineID ok
25.10 18:32:08 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 18:32:08 -<<-: core/cache.get ok
25.10 18:32:08 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 18:32:08 -<<-: core/cache.get ok
25.10 18:32:08 NET: Client login (conid:9647317, id:94, name:uid94)
25.10 18:32:08 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 18:32:08 -<<-: core/user.loginPost null
25.10 18:32:08 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
25.10 18:32:08 == NET: uid94 ret: user.join { name => uid94, type => user.join }
25.10 18:32:13 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:32:13 TIME: user.ping 0.1 ms
25.10 18:32:13 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:32:14 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 18:32:14 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 18:32:33 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:32:33 TIME: user.ping 0.16 ms
25.10 18:32:33 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:32:54 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:32:54 TIME: user.ping 0.17 ms
25.10 18:32:54 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:32:55 NET: Client (name:uid94 conid:9647317 TCP) disconnected from vdl.0 (clients:0)
25.10 18:32:55 DB: SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true
25.10 18:32:55 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true, _type => core/server.query }
25.10 18:32:55 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 18:32:55 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 18:32:55 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 18:32:55 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 18:32:55 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
25.10 18:32:55 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 94, _type => core/cache.update }
25.10 18:32:55 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 18:32:55 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 94, _type => core/cache.update }
25.10 18:32:55 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 18:32:55 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 94, _type => core/user.logoutPost }
25.10 18:32:55 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 18:33:04 TIMER: Check auto-disconnect...
25.10 18:33:04 STATS: vdl.0 cache, locks:0
25.10 18:33:22 NET: Client (conid:72893828) connected to vdl.0 (clients:1)
25.10 18:33:27 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
25.10 18:33:27 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 18:33:27 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 18:33:27 -<<-: core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
25.10 18:33:27 STATS: vdl.0 cache connection, 32 calls, total 0.0418703556060791 sec spent, avg 1.31 ms
25.10 18:33:27 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 18:33:27 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 18:33:27 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 18:33:27 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 94 } }
25.10 18:33:27 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 18:33:27 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
25.10 18:33:27 NET: Client login (conid:72893828, id:94, name:uid94)
25.10 18:33:27 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 18:33:27 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 18:33:27 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
25.10 18:33:27 == NET: uid94 ret: user.join { name => uid94, type => user.join }
25.10 18:33:34 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 18:33:34 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 18:33:40 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:33:40 TIME: user.ping 0.11 ms
25.10 18:33:40 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:33:56 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 18:33:56 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:33:56 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78,79], round => 2, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 18:37, startdate => 2016-25-10 18:37 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:33:56 TIME: tournament.getAvailableTournament 4.91 ms
25.10 18:33:56 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78,79], round => 2, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 18:37, startdate => 2016-25-10 18:37 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:34:02 ++ NET: uid94 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 18:34:02 ->>-: vdl/cache.tournament.addUsers { userId => 94, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 18:34:02 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 18:34:02 TIME: tournament.addUsers 0.7 ms
25.10 18:34:02 == NET: uid94 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 18:34:04 TIMER: Check auto-disconnect...
25.10 18:34:04 STATS: vdl.0 cache, locks:2
25.10 18:34:10 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:34:10 TIME: user.ping 0.1 ms
25.10 18:34:10 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:34:23 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 18:34:23 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:34:23 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78,79], round => 2, id => 1, status => starting, userList => [{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 18:37, startdate => 2016-25-10 18:37 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:34:23 TIME: tournament.getAvailableTournament 5.22 ms
25.10 18:34:23 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78,79], round => 2, id => 1, status => starting, userList => [{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 18:37, startdate => 2016-25-10 18:37 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:34:35 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:34:35 TIME: user.ping 0.18 ms
25.10 18:34:35 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:34:55 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:34:55 TIME: user.ping 0.13 ms
25.10 18:34:55 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:35:04 TIMER: Check auto-disconnect...
25.10 18:35:04 STATS: vdl.0 cache, locks:2
25.10 18:35:15 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:35:15 TIME: user.ping 0.16 ms
25.10 18:35:15 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:35:36 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:35:36 TIME: user.ping 0.17 ms
25.10 18:35:36 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:35:56 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:35:56 TIME: user.ping 0.2 ms
25.10 18:35:56 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:36:04 TIMER: Check auto-disconnect...
25.10 18:36:04 STATS: vdl.0 cache, locks:2
25.10 18:36:38 NET: Client (conid:68210751) connected to vdl.0 (clients:2)
25.10 18:36:39 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
25.10 18:36:39 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 18:36:39 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 18:36:39 -<<-: core/server.query { list => {{ name => uid95, networkid => , isbanned => false, id => 95 }}, errorCode => ok, _type => core/server.query }
25.10 18:36:39 STATS: vdl.0 cache connection, 41 calls, total 0.0603861808776855 sec spent, avg 1.47 ms
25.10 18:36:39 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 18:36:39 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 18:36:39 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 18:36:39 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid95, deleted => false, email => , networktype =>   , password => uid95, isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402835, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 95 } }
25.10 18:36:39 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 18:36:39 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 95 } }
25.10 18:36:39 NET: Client login (conid:68210751, id:95, name:uid95)
25.10 18:36:39 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 18:36:39 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 18:36:39 == NET: uid94 ret: user.join { name => uid95, type => user.join }
25.10 18:36:39 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
25.10 18:36:39 == NET: uid95 ret: user.join { name => uid94, type => user.join }
25.10 18:36:39 == NET: uid95 ret: user.join { name => uid95, type => user.join }
25.10 18:36:44 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:36:44 TIME: user.ping 0.09 ms
25.10 18:36:44 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:36:44 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 18:36:44 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 18:36:45 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 18:36:45 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:36:45 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78,79], round => 2, id => 1, status => starting, userList => [{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 18:37, startdate => 2016-25-10 18:37 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:36:45 TIME: tournament.getAvailableTournament 5.48 ms
25.10 18:36:45 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78,79], round => 2, id => 1, status => starting, userList => [{ name => uid94, id => 94 }], battleActive => [], rounddate => 2016-25-10 18:37, startdate => 2016-25-10 18:37 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:36:49 ++ NET: uid95 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 18:36:49 ->>-: vdl/cache.tournament.addUsers { userId => 95, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 18:36:49 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 18:36:49 TIME: tournament.addUsers 0.83 ms
25.10 18:36:49 == NET: uid95 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 18:36:49 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 18:36:49 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:36:49 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78,79], round => 2, id => 1, status => starting, userList => [{ name => uid94, id => 94 },{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:37, startdate => 2016-25-10 18:37 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:36:49 TIME: tournament.getAvailableTournament 3.32 ms
25.10 18:36:49 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78,79], round => 2, id => 1, status => starting, userList => [{ name => uid94, id => 94 },{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:37, startdate => 2016-25-10 18:37 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:36:53 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:36:53 TIME: user.ping 0.2 ms
25.10 18:36:53 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:37:02 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:37:02 TIME: user.ping 0.17 ms
25.10 18:37:02 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:37:02 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:37:02 TIME: user.ping 0.16 ms
25.10 18:37:02 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:37:04 TIMER: Check auto-disconnect...
25.10 18:37:04 STATS: vdl.0 cache, locks:4
25.10 18:37:11 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:37:11 TIME: user.ping 0.08 ms
25.10 18:37:11 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:37:20 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:37:20 TIME: user.ping 0.17 ms
25.10 18:37:20 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:37:23 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:37:23 TIME: user.ping 0.12 ms
25.10 18:37:23 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:37:29 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:37:29 TIME: user.ping 0.07 ms
25.10 18:37:29 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:37:38 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:37:38 TIME: user.ping 0.14 ms
25.10 18:37:38 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:37:44 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:37:44 TIME: user.ping 0.09 ms
25.10 18:37:44 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:37:46 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:37:46 TIME: user.ping 0.13 ms
25.10 18:37:46 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:37:55 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:37:55 TIME: user.ping 0.16 ms
25.10 18:37:55 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:38:04 TIMER: Check auto-disconnect...
25.10 18:38:04 STATS: vdl.0 cache, locks:4
25.10 18:38:07 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:38:07 TIME: user.ping 0.19 ms
25.10 18:38:07 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:38:08 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:38:08 TIME: user.ping 0.17 ms
25.10 18:38:08 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:38:14 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:38:14 TIME: user.ping 0.15 ms
25.10 18:38:14 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:38:28 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:38:28 TIME: user.ping 0.15 ms
25.10 18:38:28 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:38:58 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:38:58 TIME: user.ping 0.14 ms
25.10 18:38:58 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:39:04 TIMER: Check auto-disconnect...
25.10 18:39:04 STATS: vdl.0 cache, locks:4
25.10 18:39:18 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:39:18 TIME: user.ping 0.07 ms
25.10 18:39:18 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:39:39 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:39:39 TIME: user.ping 0.17 ms
25.10 18:39:39 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:40:00 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:40:00 TIME: user.ping 0.24 ms
25.10 18:40:00 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:40:04 TIMER: Check auto-disconnect...
25.10 18:40:04 STATS: vdl.0 cache, locks:4
25.10 18:40:20 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:40:20 TIME: user.ping 0.08 ms
25.10 18:40:20 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:40:44 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:40:44 TIME: user.ping 0.09 ms
25.10 18:40:44 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:41:04 TIMER: Check auto-disconnect...
25.10 18:41:04 STATS: vdl.0 cache, locks:4
25.10 18:41:26 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
25.10 18:41:26 -<<-: server.login ok
25.10 18:41:26 DB: SELECT * FROM LocalizationStrings
25.10 18:41:26 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:41:26 TIMER: Starting timer...
25.10 18:41:26 TIMER: Timer running...
25.10 18:41:26 DB: SELECT * FROM GameVars
25.10 18:41:26 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:41:26 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
25.10 18:41:26 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:41:26 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
25.10 18:41:26 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:41:26 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
25.10 18:41:26 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:41:26 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
25.10 18:41:26 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:41:26 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
25.10 18:41:26 -<<-: core/quest.getDaily ok
25.10 18:41:26 DB: SELECT * FROM UserAttributeTypes
25.10 18:41:26 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:41:26 DB: SELECT * FROM UserVariableTypes
25.10 18:41:26 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:41:26 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
25.10 18:41:26 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:41:26 DB: SELECT * FROM ItemGroups
25.10 18:41:26 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:41:26 DB: SELECT * FROM Bundles ORDER BY ID
25.10 18:41:26 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:41:26 DB: SELECT * FROM BundleItems ORDER BY ID
25.10 18:41:26 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:41:26 SHOP: loading items...
25.10 18:41:26 ->>-: core/shop.getList { _type => core/shop.getList }
25.10 18:41:26 -<<-: core/shop.getList ok
25.10 18:41:26 SHOP: 0 items loaded (0.001 sec)
25.10 18:41:26 DB: SELECT * FROM EffectAttributeTypes
25.10 18:41:26 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:41:26 DB: SELECT * FROM Effects
25.10 18:41:26 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:41:26 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
25.10 18:41:26 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:41:26 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
25.10 18:41:26 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:41:26 DB: SELECT * FROM Badges
25.10 18:41:26 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
25.10 18:41:26 -<<-: core/server.query ok
25.10 18:42:05 NET: Client (conid:80306379) connected to vdl.0 (clients:1)
25.10 18:42:06 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
25.10 18:42:06 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 18:42:06 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 18:42:06 -<<-: core/server.query ok
25.10 18:42:06 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 18:42:06 -<<-: core/user.isOnlineID ok
25.10 18:42:06 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 18:42:06 -<<-: core/cache.get ok
25.10 18:42:06 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 18:42:06 -<<-: core/cache.get ok
25.10 18:42:06 NET: Client login (conid:80306379, id:95, name:uid95)
25.10 18:42:06 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 18:42:06 -<<-: core/user.loginPost null
25.10 18:42:06 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
25.10 18:42:06 == NET: uid95 ret: user.join { name => uid95, type => user.join }
25.10 18:42:10 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:42:10 TIME: user.ping 0.17 ms
25.10 18:42:10 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:42:16 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 18:42:16 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 18:42:18 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:42:18 TIME: user.ping 0.18 ms
25.10 18:42:18 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:42:26 TIMER: Check auto-disconnect...
25.10 18:42:26 STATS: vdl.0 cache, locks:2
25.10 18:42:26 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:42:26 TIME: user.ping 0.1 ms
25.10 18:42:26 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:42:33 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:42:33 TIME: user.ping 0.15 ms
25.10 18:42:33 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:42:41 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:42:41 TIME: user.ping 0.25 ms
25.10 18:42:41 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:42:49 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:42:49 TIME: user.ping 0.09 ms
25.10 18:42:49 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:42:53 NET: Client (conid:83201434) connected to vdl.0 (clients:2)
25.10 18:42:58 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
25.10 18:42:58 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 18:42:58 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 18:42:58 -<<-: core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
25.10 18:42:58 STATS: vdl.0 cache connection, 27 calls, total 0.038982629776001 sec spent, avg 1.44 ms
25.10 18:42:58 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 18:42:58 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 18:42:58 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 18:42:58 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 94 } }
25.10 18:42:58 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 18:42:58 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
25.10 18:42:58 NET: Client login (conid:83201434, id:94, name:uid94)
25.10 18:42:58 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 18:42:58 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 18:42:58 == NET: uid95 ret: user.join { name => uid94, type => user.join }
25.10 18:42:58 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
25.10 18:42:58 == NET: uid94 ret: user.join { name => uid95, type => user.join }
25.10 18:42:58 == NET: uid94 ret: user.join { name => uid94, type => user.join }
25.10 18:43:06 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 18:43:06 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 18:43:12 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:43:12 TIME: user.ping 0.22 ms
25.10 18:43:12 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:43:13 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:43:13 TIME: user.ping 0.2 ms
25.10 18:43:13 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:43:15 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 18:43:15 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:43:15 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78,79], round => 1, id => 1, status => starting, userList => [{ name => uid94, id => 94 },{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:44, startdate => 2016-25-10 18:44 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:43:15 TIME: tournament.getAvailableTournament 7.57 ms
25.10 18:43:15 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => -1, battleFinished => [78,79], round => 1, id => 1, status => starting, userList => [{ name => uid94, id => 94 },{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:44, startdate => 2016-25-10 18:44 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:43:25 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
25.10 18:43:25 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 18:43:25 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
25.10 18:43:25 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 18:43:25 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [94,95] }
25.10 18:43:25 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => 94, player2 => 95 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
25.10 18:43:25 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 94, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 18:43:25 TIME: tournament.grid 1.78 ms
25.10 18:43:25 == NET: uid95 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 94, player2 => 95 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 18:43:25 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:43:25 TIME: user.ping 0.14 ms
25.10 18:43:25 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:43:26 TIMER: Check auto-disconnect...
25.10 18:43:26 STATS: vdl.0 cache, locks:4
25.10 18:43:33 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:43:33 TIME: user.ping 0.09 ms
25.10 18:43:33 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:43:37 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:43:37 TIME: user.ping 0.16 ms
25.10 18:43:37 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:43:45 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:43:45 TIME: user.ping 0.18 ms
25.10 18:43:45 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:43:53 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:43:53 TIME: user.ping 0.15 ms
25.10 18:43:53 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:44:01 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:44:01 TIME: user.ping 0.14 ms
25.10 18:44:01 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:44:02 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:44:02 TIME: user.ping 0.13 ms
25.10 18:44:02 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:44:09 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:44:09 TIME: user.ping 0.09 ms
25.10 18:44:09 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:44:17 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:44:17 TIME: user.ping 0.11 ms
25.10 18:44:17 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:44:22 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:44:22 TIME: user.ping 0.13 ms
25.10 18:44:22 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:44:24 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:44:24 TIME: user.ping 0.13 ms
25.10 18:44:24 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:44:26 TIMER: Check auto-disconnect...
25.10 18:44:26 -<<-: tournament.enemyEvent { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-25-10 18:44, id => 95, enemy.num => 2, battleId => 80, player => 1 }, _isNotify => true, id => 95, _type => tournament.enemyEvent }
25.10 18:44:26 -<<-: tournament.enemyEvent { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-25-10 18:44, id => 94, enemy.num => 1, battleId => 80, player => 2 }, _isNotify => true, id => 94, _type => tournament.enemyEvent }
25.10 18:44:26 == NET: uid95 ret: tournament.enemy { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-25-10 18:44, id => 95, enemy.num => 2, battleId => 80, player => 1 }, type => tournament.enemy }
25.10 18:44:26 == NET: uid94 ret: tournament.enemy { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-25-10 18:44, id => 94, enemy.num => 1, battleId => 80, player => 2 }, type => tournament.enemy }
25.10 18:44:26 STATS: vdl.0 cache, locks:4
25.10 18:44:35 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:44:35 TIME: user.ping 0.27 ms
25.10 18:44:35 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:44:37 ++ NET: uid94 req: tournament.lose { winner => 95, messageType => tournament.lose }
25.10 18:44:37 TIME: tournament.lose 0.15 ms
25.10 18:44:37 == NET: uid94 ret: tournament.lose { type => tournament.lose, errorCode => ok }
25.10 18:44:37 == NET: uid95 ret: battle.leave { type => battle.leave }
25.10 18:44:37 ++ NET: uid95 req: tournament.end { lose => 94, dateRound => 2016-25-10 18:44, winner => 95, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 95, player2 => 94, battleId => 80 }
25.10 18:44:37 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 18:44:37 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => active }
25.10 18:44:37 STATS: vdl.0 cache connection, 37 calls, total 0.0519735813140869 sec spent, avg 1.4 ms
25.10 18:44:37 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
25.10 18:44:37 -<<-: vdl/cache.tournament.getBattlesTournaments [80]
25.10 18:44:37 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 18:44:37 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [94,95] }
25.10 18:44:37 ->>-: vdl/cache.battle.finishRoom { roomId => 80, _type => vdl/cache.battle.finishRoom }
25.10 18:44:37 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
25.10 18:44:37 ->>-: vdl/cache.battle.deleteRoom { roomId => 80, _type => vdl/cache.battle.deleteRoom }
25.10 18:44:37 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
25.10 18:44:37 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [80] }
25.10 18:44:37 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
25.10 18:44:37 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [95], _type => vdl/cache.tournament.setUsersTournament }
25.10 18:44:37 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
25.10 18:44:37 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 95, round => 1, player1 => 95, player2 => 94 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 18:44:37 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 94, player2 => 95 },{ winner => -1, round => 2, player1 => 95, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 18:44:37 ->>-: vdl/cache.tournament.addRound { dateRound => 2016-25-10 18:44, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
25.10 18:44:37 -<<-: vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
25.10 18:44:37 ->>-: vdl/cache.tournament.finish { winner => 95, tournamentId => 1, _type => vdl/cache.tournament.finish }
25.10 18:44:37 -<<-: vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
25.10 18:44:37 TIME: tournament.end 20.53 ms
25.10 18:44:37 == NET: uid95 ret: tournament.end { type => tournament.end, errorCode => TournamentEnd }
25.10 18:44:37 == NET: uid94 ret: battle.end { type => battle.end }
25.10 18:44:44 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 18:44:44 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:44:44 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [78,79,80], round => 2, id => 1, status => finished, userList => [{ name => uid94, id => 94 },{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:44, startdate => 2016-25-10 18:44 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:44:44 TIME: tournament.getAvailableTournament 3.65 ms
25.10 18:44:44 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [78,79,80], round => 2, id => 1, status => finished, userList => [{ name => uid94, id => 94 },{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:44, startdate => 2016-25-10 18:44 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:44:47 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:44:47 TIME: user.ping 0.2 ms
25.10 18:44:47 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:44:49 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 2, messageType => tournament.grid }
25.10 18:44:49 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 18:44:49 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
25.10 18:44:49 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 18:44:49 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 94, player2 => 95 },{ winner => -1, round => 2, player1 => 95, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 18:44:49 TIME: tournament.grid 0.77 ms
25.10 18:44:49 == NET: uid95 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 94, player2 => 95 },{ winner => -1, round => 2, player1 => 95, player2 => null }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 18:44:49 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:44:49 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:44:49 TIME: user.ping 0.17 ms
25.10 18:44:58 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:44:58 TIME: user.ping 0.18 ms
25.10 18:44:58 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:45:10 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:45:10 TIME: user.ping 0.15 ms
25.10 18:45:10 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:45:11 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:45:11 TIME: user.ping 0.16 ms
25.10 18:45:11 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:45:22 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:45:22 TIME: user.ping 0.18 ms
25.10 18:45:22 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:45:26 TIMER: Check auto-disconnect...
25.10 18:45:26 STATS: vdl.0 cache, locks:4
25.10 18:45:32 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:45:32 TIME: user.ping 0.09 ms
25.10 18:45:32 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:45:33 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:45:33 TIME: user.ping 0.12 ms
25.10 18:45:33 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:46:01 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:46:01 TIME: user.ping 0.23 ms
25.10 18:46:01 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:46:13 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:46:13 TIME: user.ping 0.15 ms
25.10 18:46:13 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:46:23 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:46:23 TIME: user.ping 0.19 ms
25.10 18:46:23 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:46:26 TIMER: Check auto-disconnect...
25.10 18:46:26 STATS: vdl.0 cache, locks:4
25.10 18:46:34 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:46:34 TIME: user.ping 0.25 ms
25.10 18:46:34 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:46:44 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:46:44 TIME: user.ping 0.11 ms
25.10 18:46:44 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:46:55 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:46:55 TIME: user.ping 0.19 ms
25.10 18:46:55 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:47:05 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:47:05 TIME: user.ping 0.11 ms
25.10 18:47:05 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:47:26 TIMER: Check auto-disconnect...
25.10 18:47:26 STATS: vdl.0 cache, locks:4
25.10 18:48:09 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:48:09 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:48:09 TIME: user.ping 0.36 ms
25.10 18:48:20 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:48:20 TIME: user.ping 0.17 ms
25.10 18:48:20 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:48:26 TIMER: Check auto-disconnect...
25.10 18:48:26 STATS: vdl.0 cache, locks:4
25.10 18:48:30 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:48:30 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:48:30 TIME: user.ping 0.37 ms
25.10 18:49:26 TIMER: Check auto-disconnect...
25.10 18:49:26 NET: Client (name:uid94 conid:83201434 TCP) disconnected from vdl.0 (clients:1)
25.10 18:49:26 DB: SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true
25.10 18:49:26 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=94 OR secondid=94 AND finished <> true, _type => core/server.query }
25.10 18:49:26 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 18:49:26 STATS: vdl.0 cache connection, 50 calls, total 0.077517032623291 sec spent, avg 1.55 ms
25.10 18:49:26 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 18:49:26 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 18:49:26 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 18:49:26 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
25.10 18:49:26 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 94, _type => core/cache.update }
25.10 18:49:26 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 18:49:26 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 94, _type => core/cache.update }
25.10 18:49:26 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 18:49:26 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 94, _type => core/user.logoutPost }
25.10 18:49:26 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 18:49:26 STATS: vdl.0 cache, locks:2
25.10 18:49:26 TIMER: Check auto-disconnect...
25.10 18:49:26 STATS: vdl.0 cache, locks:2
25.10 18:49:26 TIMER: Check auto-disconnect...
25.10 18:49:26 STATS: vdl.0 cache, locks:2
25.10 18:49:26 TIMER: Check auto-disconnect...
25.10 18:49:26 NET: Client (name:uid95 conid:80306379 TCP) disconnected from vdl.0 (clients:0)
25.10 18:49:26 DB: SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true
25.10 18:49:26 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true, _type => core/server.query }
25.10 18:49:26 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 18:49:26 STATS: vdl.0 cache connection, 55 calls, total 0.0828769207000732 sec spent, avg 1.51 ms
25.10 18:49:26 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 18:49:26 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 18:49:26 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 18:49:26 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
25.10 18:49:26 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 95, _type => core/cache.update }
25.10 18:49:26 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 18:49:26 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 95, _type => core/cache.update }
25.10 18:49:26 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 18:49:26 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 95, _type => core/user.logoutPost }
25.10 18:49:26 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 18:49:26 STATS: vdl.0 cache, locks:0
25.10 18:49:26 TIMER: Check auto-disconnect...
25.10 18:49:26 STATS: vdl.0 cache, locks:0
25.10 18:53:27 NET: Client (conid:97706785) connected to vdl.0 (clients:1)
25.10 18:53:28 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
25.10 18:53:28 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 18:53:28 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 18:53:28 -<<-: core/server.query { list => {{ name => uid95, networkid => , isbanned => false, id => 95 }}, errorCode => ok, _type => core/server.query }
25.10 18:53:28 STATS: vdl.0 cache connection, 60 calls, total 0.0884017944335938 sec spent, avg 1.47 ms
25.10 18:53:28 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 18:53:28 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 18:53:28 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 18:53:28 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid95, deleted => false, email => , networktype =>   , password => uid95, isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402835, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 95 } }
25.10 18:53:28 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 18:53:28 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 95 } }
25.10 18:53:28 NET: Client login (conid:97706785, id:95, name:uid95)
25.10 18:53:28 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 18:53:28 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 18:53:28 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
25.10 18:53:28 == NET: uid95 ret: user.join { name => uid95, type => user.join }
25.10 18:53:32 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:53:32 TIME: user.ping 0.16 ms
25.10 18:53:32 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:53:34 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 18:53:34 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:53:34 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [78,79,80], round => 2, id => 1, status => finished, userList => [{ name => uid94, id => 94 },{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:44, startdate => 2016-25-10 18:44 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:53:34 TIME: tournament.getAvailableTournament 3.29 ms
25.10 18:53:34 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [78,79,80], round => 2, id => 1, status => finished, userList => [{ name => uid94, id => 94 },{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:44, startdate => 2016-25-10 18:44 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:53:36 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 18:53:36 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 18:53:40 ++ NET: uid95 req: tournament.grid { tournamentId => 1, round => 2, messageType => tournament.grid }
25.10 18:53:40 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 18:53:40 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => finished }
25.10 18:53:40 ->>-: vdl/cache.tournament.setGrid { battles => [], tournamentId => 1, round => 2, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 18:53:40 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => 94, player2 => 95 },{ winner => -1, round => 2, player1 => 95, player2 => null }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 18:53:40 TIME: tournament.grid 1.4 ms
25.10 18:53:40 == NET: uid95 ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => 94, player2 => 95 },{ winner => -1, round => 2, player1 => 95, player2 => null }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 18:53:40 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:53:40 TIME: user.ping 0.21 ms
25.10 18:53:40 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:53:46 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 18:53:46 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:53:46 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [78,79,80], round => 2, id => 1, status => finished, userList => [{ name => uid94, id => 94 },{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:44, startdate => 2016-25-10 18:44 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:53:46 TIME: tournament.getAvailableTournament 1.59 ms
25.10 18:53:46 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [78,79,80], round => 2, id => 1, status => finished, userList => [{ name => uid94, id => 94 },{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:44, startdate => 2016-25-10 18:44 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:53:49 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:53:49 TIME: user.ping 0.2 ms
25.10 18:53:49 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:53:57 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:53:57 TIME: user.ping 0.18 ms
25.10 18:53:57 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:54:05 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:54:05 TIME: user.ping 0.15 ms
25.10 18:54:05 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:54:06 NET: Client (name:uid95 conid:97706785 TCP) disconnected from vdl.0 (clients:0)
25.10 18:54:06 DB: SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true
25.10 18:54:06 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=95 OR secondid=95 AND finished <> true, _type => core/server.query }
25.10 18:54:06 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
25.10 18:54:06 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 18:54:06 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
25.10 18:54:06 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
25.10 18:54:06 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 215
Called from modules/VDLBattleModule.hx line 228
Called from snipe/slave/Server.hx line 994
25.10 18:54:06 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 95, _type => core/cache.update }
25.10 18:54:06 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
25.10 18:54:06 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 95, _type => core/cache.update }
25.10 18:54:06 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 18:54:06 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 95, _type => core/user.logoutPost }
25.10 18:54:06 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
25.10 18:54:26 TIMER: Check auto-disconnect...
25.10 18:54:26 STATS: vdl.0 cache, locks:0
25.10 18:55:23 NET: Client (conid:76247501) connected to vdl.0 (clients:1)
25.10 18:55:24 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTU= }
25.10 18:55:24 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95'
25.10 18:55:24 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid95' AND Password = E'uid95', _type => core/server.query }
25.10 18:55:24 -<<-: core/server.query { list => {{ name => uid95, networkid => , isbanned => false, id => 95 }}, errorCode => ok, _type => core/server.query }
25.10 18:55:24 STATS: vdl.0 cache connection, 75 calls, total 0.106806755065918 sec spent, avg 1.42 ms
25.10 18:55:24 ->>-: core/user.isOnlineID { id => 95, _type => core/user.isOnlineID }
25.10 18:55:24 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 18:55:24 ->>-: core/cache.get { type => user, v => -1, id => 95, _type => core/cache.get }
25.10 18:55:24 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid95, deleted => false, email => , networktype =>   , password => uid95, isbanned => false, regdate => 2016-10-25 16:40:34.208622+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402835, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 95 } }
25.10 18:55:24 ->>-: core/cache.get { type => questdata, v => -1, id => 95, _type => core/cache.get }
25.10 18:55:24 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 95 } }
25.10 18:55:24 NET: Client login (conid:76247501, id:95, name:uid95)
25.10 18:55:24 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 95, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
25.10 18:55:24 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 18:55:24 == NET: uid95 ret: user.login { name => uid95, type => user.login, errorCode => ok, id => 95 }
25.10 18:55:24 == NET: uid95 ret: user.join { name => uid95, type => user.join }
25.10 18:55:26 TIMER: Check auto-disconnect...
25.10 18:55:26 STATS: vdl.0 cache, locks:2
25.10 18:55:28 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:55:28 TIME: user.ping 0.2 ms
25.10 18:55:28 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:55:29 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 18:55:29 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:55:29 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 18:58, startdate => 2016-25-10 18:58 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:55:29 TIME: tournament.getAvailableTournament 1.53 ms
25.10 18:55:29 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [], round => 1, id => 1, status => starting, userList => [], battleActive => [], rounddate => 2016-25-10 18:58, startdate => 2016-25-10 18:58 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:55:31 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 95, _type => core/cache.update }
25.10 18:55:31 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 18:55:36 ++ NET: uid95 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 18:55:36 ->>-: vdl/cache.tournament.addUsers { userId => 95, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 18:55:36 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 18:55:36 TIME: tournament.addUsers 0.55 ms
25.10 18:55:36 == NET: uid95 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 18:55:36 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 18:55:36 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:55:36 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:58, startdate => 2016-25-10 18:58 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:55:36 TIME: tournament.getAvailableTournament 2.26 ms
25.10 18:55:36 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:58, startdate => 2016-25-10 18:58 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:55:37 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:55:37 TIME: user.ping 0.13 ms
25.10 18:55:37 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:55:45 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:55:45 TIME: user.ping 0.18 ms
25.10 18:55:45 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:55:54 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:55:54 TIME: user.ping 0.08 ms
25.10 18:55:54 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:56:03 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:56:03 TIME: user.ping 0.07 ms
25.10 18:56:03 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:56:18 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:56:18 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:56:18 TIME: user.ping 0.12 ms
25.10 18:56:24 NET: Client (conid:24646381) connected to vdl.0 (clients:2)
25.10 18:56:26 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:56:26 TIME: user.ping 0.13 ms
25.10 18:56:26 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:56:26 TIMER: Check auto-disconnect...
25.10 18:56:26 STATS: vdl.0 cache, locks:2
25.10 18:56:30 ++ NET: null req: user.login { messageType => user.login, token => dWlkOTQ= }
25.10 18:56:30 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94'
25.10 18:56:30 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid94' AND Password = E'uid94', _type => core/server.query }
25.10 18:56:30 -<<-: core/server.query { list => {{ name => uid94, networkid => , isbanned => false, id => 94 }}, errorCode => ok, _type => core/server.query }
25.10 18:56:30 STATS: vdl.0 cache connection, 84 calls, total 0.1203293800354 sec spent, avg 1.43 ms
25.10 18:56:30 ->>-: core/user.isOnlineID { id => 94, _type => core/user.isOnlineID }
25.10 18:56:30 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
25.10 18:56:30 ->>-: core/cache.get { type => user, v => -1, id => 94, _type => core/cache.get }
25.10 18:56:30 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid94, deleted => false, email => , networktype =>   , password => uid94, isbanned => false, regdate => 2016-10-25 16:32:22.177493+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1477402348, lastLoginDate => 299, lastLoadDate => 1026 }, effects => { list => [] } }}, version => 0, id => 94 } }
25.10 18:56:30 ->>-: core/cache.get { type => questdata, v => -1, id => 94, _type => core/cache.get }
25.10 18:56:30 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 94 } }
25.10 18:56:30 NET: Client login (conid:24646381, id:94, name:uid94)
25.10 18:56:30 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 94, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
25.10 18:56:30 -<<-: core/user.loginPost { _type => core/user.loginPost }
25.10 18:56:30 == NET: uid94 ret: user.login { name => uid94, type => user.login, errorCode => ok, id => 94 }
25.10 18:56:30 == NET: uid95 ret: user.join { name => uid94, type => user.join }
25.10 18:56:30 == NET: uid94 ret: user.join { name => uid95, type => user.join }
25.10 18:56:30 == NET: uid94 ret: user.join { name => uid94, type => user.join }
25.10 18:56:36 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 94, _type => core/cache.update }
25.10 18:56:36 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
25.10 18:56:43 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:56:43 TIME: user.ping 0.11 ms
25.10 18:56:43 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:56:45 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:56:45 TIME: user.ping 0.13 ms
25.10 18:56:45 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:56:47 ++ NET: uid94 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 18:56:47 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:56:47 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:58, startdate => 2016-25-10 18:58 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:56:47 TIME: tournament.getAvailableTournament 3.71 ms
25.10 18:56:47 == NET: uid94 ret: tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [], round => 1, id => 1, status => starting, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:58, startdate => 2016-25-10 18:58 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:56:50 ++ NET: uid94 req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
25.10 18:56:50 ->>-: vdl/cache.tournament.addUsers { userId => 94, tournament => 1, _type => vdl/cache.tournament.addUsers }
25.10 18:56:50 -<<-: vdl/cache.tournament.addUsers { errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 18:56:50 TIME: tournament.addUsers 0.79 ms
25.10 18:56:50 == NET: uid94 ret: tournament.addUsers { type => tournament.addUsers, errorCode => ok, _type => vdl/cache.tournament.addUsers }
25.10 18:56:51 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:56:51 TIME: user.ping 0.14 ms
25.10 18:56:51 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:56:59 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:56:59 TIME: user.ping 0.55 ms
25.10 18:56:59 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:57:06 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:57:06 TIME: user.ping 0.14 ms
25.10 18:57:06 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:57:12 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:57:12 TIME: user.ping 0.12 ms
25.10 18:57:12 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:57:26 TIMER: Check auto-disconnect...
25.10 18:57:26 STATS: vdl.0 cache, locks:4
25.10 18:57:27 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:57:27 TIME: user.ping 0.1 ms
25.10 18:57:27 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:57:27 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:57:27 TIME: user.ping 0.12 ms
25.10 18:57:27 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:57:35 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:57:35 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:57:35 TIME: user.ping 0.18 ms
25.10 18:57:42 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:57:42 TIME: user.ping 0.25 ms
25.10 18:57:42 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:57:47 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:57:47 TIME: user.ping 0.17 ms
25.10 18:57:47 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:57:50 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:57:50 TIME: user.ping 0.12 ms
25.10 18:57:50 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:57:58 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:57:58 TIME: user.ping 0.13 ms
25.10 18:57:58 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:58:06 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:58:06 TIME: user.ping 0.31 ms
25.10 18:58:06 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:58:08 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:58:08 TIME: user.ping 0.15 ms
25.10 18:58:08 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:58:14 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:58:14 TIME: user.ping 0.2 ms
25.10 18:58:14 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:58:22 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:58:22 TIME: user.ping 0.12 ms
25.10 18:58:22 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:58:26 TIMER: Check auto-disconnect...
25.10 18:58:26 STATS: vdl.0 cache, locks:4
25.10 18:58:26 -<<-: tournament.enemyEvent { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-25-10 18:58, id => 94, enemy.num => 2, battleId => 81, player => 1 }, _isNotify => true, id => 94, _type => tournament.enemyEvent }
25.10 18:58:26 -<<-: tournament.enemyEvent { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-25-10 18:58, id => 95, enemy.num => 1, battleId => 81, player => 2 }, _isNotify => true, id => 95, _type => tournament.enemyEvent }
25.10 18:58:26 == NET: uid94 ret: tournament.enemy { data => { name => uid94, tournamentId => 1, enemy.id => 95, enemy.name => uid95, round => 1, roundDate => 2016-25-10 18:58, id => 94, enemy.num => 2, battleId => 81, player => 1 }, type => tournament.enemy }
25.10 18:58:26 == NET: uid95 ret: tournament.enemy { data => { name => uid95, tournamentId => 1, enemy.id => 94, enemy.name => uid94, round => 1, roundDate => 2016-25-10 18:58, id => 95, enemy.num => 1, battleId => 81, player => 2 }, type => tournament.enemy }
25.10 18:58:31 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:58:31 TIME: user.ping 0.15 ms
25.10 18:58:31 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:58:42 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:58:42 TIME: user.ping 0.11 ms
25.10 18:58:42 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:58:53 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:58:53 TIME: user.ping 0.14 ms
25.10 18:58:53 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:59:03 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:59:03 TIME: user.ping 0.17 ms
25.10 18:59:03 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:59:14 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:59:14 TIME: user.ping 0.1 ms
25.10 18:59:14 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:59:25 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:59:25 TIME: user.ping 0.09 ms
25.10 18:59:25 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:59:26 TIMER: Check auto-disconnect...
25.10 18:59:26 STATS: vdl.0 cache, locks:4
25.10 18:59:42 ++ NET: uid94 req: tournament.lose { winner => 95, messageType => tournament.lose }
25.10 18:59:42 == NET: uid94 ret: tournament.lose { type => tournament.lose, errorCode => ok }
25.10 18:59:42 TIME: tournament.lose 0.08 ms
25.10 18:59:42 == NET: uid95 ret: battle.leave { type => battle.leave }
25.10 18:59:45 ++ NET: uid95 req: tournament.end { lose => 94, dateRound => 2016-25-10 18:58, winner => 95, tournamentId => 1, round => 1, messageType => tournament.end, player1 => 94, player2 => 95, battleId => 81 }
25.10 18:59:45 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
25.10 18:59:45 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => active }
25.10 18:59:45 STATS: vdl.0 cache connection, 92 calls, total 0.130974054336548 sec spent, avg 1.42 ms
25.10 18:59:45 ->>-: vdl/cache.tournament.getBattlesTournaments { tournament => 1, _type => vdl/cache.tournament.getBattlesTournaments }
25.10 18:59:45 -<<-: vdl/cache.tournament.getBattlesTournaments [81]
25.10 18:59:45 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
25.10 18:59:45 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [95,94] }
25.10 18:59:45 ->>-: vdl/cache.battle.finishRoom { roomId => 81, _type => vdl/cache.battle.finishRoom }
25.10 18:59:45 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
25.10 18:59:45 ->>-: vdl/cache.battle.deleteRoom { roomId => 81, _type => vdl/cache.battle.deleteRoom }
25.10 18:59:45 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
25.10 18:59:45 ->>-: vdl/cache.tournament.setBattlesTournaments { typeBattle => finished, tournament => 1, _type => vdl/cache.tournament.setBattlesTournaments, battlesData => [81] }
25.10 18:59:45 -<<-: vdl/cache.tournament.setBattlesTournaments { errorCode => ok, _type => vdl/cache.tournament.setBattlesTournaments }
25.10 18:59:45 ->>-: vdl/cache.tournament.setUsersTournament { tournament => 1, usersData => [95], _type => vdl/cache.tournament.setUsersTournament }
25.10 18:59:45 -<<-: vdl/cache.tournament.setUsersTournament { errorCode => ok, _type => vdl/cache.tournament.setUsersTournament }
25.10 18:59:45 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => 95, round => 1, player1 => 94, player2 => 95 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => finished }
25.10 18:59:45 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => 95, round => 1, player1 => 94, player2 => 95 },{ winner => -1, round => 2, player1 => 95, player2 => 95 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
25.10 18:59:45 ->>-: vdl/cache.tournament.addRound { dateRound => 2016-25-10 18:58, tournamentId => 1, round => 2, _type => vdl/cache.tournament.addRound, status => finished }
25.10 18:59:45 -<<-: vdl/cache.tournament.addRound { errorCode => ok, _type => vdl/cache.tournament.addRound }
25.10 18:59:45 ->>-: vdl/cache.tournament.finish { winner => 95, tournamentId => 1, _type => vdl/cache.tournament.finish }
25.10 18:59:45 -<<-: vdl/cache.tournament.finish { _type => vdl/cache.tournament.finish }
25.10 18:59:45 TIME: tournament.end 28.51 ms
25.10 18:59:45 == NET: uid95 ret: tournament.end { type => tournament.end, errorCode => TournamentEnd }
25.10 18:59:45 == NET: uid94 ret: battle.end { type => battle.end }
25.10 18:59:46 ++ NET: uid94 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:59:46 TIME: user.ping 0.16 ms
25.10 18:59:46 == NET: uid94 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:59:52 ++ NET: uid95 req: user.ping { messageType => user.ping, msg => ok }
25.10 18:59:52 TIME: user.ping 0.13 ms
25.10 18:59:52 == NET: uid95 ret: user.ping { type => user.ping, errorCode => ok }
25.10 18:59:58 ++ NET: uid95 req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
25.10 18:59:58 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:59:58 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [81], round => 2, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:58, startdate => 2016-25-10 18:58 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
25.10 18:59:58 TIME: tournament.getAvailableTournament 1.31 ms
25.10 18:59:58 == NET: uid95 ret: tournament.getAvailableTournament { list => [{ name => test, winner => 95, battleFinished => [81], round => 2, id => 1, status => finished, userList => [{ name => uid95, id => 95 }], battleActive => [], rounddate => 2016-25-10 18:58, startdate => 2016-25-10 18:58 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
