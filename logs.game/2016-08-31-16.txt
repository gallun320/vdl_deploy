31.08 16:02:26 NET: Client (conid:60976411) connected to vdl.0 (clients:1)
31.08 16:02:28 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 16:02:28 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 16:02:28 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 16:02:28 -<<-: core/server.query ok
31.08 16:02:28 STATS: vdl.0 cache connection, 21 calls, total 0.0270414352416992 sec spent, avg 1.29 ms
31.08 16:02:28 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 16:02:28 -<<-: core/user.isOnlineID ok
31.08 16:02:28 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 16:02:28 -<<-: core/cache.get ok
31.08 16:02:28 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 16:02:28 -<<-: core/cache.get ok
31.08 16:02:28 NET: Client login (conid:60976411, id:2, name:test1)
31.08 16:02:28 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 16:02:28 -<<-: core/user.loginPost null
31.08 16:02:28 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 16:02:28 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 16:02:28 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 16:02:28 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 16:02:28 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
31.08 16:02:28 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
31.08 16:02:28 -<<-: vdl/cache.battle.create { errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
31.08 16:02:28 TIME: battle.find 30.22 ms
31.08 16:02:28 == NET: test1 ret: battle.find { type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
31.08 16:02:34 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 16:02:34 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 16:04:28 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 16:04:28 -<<-: server.login ok
31.08 16:04:28 DB: SELECT * FROM LocalizationStrings
31.08 16:04:28 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 TIMER: Starting timer...
31.08 16:04:28 TIMER: Timer running...
31.08 16:04:28 DB: SELECT * FROM GameVars
31.08 16:04:28 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 16:04:28 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 16:04:28 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 16:04:28 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 16:04:28 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 16:04:28 -<<-: core/quest.getDaily ok
31.08 16:04:28 DB: SELECT * FROM UserAttributeTypes
31.08 16:04:28 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 DB: SELECT * FROM UserVariableTypes
31.08 16:04:28 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 16:04:28 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 DB: SELECT * FROM ItemGroups
31.08 16:04:28 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 DB: SELECT * FROM Bundles ORDER BY ID
31.08 16:04:28 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 16:04:28 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 SHOP: loading items...
31.08 16:04:28 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 16:04:28 -<<-: core/shop.getList ok
31.08 16:04:28 SHOP: 0 items loaded (0 sec)
31.08 16:04:28 DB: SELECT * FROM EffectAttributeTypes
31.08 16:04:28 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 DB: SELECT * FROM Effects
31.08 16:04:28 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 16:04:28 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 16:04:28 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 DB: SELECT * FROM Badges
31.08 16:04:28 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 16:04:28 -<<-: core/server.query ok
31.08 16:04:28 TIMER: Check auto-disconnect...
31.08 16:04:28 STATS: vdl.0 cache, locks:0
31.08 16:04:28 TIMER: Check auto-disconnect...
31.08 16:04:28 STATS: vdl.0 cache, locks:0
31.08 16:04:28 TIMER: Check auto-disconnect...
31.08 16:04:28 STATS: vdl.0 cache, locks:0
31.08 16:04:28 TIMER: Check auto-disconnect...
31.08 16:04:28 STATS: vdl.0 cache, locks:0
31.08 16:04:28 TIMER: Check auto-disconnect...
31.08 16:04:28 STATS: vdl.0 cache, locks:0
31.08 16:10:14 NET: Client (conid:70037384) connected to vdl.0 (clients:1)
31.08 16:10:17 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 16:10:17 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 16:10:17 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 16:10:17 -<<-: core/server.query ok
31.08 16:10:17 STATS: vdl.0 cache connection, 21 calls, total 0.0411863327026367 sec spent, avg 1.96 ms
31.08 16:10:17 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 16:10:17 -<<-: core/user.isOnlineID ok
31.08 16:10:17 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 16:10:17 -<<-: core/cache.get ok
31.08 16:10:17 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 16:10:17 -<<-: core/cache.get ok
31.08 16:10:17 NET: Client login (conid:70037384, id:2, name:test1)
31.08 16:10:17 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 16:10:17 -<<-: core/user.loginPost null
31.08 16:10:17 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 16:10:17 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 16:10:17 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 16:10:17 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 16:10:17 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
31.08 16:10:17 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
31.08 16:10:17 -<<-: vdl/cache.battle.create { errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
31.08 16:10:17 TIME: battle.find 38.51 ms
31.08 16:10:17 == NET: test1 ret: battle.find { type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
31.08 16:10:23 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 16:10:23 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 16:13:07 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 16:13:07 -<<-: server.login ok
31.08 16:13:07 DB: SELECT * FROM LocalizationStrings
31.08 16:13:07 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 TIMER: Starting timer...
31.08 16:13:07 TIMER: Timer running...
31.08 16:13:07 DB: SELECT * FROM GameVars
31.08 16:13:07 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 16:13:07 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 16:13:07 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 16:13:07 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 16:13:07 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 16:13:07 -<<-: core/quest.getDaily ok
31.08 16:13:07 DB: SELECT * FROM UserAttributeTypes
31.08 16:13:07 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 DB: SELECT * FROM UserVariableTypes
31.08 16:13:07 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 16:13:07 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 DB: SELECT * FROM ItemGroups
31.08 16:13:07 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 DB: SELECT * FROM Bundles ORDER BY ID
31.08 16:13:07 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 16:13:07 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 SHOP: loading items...
31.08 16:13:07 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 16:13:07 -<<-: core/shop.getList ok
31.08 16:13:07 SHOP: 0 items loaded (0 sec)
31.08 16:13:07 DB: SELECT * FROM EffectAttributeTypes
31.08 16:13:07 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 DB: SELECT * FROM Effects
31.08 16:13:07 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 16:13:07 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 16:13:07 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 DB: SELECT * FROM Badges
31.08 16:13:07 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 16:13:07 -<<-: core/server.query ok
31.08 16:13:07 TIMER: Check auto-disconnect...
31.08 16:13:07 STATS: vdl.0 cache, locks:0
31.08 16:14:08 NET: Client (conid:55502629) connected to vdl.0 (clients:1)
31.08 16:14:11 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 16:14:11 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 16:14:11 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 16:14:11 -<<-: core/server.query ok
31.08 16:14:11 STATS: vdl.0 cache connection, 21 calls, total 0.0342559814453125 sec spent, avg 1.63 ms
31.08 16:14:11 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 16:14:11 -<<-: core/user.isOnlineID ok
31.08 16:14:11 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 16:14:11 -<<-: core/cache.get ok
31.08 16:14:11 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 16:14:11 -<<-: core/cache.get ok
31.08 16:14:11 NET: Client login (conid:55502629, id:2, name:test1)
31.08 16:14:11 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 16:14:11 -<<-: core/user.loginPost null
31.08 16:14:11 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 16:14:11 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 16:14:11 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 16:14:11 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 16:14:11 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
31.08 16:14:11 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
31.08 16:14:11 -<<-: vdl/cache.battle.create { errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
31.08 16:14:11 TIME: battle.find 32.95 ms
31.08 16:14:11 == NET: test1 ret: battle.find { type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
31.08 16:14:17 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 16:14:17 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 16:17:06 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 16:17:06 -<<-: server.login ok
31.08 16:17:06 DB: SELECT * FROM LocalizationStrings
31.08 16:17:06 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 TIMER: Starting timer...
31.08 16:17:06 TIMER: Timer running...
31.08 16:17:06 DB: SELECT * FROM GameVars
31.08 16:17:06 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 16:17:06 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 16:17:06 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 16:17:06 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 16:17:06 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 16:17:06 -<<-: core/quest.getDaily ok
31.08 16:17:06 DB: SELECT * FROM UserAttributeTypes
31.08 16:17:06 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 DB: SELECT * FROM UserVariableTypes
31.08 16:17:06 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 16:17:06 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 DB: SELECT * FROM ItemGroups
31.08 16:17:06 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 DB: SELECT * FROM Bundles ORDER BY ID
31.08 16:17:06 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 16:17:06 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 SHOP: loading items...
31.08 16:17:06 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 16:17:06 -<<-: core/shop.getList ok
31.08 16:17:06 SHOP: 0 items loaded (0 sec)
31.08 16:17:06 DB: SELECT * FROM EffectAttributeTypes
31.08 16:17:06 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 DB: SELECT * FROM Effects
31.08 16:17:06 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 16:17:06 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 16:17:06 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 DB: SELECT * FROM Badges
31.08 16:17:06 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 16:17:06 -<<-: core/server.query ok
31.08 16:17:06 TIMER: Check auto-disconnect...
31.08 16:17:06 STATS: vdl.0 cache, locks:0
31.08 16:19:04 NET: Client (conid:21888602) connected to vdl.0 (clients:1)
31.08 16:19:06 TIMER: Check auto-disconnect...
31.08 16:19:06 STATS: vdl.0 cache, locks:0
31.08 16:19:06 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 16:19:06 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 16:19:06 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 16:19:06 -<<-: core/server.query ok
31.08 16:19:06 STATS: vdl.0 cache connection, 21 calls, total 0.024855375289917 sec spent, avg 1.18 ms
31.08 16:19:06 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 16:19:06 -<<-: core/user.isOnlineID ok
31.08 16:19:06 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 16:19:06 -<<-: core/cache.get ok
31.08 16:19:06 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 16:19:06 -<<-: core/cache.get ok
31.08 16:19:06 NET: Client login (conid:21888602, id:2, name:test1)
31.08 16:19:06 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 16:19:06 -<<-: core/user.loginPost null
31.08 16:19:06 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 16:19:06 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 16:19:06 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 16:19:06 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 16:19:06 -<<-: vdl/cache.battle.find { errorCode => _requestException, _type => vdl/cache.battle.find }
31.08 16:19:06 TRACE: battle.find : cacheRequest exception { _type => vdl/cache.battle.find }
31.08 16:19:06 TRACE: battle.find : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 65
Called from modules/VDLBattleModule.hx line 45
Called from modules/VDLBattleModule.hx line 39
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
31.08 16:19:16 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 16:19:16 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 16:20:06 TIMER: Check auto-disconnect...
31.08 16:20:06 STATS: vdl.0 cache, locks:2
31.08 16:21:31 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 16:21:31 -<<-: server.login ok
31.08 16:21:31 DB: SELECT * FROM LocalizationStrings
31.08 16:21:31 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:21:31 TIMER: Starting timer...
31.08 16:21:31 TIMER: Timer running...
31.08 16:21:31 DB: SELECT * FROM GameVars
31.08 16:21:31 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:21:31 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 16:21:31 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:21:31 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 16:21:31 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:21:31 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 16:21:31 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:21:31 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 16:21:31 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:21:31 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 16:21:31 -<<-: core/quest.getDaily ok
31.08 16:21:31 DB: SELECT * FROM UserAttributeTypes
31.08 16:21:31 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:21:31 DB: SELECT * FROM UserVariableTypes
31.08 16:21:31 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:21:31 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 16:21:31 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:21:31 DB: SELECT * FROM ItemGroups
31.08 16:21:31 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:21:31 DB: SELECT * FROM Bundles ORDER BY ID
31.08 16:21:31 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:21:31 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 16:21:31 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:21:31 SHOP: loading items...
31.08 16:21:31 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 16:21:31 -<<-: core/shop.getList ok
31.08 16:21:31 SHOP: 0 items loaded (0 sec)
31.08 16:21:31 DB: SELECT * FROM EffectAttributeTypes
31.08 16:21:31 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:21:31 DB: SELECT * FROM Effects
31.08 16:21:31 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:21:31 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 16:21:31 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:21:31 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 16:21:31 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:21:31 DB: SELECT * FROM Badges
31.08 16:21:31 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 16:21:31 -<<-: core/server.query ok
31.08 16:22:18 NET: Client (conid:22164457) connected to vdl.0 (clients:1)
31.08 16:22:20 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 16:22:20 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 16:22:20 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 16:22:20 -<<-: core/server.query ok
31.08 16:22:20 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 16:22:20 -<<-: core/user.isOnlineID ok
31.08 16:22:20 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 16:22:20 -<<-: core/cache.get ok
31.08 16:22:20 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 16:22:20 -<<-: core/cache.get ok
31.08 16:22:20 NET: Client login (conid:22164457, id:2, name:test1)
31.08 16:22:20 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 16:22:20 -<<-: core/user.loginPost null
31.08 16:22:20 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 16:22:20 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 16:22:20 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 16:22:20 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 16:22:20 -<<-: vdl/cache.battle.find { errorCode => _requestException, _type => vdl/cache.battle.find }
31.08 16:22:20 TRACE: battle.find : cacheRequest exception { _type => vdl/cache.battle.find }
31.08 16:22:20 TRACE: battle.find : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 65
Called from modules/VDLBattleModule.hx line 45
Called from modules/VDLBattleModule.hx line 39
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
31.08 16:22:26 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 16:22:26 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 16:24:02 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 16:24:02 -<<-: server.login ok
31.08 16:24:02 DB: SELECT * FROM LocalizationStrings
31.08 16:24:02 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:02 TIMER: Starting timer...
31.08 16:24:02 TIMER: Timer running...
31.08 16:24:02 DB: SELECT * FROM GameVars
31.08 16:24:02 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:02 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 16:24:02 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:02 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 16:24:02 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:02 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 16:24:02 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:02 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 16:24:02 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:02 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 16:24:02 -<<-: core/quest.getDaily ok
31.08 16:24:02 DB: SELECT * FROM UserAttributeTypes
31.08 16:24:02 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:02 DB: SELECT * FROM UserVariableTypes
31.08 16:24:02 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:02 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 16:24:02 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:02 DB: SELECT * FROM ItemGroups
31.08 16:24:02 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:02 DB: SELECT * FROM Bundles ORDER BY ID
31.08 16:24:02 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:02 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 16:24:02 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:02 SHOP: loading items...
31.08 16:24:02 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 16:24:02 -<<-: core/shop.getList ok
31.08 16:24:02 SHOP: 0 items loaded (0 sec)
31.08 16:24:02 DB: SELECT * FROM EffectAttributeTypes
31.08 16:24:02 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:02 DB: SELECT * FROM Effects
31.08 16:24:02 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:02 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 16:24:02 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:02 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 16:24:02 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:02 DB: SELECT * FROM Badges
31.08 16:24:02 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 16:24:02 -<<-: core/server.query ok
31.08 16:24:52 NET: Client (conid:8975333) connected to vdl.0 (clients:1)
31.08 16:24:53 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 16:24:53 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 16:24:53 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 16:24:53 -<<-: core/server.query ok
31.08 16:24:53 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 16:24:53 -<<-: core/user.isOnlineID ok
31.08 16:24:53 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 16:24:53 -<<-: core/cache.get ok
31.08 16:24:53 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 16:24:53 -<<-: core/cache.get ok
31.08 16:24:53 NET: Client login (conid:8975333, id:2, name:test1)
31.08 16:24:53 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 16:24:53 -<<-: core/user.loginPost null
31.08 16:24:53 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 16:24:53 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 16:24:53 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 16:24:53 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 16:24:53 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
31.08 16:24:53 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
31.08 16:24:53 -<<-: vdl/cache.battle.create { errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
31.08 16:24:53 TIME: battle.find 30.38 ms
31.08 16:24:53 == NET: test1 ret: battle.find { type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
31.08 16:25:02 TIMER: Check auto-disconnect...
31.08 16:25:02 STATS: vdl.0 cache, locks:2
31.08 16:25:02 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 16:25:02 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 16:25:02 STATS: vdl.0 cache connection, 28 calls, total 0.0577836036682129 sec spent, avg 2.06 ms
31.08 16:25:02 TIMER: Check auto-disconnect...
31.08 16:26:03 STATS: vdl.0 cache, locks:2
31.08 16:27:02 TIMER: Check auto-disconnect...
31.08 16:27:03 STATS: vdl.0 cache, locks:2
31.08 16:28:02 TIMER: Check auto-disconnect...
31.08 16:28:02 NET: Client (name:test1 conid:8975333 TCP) disconnected from vdl.0 (clients:0)
31.08 16:28:02 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
31.08 16:28:02 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
31.08 16:28:02 STATS: vdl.0 cache connection, 29 calls, total 0.0584795475006104 sec spent, avg 2.02 ms
31.08 16:28:02 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
31.08 16:28:02 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 16:28:02 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
31.08 16:28:02 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
31.08 16:28:03 STATS: vdl.0 cache, locks:0
31.08 16:29:02 TIMER: Check auto-disconnect...
31.08 16:35:55 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 16:35:55 -<<-: server.login ok
31.08 16:35:55 DB: SELECT * FROM LocalizationStrings
31.08 16:35:55 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 16:35:55 -<<-: core/server.query ok
31.08 16:35:55 TIMER: Starting timer...
31.08 16:35:55 TIMER: Timer running...
31.08 16:35:55 DB: SELECT * FROM GameVars
31.08 16:35:56 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 16:35:56 -<<-: core/server.query ok
31.08 16:35:56 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 16:35:56 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 16:35:56 -<<-: core/server.query ok
31.08 16:35:56 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 16:35:56 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 16:35:56 -<<-: core/server.query ok
31.08 16:35:56 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 16:35:56 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 16:35:56 -<<-: core/server.query ok
31.08 16:35:56 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 16:35:56 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 16:35:56 -<<-: core/server.query ok
31.08 16:35:56 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 16:35:56 -<<-: core/quest.getDaily ok
31.08 16:35:56 DB: SELECT * FROM UserAttributeTypes
31.08 16:35:56 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 16:35:56 -<<-: core/server.query ok
31.08 16:35:56 DB: SELECT * FROM UserVariableTypes
31.08 16:35:56 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 16:35:56 -<<-: core/server.query ok
31.08 16:35:56 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 16:35:56 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 16:35:56 -<<-: core/server.query ok
31.08 16:35:56 DB: SELECT * FROM ItemGroups
31.08 16:35:56 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 16:35:56 -<<-: core/server.query ok
31.08 16:35:56 DB: SELECT * FROM Bundles ORDER BY ID
31.08 16:35:56 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 16:35:56 -<<-: core/server.query ok
31.08 16:35:56 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 16:35:56 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 16:35:56 -<<-: core/server.query ok
31.08 16:35:56 SHOP: loading items...
31.08 16:35:56 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 16:35:56 -<<-: core/shop.getList ok
31.08 16:35:56 SHOP: 0 items loaded (0 sec)
31.08 16:35:56 DB: SELECT * FROM EffectAttributeTypes
31.08 16:35:56 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 16:35:56 -<<-: core/server.query ok
31.08 16:35:56 DB: SELECT * FROM Effects
31.08 16:35:56 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 16:35:56 -<<-: core/server.query ok
31.08 16:35:56 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 16:35:56 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 16:35:56 -<<-: core/server.query ok
31.08 16:35:56 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 16:35:56 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 16:35:56 -<<-: core/server.query ok
31.08 16:35:56 DB: SELECT * FROM Badges
31.08 16:35:56 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 16:35:56 -<<-: core/server.query ok
31.08 16:36:40 NET: Client (conid:6529738) connected to vdl.0 (clients:1)
31.08 16:46:48 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 16:46:48 -<<-: server.login ok
31.08 16:46:48 DB: SELECT * FROM LocalizationStrings
31.08 16:46:48 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 TIMER: Starting timer...
31.08 16:46:48 TIMER: Timer running...
31.08 16:46:48 DB: SELECT * FROM GameVars
31.08 16:46:48 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 16:46:48 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 16:46:48 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 16:46:48 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 16:46:48 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 16:46:48 -<<-: core/quest.getDaily ok
31.08 16:46:48 DB: SELECT * FROM UserAttributeTypes
31.08 16:46:48 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 DB: SELECT * FROM UserVariableTypes
31.08 16:46:48 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 16:46:48 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 DB: SELECT * FROM ItemGroups
31.08 16:46:48 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 DB: SELECT * FROM Bundles ORDER BY ID
31.08 16:46:48 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 16:46:48 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 SHOP: loading items...
31.08 16:46:48 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 16:46:48 -<<-: core/shop.getList ok
31.08 16:46:48 SHOP: 0 items loaded (0 sec)
31.08 16:46:48 DB: SELECT * FROM EffectAttributeTypes
31.08 16:46:48 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 DB: SELECT * FROM Effects
31.08 16:46:48 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 16:46:48 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 16:46:48 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 DB: SELECT * FROM Badges
31.08 16:46:48 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 16:46:48 -<<-: core/server.query ok
31.08 16:46:48 TIMER: Check auto-disconnect...
31.08 16:47:50 STATS: vdl.0 cache, locks:0
31.08 16:48:48 TIMER: Check auto-disconnect...
31.08 16:48:50 STATS: vdl.0 cache, locks:0
31.08 16:49:10 NET: Client (conid:44288263) connected to vdl.0 (clients:1)
31.08 16:49:12 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 16:49:12 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 16:49:12 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 16:49:12 -<<-: core/server.query ok
31.08 16:49:12 STATS: vdl.0 cache connection, 21 calls, total 0.346672534942627 sec spent, avg 16.51 ms
31.08 16:49:12 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 16:49:12 -<<-: core/user.isOnlineID ok
31.08 16:49:12 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 16:49:12 -<<-: core/cache.get ok
31.08 16:49:12 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 16:49:12 -<<-: core/cache.get ok
31.08 16:49:12 NET: Client login (conid:44288263, id:2, name:test1)
31.08 16:49:12 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 16:49:12 -<<-: core/user.loginPost null
31.08 16:49:12 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 16:49:12 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 16:49:12 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 16:49:12 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 16:49:12 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
31.08 16:49:12 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
31.08 16:49:13 -<<-: vdl/cache.battle.create { errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
31.08 16:49:13 TIME: battle.find 201.22 ms
31.08 16:49:13 == NET: test1 ret: battle.find { type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
31.08 16:49:20 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 16:49:20 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 16:49:48 TIMER: Check auto-disconnect...
31.08 16:49:50 STATS: vdl.0 cache, locks:2
31.08 16:50:12 NET: Client (conid:19208534) connected to vdl.0 (clients:2)
31.08 16:50:24 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
31.08 16:50:24 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
31.08 16:50:24 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
31.08 16:50:24 -<<-: core/server.query { list => {{ name => test2, networkid => , isbanned => false, id => 3 }}, errorCode => ok, _type => core/server.query }
31.08 16:50:24 STATS: vdl.0 cache connection, 29 calls, total 0.610425710678101 sec spent, avg 21.05 ms
31.08 16:50:24 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
31.08 16:50:24 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
31.08 16:50:24 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
31.08 16:50:24 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test2, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language =>   , networkid => , params => {}}, version => 0, id => 3 } }
31.08 16:50:24 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
31.08 16:50:24 -<<-: core/cache.get { errorCode => notFound, _type => core/cache.get }
31.08 16:50:24 ->>-: core/cache.create { type => questdata, id => 3, _type => core/cache.create }
31.08 16:50:24 -<<-: core/cache.create { errorCode => ok, _type => core/cache.create }
31.08 16:50:24 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
31.08 16:50:24 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 3 } }
31.08 16:50:24 NET: Client login (conid:19208534, id:3, name:test2)
31.08 16:50:24 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
31.08 16:50:24 -<<-: core/user.loginPost { _type => core/user.loginPost }
31.08 16:50:24 DB: SELECT ID FROM TempUserLogins WHERE UserID = 3 AND Date = 'today'::timestamp
31.08 16:50:24 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 3 AND Date = 'today'::timestamp, _type => core/server.query }
31.08 16:50:24 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
31.08 16:50:24 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (3, 'today'::timestamp)
31.08 16:50:24 == NET: test1 ret: user.join { name => test2, type => user.join }
31.08 16:50:24 ++ NET: test2 req: battle.find { messageType => battle.find }
31.08 16:50:24 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
31.08 16:50:24 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (3, 'today'::timestamp), _type => core/server.pending }} }
31.08 16:50:24 == NET: test2 ret: user.join { name => test1, type => user.join }
31.08 16:50:24 == NET: test2 ret: user.join { name => test2, type => user.join }
31.08 16:50:24 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
31.08 16:50:24 ->>-: vdl/cache.battle.create { selfId => 3, _type => vdl/cache.battle.create }
31.08 16:50:24 -<<-: vdl/cache.battle.create { errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
31.08 16:50:24 TIME: battle.find 26.19 ms
31.08 16:50:24 == NET: test2 ret: battle.find { type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
31.08 16:50:30 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1472651424, lastLoginDate => 244, lastLoadDate => 832 }, effects => { list => [] } }}, type => user, unlock => false, id => 3, _type => core/cache.update }
31.08 16:50:30 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 16:50:48 TIMER: Check auto-disconnect...
31.08 16:50:50 STATS: vdl.0 cache, locks:4
31.08 16:51:48 TIMER: Check auto-disconnect...
31.08 16:51:50 STATS: vdl.0 cache, locks:4
31.08 16:52:48 TIMER: Check auto-disconnect...
31.08 16:52:48 NET: Client (name:test1 conid:44288263 TCP) disconnected from vdl.0 (clients:1)
31.08 16:52:48 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
31.08 16:52:48 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
31.08 16:52:48 STATS: vdl.0 cache connection, 40 calls, total 0.728592157363892 sec spent, avg 18.21 ms
31.08 16:52:48 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
31.08 16:52:48 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 16:52:48 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
31.08 16:52:48 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
31.08 16:52:50 STATS: vdl.0 cache, locks:2
31.08 16:53:48 TIMER: Check auto-disconnect...
31.08 16:53:48 NET: Client (name:test2 conid:19208534 TCP) disconnected from vdl.0 (clients:0)
31.08 16:53:48 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 3, _type => core/cache.update }
31.08 16:53:48 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
31.08 16:53:48 STATS: vdl.0 cache connection, 43 calls, total 0.730694055557251 sec spent, avg 16.99 ms
31.08 16:53:48 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 3, _type => core/cache.update }
31.08 16:53:48 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 16:53:48 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 3, _type => core/user.logoutPost }
31.08 16:53:48 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
31.08 16:57:40 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 16:57:40 -<<-: server.login ok
31.08 16:57:40 DB: SELECT * FROM LocalizationStrings
31.08 16:57:40 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:40 TIMER: Starting timer...
31.08 16:57:40 TIMER: Timer running...
31.08 16:57:40 DB: SELECT * FROM GameVars
31.08 16:57:40 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:40 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 16:57:40 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:40 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 16:57:40 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:40 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 16:57:40 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:40 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 16:57:40 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:40 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 16:57:40 -<<-: core/quest.getDaily ok
31.08 16:57:40 DB: SELECT * FROM UserAttributeTypes
31.08 16:57:40 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:40 DB: SELECT * FROM UserVariableTypes
31.08 16:57:40 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:40 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 16:57:40 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:40 DB: SELECT * FROM ItemGroups
31.08 16:57:40 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:40 DB: SELECT * FROM Bundles ORDER BY ID
31.08 16:57:40 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:40 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 16:57:40 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:40 SHOP: loading items...
31.08 16:57:40 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 16:57:40 -<<-: core/shop.getList ok
31.08 16:57:40 SHOP: 0 items loaded (0 sec)
31.08 16:57:40 DB: SELECT * FROM EffectAttributeTypes
31.08 16:57:40 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:40 DB: SELECT * FROM Effects
31.08 16:57:40 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:40 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 16:57:40 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:40 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 16:57:40 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:40 DB: SELECT * FROM Badges
31.08 16:57:40 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 16:57:40 -<<-: core/server.query ok
31.08 16:57:59 NET: Client (conid:36650933) connected to vdl.0 (clients:1)
31.08 16:58:32 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 16:58:32 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 16:58:32 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 16:58:32 -<<-: core/server.query ok
31.08 16:58:32 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 16:58:32 -<<-: core/user.isOnlineID ok
31.08 16:58:32 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 16:58:32 -<<-: core/cache.get ok
31.08 16:58:32 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 16:58:32 -<<-: core/cache.get ok
31.08 16:58:32 NET: Client login (conid:36650933, id:2, name:test1)
31.08 16:58:32 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
31.08 16:58:32 -<<-: core/user.loginPost null
31.08 16:58:32 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 16:58:32 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 16:58:32 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 16:58:32 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 16:58:32 -<<-: vdl/cache.battle.find { list => {}, errorCode => ok, _type => vdl/cache.battle.find }
31.08 16:58:32 TIME: battle.find 6.46 ms
31.08 16:58:32 == NET: test1 ret: battle.find { type => battle.find, errorCode => Not battle }
