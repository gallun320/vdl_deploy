03.11 19:00:09 TIMER: Check auto-disconnect...
03.11 19:00:09 STATS: vdl.0 cache, locks:2
03.11 19:00:26 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:00:26 TIME: user.ping 0.18 ms
03.11 19:00:26 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:00:54 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:00:54 TIME: user.ping 0.21 ms
03.11 19:00:54 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:00:59 NET: Client (conid:39030220) connected to vdl.0 (clients:2)
03.11 19:01:00 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 19:01:00 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 19:01:00 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 19:01:00 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
03.11 19:01:00 STATS: vdl.0 cache connection, 29 calls, total 0.0564768314361572 sec spent, avg 1.95 ms
03.11 19:01:00 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 19:01:00 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 19:01:00 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 19:01:00 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1478178267, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 107 } }
03.11 19:01:00 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 19:01:00 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
03.11 19:01:00 NET: Client login (conid:39030220, id:107, name:uid107)
03.11 19:01:00 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 19:01:00 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 19:01:00 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 19:01:00 == NET: uid115 ret: user.join { name => uid107, type => user.join }
03.11 19:01:00 == NET: uid107 ret: user.join { name => uid115, type => user.join }
03.11 19:01:00 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 19:01:04 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:01:04 TIME: user.ping 0.13 ms
03.11 19:01:04 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:01:09 TIMER: Check auto-disconnect...
03.11 19:01:09 STATS: vdl.0 cache, locks:4
03.11 19:01:09 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 19:01:09 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:01:12 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:01:12 TIME: user.ping 0.12 ms
03.11 19:01:12 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:01:13 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 19:01:13 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 107 }, _type => vdl/cache.battle.findRandom }
03.11 19:01:13 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 115, enemy.name => uid115, id => 107, enemy.num => 2, battleId => 3, player => 1 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
03.11 19:01:13 -<<-: battle.enemyEvent { data => { name => uid115, enemy.id => 107, enemy.name => uid107, id => 115, enemy.num => 1, battleId => 3, player => 2 }, _isNotify => true, id => 115, _type => battle.enemyEvent }
03.11 19:01:13 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 19:01:13 TIME: battle.find 31.68 ms
03.11 19:01:13 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
03.11 19:01:13 == NET: uid115 ret: battle.enemy { data => { name => uid115, enemy.id => 107, enemy.name => uid107, id => 115, enemy.num => 1, battleId => 3, player => 2 }, type => battle.enemy }
03.11 19:01:13 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 115, enemy.name => uid115, id => 107, enemy.num => 2, battleId => 3, player => 1 }, type => battle.enemy }
03.11 19:01:22 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:01:22 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:01:22 TIME: user.ping 0.21 ms
03.11 19:01:23 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:01:23 TIME: user.ping 0.26 ms
03.11 19:01:23 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:01:28 ++ NET: uid107 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 0, diceID => 0 }
03.11 19:01:28 TIME: battle.sendtask 0.09 ms
03.11 19:01:28 == NET: uid107 ret: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, type => battle.sendtask, dices => [4,0,5,3,0,5], messageType => battle.sendtask, to => [0,0], battleId => 0, diceID => 0 }
03.11 19:01:35 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:01:35 TIME: user.ping 0.09 ms
03.11 19:01:35 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:01:45 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:01:45 TIME: user.ping 0.11 ms
03.11 19:01:45 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:01:46 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:01:46 TIME: user.ping 0.13 ms
03.11 19:01:46 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:01:57 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:01:57 TIME: user.ping 0.11 ms
03.11 19:01:57 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:02:08 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:02:08 TIME: user.ping 0.1 ms
03.11 19:02:08 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:02:08 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:02:08 TIME: user.ping 0.11 ms
03.11 19:02:08 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:02:09 TIMER: Check auto-disconnect...
03.11 19:02:09 STATS: vdl.0 cache, locks:4
03.11 19:02:31 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:02:31 TIME: user.ping 0.13 ms
03.11 19:02:31 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:02:54 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:02:54 TIME: user.ping 0.11 ms
03.11 19:02:54 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:02:55 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:02:55 TIME: user.ping 0.13 ms
03.11 19:02:55 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:02:58 ++ NET: uid107 req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 0, diceID => 0 }
03.11 19:02:58 ->>-: vdl/cache.battle.infoRoom { roomId => null, _type => vdl/cache.battle.infoRoom }
03.11 19:02:58 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
03.11 19:02:58 STATS: vdl.0 cache connection, 36 calls, total 0.0933976173400879 sec spent, avg 2.59 ms
03.11 19:02:58 TRACE: battle.sendtask : cacheRequest exception { roomId => null, _type => vdl/cache.battle.infoRoom }
03.11 19:02:58 TRACE: battle.sendtask : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 403
Called from modules/VDLBattleModule.hx line 270
Called from modules/VDLBattleModule.hx line 63
Called from modules/VDLBattleModule.hx line 40
Called from snipe/slave/Server.hx line 1176
03.11 19:03:07 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:03:07 TIME: user.ping 0.14 ms
03.11 19:03:07 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:03:09 TIMER: Check auto-disconnect...
03.11 19:03:09 STATS: vdl.0 cache, locks:4
03.11 19:03:18 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:03:18 TIME: user.ping 0.1 ms
03.11 19:03:18 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:03:18 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:03:18 TIME: user.ping 0.14 ms
03.11 19:03:18 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:03:41 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:03:41 TIME: user.ping 0.1 ms
03.11 19:03:41 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:03:53 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:03:53 TIME: user.ping 0.14 ms
03.11 19:03:53 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:04:04 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:04:04 TIME: user.ping 0.12 ms
03.11 19:04:04 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:04:05 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:04:05 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:04:05 TIME: user.ping 0.11 ms
03.11 19:04:09 TIMER: Check auto-disconnect...
03.11 19:04:09 STATS: vdl.0 cache, locks:4
03.11 19:04:17 NET: Client (name:uid107 conid:39030220 TCP) disconnected from vdl.0 (clients:1)
03.11 19:04:17 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
03.11 19:04:17 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
03.11 19:04:17 -<<-: core/server.query { list => {{ id => 3 }}, errorCode => ok, _type => core/server.query }
03.11 19:04:17 STATS: vdl.0 cache connection, 37 calls, total 0.0948495864868164 sec spent, avg 2.56 ms
03.11 19:04:17 ->>-: vdl/cache.battle.infoRoom { roomId => 3, _type => vdl/cache.battle.infoRoom }
03.11 19:04:17 -<<-: vdl/cache.battle.infoRoom { secondId => 115, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
03.11 19:04:17 ->>-: vdl/cache.battle.deleteRoom { roomId => 3, _type => vdl/cache.battle.deleteRoom }
03.11 19:04:17 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
03.11 19:04:17 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
03.11 19:04:17 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
03.11 19:04:17 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
03.11 19:04:17 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:04:17 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
03.11 19:04:17 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 19:04:17 == NET: uid115 ret: battle.end { type => battle.end }
03.11 19:04:28 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:04:28 TIME: user.ping 0.18 ms
03.11 19:04:28 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:04:52 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:04:52 TIME: user.ping 0.12 ms
03.11 19:04:52 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:05:09 TIMER: Check auto-disconnect...
03.11 19:05:09 STATS: vdl.0 cache, locks:2
03.11 19:05:15 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:05:15 TIME: user.ping 0.1 ms
03.11 19:05:15 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:05:39 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:05:39 TIME: user.ping 0.11 ms
03.11 19:05:39 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:06:02 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:06:02 TIME: user.ping 0.13 ms
03.11 19:06:02 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:06:09 TIMER: Check auto-disconnect...
03.11 19:06:09 STATS: vdl.0 cache, locks:2
03.11 19:06:26 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:06:26 TIME: user.ping 0.12 ms
03.11 19:06:26 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:06:53 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:06:53 TIME: user.ping 0.11 ms
03.11 19:06:53 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:07:09 TIMER: Check auto-disconnect...
03.11 19:07:09 STATS: vdl.0 cache, locks:2
03.11 19:07:20 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:07:20 TIME: user.ping 0.12 ms
03.11 19:07:20 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:07:43 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:07:43 TIME: user.ping 0.1 ms
03.11 19:07:43 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:08:06 NET: Client (name:uid115 conid:94982775 TCP) disconnected from vdl.0 (clients:0)
03.11 19:08:06 DB: SELECT id FROM battle WHERE firstid=115 OR secondid=115 AND finished <> true
03.11 19:08:06 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=115 OR secondid=115 AND finished <> true, _type => core/server.query }
03.11 19:08:06 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
03.11 19:08:06 STATS: vdl.0 cache connection, 43 calls, total 0.117539405822754 sec spent, avg 2.73 ms
03.11 19:08:06 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
03.11 19:08:06 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
03.11 19:08:06 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
03.11 19:08:06 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 403
Called from modules/VDLBattleModule.hx line 416
Called from snipe/slave/Server.hx line 994
03.11 19:08:06 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 115, _type => core/cache.update }
03.11 19:08:06 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
03.11 19:08:06 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 115, _type => core/cache.update }
03.11 19:08:06 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:08:06 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 115, _type => core/user.logoutPost }
03.11 19:08:06 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 19:08:09 TIMER: Check auto-disconnect...
03.11 19:08:09 STATS: vdl.0 cache, locks:0
03.11 19:08:29 NET: Client (conid:80168331) connected to vdl.0 (clients:1)
03.11 19:08:33 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE1 }
03.11 19:08:33 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid115' AND Password = E'uid115'
03.11 19:08:33 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid115' AND Password = E'uid115', _type => core/server.query }
03.11 19:08:33 -<<-: core/server.query { list => {{ name => uid115, networkid => , isbanned => false, id => 115 }}, errorCode => ok, _type => core/server.query }
03.11 19:08:33 ->>-: core/user.isOnlineID { id => 115, _type => core/user.isOnlineID }
03.11 19:08:33 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 19:08:33 ->>-: core/cache.get { type => user, v => -1, id => 115, _type => core/cache.get }
03.11 19:08:33 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid115, deleted => false, email => , networktype =>   , password => uid115, isbanned => false, regdate => 2016-11-03 18:37:16.527174+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1478188735, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 115 } }
03.11 19:08:33 ->>-: core/cache.get { type => questdata, v => -1, id => 115, _type => core/cache.get }
03.11 19:08:33 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 115 } }
03.11 19:08:33 NET: Client login (conid:80168331, id:115, name:uid115)
03.11 19:08:33 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 115, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
03.11 19:08:33 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 19:08:33 == NET: uid115 ret: user.login { name => uid115, type => user.login, errorCode => ok, id => 115 }
03.11 19:08:33 == NET: uid115 ret: user.join { name => uid115, type => user.join }
03.11 19:08:39 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 115, _type => core/cache.update }
03.11 19:08:39 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:08:46 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:08:46 TIME: user.ping 0.12 ms
03.11 19:08:46 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:08:50 ++ NET: uid115 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 19:08:50 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 115 }, _type => vdl/cache.battle.findRandom }
03.11 19:08:50 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 19:08:50 TIME: battle.find 0.43 ms
03.11 19:08:50 == NET: uid115 ret: battle.find { type => battle.find, errorCode => ok }
03.11 19:08:59 NET: Client (conid:50104537) connected to vdl.0 (clients:2)
03.11 19:08:59 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 19:08:59 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 19:08:59 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 19:08:59 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
03.11 19:08:59 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 19:08:59 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 19:08:59 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 19:08:59 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1478178267, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 107 } }
03.11 19:08:59 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 19:08:59 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
03.11 19:08:59 NET: Client login (conid:50104537, id:107, name:uid107)
03.11 19:08:59 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 19:08:59 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 19:08:59 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 19:08:59 == NET: uid115 ret: user.join { name => uid107, type => user.join }
03.11 19:08:59 == NET: uid107 ret: user.join { name => uid115, type => user.join }
03.11 19:08:59 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 19:09:04 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:09:04 TIME: user.ping 0.11 ms
03.11 19:09:04 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:09:06 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 19:09:06 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 107 }, _type => vdl/cache.battle.findRandom }
03.11 19:09:06 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 115, enemy.name => uid115, id => 107, enemy.num => 2, battleId => 4, player => 1 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
03.11 19:09:06 -<<-: battle.enemyEvent { data => { name => uid115, enemy.id => 107, enemy.name => uid107, id => 115, enemy.num => 1, battleId => 4, player => 2 }, _isNotify => true, id => 115, _type => battle.enemyEvent }
03.11 19:09:06 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 19:09:06 TIME: battle.find 44 ms
03.11 19:09:06 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
03.11 19:09:06 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 115, enemy.name => uid115, id => 107, enemy.num => 2, battleId => 4, player => 1 }, type => battle.enemy }
03.11 19:09:06 == NET: uid115 ret: battle.enemy { data => { name => uid115, enemy.id => 107, enemy.name => uid107, id => 115, enemy.num => 1, battleId => 4, player => 2 }, type => battle.enemy }
03.11 19:09:09 TIMER: Check auto-disconnect...
03.11 19:09:09 STATS: vdl.0 cache, locks:4
03.11 19:09:09 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 19:09:09 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:09:09 STATS: vdl.0 cache connection, 61 calls, total 0.17590594291687 sec spent, avg 2.88 ms
03.11 19:09:13 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:09:13 TIME: user.ping 0.16 ms
03.11 19:09:13 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:09:15 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:09:15 TIME: user.ping 0.1 ms
03.11 19:09:15 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:09:20 ++ NET: uid107 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 4 }
03.11 19:09:20 TIME: battle.sendtask 0.09 ms
03.11 19:09:20 == NET: uid107 ret: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, type => battle.sendtask, dices => [4,0,0,4,2,1], messageType => battle.sendtask, to => [0,0], battleId => 4 }
03.11 19:09:26 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:09:26 TIME: user.ping 0.11 ms
03.11 19:09:26 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:09:36 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:09:36 TIME: user.ping 0.13 ms
03.11 19:09:36 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:09:37 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:09:37 TIME: user.ping 0.11 ms
03.11 19:09:37 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:09:48 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:09:48 TIME: user.ping 0.13 ms
03.11 19:09:48 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:09:59 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:09:59 TIME: user.ping 0.15 ms
03.11 19:09:59 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:09:59 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:09:59 TIME: user.ping 0.14 ms
03.11 19:09:59 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:10:09 TIMER: Check auto-disconnect...
03.11 19:10:09 STATS: vdl.0 cache, locks:4
03.11 19:10:10 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:10:10 TIME: user.ping 0.12 ms
03.11 19:10:10 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:10:21 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:10:21 TIME: user.ping 0.18 ms
03.11 19:10:21 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:10:22 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:10:22 TIME: user.ping 0.16 ms
03.11 19:10:22 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:10:32 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:10:32 TIME: user.ping 0.13 ms
03.11 19:10:32 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:10:43 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:10:43 TIME: user.ping 0.1 ms
03.11 19:10:43 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:10:46 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:10:46 TIME: user.ping 0.1 ms
03.11 19:10:46 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:10:54 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:10:54 TIME: user.ping 0.16 ms
03.11 19:10:54 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:11:05 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:11:05 TIME: user.ping 0.14 ms
03.11 19:11:05 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:11:09 TIMER: Check auto-disconnect...
03.11 19:11:09 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:11:09 TIME: user.ping 0.17 ms
03.11 19:11:09 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:11:09 STATS: vdl.0 cache, locks:4
03.11 19:11:12 ++ NET: uid107 req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 4 }
03.11 19:11:12 ->>-: vdl/cache.battle.infoRoom { roomId => null, _type => vdl/cache.battle.infoRoom }
03.11 19:11:12 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
03.11 19:11:12 STATS: vdl.0 cache connection, 62 calls, total 0.177098989486694 sec spent, avg 2.86 ms
03.11 19:11:12 TRACE: battle.sendtask : cacheRequest exception { roomId => null, _type => vdl/cache.battle.infoRoom }
03.11 19:11:12 TRACE: battle.sendtask : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 403
Called from modules/VDLBattleModule.hx line 270
Called from modules/VDLBattleModule.hx line 63
Called from modules/VDLBattleModule.hx line 40
Called from snipe/slave/Server.hx line 1176
03.11 19:11:16 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:11:16 TIME: user.ping 0.14 ms
03.11 19:11:16 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:11:27 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:11:27 TIME: user.ping 0.11 ms
03.11 19:11:27 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:11:34 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:11:34 TIME: user.ping 0.12 ms
03.11 19:11:34 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:11:38 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:11:38 TIME: user.ping 0.11 ms
03.11 19:11:38 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:11:49 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:11:49 TIME: user.ping 0.11 ms
03.11 19:11:49 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:11:57 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:11:57 TIME: user.ping 0.13 ms
03.11 19:11:57 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:11:59 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:11:59 TIME: user.ping 0.11 ms
03.11 19:11:59 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:12:09 TIMER: Check auto-disconnect...
03.11 19:12:09 STATS: vdl.0 cache, locks:4
03.11 19:12:10 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:12:10 TIME: user.ping 0.12 ms
03.11 19:12:10 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:12:20 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:12:20 TIME: user.ping 0.11 ms
03.11 19:12:20 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:12:21 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:12:21 TIME: user.ping 0.13 ms
03.11 19:12:21 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:12:32 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:12:32 TIME: user.ping 0.11 ms
03.11 19:12:32 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:12:44 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:12:44 TIME: user.ping 0.16 ms
03.11 19:12:44 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:13:07 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:13:07 TIME: user.ping 0.13 ms
03.11 19:13:07 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:13:09 TIMER: Check auto-disconnect...
03.11 19:13:09 STATS: vdl.0 cache, locks:4
03.11 19:13:30 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:13:30 TIME: user.ping 0.12 ms
03.11 19:13:30 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:13:54 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:13:54 TIME: user.ping 0.12 ms
03.11 19:13:54 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:14:09 TIMER: Check auto-disconnect...
03.11 19:14:09 STATS: vdl.0 cache, locks:4
03.11 19:14:17 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:14:17 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:14:17 TIME: user.ping 0.16 ms
03.11 19:14:40 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:14:40 TIME: user.ping 0.12 ms
03.11 19:14:40 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:15:04 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:15:04 TIME: user.ping 0.12 ms
03.11 19:15:04 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:15:56 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
03.11 19:15:56 -<<-: server.login ok
03.11 19:15:56 DB: SELECT * FROM LocalizationStrings
03.11 19:15:56 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:15:56 TIMER: Starting timer...
03.11 19:15:56 TIMER: Timer running...
03.11 19:15:56 DB: SELECT * FROM GameVars
03.11 19:15:56 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:15:56 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
03.11 19:15:56 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:15:56 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
03.11 19:15:56 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:15:56 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
03.11 19:15:56 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:15:56 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
03.11 19:15:56 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:15:56 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
03.11 19:15:56 -<<-: core/quest.getDaily ok
03.11 19:15:56 DB: SELECT * FROM UserAttributeTypes
03.11 19:15:56 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:15:56 DB: SELECT * FROM UserVariableTypes
03.11 19:15:56 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:15:56 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
03.11 19:15:56 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:15:56 DB: SELECT * FROM ItemGroups
03.11 19:15:56 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:15:56 DB: SELECT * FROM Bundles ORDER BY ID
03.11 19:15:56 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:15:56 DB: SELECT * FROM BundleItems ORDER BY ID
03.11 19:15:56 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:15:56 SHOP: loading items...
03.11 19:15:56 ->>-: core/shop.getList { _type => core/shop.getList }
03.11 19:15:56 -<<-: core/shop.getList ok
03.11 19:15:56 SHOP: 0 items loaded (0 sec)
03.11 19:15:56 DB: SELECT * FROM EffectAttributeTypes
03.11 19:15:56 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:15:56 DB: SELECT * FROM Effects
03.11 19:15:56 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:15:56 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
03.11 19:15:56 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:15:56 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
03.11 19:15:56 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:15:56 DB: SELECT * FROM Badges
03.11 19:15:56 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
03.11 19:15:56 -<<-: core/server.query ok
03.11 19:16:16 NET: Client (conid:70487322) connected to vdl.0 (clients:1)
03.11 19:16:22 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:16:22 TRACE: User not logon yet.
03.11 19:16:46 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:16:46 TRACE: User not logon yet.
03.11 19:16:56 TIMER: Check auto-disconnect...
03.11 19:16:56 STATS: vdl.0 cache, locks:0
03.11 19:17:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:17:11 TRACE: User not logon yet.
03.11 19:17:35 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:17:35 TRACE: User not logon yet.
03.11 19:17:56 TIMER: Check auto-disconnect...
03.11 19:17:56 STATS: vdl.0 cache, locks:0
03.11 19:18:00 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:18:00 TRACE: User not logon yet.
03.11 19:18:10 NET: Client (name:null conid:70487322 TCP) disconnected from vdl.0 (clients:0)
03.11 19:18:56 TIMER: Check auto-disconnect...
03.11 19:18:56 STATS: vdl.0 cache, locks:0
03.11 19:18:56 TIMER: Check auto-disconnect...
03.11 19:18:56 STATS: vdl.0 cache, locks:0
03.11 19:18:56 TIMER: Check auto-disconnect...
03.11 19:18:56 STATS: vdl.0 cache, locks:0
03.11 19:18:56 TIMER: Check auto-disconnect...
03.11 19:18:56 STATS: vdl.0 cache, locks:0
03.11 19:18:56 TIMER: Check auto-disconnect...
03.11 19:23:12 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
03.11 19:23:12 -<<-: server.login ok
03.11 19:23:12 DB: SELECT * FROM LocalizationStrings
03.11 19:23:12 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 TIMER: Starting timer...
03.11 19:23:12 DB: SELECT * FROM GameVars
03.11 19:23:12 TIMER: Timer running...
03.11 19:23:12 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
03.11 19:23:12 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
03.11 19:23:12 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
03.11 19:23:12 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
03.11 19:23:12 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
03.11 19:23:12 -<<-: core/quest.getDaily ok
03.11 19:23:12 DB: SELECT * FROM UserAttributeTypes
03.11 19:23:12 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 DB: SELECT * FROM UserVariableTypes
03.11 19:23:12 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
03.11 19:23:12 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 DB: SELECT * FROM ItemGroups
03.11 19:23:12 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 DB: SELECT * FROM Bundles ORDER BY ID
03.11 19:23:12 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 DB: SELECT * FROM BundleItems ORDER BY ID
03.11 19:23:12 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 SHOP: loading items...
03.11 19:23:12 ->>-: core/shop.getList { _type => core/shop.getList }
03.11 19:23:12 -<<-: core/shop.getList ok
03.11 19:23:12 SHOP: 0 items loaded (0 sec)
03.11 19:23:12 DB: SELECT * FROM EffectAttributeTypes
03.11 19:23:12 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 DB: SELECT * FROM Effects
03.11 19:23:12 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
03.11 19:23:12 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
03.11 19:23:12 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 DB: SELECT * FROM Badges
03.11 19:23:12 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
03.11 19:23:12 -<<-: core/server.query ok
03.11 19:23:12 TIMER: Check auto-disconnect...
03.11 19:23:12 STATS: vdl.0 cache, locks:0
03.11 19:23:12 TIMER: Check auto-disconnect...
03.11 19:23:12 STATS: vdl.0 cache, locks:0
03.11 19:23:12 TIMER: Check auto-disconnect...
03.11 19:23:12 STATS: vdl.0 cache, locks:0
03.11 19:23:12 TIMER: Check auto-disconnect...
03.11 19:23:12 STATS: vdl.0 cache, locks:0
03.11 19:23:12 TIMER: Check auto-disconnect...
03.11 19:23:12 STATS: vdl.0 cache, locks:0
03.11 19:23:12 TIMER: Check auto-disconnect...
03.11 19:23:12 STATS: vdl.0 cache, locks:0
03.11 19:23:12 TIMER: Check auto-disconnect...
03.11 19:23:12 STATS: vdl.0 cache, locks:0
03.11 19:23:12 TIMER: Check auto-disconnect...
03.11 19:23:12 STATS: vdl.0 cache, locks:0
03.11 19:23:12 TIMER: Check auto-disconnect...
03.11 19:23:12 STATS: vdl.0 cache, locks:0
03.11 19:23:12 TIMER: Check auto-disconnect...
03.11 19:23:12 STATS: vdl.0 cache, locks:0
03.11 19:23:12 TIMER: Check auto-disconnect...
03.11 19:23:12 STATS: vdl.0 cache, locks:0
03.11 19:34:56 NET: Client (conid:7666944) connected to vdl.0 (clients:1)
03.11 19:35:01 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE1 }
03.11 19:35:01 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid115' AND Password = E'uid115'
03.11 19:35:01 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid115' AND Password = E'uid115', _type => core/server.query }
03.11 19:35:01 -<<-: core/server.query ok
03.11 19:35:01 STATS: vdl.0 cache connection, 21 calls, total 0.0398168563842773 sec spent, avg 1.9 ms
03.11 19:35:01 ->>-: core/user.isOnlineID { id => 115, _type => core/user.isOnlineID }
03.11 19:35:01 -<<-: core/user.isOnlineID ok
03.11 19:35:01 ->>-: core/cache.get { type => user, v => -1, id => 115, _type => core/cache.get }
03.11 19:35:01 -<<-: core/cache.get ok
03.11 19:35:01 ->>-: core/cache.get { type => questdata, v => -1, id => 115, _type => core/cache.get }
03.11 19:35:01 -<<-: core/cache.get ok
03.11 19:35:01 NET: Client login (conid:7666944, id:115, name:uid115)
03.11 19:35:01 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 115, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
03.11 19:35:01 -<<-: core/user.loginPost null
03.11 19:35:01 == NET: uid115 ret: user.login { name => uid115, type => user.login, errorCode => ok, id => 115 }
03.11 19:35:01 == NET: uid115 ret: user.join { name => uid115, type => user.join }
03.11 19:35:07 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 115, _type => core/cache.update }
03.11 19:35:07 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:35:12 TIMER: Check auto-disconnect...
03.11 19:35:12 STATS: vdl.0 cache, locks:2
03.11 19:35:13 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:35:13 TIME: user.ping 0.11 ms
03.11 19:35:13 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:35:33 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:35:33 TIME: user.ping 0.21 ms
03.11 19:35:33 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:35:42 ++ NET: uid115 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 19:35:42 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 115 }, _type => vdl/cache.battle.findRandom }
03.11 19:35:42 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 19:35:42 TIME: battle.find 0.44 ms
03.11 19:35:42 == NET: uid115 ret: battle.find { type => battle.find, errorCode => ok }
03.11 19:35:52 NET: Client (conid:42765137) connected to vdl.0 (clients:2)
03.11 19:35:53 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 19:35:53 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 19:35:53 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 19:35:53 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
03.11 19:35:53 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 19:35:53 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 19:35:53 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 19:35:53 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1478178267, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 107 } }
03.11 19:35:53 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 19:35:53 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
03.11 19:35:53 NET: Client login (conid:42765137, id:107, name:uid107)
03.11 19:35:53 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 19:35:53 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 19:35:53 == NET: uid115 ret: user.join { name => uid107, type => user.join }
03.11 19:35:53 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 19:35:53 == NET: uid107 ret: user.join { name => uid115, type => user.join }
03.11 19:35:53 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 19:35:57 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:35:57 TIME: user.ping 0.09 ms
03.11 19:35:57 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:35:59 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:35:59 TIME: user.ping 0.07 ms
03.11 19:35:59 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:35:59 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 19:35:59 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 107 }, _type => vdl/cache.battle.findRandom }
03.11 19:35:59 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 115, enemy.name => uid115, id => 107, enemy.num => 2, battleId => 5, player => 1 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
03.11 19:35:59 -<<-: battle.enemyEvent { data => { name => uid115, enemy.id => 107, enemy.name => uid107, id => 115, enemy.num => 1, battleId => 5, player => 2 }, _isNotify => true, id => 115, _type => battle.enemyEvent }
03.11 19:35:59 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 19:35:59 TIME: battle.find 35.78 ms
03.11 19:35:59 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
03.11 19:35:59 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 115, enemy.name => uid115, id => 107, enemy.num => 2, battleId => 5, player => 1 }, type => battle.enemy }
03.11 19:35:59 == NET: uid115 ret: battle.enemy { data => { name => uid115, enemy.id => 107, enemy.name => uid107, id => 115, enemy.num => 1, battleId => 5, player => 2 }, type => battle.enemy }
03.11 19:36:02 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 19:36:02 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:36:02 STATS: vdl.0 cache connection, 34 calls, total 0.0930807590484619 sec spent, avg 2.74 ms
03.11 19:36:08 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:36:08 TIME: user.ping 0.11 ms
03.11 19:36:08 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:36:12 TIMER: Check auto-disconnect...
03.11 19:36:12 STATS: vdl.0 cache, locks:4
03.11 19:36:19 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:36:19 TIME: user.ping 0.11 ms
03.11 19:36:19 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:36:23 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:36:23 TIME: user.ping 0.07 ms
03.11 19:36:23 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:36:30 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:36:30 TIME: user.ping 0.16 ms
03.11 19:36:30 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:36:36 ++ NET: uid107 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 5 }
03.11 19:36:36 ->>-: vdl/cache.battle.infoRoom { roomId => null, _type => vdl/cache.battle.infoRoom }
03.11 19:36:36 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
03.11 19:36:36 TRACE: battle.sendtask : cacheRequest exception { roomId => null, _type => vdl/cache.battle.infoRoom }
03.11 19:36:36 TRACE: battle.sendtask : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 407
Called from modules/VDLBattleModule.hx line 228
Called from modules/VDLBattleModule.hx line 61
Called from modules/VDLBattleModule.hx line 40
Called from snipe/slave/Server.hx line 1176
03.11 19:36:42 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:36:42 TIME: user.ping 0.08 ms
03.11 19:36:42 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:36:46 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:36:46 TIME: user.ping 0.08 ms
03.11 19:36:46 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:36:53 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:36:53 TIME: user.ping 0.13 ms
03.11 19:36:53 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:37:04 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:37:04 TIME: user.ping 0.09 ms
03.11 19:37:04 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:37:10 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:37:10 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:37:10 TIME: user.ping 0.08 ms
03.11 19:37:12 TIMER: Check auto-disconnect...
03.11 19:37:12 STATS: vdl.0 cache, locks:4
03.11 19:37:15 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:37:15 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:37:15 TIME: user.ping 0.08 ms
03.11 19:37:26 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:37:26 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:37:26 TIME: user.ping 0.1 ms
03.11 19:37:33 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:37:33 TIME: user.ping 0.15 ms
03.11 19:37:33 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:37:37 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:37:37 TIME: user.ping 0.1 ms
03.11 19:37:37 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:37:48 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:37:48 TIME: user.ping 0.12 ms
03.11 19:37:48 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:37:56 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:37:56 TIME: user.ping 0.08 ms
03.11 19:37:56 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:37:59 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:37:59 TIME: user.ping 0.24 ms
03.11 19:37:59 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:38:11 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:38:11 TIME: user.ping 0.14 ms
03.11 19:38:11 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:38:12 TIMER: Check auto-disconnect...
03.11 19:38:12 STATS: vdl.0 cache, locks:4
03.11 19:38:19 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:38:19 TIME: user.ping 0.1 ms
03.11 19:38:19 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:38:22 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:38:22 TIME: user.ping 0.1 ms
03.11 19:38:22 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:38:33 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:38:33 TIME: user.ping 0.1 ms
03.11 19:38:33 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:38:42 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:38:42 TIME: user.ping 0.08 ms
03.11 19:38:42 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:38:44 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:38:44 TIME: user.ping 0.09 ms
03.11 19:38:44 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:38:55 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:38:55 TIME: user.ping 0.14 ms
03.11 19:38:55 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:39:06 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:39:06 TIME: user.ping 0.18 ms
03.11 19:39:06 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:39:06 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:39:06 TIME: user.ping 0.14 ms
03.11 19:39:06 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:39:12 TIMER: Check auto-disconnect...
03.11 19:39:13 STATS: vdl.0 cache, locks:4
03.11 19:39:17 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:39:17 TIME: user.ping 0.17 ms
03.11 19:39:17 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:39:28 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:39:28 TIME: user.ping 0.08 ms
03.11 19:39:28 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:39:29 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:39:29 TIME: user.ping 0.09 ms
03.11 19:39:29 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:39:51 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
03.11 19:39:51 -<<-: server.login ok
03.11 19:39:51 DB: SELECT * FROM LocalizationStrings
03.11 19:39:51 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:39:51 TIMER: Starting timer...
03.11 19:39:51 TIMER: Timer running...
03.11 19:39:51 DB: SELECT * FROM GameVars
03.11 19:39:51 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:39:51 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
03.11 19:39:51 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:39:51 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
03.11 19:39:51 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:39:51 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
03.11 19:39:51 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:39:51 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
03.11 19:39:51 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:39:51 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
03.11 19:39:51 -<<-: core/quest.getDaily ok
03.11 19:39:51 DB: SELECT * FROM UserAttributeTypes
03.11 19:39:51 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:39:51 DB: SELECT * FROM UserVariableTypes
03.11 19:39:51 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:39:51 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
03.11 19:39:51 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:39:51 DB: SELECT * FROM ItemGroups
03.11 19:39:51 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:39:51 DB: SELECT * FROM Bundles ORDER BY ID
03.11 19:39:51 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:39:51 DB: SELECT * FROM BundleItems ORDER BY ID
03.11 19:39:51 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:39:51 SHOP: loading items...
03.11 19:39:51 ->>-: core/shop.getList { _type => core/shop.getList }
03.11 19:39:51 -<<-: core/shop.getList ok
03.11 19:39:51 SHOP: 0 items loaded (0 sec)
03.11 19:39:51 DB: SELECT * FROM EffectAttributeTypes
03.11 19:39:51 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:39:51 DB: SELECT * FROM Effects
03.11 19:39:51 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:39:51 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
03.11 19:39:51 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:39:51 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
03.11 19:39:51 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:39:51 DB: SELECT * FROM Badges
03.11 19:39:51 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
03.11 19:39:51 -<<-: core/server.query ok
03.11 19:40:01 NET: Client (conid:6065978) connected to vdl.0 (clients:1)
03.11 19:40:03 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:40:03 TRACE: User not logon yet.
03.11 19:40:14 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:40:14 TRACE: User not logon yet.
03.11 19:40:22 NET: Client (name:null conid:6065978 TCP) disconnected from vdl.0 (clients:0)
03.11 19:40:41 NET: Client (conid:7496299) connected to vdl.0 (clients:1)
03.11 19:40:47 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:40:47 TRACE: User not logon yet.
03.11 19:40:51 TIMER: Check auto-disconnect...
03.11 19:40:52 STATS: vdl.0 cache, locks:0
03.11 19:41:08 NET: Client (conid:63535056) connected to vdl.0 (clients:2)
03.11 19:41:09 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 19:41:09 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 19:41:09 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 19:41:09 -<<-: core/server.query ok
03.11 19:41:09 STATS: vdl.0 cache connection, 21 calls, total 0.0220201015472412 sec spent, avg 1.05 ms
03.11 19:41:09 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 19:41:09 -<<-: core/user.isOnlineID ok
03.11 19:41:09 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 19:41:09 -<<-: core/cache.get ok
03.11 19:41:09 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 19:41:09 -<<-: core/cache.get ok
03.11 19:41:09 NET: Client login (conid:63535056, id:107, name:uid107)
03.11 19:41:09 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 19:41:09 -<<-: core/user.loginPost null
03.11 19:41:09 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 19:41:09 == NET: uid107 ret: user.join { name => null, type => user.join }
03.11 19:41:09 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 19:41:09 == NET: null ret: user.join { name => uid107, type => user.join }
03.11 19:41:11 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:41:11 TRACE: User not logon yet.
03.11 19:41:14 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:41:14 TIME: user.ping 0.11 ms
03.11 19:41:14 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:41:17 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 19:41:17 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:41:27 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:41:27 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:41:27 TIME: user.ping 0.07 ms
03.11 19:41:36 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:41:36 TRACE: User not logon yet.
03.11 19:41:40 NET: Client (name:uid107 conid:63535056 TCP) disconnected from vdl.0 (clients:1)
03.11 19:41:40 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
03.11 19:41:40 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
03.11 19:41:40 -<<-: core/server.query { list => {{ id => 4 }, { id => 5 }}, errorCode => ok, _type => core/server.query }
03.11 19:41:40 ->>-: vdl/cache.battle.infoRoom { roomId => 5, _type => vdl/cache.battle.infoRoom }
03.11 19:41:40 -<<-: vdl/cache.battle.infoRoom { secondId => 115, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
03.11 19:41:40 ->>-: vdl/cache.battle.deleteRoom { roomId => 5, _type => vdl/cache.battle.deleteRoom }
03.11 19:41:40 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
03.11 19:41:40 ->>-: core/user.sendTo { id => 115, _type => core/user.sendTo, msg => { _type => battle.end } }
03.11 19:41:40 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
03.11 19:41:40 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
03.11 19:41:40 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
03.11 19:41:40 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
03.11 19:41:40 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:41:40 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
03.11 19:41:40 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 19:41:51 TIMER: Check auto-disconnect...
03.11 19:41:52 STATS: vdl.0 cache, locks:0
03.11 19:41:54 NET: Client (conid:51173692) connected to vdl.0 (clients:2)
03.11 19:41:55 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 19:41:55 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 19:41:55 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 19:41:55 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
03.11 19:41:55 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 19:41:55 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 19:41:55 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 19:41:55 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1478178267, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 107 } }
03.11 19:41:55 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 19:41:55 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
03.11 19:41:55 NET: Client login (conid:51173692, id:107, name:uid107)
03.11 19:41:55 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 19:41:55 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 19:41:55 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 19:41:55 == NET: null ret: user.join { name => uid107, type => user.join }
03.11 19:41:55 == NET: uid107 ret: user.join { name => null, type => user.join }
03.11 19:41:55 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 19:41:59 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:41:59 TIME: user.ping 0.15 ms
03.11 19:41:59 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:42:00 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:42:00 TRACE: User not logon yet.
03.11 19:42:02 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 19:42:02 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:42:11 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:42:11 TIME: user.ping 0.18 ms
03.11 19:42:11 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:42:24 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:42:24 TRACE: User not logon yet.
03.11 19:42:25 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:42:25 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:42:25 TIME: user.ping 0.08 ms
03.11 19:42:39 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:42:39 TIME: user.ping 0.18 ms
03.11 19:42:39 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:42:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:42:49 TRACE: User not logon yet.
03.11 19:42:51 TIMER: Check auto-disconnect...
03.11 19:42:52 STATS: vdl.0 cache, locks:2
03.11 19:42:52 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:42:52 TIME: user.ping 0.11 ms
03.11 19:42:52 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:43:05 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:43:05 TIME: user.ping 0.14 ms
03.11 19:43:05 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:43:13 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:43:13 TRACE: User not logon yet.
03.11 19:43:19 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:43:19 TIME: user.ping 0.09 ms
03.11 19:43:19 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:43:19 NET: Client (name:uid107 conid:51173692 TCP) disconnected from vdl.0 (clients:1)
03.11 19:43:19 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
03.11 19:43:19 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
03.11 19:43:19 -<<-: core/server.query { list => {{ id => 4 }}, errorCode => ok, _type => core/server.query }
03.11 19:43:19 STATS: vdl.0 cache connection, 40 calls, total 0.0589096546173096 sec spent, avg 1.47 ms
03.11 19:43:19 ->>-: vdl/cache.battle.infoRoom { roomId => 4, _type => vdl/cache.battle.infoRoom }
03.11 19:43:19 -<<-: vdl/cache.battle.infoRoom { secondId => 115, firstId => 107, _type => vdl/cache.battle.infoRoom, turnId => 107 }
03.11 19:43:19 ->>-: vdl/cache.battle.deleteRoom { roomId => 4, _type => vdl/cache.battle.deleteRoom }
03.11 19:43:19 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
03.11 19:43:19 ->>-: core/user.sendTo { id => 115, _type => core/user.sendTo, msg => { _type => battle.end } }
03.11 19:43:19 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
03.11 19:43:19 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
03.11 19:43:19 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
03.11 19:43:19 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
03.11 19:43:19 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:43:19 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
03.11 19:43:19 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 19:43:38 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:43:38 TRACE: User not logon yet.
03.11 19:43:51 TIMER: Check auto-disconnect...
03.11 19:43:52 STATS: vdl.0 cache, locks:0
03.11 19:44:02 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:44:02 TRACE: User not logon yet.
03.11 19:44:27 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:44:27 TRACE: User not logon yet.
03.11 19:44:29 NET: Client (conid:36595484) connected to vdl.0 (clients:2)
03.11 19:44:30 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 19:44:30 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 19:44:30 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 19:44:30 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
03.11 19:44:30 STATS: vdl.0 cache connection, 47 calls, total 0.0743834972381592 sec spent, avg 1.58 ms
03.11 19:44:30 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 19:44:30 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 19:44:30 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 19:44:30 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1478178267, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 107 } }
03.11 19:44:30 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 19:44:30 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
03.11 19:44:30 NET: Client login (conid:36595484, id:107, name:uid107)
03.11 19:44:30 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 19:44:30 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 19:44:30 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 19:44:30 == NET: null ret: user.join { name => uid107, type => user.join }
03.11 19:44:30 == NET: uid107 ret: user.join { name => null, type => user.join }
03.11 19:44:30 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 19:44:34 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:44:34 TIME: user.ping 0.24 ms
03.11 19:44:34 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:44:37 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 19:44:37 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:44:49 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:44:49 TIME: user.ping 0.11 ms
03.11 19:44:49 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:44:51 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:44:51 TRACE: User not logon yet.
03.11 19:44:51 TIMER: Check auto-disconnect...
03.11 19:44:52 STATS: vdl.0 cache, locks:2
03.11 19:44:55 NET: Client (name:uid107 conid:36595484 TCP) disconnected from vdl.0 (clients:1)
03.11 19:44:55 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
03.11 19:44:55 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
03.11 19:44:55 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
03.11 19:44:55 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
03.11 19:44:55 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
03.11 19:44:55 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
03.11 19:44:55 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 407
Called from modules/VDLBattleModule.hx line 420
Called from snipe/slave/Server.hx line 994
03.11 19:44:55 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
03.11 19:44:55 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
03.11 19:44:55 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
03.11 19:44:55 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:44:55 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
03.11 19:44:55 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 19:45:09 NET: Client (conid:91258263) connected to vdl.0 (clients:2)
03.11 19:45:10 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 19:45:10 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 19:45:10 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 19:45:10 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
03.11 19:45:10 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 19:45:10 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 19:45:10 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 19:45:10 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1478178267, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 107 } }
03.11 19:45:10 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 19:45:10 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
03.11 19:45:10 NET: Client login (conid:91258263, id:107, name:uid107)
03.11 19:45:10 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 19:45:10 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 19:45:10 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 19:45:10 == NET: null ret: user.join { name => uid107, type => user.join }
03.11 19:45:10 == NET: uid107 ret: user.join { name => null, type => user.join }
03.11 19:45:10 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 19:45:14 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:45:14 TIME: user.ping 0.1 ms
03.11 19:45:14 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:45:16 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:45:16 TRACE: User not logon yet.
03.11 19:45:17 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 19:45:17 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:45:27 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:45:27 TIME: user.ping 0.17 ms
03.11 19:45:27 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:45:40 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:45:40 TRACE: User not logon yet.
03.11 19:45:42 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:45:42 TIME: user.ping 0.24 ms
03.11 19:45:42 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:45:51 TIMER: Check auto-disconnect...
03.11 19:45:52 STATS: vdl.0 cache, locks:2
03.11 19:45:54 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:45:54 TIME: user.ping 0.16 ms
03.11 19:45:54 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:45:57 NET: Client (name:uid107 conid:91258263 TCP) disconnected from vdl.0 (clients:1)
03.11 19:45:57 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
03.11 19:45:57 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
03.11 19:45:57 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
03.11 19:45:57 STATS: vdl.0 cache connection, 64 calls, total 0.0919926166534424 sec spent, avg 1.44 ms
03.11 19:45:57 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
03.11 19:45:57 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
03.11 19:45:57 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
03.11 19:45:57 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 407
Called from modules/VDLBattleModule.hx line 420
Called from snipe/slave/Server.hx line 994
03.11 19:45:57 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
03.11 19:45:57 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
03.11 19:45:57 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
03.11 19:45:57 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:45:57 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
03.11 19:45:57 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 19:46:05 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:46:05 TRACE: User not logon yet.
03.11 19:46:29 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:46:29 TRACE: User not logon yet.
03.11 19:46:51 TIMER: Check auto-disconnect...
03.11 19:46:52 STATS: vdl.0 cache, locks:0
03.11 19:46:54 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:46:54 TRACE: User not logon yet.
03.11 19:47:18 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:47:18 TRACE: User not logon yet.
03.11 19:47:43 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:47:43 TRACE: User not logon yet.
03.11 19:47:51 TIMER: Check auto-disconnect...
03.11 19:47:52 STATS: vdl.0 cache, locks:0
03.11 19:48:07 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:48:07 TRACE: User not logon yet.
03.11 19:48:09 NET: Client (conid:52870341) connected to vdl.0 (clients:2)
03.11 19:48:10 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 19:48:10 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 19:48:10 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 19:48:10 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
03.11 19:48:10 STATS: vdl.0 cache connection, 69 calls, total 0.0965466499328613 sec spent, avg 1.4 ms
03.11 19:48:10 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 19:48:10 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 19:48:10 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 19:48:10 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1478178267, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 107 } }
03.11 19:48:10 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 19:48:10 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
03.11 19:48:10 NET: Client login (conid:52870341, id:107, name:uid107)
03.11 19:48:10 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 19:48:10 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 19:48:10 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 19:48:10 == NET: uid107 ret: user.join { name => null, type => user.join }
03.11 19:48:10 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 19:48:10 == NET: null ret: user.join { name => uid107, type => user.join }
03.11 19:48:15 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:48:15 TIME: user.ping 0.12 ms
03.11 19:48:15 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:48:17 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 19:48:17 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:48:24 ++ NET: uid107 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 19:48:24 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 107 }, _type => vdl/cache.battle.findRandom }
03.11 19:48:24 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 19:48:24 TIME: battle.find 0.26 ms
03.11 19:48:24 == NET: uid107 ret: battle.find { type => battle.find, errorCode => ok }
03.11 19:48:27 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:48:27 TIME: user.ping 0.11 ms
03.11 19:48:27 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:48:30 ++ NET: null req: battle.end { type => leaveGame, typeBattle => random, tournamentId => 0, messageType => battle.end, battleId => 5 }
03.11 19:48:30 TRACE: User not logon yet.
03.11 19:48:32 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:48:32 TRACE: User not logon yet.
03.11 19:48:35 ++ NET: null req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 19:48:35 TRACE: User not logon yet.
03.11 19:48:41 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:48:41 TIME: user.ping 0.1 ms
03.11 19:48:41 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:48:43 ++ NET: null req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 19:48:43 TRACE: User not logon yet.
03.11 19:48:51 TIMER: Check auto-disconnect...
03.11 19:48:52 STATS: vdl.0 cache, locks:2
03.11 19:48:55 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:48:55 TIME: user.ping 0.12 ms
03.11 19:48:55 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:48:59 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
03.11 19:48:59 TRACE: User not logon yet.
03.11 19:49:03 NET: Client (name:null conid:7496299 TCP) disconnected from vdl.0 (clients:1)
03.11 19:49:09 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:49:09 TIME: user.ping 0.15 ms
03.11 19:49:09 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:49:23 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:49:23 TIME: user.ping 0.1 ms
03.11 19:49:23 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:49:27 NET: Client (conid:4632512) connected to vdl.0 (clients:2)
03.11 19:49:31 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTE1 }
03.11 19:49:31 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid115' AND Password = E'uid115'
03.11 19:49:31 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid115' AND Password = E'uid115', _type => core/server.query }
03.11 19:49:31 -<<-: core/server.query { list => {{ name => uid115, networkid => , isbanned => false, id => 115 }}, errorCode => ok, _type => core/server.query }
03.11 19:49:31 STATS: vdl.0 cache connection, 76 calls, total 0.104038715362549 sec spent, avg 1.37 ms
03.11 19:49:31 ->>-: core/user.isOnlineID { id => 115, _type => core/user.isOnlineID }
03.11 19:49:31 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 19:49:31 ->>-: core/cache.get { type => user, v => -1, id => 115, _type => core/cache.get }
03.11 19:49:31 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid115, deleted => false, email => , networktype =>   , password => uid115, isbanned => false, regdate => 2016-11-03 18:37:16.527174+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1478188735, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 115 } }
03.11 19:49:31 ->>-: core/cache.get { type => questdata, v => -1, id => 115, _type => core/cache.get }
03.11 19:49:31 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 115 } }
03.11 19:49:31 NET: Client login (conid:4632512, id:115, name:uid115)
03.11 19:49:31 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 115, _type => core/user.loginPost, ipAddr => 172.16.20.203 }
03.11 19:49:31 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 19:49:31 == NET: uid115 ret: user.login { name => uid115, type => user.login, errorCode => ok, id => 115 }
03.11 19:49:31 == NET: uid107 ret: user.join { name => uid115, type => user.join }
03.11 19:49:31 == NET: uid115 ret: user.join { name => uid107, type => user.join }
03.11 19:49:31 == NET: uid115 ret: user.join { name => uid115, type => user.join }
03.11 19:49:37 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 115, _type => core/cache.update }
03.11 19:49:37 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:49:38 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:49:38 TIME: user.ping 0.11 ms
03.11 19:49:38 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:49:44 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:49:44 TIME: user.ping 0.12 ms
03.11 19:49:44 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:49:45 ++ NET: uid115 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
03.11 19:49:45 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 115 }, _type => vdl/cache.battle.findRandom }
03.11 19:49:45 -<<-: battle.enemyEvent { data => { name => uid115, enemy.id => 107, enemy.name => uid107, id => 115, enemy.num => 2, battleId => 6, player => 1 }, _isNotify => true, id => 115, _type => battle.enemyEvent }
03.11 19:49:45 -<<-: battle.enemyEvent { data => { name => uid107, enemy.id => 115, enemy.name => uid115, id => 107, enemy.num => 1, battleId => 6, player => 2 }, _isNotify => true, id => 107, _type => battle.enemyEvent }
03.11 19:49:45 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
03.11 19:49:45 TIME: battle.find 38.41 ms
03.11 19:49:45 == NET: uid115 ret: battle.find { type => battle.find, errorCode => ok }
03.11 19:49:45 == NET: uid115 ret: battle.enemy { data => { name => uid115, enemy.id => 107, enemy.name => uid107, id => 115, enemy.num => 2, battleId => 6, player => 1 }, type => battle.enemy }
03.11 19:49:45 == NET: uid107 ret: battle.enemy { data => { name => uid107, enemy.id => 115, enemy.name => uid115, id => 107, enemy.num => 1, battleId => 6, player => 2 }, type => battle.enemy }
03.11 19:49:51 TIMER: Check auto-disconnect...
03.11 19:49:52 STATS: vdl.0 cache, locks:4
03.11 19:49:52 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:49:52 TIME: user.ping 0.08 ms
03.11 19:49:52 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:49:54 ++ NET: uid115 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 6 }
03.11 19:49:54 ->>-: vdl/cache.battle.infoRoom { roomId => 6, _type => vdl/cache.battle.infoRoom }
03.11 19:49:54 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 115, _type => vdl/cache.battle.infoRoom, turnId => 115 }
03.11 19:49:54 TIME: battle.sendtask 0.39 ms
03.11 19:49:54 == NET: uid115 ret: battle.cubes { name => throw, type => battle.cubes, dices => [4,0,5,3,0,3], errorCode => ok }
03.11 19:49:54 == NET: uid115 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
03.11 19:49:54 == NET: uid107 ret: null { name => throw, type => null, dices => [4,0,5,3,0,3], errorCode => ok }
03.11 19:50:06 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:50:06 TIME: user.ping 0.15 ms
03.11 19:50:06 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:50:10 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:50:10 TIME: user.ping 0.11 ms
03.11 19:50:10 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:50:20 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:50:20 TIME: user.ping 0.19 ms
03.11 19:50:20 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:50:35 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:50:35 TIME: user.ping 0.13 ms
03.11 19:50:35 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:50:51 TIMER: Check auto-disconnect...
03.11 19:50:52 STATS: vdl.0 cache, locks:4
03.11 19:50:59 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:50:59 TIME: user.ping 0.11 ms
03.11 19:50:59 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:51:00 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:51:00 TIME: user.ping 0.07 ms
03.11 19:51:00 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:51:04 NET: Client (name:uid107 conid:52870341 TCP) disconnected from vdl.0 (clients:1)
03.11 19:51:04 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
03.11 19:51:04 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
03.11 19:51:04 -<<-: core/server.query { list => {{ id => 6 }}, errorCode => ok, _type => core/server.query }
03.11 19:51:04 STATS: vdl.0 cache connection, 84 calls, total 0.148210048675537 sec spent, avg 1.76 ms
03.11 19:51:04 ->>-: vdl/cache.battle.infoRoom { roomId => 6, _type => vdl/cache.battle.infoRoom }
03.11 19:51:04 -<<-: vdl/cache.battle.infoRoom { secondId => 107, firstId => 115, _type => vdl/cache.battle.infoRoom, turnId => 115 }
03.11 19:51:04 ->>-: vdl/cache.battle.deleteRoom { roomId => 6, _type => vdl/cache.battle.deleteRoom }
03.11 19:51:04 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
03.11 19:51:04 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
03.11 19:51:04 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
03.11 19:51:04 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
03.11 19:51:04 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:51:04 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
03.11 19:51:04 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 19:51:04 == NET: uid115 ret: battle.end { type => battle.end }
03.11 19:51:24 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:51:24 TIME: user.ping 0.09 ms
03.11 19:51:24 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:51:49 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:51:49 TIME: user.ping 0.2 ms
03.11 19:51:49 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:51:51 TIMER: Check auto-disconnect...
03.11 19:51:52 STATS: vdl.0 cache, locks:2
03.11 19:51:52 ++ NET: uid115 req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 6 }
03.11 19:51:52 ->>-: vdl/cache.battle.infoRoom { roomId => 6, _type => vdl/cache.battle.infoRoom }
03.11 19:51:52 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
03.11 19:51:52 TRACE: battle.sendtask : cacheRequest exception { roomId => 6, _type => vdl/cache.battle.infoRoom }
03.11 19:51:52 TRACE: battle.sendtask : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 407
Called from modules/VDLBattleModule.hx line 228
Called from modules/VDLBattleModule.hx line 61
Called from modules/VDLBattleModule.hx line 40
Called from snipe/slave/Server.hx line 1176
03.11 19:52:13 ++ NET: uid115 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:52:13 TIME: user.ping 0.14 ms
03.11 19:52:13 == NET: uid115 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:52:34 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
03.11 19:52:34 -<<-: server.login ok
03.11 19:52:34 DB: SELECT * FROM LocalizationStrings
03.11 19:52:34 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:52:34 TIMER: Starting timer...
03.11 19:52:34 TIMER: Timer running...
03.11 19:52:34 DB: SELECT * FROM GameVars
03.11 19:52:34 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:52:34 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
03.11 19:52:34 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:52:34 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
03.11 19:52:34 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:52:34 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
03.11 19:52:34 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:52:34 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
03.11 19:52:34 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:52:34 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
03.11 19:52:34 -<<-: core/quest.getDaily ok
03.11 19:52:34 DB: SELECT * FROM UserAttributeTypes
03.11 19:52:34 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:52:34 DB: SELECT * FROM UserVariableTypes
03.11 19:52:34 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:52:34 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
03.11 19:52:34 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:52:34 DB: SELECT * FROM ItemGroups
03.11 19:52:34 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:52:34 DB: SELECT * FROM Bundles ORDER BY ID
03.11 19:52:34 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:52:34 DB: SELECT * FROM BundleItems ORDER BY ID
03.11 19:52:34 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:52:34 SHOP: loading items...
03.11 19:52:34 ->>-: core/shop.getList { _type => core/shop.getList }
03.11 19:52:34 -<<-: core/shop.getList ok
03.11 19:52:34 SHOP: 0 items loaded (0 sec)
03.11 19:52:34 DB: SELECT * FROM EffectAttributeTypes
03.11 19:52:34 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:52:34 DB: SELECT * FROM Effects
03.11 19:52:34 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:52:34 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
03.11 19:52:34 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:52:34 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
03.11 19:52:34 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:52:34 DB: SELECT * FROM Badges
03.11 19:52:34 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
03.11 19:52:34 -<<-: core/server.query ok
03.11 19:53:33 NET: Client (conid:32068937) connected to vdl.0 (clients:1)
03.11 19:53:34 TIMER: Check auto-disconnect...
03.11 19:53:34 STATS: vdl.0 cache, locks:0
03.11 19:53:34 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 19:53:34 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 19:53:34 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 19:53:34 -<<-: core/server.query ok
03.11 19:53:34 STATS: vdl.0 cache connection, 21 calls, total 0.018916130065918 sec spent, avg 0.9 ms
03.11 19:53:34 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 19:53:34 -<<-: core/user.isOnlineID ok
03.11 19:53:34 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 19:53:34 -<<-: core/cache.get ok
03.11 19:53:34 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 19:53:34 -<<-: core/cache.get ok
03.11 19:53:34 NET: Client login (conid:32068937, id:107, name:uid107)
03.11 19:53:34 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 19:53:34 -<<-: core/user.loginPost null
03.11 19:53:34 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 19:53:34 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 19:53:39 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:53:39 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:53:39 TIME: user.ping 0.15 ms
03.11 19:53:44 NET: Client (name:uid107 conid:32068937 TCP) disconnected from vdl.0 (clients:0)
03.11 19:53:44 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
03.11 19:53:44 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
03.11 19:53:44 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
03.11 19:53:44 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
03.11 19:53:44 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
03.11 19:53:44 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
03.11 19:53:44 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 408
Called from modules/VDLBattleModule.hx line 421
Called from snipe/slave/Server.hx line 994
03.11 19:53:44 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => true, id => 107, _type => core/cache.update }
03.11 19:53:44 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:53:44 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
03.11 19:53:44 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:53:44 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
03.11 19:53:44 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 19:54:34 TIMER: Check auto-disconnect...
03.11 19:54:34 STATS: vdl.0 cache, locks:0
03.11 19:54:34 TIMER: Check auto-disconnect...
03.11 19:54:34 STATS: vdl.0 cache, locks:0
03.11 19:54:34 TIMER: Check auto-disconnect...
03.11 19:54:34 STATS: vdl.0 cache, locks:0
03.11 19:54:34 TIMER: Check auto-disconnect...
03.11 19:54:34 STATS: vdl.0 cache, locks:0
03.11 19:54:34 TIMER: Check auto-disconnect...
03.11 19:54:34 STATS: vdl.0 cache, locks:0
03.11 19:58:57 NET: Client (conid:64982296) connected to vdl.0 (clients:1)
03.11 19:58:58 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTA3 }
03.11 19:58:58 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107'
03.11 19:58:58 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid107' AND Password = E'uid107', _type => core/server.query }
03.11 19:58:58 -<<-: core/server.query { list => {{ name => uid107, networkid => , isbanned => false, id => 107 }}, errorCode => ok, _type => core/server.query }
03.11 19:58:58 STATS: vdl.0 cache connection, 31 calls, total 0.0295705795288086 sec spent, avg 0.95 ms
03.11 19:58:58 ->>-: core/user.isOnlineID { id => 107, _type => core/user.isOnlineID }
03.11 19:58:58 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
03.11 19:58:58 ->>-: core/cache.get { type => user, v => -1, id => 107, _type => core/cache.get }
03.11 19:58:58 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid107, deleted => false, email => , networktype =>   , password => uid107, isbanned => false, regdate => 2016-10-28 16:37:18.693533+03, language => en, networkid => , params => { info => { city => null, year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1478178267, lastLoginDate => 308, lastLoadDate => 1104 }, effects => { list => [] } }}, version => 0, id => 107 } }
03.11 19:58:58 ->>-: core/cache.get { type => questdata, v => -1, id => 107, _type => core/cache.get }
03.11 19:58:58 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 107 } }
03.11 19:58:58 NET: Client login (conid:64982296, id:107, name:uid107)
03.11 19:58:58 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 107, _type => core/user.loginPost, ipAddr => 172.16.10.1 }
03.11 19:58:58 -<<-: core/user.loginPost { _type => core/user.loginPost }
03.11 19:58:58 == NET: uid107 ret: user.login { name => uid107, type => user.login, errorCode => ok, id => 107 }
03.11 19:58:58 == NET: uid107 ret: user.join { name => uid107, type => user.join }
03.11 19:59:02 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:59:02 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:59:02 TIME: user.ping 0.11 ms
03.11 19:59:04 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 107, _type => core/cache.update }
03.11 19:59:04 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:59:09 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:59:09 TIME: user.ping 0.11 ms
03.11 19:59:09 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:59:17 ++ NET: uid107 req: user.ping { messageType => user.ping, msg => ok }
03.11 19:59:17 TIME: user.ping 0.17 ms
03.11 19:59:17 == NET: uid107 ret: user.ping { type => user.ping, errorCode => ok }
03.11 19:59:22 NET: Client (name:uid107 conid:64982296 TCP) disconnected from vdl.0 (clients:0)
03.11 19:59:22 DB: SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true
03.11 19:59:22 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=107 OR secondid=107 AND finished <> true, _type => core/server.query }
03.11 19:59:22 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
03.11 19:59:22 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
03.11 19:59:22 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
03.11 19:59:22 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
03.11 19:59:22 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 408
Called from modules/VDLBattleModule.hx line 421
Called from snipe/slave/Server.hx line 994
03.11 19:59:22 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 107, _type => core/cache.update }
03.11 19:59:22 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
03.11 19:59:22 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 107, _type => core/cache.update }
03.11 19:59:22 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
03.11 19:59:22 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 107, _type => core/user.logoutPost }
03.11 19:59:22 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
03.11 19:59:34 TIMER: Check auto-disconnect...
03.11 19:59:34 STATS: vdl.0 cache, locks:0
