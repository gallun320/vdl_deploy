20.01 17:10:14 ->>-: core/server.login { host => 172.16.20.171, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.20.171, externalPort => 2030 }
20.01 17:10:14 -<<-: server.login ok
20.01 17:10:14 DB: SELECT * FROM LocalizationStrings
20.01 17:10:14 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
20.01 17:10:14 -<<-: core/server.query ok
20.01 17:10:15 TIMER: Starting timer...
20.01 17:10:15 TIMER: Timer running...
20.01 17:10:15 DB: SELECT * FROM GameVars
20.01 17:10:15 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
20.01 17:10:15 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
20.01 17:10:15 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
20.01 17:10:15 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
20.01 17:10:15 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
20.01 17:10:15 -<<-: core/quest.getDaily ok
20.01 17:10:15 DB: SELECT * FROM UserAttributeTypes
20.01 17:10:15 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 DB: SELECT * FROM UserVariableTypes
20.01 17:10:15 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
20.01 17:10:15 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 DB: SELECT * FROM ItemGroups
20.01 17:10:15 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 DB: SELECT * FROM Bundles ORDER BY ID
20.01 17:10:15 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 DB: SELECT * FROM BundleItems ORDER BY ID
20.01 17:10:15 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 SHOP: loading items...
20.01 17:10:15 ->>-: core/shop.getList { _type => core/shop.getList }
20.01 17:10:15 -<<-: core/shop.getList ok
20.01 17:10:15 SHOP: 0 items loaded (0 sec)
20.01 17:10:15 DB: SELECT * FROM EffectAttributeTypes
20.01 17:10:15 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 DB: SELECT * FROM Effects
20.01 17:10:15 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
20.01 17:10:15 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
20.01 17:10:15 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 DB: SELECT * FROM Badges
20.01 17:10:15 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 NET: Client (conid:31623954) connected to vdl.0 (clients:1)
20.01 17:10:15 NET: Client (name:null conid:31623954 TCP) disconnected from vdl.0 (clients:0)
20.01 17:10:15 NET: Client (conid:1260355) connected to vdl.0 (clients:1)
20.01 17:10:15 NET: Client (conid:38008824) connected to vdl.0 (clients:2)
20.01 17:10:15 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
20.01 17:10:15 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
20.01 17:10:15 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query ok
20.01 17:10:15 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
20.01 17:10:15 -<<-: core/user.isOnlineID ok
20.01 17:10:15 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
20.01 17:10:15 -<<-: core/cache.get ok
20.01 17:10:15 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
20.01 17:10:15 -<<-: core/cache.get ok
20.01 17:10:15 NET: Client login (conid:1260355, id:76, name:Aimer)
20.01 17:10:15 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 17:10:15 -<<-: core/user.loginPost null
20.01 17:10:15 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
20.01 17:10:15 == NET: null ret: user.join { name => Aimer, type => user.join }
20.01 17:10:15 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
20.01 17:10:15 == NET: Aimer ret: user.join { name => null, type => user.join }
20.01 17:10:15 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer2, messageType => user.login }
20.01 17:10:15 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer2' AND Password = E'kO2YJdf'
20.01 17:10:15 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer2' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 17:10:15 -<<-: core/server.query { list => {{ name => Aimer2, networkid => , isbanned => false, id => 163 }}, errorCode => ok, _type => core/server.query }
20.01 17:10:15 ->>-: core/user.isOnlineID { id => 163, _type => core/user.isOnlineID }
20.01 17:10:15 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.01 17:10:15 ->>-: core/cache.get { type => user, v => -1, id => 163, _type => core/cache.get }
20.01 17:10:15 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer2, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2017-01-20 12:39:54.038596+03, language => en, networkid => , params => { info => { city => , year => , email =>  }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484905194, lastLoginDate => 20, lastLoadDate => 121 }, effects => { list => [] } }}, version => 0, id => 163 } }
20.01 17:10:15 ->>-: core/cache.get { type => questdata, v => -1, id => 163, _type => core/cache.get }
20.01 17:10:15 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 163 } }
20.01 17:10:15 NET: Client login (conid:38008824, id:163, name:Aimer2)
20.01 17:10:15 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 163, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 17:10:15 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.01 17:10:15 == NET: Aimer2 ret: user.login { name => Aimer2, type => user.login, errorCode => ok, id => 163 }
20.01 17:10:15 == NET: Aimer ret: user.join { name => Aimer2, type => user.join }
20.01 17:10:15 == NET: Aimer2 ret: user.join { name => Aimer, type => user.join }
20.01 17:10:15 == NET: Aimer2 ret: user.join { name => Aimer2, type => user.join }
20.01 17:10:15 ++ NET: Aimer req: user.data { messageType => user.data }
20.01 17:10:15 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
20.01 17:10:15 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 17:10:15 TIME: user.data 0.46 ms
20.01 17:10:15 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 17:10:15 ++ NET: Aimer2 req: user.data { messageType => user.data }
20.01 17:10:15 ->>-: vdl/cache.user.getData { userId => 163, _type => vdl/cache.user.getData, money => 0 }
20.01 17:10:15 -<<-: vdl/cache.user.getData { info => { city => , year => , email =>  }, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.01 17:10:15 TIME: user.data 0.25 ms
20.01 17:10:15 == NET: Aimer2 ret: user.data { info => { city => , year => , email =>  }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.01 17:10:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:10:15 TIME: user.ping 0.13 ms
20.01 17:10:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:10:17 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 17:10:17 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:10:17 TIME: user.ping 0.51 ms
20.01 17:10:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:10:18 TIME: user.ping 0.24 ms
20.01 17:10:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:10:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:10:21 TIME: user.ping 0.15 ms
20.01 17:10:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:10:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:10:23 TIME: user.ping 0.27 ms
20.01 17:10:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:10:25 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
20.01 17:10:25 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 17:10:25 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 163, _type => core/cache.update }
20.01 17:10:25 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 17:10:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:10:26 TIME: user.ping 0.28 ms
20.01 17:10:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:10:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:10:29 TIME: user.ping 0.13 ms
20.01 17:10:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:10:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:10:32 TIME: user.ping 0.18 ms
20.01 17:10:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:10:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:10:34 TIME: user.ping 0.25 ms
20.01 17:10:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:10:36 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 17:10:36 TIME: user.ping 0.19 ms
20.01 17:10:36 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:10:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:10:38 TIME: user.ping 0.22 ms
20.01 17:10:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:10:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:10:46 TIME: user.ping 0.17 ms
20.01 17:10:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:10:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:10:49 TIME: user.ping 0.18 ms
20.01 17:10:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:10:49 NET: Client (name:Aimer2 conid:38008824 TCP) disconnected from vdl.0 (clients:1)
20.01 17:10:49 DB: SELECT id FROM battle WHERE firstid=163 OR secondid=163 AND finished <> true
20.01 17:10:49 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=163 OR secondid=163 AND finished <> true, _type => core/server.query }
20.01 17:10:49 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.01 17:10:49 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.01 17:10:49 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
20.01 17:10:49 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.01 17:10:49 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 516
Called from modules/VDLBattleModule.hx line 529
Called from snipe/slave/Server.hx line 994
20.01 17:10:49 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 163, _type => core/cache.update }
20.01 17:10:49 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
20.01 17:10:49 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 163, _type => core/cache.update }
20.01 17:10:49 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 17:10:49 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 163, _type => core/user.logoutPost }
20.01 17:10:49 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.01 17:10:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:10:52 TIME: user.ping 0.19 ms
20.01 17:10:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:10:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:10:54 TIME: user.ping 0.14 ms
20.01 17:10:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:10:54 NET: Client (conid:23050772) connected to vdl.0 (clients:2)
20.01 17:10:56 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer2, messageType => user.login }
20.01 17:10:56 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer2' AND Password = E'kO2YJdf'
20.01 17:10:56 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer2' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 17:10:56 -<<-: core/server.query { list => {{ name => Aimer2, networkid => , isbanned => false, id => 163 }}, errorCode => ok, _type => core/server.query }
20.01 17:10:56 ->>-: core/user.isOnlineID { id => 163, _type => core/user.isOnlineID }
20.01 17:10:56 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.01 17:10:56 ->>-: core/cache.get { type => user, v => -1, id => 163, _type => core/cache.get }
20.01 17:10:56 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer2, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2017-01-20 12:39:54.038596+03, language => en, networkid => , params => { info => { city => , year => , email =>  }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484905194, lastLoginDate => 20, lastLoadDate => 121 }, effects => { list => [] } }}, version => 2, id => 163 } }
20.01 17:10:56 ->>-: core/cache.get { type => questdata, v => -1, id => 163, _type => core/cache.get }
20.01 17:10:56 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 163 } }
20.01 17:10:56 NET: Client login (conid:23050772, id:163, name:Aimer2)
20.01 17:10:56 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 163, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 17:10:56 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.01 17:10:56 == NET: Aimer ret: user.join { name => Aimer2, type => user.join }
20.01 17:10:56 == NET: Aimer2 ret: user.login { name => Aimer2, type => user.login, errorCode => ok, id => 163 }
20.01 17:10:56 == NET: Aimer2 ret: user.join { name => Aimer, type => user.join }
20.01 17:10:56 == NET: Aimer2 ret: user.join { name => Aimer2, type => user.join }
20.01 17:10:57 ++ NET: Aimer2 req: user.data { messageType => user.data }
20.01 17:10:57 ->>-: vdl/cache.user.getData { userId => 163, _type => vdl/cache.user.getData, money => 0 }
20.01 17:10:57 -<<-: vdl/cache.user.getData { info => { city => , year => , email =>  }, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.01 17:10:57 TIME: user.data 0.76 ms
20.01 17:10:57 == NET: Aimer2 ret: user.data { info => { city => , year => , email =>  }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.01 17:10:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:10:57 TIME: user.ping 0.32 ms
20.01 17:10:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:11:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:11:00 TIME: user.ping 0.09 ms
20.01 17:11:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:11:03 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 17:11:03 TIME: user.ping 0.21 ms
20.01 17:11:03 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:11:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:11:05 TIME: user.ping 0.19 ms
20.01 17:11:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:11:05 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 163, _type => core/cache.update }
20.01 17:11:05 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
20.01 17:11:06 ++ NET: Aimer2 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
20.01 17:11:06 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 163 }, _type => vdl/cache.battle.findRandom }
20.01 17:11:06 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
20.01 17:11:06 TIME: battle.find 0.3 ms
20.01 17:11:06 == NET: Aimer2 ret: battle.find { type => battle.find, errorCode => ok }
20.01 17:11:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:11:09 TIME: user.ping 0.14 ms
20.01 17:11:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:11:10 ++ NET: Aimer req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
20.01 17:11:10 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 76 }, _type => vdl/cache.battle.findRandom }
20.01 17:11:10 -<<-: battle.enemyEvent { data => { name => Aimer, enemy.id => 163, enemy.name => Aimer2, id => 76, enemy.num => 2, battleId => 42, player => 1 }, _isNotify => true, id => 76, _type => battle.enemyEvent }
20.01 17:11:10 -<<-: battle.enemyEvent { data => { name => Aimer2, enemy.id => 76, enemy.name => Aimer, id => 163, enemy.num => 1, battleId => 42, player => 2 }, _isNotify => true, id => 163, _type => battle.enemyEvent }
20.01 17:11:10 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
20.01 17:11:10 TIME: battle.find 9.6 ms
20.01 17:11:10 == NET: Aimer ret: battle.find { type => battle.find, errorCode => ok }
20.01 17:11:10 == NET: Aimer ret: battle.enemy { data => { name => Aimer, enemy.id => 163, enemy.name => Aimer2, id => 76, enemy.num => 2, battleId => 42, player => 1 }, type => battle.enemy }
20.01 17:11:10 == NET: Aimer2 ret: battle.enemy { data => { name => Aimer2, enemy.id => 76, enemy.name => Aimer, id => 163, enemy.num => 1, battleId => 42, player => 2 }, type => battle.enemy }
20.01 17:11:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:11:13 TIME: user.ping 0.17 ms
20.01 17:11:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:11:15 TIMER: Check auto-disconnect...
20.01 17:11:15 STATS: vdl.0 cache, locks:4
20.01 17:11:17 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:11:17 TIME: user.ping 0.26 ms
20.01 17:11:17 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:11:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:11:21 TIME: user.ping 0.27 ms
20.01 17:11:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:11:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:11:25 TIME: user.ping 0.15 ms
20.01 17:11:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:11:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:11:30 TIME: user.ping 0.19 ms
20.01 17:11:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:11:35 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 17:11:35 TIME: user.ping 0.2 ms
20.01 17:11:35 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:11:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:11:37 TIME: user.ping 0.32 ms
20.01 17:11:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:11:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:11:40 TIME: user.ping 0.18 ms
20.01 17:11:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:11:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:11:43 TIME: user.ping 0.3 ms
20.01 17:11:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:11:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:11:46 TIME: user.ping 0.22 ms
20.01 17:11:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:11:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:11:50 TIME: user.ping 0.19 ms
20.01 17:11:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:11:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:11:55 TIME: user.ping 0.21 ms
20.01 17:11:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:01 TIME: user.ping 0.24 ms
20.01 17:12:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:04 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:04 TIME: user.ping 0.26 ms
20.01 17:12:04 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:05 TIME: user.ping 0.22 ms
20.01 17:12:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:08 TIME: user.ping 0.27 ms
20.01 17:12:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:11 TIME: user.ping 0.29 ms
20.01 17:12:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:15 TIMER: Check auto-disconnect...
20.01 17:12:15 STATS: vdl.0 cache, locks:4
20.01 17:12:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:15 TIME: user.ping 0.07 ms
20.01 17:12:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:18 TIME: user.ping 0.22 ms
20.01 17:12:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:23 TIME: user.ping 0.37 ms
20.01 17:12:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:29 TIME: user.ping 0.19 ms
20.01 17:12:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:32 TIME: user.ping 0.23 ms
20.01 17:12:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:33 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:33 TIME: user.ping 0.19 ms
20.01 17:12:33 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:35 TIME: user.ping 0.2 ms
20.01 17:12:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:39 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:39 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:39 TIME: user.ping 0.43 ms
20.01 17:12:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:42 TIME: user.ping 0.28 ms
20.01 17:12:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:45 TIME: user.ping 0.29 ms
20.01 17:12:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:49 TIME: user.ping 0.15 ms
20.01 17:12:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:12:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:12:57 TIME: user.ping 0.25 ms
20.01 17:12:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:13:01 TIME: user.ping 0.06 ms
20.01 17:13:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:03 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 17:13:03 TIME: user.ping 0.2 ms
20.01 17:13:03 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:13:04 TIME: user.ping 0.25 ms
20.01 17:13:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:13:08 TIME: user.ping 0.21 ms
20.01 17:13:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:13:11 TIME: user.ping 0.22 ms
20.01 17:13:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:15 TIMER: Check auto-disconnect...
20.01 17:13:15 STATS: vdl.0 cache, locks:4
20.01 17:13:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:13:15 TIME: user.ping 0.17 ms
20.01 17:13:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:16 ++ NET: Aimer req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 42 }
20.01 17:13:16 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
20.01 17:13:16 -<<-: vdl/cache.battle.infoRoom { secondId => 163, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
20.01 17:13:16 STATS: vdl.0 cache connection, 49 calls, total 0.0637648105621338 sec spent, avg 1.3 ms
20.01 17:13:16 ->>-: vdl/cache.battle.makeTurn { userId => 76, roomId => 42, _type => vdl/cache.battle.makeTurn }
20.01 17:13:16 -<<-: vdl/cache.battle.makeTurn { errorCode => ok, _type => vdl/cache.battle.makeTurn, turnId => 0 }
20.01 17:13:16 TIME: battle.sendtask 1.79 ms
20.01 17:13:16 == NET: Aimer ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
20.01 17:13:16 == NET: Aimer2 ret: battle.task { dice => 0, from => [0,0], name => skip, side => 2, type => battle.task, messageType => battle.sendtask, to => [0,0], battleId => 42 }
20.01 17:13:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:13:23 TIME: user.ping 0.35 ms
20.01 17:13:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:24 ++ NET: Aimer req: battle.message { messageType => battle.message, message => ты хуйло, battleId => 42 }
20.01 17:13:24 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
20.01 17:13:24 -<<-: vdl/cache.battle.infoRoom { secondId => 163, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 163 }
20.01 17:13:24 TIME: battle.message 1.3 ms
20.01 17:13:24 == NET: Aimer ret: battle.message { type => battle.message, errorCode => ok }
20.01 17:13:24 == NET: Aimer2 ret: battle.message { type => battle.message, message => ты хуйло, player => 1 }
20.01 17:13:28 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:13:28 TIME: user.ping 0.26 ms
20.01 17:13:28 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:13:32 TIME: user.ping 0.14 ms
20.01 17:13:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:34 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 17:13:34 TIME: user.ping 0.23 ms
20.01 17:13:34 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:13:36 TIME: user.ping 0.18 ms
20.01 17:13:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:38 ++ NET: Aimer2 req: battle.message { messageType => battle.message, message => самка ты пидор, battleId => 42 }
20.01 17:13:38 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
20.01 17:13:38 -<<-: vdl/cache.battle.infoRoom { secondId => 163, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 163 }
20.01 17:13:38 TIME: battle.message 0.9 ms
20.01 17:13:38 == NET: Aimer2 ret: battle.message { type => battle.message, errorCode => ok }
20.01 17:13:38 == NET: Aimer ret: battle.message { type => battle.message, message => самка ты пидор, player => 2 }
20.01 17:13:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:13:41 TIME: user.ping 0.22 ms
20.01 17:13:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:13:49 TIME: user.ping 0.25 ms
20.01 17:13:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:13:52 TIME: user.ping 0.2 ms
20.01 17:13:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:53 ++ NET: Aimer2 req: battle.message { messageType => battle.message, message => самка ты пидор, battleId => 42 }
20.01 17:13:53 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
20.01 17:13:53 -<<-: vdl/cache.battle.infoRoom { secondId => 163, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
20.01 17:13:53 TIME: battle.message 0.84 ms
20.01 17:13:53 == NET: Aimer2 ret: battle.message { type => battle.message, errorCode => ok }
20.01 17:13:53 == NET: Aimer ret: battle.message { type => battle.message, message => самка ты пидор, player => 2 }
20.01 17:13:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:13:56 TIME: user.ping 0.48 ms
20.01 17:13:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:59 ++ NET: Aimer2 req: battle.message { messageType => battle.message, message => самка ты пидор, battleId => 42 }
20.01 17:13:59 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
20.01 17:13:59 -<<-: vdl/cache.battle.infoRoom { secondId => 163, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 163 }
20.01 17:13:59 TIME: battle.message 0.81 ms
20.01 17:13:59 == NET: Aimer2 ret: battle.message { type => battle.message, errorCode => ok }
20.01 17:13:59 == NET: Aimer ret: battle.message { type => battle.message, message => самка ты пидор, player => 2 }
20.01 17:13:59 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:13:59 TIME: user.ping 0.07 ms
20.01 17:13:59 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:13:59 ++ NET: Aimer2 req: battle.message { messageType => battle.message, message => самка ты пидор, battleId => 42 }
20.01 17:13:59 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
20.01 17:13:59 -<<-: vdl/cache.battle.infoRoom { secondId => 163, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 163 }
20.01 17:13:59 TIME: battle.message 0.88 ms
20.01 17:13:59 == NET: Aimer2 ret: battle.message { type => battle.message, errorCode => ok }
20.01 17:13:59 == NET: Aimer ret: battle.message { type => battle.message, message => самка ты пидор, player => 2 }
20.01 17:13:59 ++ NET: Aimer2 req: battle.message { messageType => battle.message, message => самка ты пидор, battleId => 42 }
20.01 17:13:59 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
20.01 17:13:59 -<<-: vdl/cache.battle.infoRoom { secondId => 163, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 163 }
20.01 17:13:59 TIME: battle.message 0.55 ms
20.01 17:13:59 == NET: Aimer2 ret: battle.message { type => battle.message, errorCode => ok }
20.01 17:13:59 == NET: Aimer ret: battle.message { type => battle.message, message => самка ты пидор, player => 2 }
20.01 17:14:00 ++ NET: Aimer2 req: battle.message { messageType => battle.message, message => самка ты пидор, battleId => 42 }
20.01 17:14:00 ->>-: vdl/cache.battle.infoRoom { roomId => 42, _type => vdl/cache.battle.infoRoom }
20.01 17:14:00 -<<-: vdl/cache.battle.infoRoom { secondId => 163, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 163 }
20.01 17:14:00 TIME: battle.message 0.74 ms
20.01 17:14:00 == NET: Aimer2 ret: battle.message { type => battle.message, errorCode => ok }
20.01 17:14:00 == NET: Aimer ret: battle.message { type => battle.message, message => самка ты пидор, player => 2 }
20.01 17:14:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:14:03 TIME: user.ping 0.24 ms
20.01 17:14:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:14:10 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 17:14:10 TIME: user.ping 0.09 ms
20.01 17:14:10 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:14:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:14:11 TIME: user.ping 0.34 ms
20.01 17:14:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:14:15 TIMER: Check auto-disconnect...
20.01 17:14:15 STATS: vdl.0 cache, locks:4
20.01 17:14:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:14:15 TIME: user.ping 0.24 ms
20.01 17:14:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:14:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:14:20 TIME: user.ping 0.1 ms
20.01 17:14:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:14:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:14:24 TIME: user.ping 0.21 ms
20.01 17:14:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 17:14:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 17:14:31 TIME: user.ping 0.21 ms
20.01 17:14:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
