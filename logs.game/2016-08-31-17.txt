31.08 17:00:18 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 17:00:18 -<<-: server.login ok
31.08 17:00:18 DB: SELECT * FROM LocalizationStrings
31.08 17:00:18 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 TIMER: Starting timer...
31.08 17:00:18 TIMER: Timer running...
31.08 17:00:18 DB: SELECT * FROM GameVars
31.08 17:00:18 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 17:00:18 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 17:00:18 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 17:00:18 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 17:00:18 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 17:00:18 -<<-: core/quest.getDaily ok
31.08 17:00:18 DB: SELECT * FROM UserAttributeTypes
31.08 17:00:18 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 DB: SELECT * FROM UserVariableTypes
31.08 17:00:18 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 17:00:18 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 DB: SELECT * FROM ItemGroups
31.08 17:00:18 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 DB: SELECT * FROM Bundles ORDER BY ID
31.08 17:00:18 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 17:00:18 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 SHOP: loading items...
31.08 17:00:18 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 17:00:18 -<<-: core/shop.getList ok
31.08 17:00:18 SHOP: 0 items loaded (0 sec)
31.08 17:00:18 DB: SELECT * FROM EffectAttributeTypes
31.08 17:00:18 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 DB: SELECT * FROM Effects
31.08 17:00:18 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 17:00:18 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 17:00:18 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 DB: SELECT * FROM Badges
31.08 17:00:18 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 17:00:18 -<<-: core/server.query ok
31.08 17:00:18 TIMER: Check auto-disconnect...
31.08 17:00:18 STATS: vdl.0 cache, locks:0
31.08 17:00:18 TIMER: Check auto-disconnect...
31.08 17:00:18 STATS: vdl.0 cache, locks:0
31.08 17:03:05 NET: Client (conid:28695037) connected to vdl.0 (clients:1)
31.08 17:03:06 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 17:03:06 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 17:03:06 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 17:03:06 -<<-: core/server.query ok
31.08 17:03:06 STATS: vdl.0 cache connection, 21 calls, total 0.0365655422210693 sec spent, avg 1.74 ms
31.08 17:03:06 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 17:03:06 -<<-: core/user.isOnlineID ok
31.08 17:03:06 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 17:03:06 -<<-: core/cache.get ok
31.08 17:03:06 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 17:03:06 -<<-: core/cache.get ok
31.08 17:03:06 NET: Client login (conid:28695037, id:2, name:test1)
31.08 17:03:06 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
31.08 17:03:06 -<<-: core/user.loginPost null
31.08 17:03:06 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 17:03:06 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 17:03:06 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 17:03:06 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 17:03:06 -<<-: vdl/cache.battle.find { list => {}, errorCode => ok, _type => vdl/cache.battle.find }
31.08 17:03:06 TIME: battle.find 3.61 ms
31.08 17:03:06 == NET: test1 ret: battle.find { type => battle.find, errorCode => Not battle }
31.08 17:03:13 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 17:03:13 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 17:05:23 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 17:05:23 -<<-: server.login ok
31.08 17:05:23 DB: SELECT * FROM LocalizationStrings
31.08 17:05:23 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:23 TIMER: Starting timer...
31.08 17:05:23 TIMER: Timer running...
31.08 17:05:23 DB: SELECT * FROM GameVars
31.08 17:05:23 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:23 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 17:05:23 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:23 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 17:05:23 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:23 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 17:05:23 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:23 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 17:05:23 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:23 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 17:05:23 -<<-: core/quest.getDaily ok
31.08 17:05:23 DB: SELECT * FROM UserAttributeTypes
31.08 17:05:23 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:23 DB: SELECT * FROM UserVariableTypes
31.08 17:05:23 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:23 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 17:05:23 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:23 DB: SELECT * FROM ItemGroups
31.08 17:05:23 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:23 DB: SELECT * FROM Bundles ORDER BY ID
31.08 17:05:23 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:23 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 17:05:23 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:23 SHOP: loading items...
31.08 17:05:23 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 17:05:23 -<<-: core/shop.getList ok
31.08 17:05:23 SHOP: 0 items loaded (0 sec)
31.08 17:05:23 DB: SELECT * FROM EffectAttributeTypes
31.08 17:05:23 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:23 DB: SELECT * FROM Effects
31.08 17:05:23 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:23 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 17:05:23 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:23 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 17:05:23 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:23 DB: SELECT * FROM Badges
31.08 17:05:23 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 17:05:23 -<<-: core/server.query ok
31.08 17:05:26 NET: Client (conid:77143036) connected to vdl.0 (clients:1)
31.08 17:07:14 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 17:07:14 -<<-: server.login ok
31.08 17:07:14 DB: SELECT * FROM LocalizationStrings
31.08 17:07:14 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 17:07:14 -<<-: core/server.query ok
31.08 17:07:14 TIMER: Starting timer...
31.08 17:07:14 TIMER: Timer running...
31.08 17:07:14 DB: SELECT * FROM GameVars
31.08 17:07:14 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 17:07:14 -<<-: core/server.query ok
31.08 17:07:14 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 17:07:14 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 17:07:14 -<<-: core/server.query ok
31.08 17:07:14 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 17:07:14 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 17:07:14 -<<-: core/server.query ok
31.08 17:07:14 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 17:07:14 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 17:07:14 -<<-: core/server.query ok
31.08 17:07:14 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 17:07:14 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 17:07:14 -<<-: core/server.query ok
31.08 17:07:14 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 17:07:14 -<<-: core/quest.getDaily ok
31.08 17:07:14 DB: SELECT * FROM UserAttributeTypes
31.08 17:07:14 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 17:07:14 -<<-: core/server.query ok
31.08 17:07:14 DB: SELECT * FROM UserVariableTypes
31.08 17:07:14 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 17:07:14 -<<-: core/server.query ok
31.08 17:07:14 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 17:07:14 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 17:07:14 -<<-: core/server.query ok
31.08 17:07:14 DB: SELECT * FROM ItemGroups
31.08 17:07:14 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 17:07:14 -<<-: core/server.query ok
31.08 17:07:14 DB: SELECT * FROM Bundles ORDER BY ID
31.08 17:07:14 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 17:07:14 -<<-: core/server.query ok
31.08 17:07:14 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 17:07:14 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 17:07:14 -<<-: core/server.query ok
31.08 17:07:14 SHOP: loading items...
31.08 17:07:14 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 17:07:14 -<<-: core/shop.getList ok
31.08 17:07:14 SHOP: 0 items loaded (0 sec)
31.08 17:07:14 DB: SELECT * FROM EffectAttributeTypes
31.08 17:07:14 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 17:07:14 -<<-: core/server.query ok
31.08 17:07:14 DB: SELECT * FROM Effects
31.08 17:07:14 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 17:07:14 -<<-: core/server.query ok
31.08 17:07:14 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(31.08 17:11:10 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 17:11:10 -<<-: server.login ok
31.08 17:11:10 DB: SELECT * FROM LocalizationStrings
31.08 17:11:10 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 17:11:10 -<<-: core/server.query ok
31.08 17:11:10 TIMER: Starting timer...
31.08 17:11:10 TIMER: Timer running...
31.08 17:11:10 DB: SELECT * FROM GameVars
31.08 17:11:10 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 17:11:10 -<<-: core/server.query ok
31.08 17:11:10 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 17:11:10 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 17:11:10 -<<-: core/server.query ok
31.08 17:11:10 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 17:11:10 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 17:11:10 -<<-: core/server.query ok
31.08 17:11:10 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 17:11:10 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 17:11:10 -<<-: core/server.query ok
31.08 17:11:10 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 17:11:10 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 17:11:10 -<<-: core/server.query ok
31.08 17:11:10 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 17:11:10 -<<-: core/quest.getDaily ok
31.08 17:11:10 DB: SELECT * FROM UserAttributeTypes
31.08 17:11:10 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 17:11:10 -<<-: core/server.query ok
31.08 17:11:10 DB: SELECT * FROM UserVariableTypes
31.08 17:11:10 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 17:11:10 -<<-: core/server.query ok
31.08 17:11:10 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 17:11:10 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 17:11:10 -<<-: core/server.query ok
31.08 17:11:10 DB: SELECT * FROM ItemGroups
31.08 17:11:10 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 17:11:10 -<<-: core/server.query ok
31.08 17:11:10 DB: SELECT * FROM Bundles ORDER BY ID
31.08 17:11:10 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 17:11:10 -<<-: core/server.query ok
31.08 17:11:10 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 17:11:10 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 17:11:10 -<<-: core/server.query ok
31.08 17:11:10 SHOP: loading items...
31.08 17:11:10 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 17:11:10 -<<-: core/shop.getList ok
31.08 17:11:10 SHOP: 0 items loaded (0 sec)
31.08 17:11:10 DB: SELECT * FROM EffectAttributeTypes
31.08 17:11:10 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 17:11:10 -<<-: core/server.query ok
31.08 17:11:10 DB: SELECT * FROM Effects
31.08 17:11:10 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 17:11:10 -<<-: core/server.query ok
31.08 17:11:10 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(31.08 17:31:07 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 17:31:07 -<<-: server.login ok
31.08 17:31:07 DB: SELECT * FROM LocalizationStrings
31.08 17:31:07 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:08 TIMER: Starting timer...
31.08 17:31:08 DB: SELECT * FROM GameVars
31.08 17:31:08 TIMER: Timer running...
31.08 17:31:08 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:08 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 17:31:08 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:08 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 17:31:08 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:08 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 17:31:08 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:08 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 17:31:08 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:08 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 17:31:08 -<<-: core/quest.getDaily ok
31.08 17:31:08 DB: SELECT * FROM UserAttributeTypes
31.08 17:31:08 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:08 DB: SELECT * FROM UserVariableTypes
31.08 17:31:08 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:08 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 17:31:08 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:08 DB: SELECT * FROM ItemGroups
31.08 17:31:08 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:08 DB: SELECT * FROM Bundles ORDER BY ID
31.08 17:31:08 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:08 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 17:31:08 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:08 SHOP: loading items...
31.08 17:31:08 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 17:31:08 -<<-: core/shop.getList ok
31.08 17:31:08 SHOP: 0 items loaded (0 sec)
31.08 17:31:08 DB: SELECT * FROM EffectAttributeTypes
31.08 17:31:08 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:08 DB: SELECT * FROM Effects
31.08 17:31:08 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:08 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 17:31:08 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:08 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 17:31:08 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:08 DB: SELECT * FROM Badges
31.08 17:31:08 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 17:31:08 -<<-: core/server.query ok
31.08 17:31:41 NET: Client (conid:85894544) connected to vdl.0 (clients:1)
31.08 17:31:44 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 17:31:44 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 17:31:44 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 17:31:44 -<<-: core/server.query ok
31.08 17:31:44 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 17:31:44 -<<-: core/user.isOnlineID ok
31.08 17:31:44 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 17:31:44 -<<-: core/cache.get ok
31.08 17:31:44 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 17:31:44 -<<-: core/cache.get ok
31.08 17:31:44 NET: Client login (conid:85894544, id:2, name:test1)
31.08 17:31:44 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 17:31:44 -<<-: core/user.loginPost null
31.08 17:31:44 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 17:31:44 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 17:31:44 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 17:31:44 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 17:31:44 -<<-: vdl/cache.battle.find { errorCode => _requestException, _type => vdl/cache.battle.find }
31.08 17:31:44 TRACE: battle.find : cacheRequest exception { _type => vdl/cache.battle.find }
31.08 17:31:44 TRACE: battle.find : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 74
Called from modules/VDLBattleModule.hx line 45
Called from modules/VDLBattleModule.hx line 39
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
31.08 17:31:53 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 17:31:53 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 17:32:01 NET: Client (name:test1 conid:85894544 TCP) disconnected from vdl.0 (clients:0)
31.08 17:32:01 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
31.08 17:32:01 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
31.08 17:32:01 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
31.08 17:32:01 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 17:32:01 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
31.08 17:32:01 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
31.08 17:34:23 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 17:34:23 -<<-: server.login ok
31.08 17:34:23 DB: SELECT * FROM LocalizationStrings
31.08 17:34:23 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 TIMER: Starting timer...
31.08 17:34:23 TIMER: Timer running...
31.08 17:34:23 DB: SELECT * FROM GameVars
31.08 17:34:23 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 17:34:23 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 17:34:23 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 17:34:23 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 17:34:23 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 17:34:23 -<<-: core/quest.getDaily ok
31.08 17:34:23 DB: SELECT * FROM UserAttributeTypes
31.08 17:34:23 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 DB: SELECT * FROM UserVariableTypes
31.08 17:34:23 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 17:34:23 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 DB: SELECT * FROM ItemGroups
31.08 17:34:23 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 DB: SELECT * FROM Bundles ORDER BY ID
31.08 17:34:23 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 17:34:23 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 SHOP: loading items...
31.08 17:34:23 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 17:34:23 -<<-: core/shop.getList ok
31.08 17:34:23 SHOP: 0 items loaded (0 sec)
31.08 17:34:23 DB: SELECT * FROM EffectAttributeTypes
31.08 17:34:23 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 DB: SELECT * FROM Effects
31.08 17:34:23 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 17:34:23 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 17:34:23 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 DB: SELECT * FROM Badges
31.08 17:34:23 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 17:34:23 -<<-: core/server.query ok
31.08 17:34:23 TIMER: Check auto-disconnect...
31.08 17:34:23 STATS: vdl.0 cache, locks:0
31.08 17:34:23 TIMER: Check auto-disconnect...
31.08 17:34:23 STATS: vdl.0 cache, locks:0
31.08 17:34:23 TIMER: Check auto-disconnect...
31.08 17:34:23 STATS: vdl.0 cache, locks:0
31.08 17:37:32 NET: Client (conid:44820874) connected to vdl.0 (clients:1)
31.08 17:37:36 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 17:37:36 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 17:37:36 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 17:37:36 -<<-: core/server.query ok
31.08 17:37:36 STATS: vdl.0 cache connection, 21 calls, total 0.0221607685089111 sec spent, avg 1.06 ms
31.08 17:37:36 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 17:37:36 -<<-: core/user.isOnlineID ok
31.08 17:37:36 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 17:37:36 -<<-: core/cache.get ok
31.08 17:37:36 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 17:37:36 -<<-: core/cache.get ok
31.08 17:37:36 NET: Client login (conid:44820874, id:2, name:test1)
31.08 17:37:36 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 17:37:36 -<<-: core/user.loginPost null
31.08 17:37:36 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 17:37:36 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 17:37:36 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 17:37:36 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 17:37:36 -<<-: vdl/cache.battle.find { errorCode => not, _type => vdl/cache.battle.find }
31.08 17:37:36 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
31.08 17:37:36 -<<-: vdl/cache.battle.create { errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
31.08 17:37:36 == NET: test1 ret: battle.find { type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
31.08 17:37:36 TIME: battle.find 84.36 ms
31.08 17:37:43 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1472654256 } }}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 17:37:43 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 17:38:23 TIMER: Check auto-disconnect...
31.08 17:38:24 STATS: vdl.0 cache, locks:2
31.08 17:39:23 TIMER: Check auto-disconnect...
31.08 17:39:24 STATS: vdl.0 cache, locks:2
31.08 17:39:30 NET: Client (conid:5596123) connected to vdl.0 (clients:2)
31.08 17:39:47 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
31.08 17:39:47 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
31.08 17:39:47 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
31.08 17:39:47 -<<-: core/server.query { list => {{ name => test2, networkid => , isbanned => false, id => 3 }}, errorCode => ok, _type => core/server.query }
31.08 17:39:47 STATS: vdl.0 cache connection, 29 calls, total 0.117044925689697 sec spent, avg 4.04 ms
31.08 17:39:47 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
31.08 17:39:47 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
31.08 17:39:47 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
31.08 17:39:47 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test2, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472651424, lastLoginDate => 244, lastLoadDate => 832 }, effects => { list => [] } }}, version => 0, id => 3 } }
31.08 17:39:47 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
31.08 17:39:47 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 3 } }
31.08 17:39:47 NET: Client login (conid:5596123, id:3, name:test2)
31.08 17:39:47 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
31.08 17:39:47 -<<-: core/user.loginPost { _type => core/user.loginPost }
31.08 17:39:47 == NET: test1 ret: user.join { name => test2, type => user.join }
31.08 17:39:47 ++ NET: test2 req: battle.find { messageType => battle.find }
31.08 17:39:47 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
31.08 17:39:47 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 17:39:47 == NET: test2 ret: user.join { name => test1, type => user.join }
31.08 17:39:47 == NET: test2 ret: user.join { name => test2, type => user.join }
31.08 17:39:47 -<<-: vdl/cache.battle.find { list => {{ secondid => 0, params => {}, avaliable => true, firstid => 2, id => 4, turnid => 2, finished => false }}, errorCode => ok, _type => vdl/cache.battle.find }
31.08 17:39:47 TRACE: battle.find : Unsupported operation
31.08 17:39:47 TRACE: battle.find : 
Called from modules/VDLBattleModule.hx line 54
Called from modules/VDLBattleModule.hx line 39
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
31.08 17:39:54 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 3, _type => core/cache.update }
31.08 17:39:54 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 17:40:23 TIMER: Check auto-disconnect...
31.08 17:40:24 STATS: vdl.0 cache, locks:4
31.08 17:40:36 NET: Client (name:test2 conid:5596123 TCP) disconnected from vdl.0 (clients:1)
31.08 17:40:36 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 3, _type => core/cache.update }
31.08 17:40:36 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
31.08 17:40:36 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 3, _type => core/cache.update }
31.08 17:40:36 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 17:40:36 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 3, _type => core/user.logoutPost }
31.08 17:40:36 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
31.08 17:41:23 TIMER: Check auto-disconnect...
31.08 17:41:23 NET: Client (name:test1 conid:44820874 TCP) disconnected from vdl.0 (clients:0)
31.08 17:41:23 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
31.08 17:41:23 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
31.08 17:41:23 STATS: vdl.0 cache connection, 39 calls, total 0.127410411834717 sec spent, avg 3.27 ms
31.08 17:41:23 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
31.08 17:41:23 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 17:41:23 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
31.08 17:41:23 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
31.08 17:41:24 STATS: vdl.0 cache, locks:0
31.08 17:42:23 TIMER: Check auto-disconnect...
31.08 17:42:24 STATS: vdl.0 cache, locks:0
31.08 17:43:23 TIMER: Check auto-disconnect...
31.08 17:43:24 STATS: vdl.0 cache, locks:0
31.08 17:44:23 TIMER: Check auto-disconnect...
31.08 17:44:24 STATS: vdl.0 cache, locks:0
31.08 17:45:23 TIMER: Check auto-disconnect...
31.08 17:45:24 STATS: vdl.0 cache, locks:0
31.08 17:46:23 TIMER: Check auto-disconnect...
31.08 17:46:24 STATS: vdl.0 cache, locks:0
31.08 17:47:23 TIMER: Check auto-disconnect...
31.08 17:49:01 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 17:49:01 -<<-: server.login ok
31.08 17:49:01 DB: SELECT * FROM LocalizationStrings
31.08 17:49:01 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:01 TIMER: Starting timer...
31.08 17:49:01 TIMER: Timer running...
31.08 17:49:01 DB: SELECT * FROM GameVars
31.08 17:49:01 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:01 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 17:49:01 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:01 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 17:49:01 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:01 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 17:49:01 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:01 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 17:49:01 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:01 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 17:49:01 -<<-: core/quest.getDaily ok
31.08 17:49:01 DB: SELECT * FROM UserAttributeTypes
31.08 17:49:01 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:01 DB: SELECT * FROM UserVariableTypes
31.08 17:49:01 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:01 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 17:49:01 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:01 DB: SELECT * FROM ItemGroups
31.08 17:49:01 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:01 DB: SELECT * FROM Bundles ORDER BY ID
31.08 17:49:01 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:01 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 17:49:01 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:01 SHOP: loading items...
31.08 17:49:01 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 17:49:01 -<<-: core/shop.getList ok
31.08 17:49:01 SHOP: 0 items loaded (0 sec)
31.08 17:49:01 DB: SELECT * FROM EffectAttributeTypes
31.08 17:49:01 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:01 DB: SELECT * FROM Effects
31.08 17:49:01 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:01 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 17:49:01 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:01 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 17:49:01 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:01 DB: SELECT * FROM Badges
31.08 17:49:01 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 17:49:01 -<<-: core/server.query ok
31.08 17:49:31 NET: Client (conid:49644268) connected to vdl.0 (clients:1)
31.08 17:49:41 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
31.08 17:49:41 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
31.08 17:49:41 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
31.08 17:49:41 -<<-: core/server.query ok
31.08 17:49:41 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
31.08 17:49:41 -<<-: core/user.isOnlineID ok
31.08 17:49:41 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
31.08 17:49:41 -<<-: core/cache.get ok
31.08 17:49:41 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
31.08 17:49:41 -<<-: core/cache.get ok
31.08 17:49:41 NET: Client login (conid:49644268, id:3, name:test2)
31.08 17:49:41 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 17:49:41 -<<-: core/user.loginPost null
31.08 17:49:41 ++ NET: test2 req: battle.find { messageType => battle.find }
31.08 17:49:41 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
31.08 17:49:41 == NET: test2 ret: user.join { name => test2, type => user.join }
31.08 17:49:41 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 17:49:41 -<<-: vdl/cache.battle.find { list => {{ secondid => 0, params => {}, avaliable => true, firstid => 2, id => 4, turnid => 2, finished => false }}, errorCode => ok, _type => vdl/cache.battle.find }
31.08 17:49:41 DB: SELECT id FROM battle OFFSET floor(random()*N) LIMIT 1
31.08 17:49:41 ->>-: core/server.query { q => SELECT id FROM battle OFFSET floor(random()*N) LIMIT 1, _type => core/server.query }
31.08 17:49:41 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
31.08 17:49:41 TRACE: battle.find : Invalid field access : id
31.08 17:49:41 TRACE: battle.find : 
Called from modules/VDLBattleModule.hx line 52
Called from modules/VDLBattleModule.hx line 39
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
31.08 17:49:46 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 3, _type => core/cache.update }
31.08 17:49:46 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 17:49:51 NET: Client (conid:51770813) connected to vdl.0 (clients:2)
31.08 17:49:55 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 17:49:55 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 17:49:55 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 17:49:55 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
31.08 17:49:55 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 17:49:55 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
31.08 17:49:55 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 17:49:55 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472654256, lastLoginDate => 244, lastLoadDate => 832 }, effects => { list => [] } }}, version => 0, id => 2 } }
31.08 17:49:55 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 17:49:55 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
31.08 17:49:55 NET: Client login (conid:51770813, id:2, name:test1)
31.08 17:49:55 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
31.08 17:49:55 -<<-: core/user.loginPost { _type => core/user.loginPost }
31.08 17:49:55 == NET: test2 ret: user.join { name => test1, type => user.join }
31.08 17:49:55 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 17:49:55 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 17:49:55 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 17:49:55 == NET: test1 ret: user.join { name => test2, type => user.join }
31.08 17:49:55 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 17:49:55 -<<-: vdl/cache.battle.find { list => {{ secondid => 0, params => {}, avaliable => true, firstid => 2, id => 4, turnid => 2, finished => false }}, errorCode => ok, _type => vdl/cache.battle.find }
31.08 17:49:55 DB: SELECT id FROM battle OFFSET floor(random()*N) LIMIT 1
31.08 17:49:55 ->>-: core/server.query { q => SELECT id FROM battle OFFSET floor(random()*N) LIMIT 1, _type => core/server.query }
31.08 17:49:55 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
31.08 17:49:55 TRACE: battle.find : Invalid field access : id
31.08 17:49:55 TRACE: battle.find : 
Called from modules/VDLBattleModule.hx line 52
Called from modules/VDLBattleModule.hx line 39
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
31.08 17:50:01 TIMER: Check auto-disconnect...
31.08 17:50:01 STATS: vdl.0 cache, locks:4
31.08 17:50:01 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 17:50:01 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 17:50:01 STATS: vdl.0 cache connection, 36 calls, total 0.0689139366149902 sec spent, avg 1.91 ms
31.08 17:50:18 NET: Client (name:test2 conid:49644268 TCP) disconnected from vdl.0 (clients:1)
31.08 17:50:18 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 3, _type => core/cache.update }
31.08 17:50:18 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
31.08 17:50:18 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 3, _type => core/cache.update }
31.08 17:50:18 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 17:50:18 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 3, _type => core/user.logoutPost }
31.08 17:50:18 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
31.08 17:51:01 TIMER: Check auto-disconnect...
31.08 17:51:02 STATS: vdl.0 cache, locks:2
31.08 17:52:01 TIMER: Check auto-disconnect...
31.08 17:52:02 STATS: vdl.0 cache, locks:2
31.08 17:53:01 TIMER: Check auto-disconnect...
31.08 17:53:01 NET: Client (name:test1 conid:51770813 TCP) disconnected from vdl.0 (clients:0)
31.08 17:53:01 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
31.08 17:53:01 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
31.08 17:53:01 STATS: vdl.0 cache connection, 40 calls, total 0.0707306861877441 sec spent, avg 1.77 ms
31.08 17:53:01 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
31.08 17:53:01 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 17:53:01 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
31.08 17:53:01 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
31.08 17:53:40 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
31.08 17:53:40 -<<-: server.login ok
31.08 17:53:40 DB: SELECT * FROM LocalizationStrings
31.08 17:53:40 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 TIMER: Starting timer...
31.08 17:53:40 TIMER: Timer running...
31.08 17:53:40 DB: SELECT * FROM GameVars
31.08 17:53:40 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
31.08 17:53:40 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
31.08 17:53:40 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
31.08 17:53:40 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
31.08 17:53:40 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
31.08 17:53:40 -<<-: core/quest.getDaily ok
31.08 17:53:40 DB: SELECT * FROM UserAttributeTypes
31.08 17:53:40 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 DB: SELECT * FROM UserVariableTypes
31.08 17:53:40 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
31.08 17:53:40 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 DB: SELECT * FROM ItemGroups
31.08 17:53:40 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 DB: SELECT * FROM Bundles ORDER BY ID
31.08 17:53:40 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 DB: SELECT * FROM BundleItems ORDER BY ID
31.08 17:53:40 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 SHOP: loading items...
31.08 17:53:40 ->>-: core/shop.getList { _type => core/shop.getList }
31.08 17:53:40 -<<-: core/shop.getList ok
31.08 17:53:40 SHOP: 0 items loaded (0 sec)
31.08 17:53:40 DB: SELECT * FROM EffectAttributeTypes
31.08 17:53:40 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 DB: SELECT * FROM Effects
31.08 17:53:40 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
31.08 17:53:40 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
31.08 17:53:40 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 DB: SELECT * FROM Badges
31.08 17:53:40 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
31.08 17:53:40 -<<-: core/server.query ok
31.08 17:53:40 TIMER: Check auto-disconnect...
31.08 17:53:40 STATS: vdl.0 cache, locks:0
31.08 17:53:40 TIMER: Check auto-disconnect...
31.08 17:53:40 STATS: vdl.0 cache, locks:0
31.08 17:53:40 TIMER: Check auto-disconnect...
31.08 17:53:40 STATS: vdl.0 cache, locks:0
31.08 17:56:53 NET: Client (conid:59816497) connected to vdl.0 (clients:1)
31.08 17:57:06 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
31.08 17:57:06 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
31.08 17:57:06 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
31.08 17:57:06 -<<-: core/server.query ok
31.08 17:57:06 STATS: vdl.0 cache connection, 21 calls, total 0.0266306400299072 sec spent, avg 1.27 ms
31.08 17:57:06 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
31.08 17:57:06 -<<-: core/user.isOnlineID ok
31.08 17:57:06 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
31.08 17:57:06 -<<-: core/cache.get ok
31.08 17:57:06 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
31.08 17:57:06 -<<-: core/cache.get ok
31.08 17:57:06 NET: Client login (conid:59816497, id:2, name:test1)
31.08 17:57:06 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
31.08 17:57:06 -<<-: core/user.loginPost null
31.08 17:57:06 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
31.08 17:57:06 ++ NET: test1 req: battle.find { messageType => battle.find }
31.08 17:57:06 == NET: test1 ret: user.join { name => test1, type => user.join }
31.08 17:57:06 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 17:57:06 -<<-: vdl/cache.battle.find { list => {{ secondid => 0, params => {}, avaliable => true, firstid => 2, id => 4, turnid => 2, finished => false }}, errorCode => ok, _type => vdl/cache.battle.find }
31.08 17:57:06 TRACE: battle.find : Unsupported operation
31.08 17:57:06 TRACE: battle.find : 
Called from modules/VDLBattleModule.hx line 54
Called from modules/VDLBattleModule.hx line 39
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
31.08 17:57:15 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
31.08 17:57:15 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 17:57:34 NET: Client (conid:1532173) connected to vdl.0 (clients:2)
31.08 17:57:40 TIMER: Check auto-disconnect...
31.08 17:57:40 STATS: vdl.0 cache, locks:2
31.08 17:57:55 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
31.08 17:57:55 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
31.08 17:57:55 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
31.08 17:57:55 -<<-: core/server.query { list => {{ name => test2, networkid => , isbanned => false, id => 3 }}, errorCode => ok, _type => core/server.query }
31.08 17:57:55 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
31.08 17:57:55 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
31.08 17:57:55 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
31.08 17:57:55 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test2, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472651424, lastLoginDate => 244, lastLoadDate => 832 }, effects => { list => [] } }}, version => 0, id => 3 } }
31.08 17:57:55 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
31.08 17:57:55 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 3 } }
31.08 17:57:55 NET: Client login (conid:1532173, id:3, name:test2)
31.08 17:57:55 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
31.08 17:57:55 -<<-: core/user.loginPost { _type => core/user.loginPost }
31.08 17:57:55 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
31.08 17:57:55 ++ NET: test2 req: battle.find { messageType => battle.find }
31.08 17:57:55 == NET: test1 ret: user.join { name => test2, type => user.join }
31.08 17:57:55 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
31.08 17:57:55 == NET: test2 ret: user.join { name => test1, type => user.join }
31.08 17:57:55 == NET: test2 ret: user.join { name => test2, type => user.join }
31.08 17:57:55 -<<-: vdl/cache.battle.find { list => {{ secondid => 0, params => {}, avaliable => true, firstid => 2, id => 4, turnid => 2, finished => false }}, errorCode => ok, _type => vdl/cache.battle.find }
31.08 17:57:55 TRACE: battle.find : Unsupported operation
31.08 17:57:55 TRACE: battle.find : 
Called from modules/VDLBattleModule.hx line 54
Called from modules/VDLBattleModule.hx line 39
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
31.08 17:58:00 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 3, _type => core/cache.update }
31.08 17:58:00 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 17:58:22 NET: Client (name:test1 conid:59816497 TCP) disconnected from vdl.0 (clients:1)
31.08 17:58:22 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
31.08 17:58:22 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
31.08 17:58:22 STATS: vdl.0 cache connection, 35 calls, total 0.0493314266204834 sec spent, avg 1.41 ms
31.08 17:58:22 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
31.08 17:58:22 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
31.08 17:58:22 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
31.08 17:58:22 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
