26.01 12:00:24 TIMER: Check auto-disconnect...
26.01 12:00:43 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3020, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3020 }
26.01 12:00:43 -<<-: server.login ok
26.01 12:00:43 DB: SELECT * FROM LocalizationStrings
26.01 12:00:43 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:00:43 TIMER: Starting timer...
26.01 12:00:43 TIMER: Timer running...
26.01 12:00:43 DB: SELECT * FROM GameVars
26.01 12:00:43 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:00:43 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
26.01 12:00:43 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:00:43 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
26.01 12:00:43 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:00:43 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
26.01 12:00:43 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:00:43 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
26.01 12:00:43 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:00:43 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
26.01 12:00:43 -<<-: core/quest.getDaily ok
26.01 12:00:43 DB: SELECT * FROM UserAttributeTypes
26.01 12:00:43 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:00:43 DB: SELECT * FROM UserVariableTypes
26.01 12:00:43 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:00:43 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
26.01 12:00:43 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:00:43 DB: SELECT * FROM ItemGroups
26.01 12:00:43 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:00:43 DB: SELECT * FROM Bundles ORDER BY ID
26.01 12:00:43 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:00:43 DB: SELECT * FROM BundleItems ORDER BY ID
26.01 12:00:43 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:00:43 SHOP: loading items...
26.01 12:00:43 ->>-: core/shop.getList { _type => core/shop.getList }
26.01 12:00:43 -<<-: core/shop.getList ok
26.01 12:00:43 SHOP: 0 items loaded (0 sec)
26.01 12:00:43 DB: SELECT * FROM EffectAttributeTypes
26.01 12:00:43 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:00:43 DB: SELECT * FROM Effects
26.01 12:00:43 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:00:43 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
26.01 12:00:43 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:00:43 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
26.01 12:00:43 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:00:43 DB: SELECT * FROM Badges
26.01 12:00:43 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
26.01 12:00:43 -<<-: core/server.query ok
26.01 12:01:14 NET: Client (conid:83934099) connected to vdl.0 (clients:1)
26.01 12:01:17 ++ NET: null req: user.register { password => , name => , messageType => user.register, token =>  }
26.01 12:01:33 NET: Client (name:null conid:83934099 TCP) disconnected from vdl.0 (clients:0)
26.01 12:01:35 NET: Client (conid:16429762) connected to vdl.0 (clients:1)
26.01 12:01:35 ++ NET: null req: user.register { password => , name => , messageType => user.register, token =>  }
26.01 12:01:43 TIMER: Check auto-disconnect...
26.01 12:01:44 STATS: vdl.0 cache, locks:0
26.01 12:02:15 NET: Client (name:null conid:16429762 TCP) disconnected from vdl.0 (clients:0)
26.01 12:02:17 NET: Client (conid:85692025) connected to vdl.0 (clients:1)
26.01 12:02:18 ++ NET: null req: user.register { messageType => user.register }
26.01 12:02:18 DB: SELECT * FROM users
26.01 12:02:18 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
26.01 12:02:18 -<<-: core/server.query ok
26.01 12:02:18 STATS: vdl.0 cache connection, 21 calls, total 0.0188260078430176 sec spent, avg 0.9 ms
26.01 12:02:18 DB: SELECT ID FROM Users WHERE Name = 'uid164'
26.01 12:02:18 == NET: null ret: user.auth { type => user.auth, token => dWlkMTY0 }
26.01 12:02:18 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = 'uid164', _type => core/server.query }
26.01 12:02:18 -<<-: core/server.query ok
26.01 12:02:18 TRACE: Invalid field access : split
26.01 12:02:18 TRACE: 
Called from snipe/slave/modules/UserModuleCore.hx line 759
Called from snipe/slave/modules/UserModuleCore.hx line 278
Called from snipe/slave/modules/UserModuleCore.hx line 203
Called from snipe/slave/Server.hx line 1116
26.01 12:02:18 TRACE: Could not register.
26.01 12:02:18 TRACE: 
Called from snipe/slave/Server.hx line 1131
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
26.01 12:02:43 TIMER: Check auto-disconnect...
26.01 12:02:44 STATS: vdl.0 cache, locks:0
26.01 12:03:43 TIMER: Check auto-disconnect...
26.01 12:04:27 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3020, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3020 }
26.01 12:04:27 -<<-: server.login ok
26.01 12:04:27 DB: SELECT * FROM LocalizationStrings
26.01 12:04:27 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
26.01 12:04:27 -<<-: core/server.query ok
26.01 12:04:28 TIMER: Starting timer...
26.01 12:04:28 DB: SELECT * FROM GameVars
26.01 12:04:28 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
26.01 12:04:28 -<<-: core/server.query ok
26.01 12:04:28 TIMER: Timer running...
26.01 12:04:28 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
26.01 12:04:28 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
26.01 12:04:28 -<<-: core/server.query ok
26.01 12:04:28 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
26.01 12:04:28 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
26.01 12:04:28 -<<-: core/server.query ok
26.01 12:04:28 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
26.01 12:04:28 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
26.01 12:04:28 -<<-: core/server.query ok
26.01 12:04:28 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
26.01 12:04:28 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
26.01 12:04:28 -<<-: core/server.query ok
26.01 12:04:28 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
26.01 12:04:28 -<<-: core/quest.getDaily ok
26.01 12:04:28 DB: SELECT * FROM UserAttributeTypes
26.01 12:04:28 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
26.01 12:04:28 -<<-: core/server.query ok
26.01 12:04:28 DB: SELECT * FROM UserVariableTypes
26.01 12:04:28 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
26.01 12:04:28 -<<-: core/server.query ok
26.01 12:04:28 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
26.01 12:04:28 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
26.01 12:04:28 -<<-: core/server.query ok
26.01 12:04:28 DB: SELECT * FROM ItemGroups
26.01 12:04:28 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
26.01 12:04:28 -<<-: core/server.query ok
26.01 12:04:28 DB: SELECT * FROM Bundles ORDER BY ID
26.01 12:04:28 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
26.01 12:04:28 -<<-: core/server.query ok
26.01 12:04:28 DB: SELECT * FROM BundleItems ORDER BY ID
26.01 12:04:28 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
26.01 12:04:28 -<<-: core/server.query ok
26.01 12:04:28 SHOP: loading items...
26.01 12:04:28 ->>-: core/shop.getList { _type => core/shop.getList }
26.01 12:04:28 -<<-: core/shop.getList ok
26.01 12:04:28 SHOP: 0 items loaded (0 sec)
26.01 12:04:28 DB: SELECT * FROM EffectAttributeTypes
26.01 12:04:28 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
26.01 12:04:28 -<<-: core/server.query ok
26.01 12:04:28 DB: SELECT * FROM Effects
26.01 12:04:28 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
26.01 12:04:28 -<<-: core/server.query ok
26.01 12:04:28 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
26.01 12:04:28 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
26.01 12:04:28 -<<-: core/server.query ok
26.01 12:04:28 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
26.01 12:04:28 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
26.01 12:04:28 -<<-: core/server.query ok
26.01 12:04:28 DB: SELECT * FROM Badges
26.01 12:04:28 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
26.01 12:04:28 -<<-: core/server.query ok
26.01 12:04:47 NET: Client (conid:36338469) connected to vdl.0 (clients:1)
26.01 12:04:48 ++ NET: null req: user.login { password => , name => , messageType => user.login, token => dWlkMTY0 }
26.01 12:04:48 DB: SELECT ID, Name, NetworkID, IsBanned , status FROM Users WHERE Name = 'uid164' AND Password = 'uid164'
26.01 12:04:48 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned , status FROM Users WHERE Name = 'uid164' AND Password = 'uid164', _type => core/server.query }
26.01 12:04:48 -<<-: core/server.query ok
26.01 12:04:48 == NET: null ret: user.login { type => user.login, errorCode => userNotFound }
26.01 12:05:28 TIMER: Check auto-disconnect...
26.01 12:05:28 STATS: vdl.0 cache, locks:0
26.01 12:05:28 TIMER: Check auto-disconnect...
26.01 12:05:28 STATS: vdl.0 cache, locks:0
26.01 12:05:28 TIMER: Check auto-disconnect...
26.01 12:05:28 STATS: vdl.0 cache, locks:0
26.01 12:05:28 TIMER: Check auto-disconnect...
26.01 12:05:28 STATS: vdl.0 cache, locks:0
26.01 12:08:59 NET: Client (name:null conid:36338469 TCP) disconnected from vdl.0 (clients:0)
26.01 12:09:04 NET: Client (conid:60707700) connected to vdl.0 (clients:1)
26.01 12:09:20 ++ NET: null req: user.register { messageType => user.register }
26.01 12:09:20 DB: SELECT * FROM users
26.01 12:09:20 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
26.01 12:09:20 -<<-: core/server.query ok
26.01 12:09:20 STATS: vdl.0 cache connection, 22 calls, total 0.0332357883453369 sec spent, avg 1.51 ms
26.01 12:09:20 DB: SELECT ID FROM Users WHERE Name = 'uid164'
26.01 12:09:20 == NET: null ret: user.auth { type => user.auth, token => dWlkMTY0 }
26.01 12:09:20 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = 'uid164', _type => core/server.query }
26.01 12:09:20 -<<-: core/server.query ok
26.01 12:09:20 TRACE: Invalid field access : split
26.01 12:09:20 TRACE: 
Called from snipe/slave/modules/UserModuleCore.hx line 759
Called from snipe/slave/modules/UserModuleCore.hx line 278
Called from snipe/slave/modules/UserModuleCore.hx line 203
Called from snipe/slave/Server.hx line 1116
26.01 12:09:20 TRACE: Could not register.
26.01 12:09:20 TRACE: 
Called from snipe/slave/Server.hx line 1131
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
26.01 12:21:16 ->>-: core/server.login { host => 188.225.38.160, name => vdl.0, port => 3020, type => game, _type => core/server.login, externalHost => 188.225.38.160, externalPort => 3020 }
26.01 12:21:16 -<<-: server.login ok
26.01 12:21:16 DB: SELECT * FROM LocalizationStrings
26.01 12:21:16 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:16 TIMER: Starting timer...
26.01 12:21:16 DB: SELECT * FROM GameVars
26.01 12:21:16 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
26.01 12:21:16 TIMER: Timer running...
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:16 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
26.01 12:21:16 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:16 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
26.01 12:21:16 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:16 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
26.01 12:21:16 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:16 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
26.01 12:21:16 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:16 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
26.01 12:21:16 -<<-: core/quest.getDaily ok
26.01 12:21:16 DB: SELECT * FROM UserAttributeTypes
26.01 12:21:16 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:16 DB: SELECT * FROM UserVariableTypes
26.01 12:21:16 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:16 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
26.01 12:21:16 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:16 DB: SELECT * FROM ItemGroups
26.01 12:21:16 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:16 DB: SELECT * FROM Bundles ORDER BY ID
26.01 12:21:16 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:16 DB: SELECT * FROM BundleItems ORDER BY ID
26.01 12:21:16 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:16 SHOP: loading items...
26.01 12:21:16 ->>-: core/shop.getList { _type => core/shop.getList }
26.01 12:21:16 -<<-: core/shop.getList ok
26.01 12:21:16 SHOP: 0 items loaded (0 sec)
26.01 12:21:16 DB: SELECT * FROM EffectAttributeTypes
26.01 12:21:16 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:16 DB: SELECT * FROM Effects
26.01 12:21:16 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:16 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
26.01 12:21:16 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:16 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
26.01 12:21:16 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:16 DB: SELECT * FROM Badges
26.01 12:21:16 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
26.01 12:21:16 -<<-: core/server.query ok
26.01 12:21:32 NET: Client (conid:65350067) connected to vdl.0 (clients:1)
26.01 12:21:33 ++ NET: null req: user.register { password => 111111, name => 111111, messageType => user.register, token => dWlkMTY0 }
26.01 12:21:33 DB: SELECT ID FROM Users WHERE Name = '111111'
26.01 12:21:33 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = '111111', _type => core/server.query }
26.01 12:21:33 -<<-: core/server.query ok
26.01 12:21:33 TRACE: Invalid field access : split
26.01 12:21:33 TRACE: 
Called from snipe/slave/modules/UserModuleCore.hx line 759
Called from snipe/slave/modules/UserModuleCore.hx line 278
Called from snipe/slave/modules/UserModuleCore.hx line 203
Called from snipe/slave/Server.hx line 1116
26.01 12:21:33 TRACE: Could not register.
26.01 12:21:33 TRACE: 
Called from snipe/slave/Server.hx line 1131
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
26.01 12:22:14 NET: Client (name:null conid:65350067 TCP) disconnected from vdl.0 (clients:0)
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
26.01 12:22:16 STATS: vdl.0 cache, locks:0
26.01 12:22:16 TIMER: Check auto-disconnect...
