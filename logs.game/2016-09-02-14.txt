02.09 14:11:14 STATS: vdl.0 cache, locks:0
02.09 14:12:13 TIMER: Check auto-disconnect...
02.09 14:12:14 STATS: vdl.0 cache, locks:0
02.09 14:13:13 TIMER: Check auto-disconnect...
02.09 14:13:14 STATS: vdl.0 cache, locks:0
02.09 14:14:13 TIMER: Check auto-disconnect...
02.09 14:14:14 STATS: vdl.0 cache, locks:0
02.09 14:15:13 TIMER: Check auto-disconnect...
02.09 14:15:14 STATS: vdl.0 cache, locks:0
02.09 14:16:13 TIMER: Check auto-disconnect...
02.09 14:16:14 STATS: vdl.0 cache, locks:0
02.09 14:17:13 TIMER: Check auto-disconnect...
02.09 14:17:14 STATS: vdl.0 cache, locks:0
02.09 14:18:13 TIMER: Check auto-disconnect...
02.09 14:18:14 STATS: vdl.0 cache, locks:0
02.09 14:19:13 TIMER: Check auto-disconnect...
02.09 14:19:14 STATS: vdl.0 cache, locks:0
02.09 14:20:13 TIMER: Check auto-disconnect...
02.09 14:20:14 STATS: vdl.0 cache, locks:0
02.09 14:21:13 TIMER: Check auto-disconnect...
02.09 14:21:14 STATS: vdl.0 cache, locks:0
02.09 14:22:13 TIMER: Check auto-disconnect...
02.09 14:22:14 STATS: vdl.0 cache, locks:0
02.09 14:23:13 TIMER: Check auto-disconnect...
02.09 14:23:14 STATS: vdl.0 cache, locks:0
02.09 14:24:13 TIMER: Check auto-disconnect...
02.09 14:24:14 STATS: vdl.0 cache, locks:0
02.09 14:25:13 TIMER: Check auto-disconnect...
02.09 14:27:25 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 14:27:25 -<<-: server.login ok
02.09 14:27:25 DB: SELECT * FROM LocalizationStrings
02.09 14:27:25 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 14:27:25 -<<-: core/server.query ok
02.09 14:27:25 TIMER: Starting timer...
02.09 14:27:25 TIMER: Timer running...
02.09 14:27:25 DB: SELECT * FROM GameVars
02.09 14:27:25 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 14:27:25 -<<-: core/server.query ok
02.09 14:27:25 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 14:27:25 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 14:27:25 -<<-: core/server.query ok
02.09 14:27:25 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 14:27:25 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 14:27:25 -<<-: core/server.query ok
02.09 14:27:25 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 14:27:25 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 14:27:25 -<<-: core/server.query ok
02.09 14:27:25 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 14:27:25 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 14:27:25 -<<-: core/server.query ok
02.09 14:27:25 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 14:27:25 -<<-: core/quest.getDaily ok
02.09 14:27:25 DB: SELECT * FROM UserAttributeTypes
02.09 14:27:25 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 14:27:25 -<<-: core/server.query ok
02.09 14:27:25 DB: SELECT * FROM UserVariableTypes
02.09 14:27:25 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 14:27:25 -<<-: core/server.query ok
02.09 14:27:25 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 14:27:25 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 14:27:25 -<<-: core/server.query ok
02.09 14:27:25 DB: SELECT * FROM ItemGroups
02.09 14:27:25 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 14:27:25 -<<-: core/server.query ok
02.09 14:27:25 DB: SELECT * FROM Bundles ORDER BY ID
02.09 14:27:25 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 14:27:25 -<<-: core/server.query ok
02.09 14:27:25 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 14:27:25 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 14:27:25 -<<-: core/server.query ok
02.09 14:27:25 SHOP: loading items...
02.09 14:27:25 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 14:27:25 -<<-: core/shop.getList ok
02.09 14:27:25 SHOP: 0 items loaded (0 sec)
02.09 14:27:25 DB: SELECT * FROM EffectAttributeTypes
02.09 14:27:25 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 14:27:25 -<<-: core/server.query ok
02.09 14:27:25 DB: SELECT * FROM Effects
02.09 14:27:25 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 14:27:25 -<<-: core/server.query ok
02.09 14:27:25 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(02.09 14:31:24 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 14:31:24 -<<-: server.login ok
02.09 14:31:24 DB: SELECT * FROM LocalizationStrings
02.09 14:31:24 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 TIMER: Starting timer...
02.09 14:31:24 TIMER: Timer running...
02.09 14:31:24 DB: SELECT * FROM GameVars
02.09 14:31:24 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 14:31:24 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 14:31:24 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 14:31:24 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
02.09 14:31:24 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
02.09 14:31:24 -<<-: core/quest.getDaily ok
02.09 14:31:24 DB: SELECT * FROM UserAttributeTypes
02.09 14:31:24 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 DB: SELECT * FROM UserVariableTypes
02.09 14:31:24 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
02.09 14:31:24 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 DB: SELECT * FROM ItemGroups
02.09 14:31:24 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 DB: SELECT * FROM Bundles ORDER BY ID
02.09 14:31:24 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 DB: SELECT * FROM BundleItems ORDER BY ID
02.09 14:31:24 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 SHOP: loading items...
02.09 14:31:24 ->>-: core/shop.getList { _type => core/shop.getList }
02.09 14:31:24 -<<-: core/shop.getList ok
02.09 14:31:24 SHOP: 0 items loaded (0 sec)
02.09 14:31:24 DB: SELECT * FROM EffectAttributeTypes
02.09 14:31:24 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 DB: SELECT * FROM Effects
02.09 14:31:24 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
02.09 14:31:24 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
02.09 14:31:24 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 DB: SELECT * FROM Badges
02.09 14:31:24 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
02.09 14:31:24 -<<-: core/server.query ok
02.09 14:31:24 TIMER: Check auto-disconnect...
02.09 14:31:24 STATS: vdl.0 cache, locks:0
02.09 14:31:24 TIMER: Check auto-disconnect...
02.09 14:31:24 STATS: vdl.0 cache, locks:0
02.09 14:31:24 TIMER: Check auto-disconnect...
02.09 14:31:24 STATS: vdl.0 cache, locks:0
02.09 14:31:24 TIMER: Check auto-disconnect...
02.09 14:31:24 STATS: vdl.0 cache, locks:0
02.09 14:31:24 TIMER: Check auto-disconnect...
02.09 14:31:24 STATS: vdl.0 cache, locks:0
02.09 14:31:24 TIMER: Check auto-disconnect...
02.09 14:31:24 STATS: vdl.0 cache, locks:0
02.09 14:31:24 TIMER: Check auto-disconnect...
02.09 14:31:24 STATS: vdl.0 cache, locks:0
02.09 14:31:24 TIMER: Check auto-disconnect...
02.09 14:31:24 STATS: vdl.0 cache, locks:0
02.09 14:31:24 TIMER: Check auto-disconnect...
02.09 14:31:24 STATS: vdl.0 cache, locks:0
02.09 14:31:24 TIMER: Check auto-disconnect...
02.09 14:31:24 STATS: vdl.0 cache, locks:0
02.09 14:31:24 TIMER: Check auto-disconnect...
02.09 14:31:24 STATS: vdl.0 cache, locks:0
02.09 14:31:24 TIMER: Check auto-disconnect...
02.09 14:31:24 STATS: vdl.0 cache, locks:0
02.09 14:31:24 TIMER: Check auto-disconnect...
02.09 14:31:24 STATS: vdl.0 cache, locks:0
02.09 14:31:24 TIMER: Check auto-disconnect...
02.09 14:31:24 STATS: vdl.0 cache, locks:0
02.09 14:31:24 TIMER: Check auto-disconnect...
02.09 14:31:24 STATS: vdl.0 cache, locks:0
02.09 14:47:19 NET: Client (conid:64185242) connected to vdl.0 (clients:1)
02.09 14:47:24 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
02.09 14:47:24 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
02.09 14:47:24 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
02.09 14:47:24 -<<-: core/server.query ok
02.09 14:47:24 STATS: vdl.0 cache connection, 21 calls, total 0.0226376056671143 sec spent, avg 1.08 ms
02.09 14:47:24 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
02.09 14:47:24 -<<-: core/user.isOnlineID ok
02.09 14:47:24 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
02.09 14:47:24 -<<-: core/cache.get ok
02.09 14:47:24 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
02.09 14:47:24 -<<-: core/cache.get ok
02.09 14:47:24 NET: Client login (conid:64185242, id:2, name:test1)
02.09 14:47:24 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
02.09 14:47:24 -<<-: core/user.loginPost null
02.09 14:47:24 DB: SELECT ID FROM TempUserLogins WHERE UserID = 2 AND Date = 'today'::timestamp
02.09 14:47:24 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 2 AND Date = 'today'::timestamp, _type => core/server.query }
02.09 14:47:24 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
02.09 14:47:24 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (2, 'today'::timestamp)
02.09 14:47:24 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
02.09 14:47:24 == NET: test1 ret: user.join { name => test1, type => user.join }
02.09 14:47:24 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (2, 'today'::timestamp), _type => core/server.pending }} }
02.09 14:47:24 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
02.09 14:47:24 TIMER: Check auto-disconnect...
02.09 14:47:24 STATS: vdl.0 cache, locks:2
02.09 14:47:24 ++ NET: test1 req: battle.find { messageType => battle.find }
02.09 14:47:24 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
02.09 14:47:24 -<<-: vdl/cache.battle.find { list => [22], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
02.09 14:47:24 ->>-: vdl/cache.battle.join { roomId => 22, selfId => 2, _type => vdl/cache.battle.join }
02.09 14:47:24 -<<-: vdl/cache.battle.join { errorCode => _requestException, _type => vdl/cache.battle.join }
02.09 14:47:24 TRACE: battle.find : cacheRequest exception { roomId => 22, selfId => 2, _type => vdl/cache.battle.join }
02.09 14:47:24 TRACE: battle.find : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 148
Called from modules/VDLBattleModule.hx line 81
Called from modules/VDLBattleModule.hx line 40
Called from modules/VDLBattleModule.hx line 29
Called from snipe/slave/Server.hx line 1176
02.09 14:47:29 ->>-: core/cache.update { diff => {language => en, params => { attrs => { lastLoginDate => 246, lastLoadDate => 903 } }}, type => user, unlock => false, id => 2, _type => core/cache.update }
02.09 14:47:29 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
02.09 14:55:11 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
02.09 14:55:11 -<<-: server.login ok
02.09 14:55:11 DB: SELECT * FROM LocalizationStrings
02.09 14:55:11 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
02.09 14:55:11 -<<-: core/server.query ok
02.09 14:55:11 TIMER: Starting timer...
02.09 14:55:11 TIMER: Timer running...
02.09 14:55:11 DB: SELECT * FROM GameVars
02.09 14:55:11 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
02.09 14:55:11 -<<-: core/server.query ok
02.09 14:55:11 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
02.09 14:55:11 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
02.09 14:55:11 -<<-: core/server.query ok
02.09 14:55:11 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
02.09 14:55:11 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
02.09 14:55:11 -<<-: core/server.query ok
02.09 14:55:11 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
02.09 14:55:11 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
