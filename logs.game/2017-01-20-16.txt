20.01 16:00:42 TIMER: Check auto-disconnect...
20.01 16:00:45 STATS: vdl.0 cache, locks:0
20.01 16:01:42 TIMER: Check auto-disconnect...
20.01 16:01:45 STATS: vdl.0 cache, locks:0
20.01 16:02:42 TIMER: Check auto-disconnect...
20.01 16:02:45 STATS: vdl.0 cache, locks:0
20.01 16:03:42 TIMER: Check auto-disconnect...
20.01 16:03:45 STATS: vdl.0 cache, locks:0
20.01 16:04:38 NET: Client (conid:93660851) connected to vdl.0 (clients:1)
20.01 16:04:39 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTY0 }
20.01 16:04:39 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid164' AND Password = E'uid164'
20.01 16:04:39 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid164' AND Password = E'uid164', _type => core/server.query }
20.01 16:04:39 -<<-: core/server.query { list => {{ name => uid164, networkid => , isbanned => false, id => 164 }}, errorCode => ok, _type => core/server.query }
20.01 16:04:39 STATS: vdl.0 cache connection, 65 calls, total 0.0744016170501709 sec spent, avg 1.14 ms
20.01 16:04:39 ->>-: core/user.isOnlineID { id => 164, _type => core/user.isOnlineID }
20.01 16:04:39 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:04:39 ->>-: core/cache.get { type => user, v => -1, id => 164, _type => core/cache.get }
20.01 16:04:39 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid164, deleted => false, email => , networktype =>   , password => uid164, isbanned => false, regdate => 2017-01-20 12:47:42.69767+03, language => en, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484905662, lastLoginDate => 20, lastLoadDate => 121 }, effects => { list => [] } }}, version => 0, id => 164 } }
20.01 16:04:39 ->>-: core/cache.get { type => questdata, v => -1, id => 164, _type => core/cache.get }
20.01 16:04:39 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 164 } }
20.01 16:04:39 NET: Client login (conid:93660851, id:164, name:uid164)
20.01 16:04:39 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 164, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:04:39 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.01 16:04:39 == NET: uid164 ret: user.login { name => uid164, type => user.login, errorCode => ok, id => 164 }
20.01 16:04:39 == NET: uid164 ret: user.join { name => uid164, type => user.join }
20.01 16:04:42 TIMER: Check auto-disconnect...
20.01 16:04:43 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:04:43 TIME: user.ping 0.29 ms
20.01 16:04:43 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:04:45 STATS: vdl.0 cache, locks:2
20.01 16:04:45 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 164, _type => core/cache.update }
20.01 16:04:45 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:05:42 TIMER: Check auto-disconnect...
20.01 16:05:45 STATS: vdl.0 cache, locks:2
20.01 16:05:53 NET: Client (name:uid164 conid:93660851 TCP) disconnected from vdl.0 (clients:0)
20.01 16:05:53 DB: SELECT id FROM battle WHERE firstid=164 OR secondid=164 AND finished <> true
20.01 16:05:53 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=164 OR secondid=164 AND finished <> true, _type => core/server.query }
20.01 16:05:54 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.01 16:05:54 STATS: vdl.0 cache connection, 71 calls, total 0.083681583404541 sec spent, avg 1.18 ms
20.01 16:05:54 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.01 16:05:54 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
20.01 16:05:54 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.01 16:05:54 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 994
20.01 16:05:54 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 164, _type => core/cache.update }
20.01 16:05:54 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
20.01 16:05:54 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 164, _type => core/cache.update }
20.01 16:05:54 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:05:54 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 164, _type => core/user.logoutPost }
20.01 16:05:54 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.01 16:05:58 NET: Client (conid:21573688) connected to vdl.0 (clients:1)
20.01 16:05:59 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTY0 }
20.01 16:05:59 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid164' AND Password = E'uid164'
20.01 16:05:59 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid164' AND Password = E'uid164', _type => core/server.query }
20.01 16:05:59 -<<-: core/server.query { list => {{ name => uid164, networkid => , isbanned => false, id => 164 }}, errorCode => ok, _type => core/server.query }
20.01 16:05:59 ->>-: core/user.isOnlineID { id => 164, _type => core/user.isOnlineID }
20.01 16:05:59 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:05:59 ->>-: core/cache.get { type => user, v => -1, id => 164, _type => core/cache.get }
20.01 16:05:59 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid164, deleted => false, email => , networktype =>   , password => uid164, isbanned => false, regdate => 2017-01-20 12:47:42.69767+03, language => en, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484905662, lastLoginDate => 20, lastLoadDate => 121 }, effects => { list => [] } }}, version => 2, id => 164 } }
20.01 16:05:59 ->>-: core/cache.get { type => questdata, v => -1, id => 164, _type => core/cache.get }
20.01 16:05:59 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 164 } }
20.01 16:05:59 NET: Client login (conid:21573688, id:164, name:uid164)
20.01 16:05:59 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 164, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:05:59 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.01 16:05:59 == NET: uid164 ret: user.login { name => uid164, type => user.login, errorCode => ok, id => 164 }
20.01 16:05:59 == NET: uid164 ret: user.join { name => uid164, type => user.join }
20.01 16:06:04 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:06:04 TIME: user.ping 0.15 ms
20.01 16:06:04 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:06:05 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 164, _type => core/cache.update }
20.01 16:06:05 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
20.01 16:06:42 TIMER: Check auto-disconnect...
20.01 16:06:45 STATS: vdl.0 cache, locks:2
20.01 16:07:42 TIMER: Check auto-disconnect...
20.01 16:07:45 STATS: vdl.0 cache, locks:2
20.01 16:08:42 TIMER: Check auto-disconnect...
20.01 16:08:45 STATS: vdl.0 cache, locks:2
20.01 16:08:57 NET: Client (name:uid164 conid:21573688 TCP) disconnected from vdl.0 (clients:0)
20.01 16:08:57 DB: SELECT id FROM battle WHERE firstid=164 OR secondid=164 AND finished <> true
20.01 16:08:57 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=164 OR secondid=164 AND finished <> true, _type => core/server.query }
20.01 16:08:57 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.01 16:08:57 STATS: vdl.0 cache connection, 82 calls, total 0.0938656330108643 sec spent, avg 1.14 ms
20.01 16:08:57 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.01 16:08:57 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
20.01 16:08:57 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.01 16:08:57 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 994
20.01 16:08:57 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 164, _type => core/cache.update }
20.01 16:08:57 -<<-: core/cache.update { errorCode => ok, version => 4, _type => core/cache.update }
20.01 16:08:57 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 164, _type => core/cache.update }
20.01 16:08:57 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
20.01 16:08:57 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 164, _type => core/user.logoutPost }
20.01 16:08:57 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.01 16:09:01 NET: Client (conid:91542634) connected to vdl.0 (clients:1)
20.01 16:09:02 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTY0 }
20.01 16:09:02 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid164' AND Password = E'uid164'
20.01 16:09:02 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid164' AND Password = E'uid164', _type => core/server.query }
20.01 16:09:02 -<<-: core/server.query { list => {{ name => uid164, networkid => , isbanned => false, id => 164 }}, errorCode => ok, _type => core/server.query }
20.01 16:09:02 ->>-: core/user.isOnlineID { id => 164, _type => core/user.isOnlineID }
20.01 16:09:02 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:09:02 ->>-: core/cache.get { type => user, v => -1, id => 164, _type => core/cache.get }
20.01 16:09:02 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid164, deleted => false, email => , networktype =>   , password => uid164, isbanned => false, regdate => 2017-01-20 12:47:42.69767+03, language => en, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484905662, lastLoginDate => 20, lastLoadDate => 121 }, effects => { list => [] } }}, version => 4, id => 164 } }
20.01 16:09:02 ->>-: core/cache.get { type => questdata, v => -1, id => 164, _type => core/cache.get }
20.01 16:09:02 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 2, id => 164 } }
20.01 16:09:02 NET: Client login (conid:91542634, id:164, name:uid164)
20.01 16:09:02 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 164, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:09:02 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.01 16:09:02 == NET: uid164 ret: user.login { name => uid164, type => user.login, errorCode => ok, id => 164 }
20.01 16:09:02 == NET: uid164 ret: user.join { name => uid164, type => user.join }
20.01 16:09:08 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:09:08 TIME: user.ping 0.23 ms
20.01 16:09:08 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:09:10 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 164, _type => core/cache.update }
20.01 16:09:10 -<<-: core/cache.update { errorCode => ok, version => 5, _type => core/cache.update }
20.01 16:09:22 NET: Client (conid:98603887) connected to vdl.0 (clients:2)
20.01 16:09:22 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTY0 }
20.01 16:09:22 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid164' AND Password = E'uid164'
20.01 16:09:22 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid164' AND Password = E'uid164', _type => core/server.query }
20.01 16:09:22 -<<-: core/server.query { list => {{ name => uid164, networkid => , isbanned => false, id => 164 }}, errorCode => ok, _type => core/server.query }
20.01 16:09:22 ->>-: core/user.isOnlineID { id => 164, _type => core/user.isOnlineID }
20.01 16:09:22 -<<-: core/user.isOnlineID { isOnline => true, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:09:22 -<<- LOCAL: core/user.disconnectEvent { _fromServerID => 1, _type => core/user.disconnectEvent, _id => 164 }
20.01 16:09:22 == NET: null ret: user.login { type => user.login, errorCode => userDisconnecting }
20.01 16:09:22 NET: Client (name:uid164 conid:91542634 TCP) disconnected from vdl.0 (clients:1)
20.01 16:09:22 DB: SELECT id FROM battle WHERE firstid=164 OR secondid=164 AND finished <> true
20.01 16:09:22 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=164 OR secondid=164 AND finished <> true, _type => core/server.query }
20.01 16:09:22 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.01 16:09:22 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.01 16:09:22 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
20.01 16:09:22 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.01 16:09:22 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 994
20.01 16:09:22 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 164, _type => core/cache.update }
20.01 16:09:22 -<<-: core/cache.update { errorCode => ok, version => 6, _type => core/cache.update }
20.01 16:09:22 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 164, _type => core/cache.update }
20.01 16:09:22 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
20.01 16:09:22 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 164, _type => core/user.logoutPost }
20.01 16:09:22 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.01 16:09:25 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
20.01 16:09:25 TRACE: User not logon yet.
20.01 16:09:40 NET: Client (name:null conid:98603887 TCP) disconnected from vdl.0 (clients:0)
20.01 16:09:40 NET: Client (conid:84858483) connected to vdl.0 (clients:1)
20.01 16:09:40 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTY0 }
20.01 16:09:40 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid164' AND Password = E'uid164'
20.01 16:09:40 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid164' AND Password = E'uid164', _type => core/server.query }
20.01 16:09:40 -<<-: core/server.query { list => {{ name => uid164, networkid => , isbanned => false, id => 164 }}, errorCode => ok, _type => core/server.query }
20.01 16:09:40 ->>-: core/user.isOnlineID { id => 164, _type => core/user.isOnlineID }
20.01 16:09:40 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:09:40 ->>-: core/cache.get { type => user, v => -1, id => 164, _type => core/cache.get }
20.01 16:09:40 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid164, deleted => false, email => , networktype =>   , password => uid164, isbanned => false, regdate => 2017-01-20 12:47:42.69767+03, language => en, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484905662, lastLoginDate => 20, lastLoadDate => 121 }, effects => { list => [] } }}, version => 0, id => 164 } }
20.01 16:09:40 ->>-: core/cache.get { type => questdata, v => -1, id => 164, _type => core/cache.get }
20.01 16:09:40 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 164 } }
20.01 16:09:40 NET: Client login (conid:84858483, id:164, name:uid164)
20.01 16:09:40 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 164, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:09:40 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.01 16:09:40 == NET: uid164 ret: user.login { name => uid164, type => user.login, errorCode => ok, id => 164 }
20.01 16:09:40 == NET: uid164 ret: user.join { name => uid164, type => user.join }
20.01 16:09:42 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:09:42 TIME: user.ping 0.17 ms
20.01 16:09:42 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:09:42 TIMER: Check auto-disconnect...
20.01 16:09:45 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:09:45 TIME: user.ping 0.28 ms
20.01 16:09:45 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:09:45 STATS: vdl.0 cache, locks:2
20.01 16:09:47 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:09:47 TIME: user.ping 0.27 ms
20.01 16:09:47 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:09:50 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 164, _type => core/cache.update }
20.01 16:09:50 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:09:50 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:09:50 TIME: user.ping 0.21 ms
20.01 16:09:50 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:09:53 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:09:53 TIME: user.ping 0.22 ms
20.01 16:09:53 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:09:56 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:09:56 TIME: user.ping 0.18 ms
20.01 16:09:56 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:09:56 NET: Client (conid:36555443) connected to vdl.0 (clients:2)
20.01 16:09:56 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTY0 }
20.01 16:09:56 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid164' AND Password = E'uid164'
20.01 16:09:56 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid164' AND Password = E'uid164', _type => core/server.query }
20.01 16:09:56 -<<-: core/server.query { list => {{ name => uid164, networkid => , isbanned => false, id => 164 }}, errorCode => ok, _type => core/server.query }
20.01 16:09:56 ->>-: core/user.isOnlineID { id => 164, _type => core/user.isOnlineID }
20.01 16:09:56 -<<-: core/user.isOnlineID { isOnline => true, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:09:56 -<<- LOCAL: core/user.disconnectEvent { _fromServerID => 1, _type => core/user.disconnectEvent, _id => 164 }
20.01 16:09:56 NET: Client (name:uid164 conid:84858483 TCP) disconnected from vdl.0 (clients:1)
20.01 16:09:56 DB: SELECT id FROM battle WHERE firstid=164 OR secondid=164 AND finished <> true
20.01 16:09:56 == NET: null ret: user.login { type => user.login, errorCode => userDisconnecting }
20.01 16:09:56 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=164 OR secondid=164 AND finished <> true, _type => core/server.query }
20.01 16:09:56 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
20.01 16:09:56 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.01 16:09:56 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
20.01 16:09:56 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
20.01 16:09:56 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 994
20.01 16:09:56 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 164, _type => core/cache.update }
20.01 16:09:56 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
20.01 16:09:56 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 164, _type => core/cache.update }
20.01 16:09:56 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:09:56 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 164, _type => core/user.logoutPost }
20.01 16:09:56 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.01 16:09:59 NET: Client (conid:59461133) connected to vdl.0 (clients:2)
20.01 16:09:59 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
20.01 16:09:59 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
20.01 16:09:59 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 16:09:59 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
20.01 16:09:59 STATS: vdl.0 cache connection, 113 calls, total 0.117610692977905 sec spent, avg 1.04 ms
20.01 16:09:59 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
20.01 16:09:59 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:09:59 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
20.01 16:09:59 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484905045, lastLoginDate => 20, money => 3, lastLoadDate => 121 }, effects => { list => [] } }}, version => 0, id => 76 } }
20.01 16:09:59 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
20.01 16:09:59 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 76 } }
20.01 16:09:59 NET: Client login (conid:59461133, id:76, name:Aimer)
20.01 16:09:59 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:09:59 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.01 16:09:59 == NET: null ret: user.join { name => Aimer, type => user.join }
20.01 16:09:59 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
20.01 16:09:59 == NET: Aimer ret: user.join { name => null, type => user.join }
20.01 16:09:59 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
20.01 16:09:59 ++ NET: Aimer req: user.data { messageType => user.data }
20.01 16:09:59 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
20.01 16:09:59 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:09:59 TIME: user.data 0.22 ms
20.01 16:09:59 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:10:02 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:02 TRACE: User not logon yet.
20.01 16:10:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:02 TIME: user.ping 0.14 ms
20.01 16:10:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:05 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
20.01 16:10:05 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:10:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:05 TIME: user.ping 0.09 ms
20.01 16:10:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:08 TIME: user.ping 0.29 ms
20.01 16:10:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:11 TIME: user.ping 0.11 ms
20.01 16:10:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:14 TIME: user.ping 0.22 ms
20.01 16:10:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:17 NET: Client (name:null conid:36555443 TCP) disconnected from vdl.0 (clients:1)
20.01 16:10:17 NET: Client (conid:98214942) connected to vdl.0 (clients:2)
20.01 16:10:17 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTY0 }
20.01 16:10:17 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid164' AND Password = E'uid164'
20.01 16:10:17 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid164' AND Password = E'uid164', _type => core/server.query }
20.01 16:10:17 -<<-: core/server.query { list => {{ name => uid164, networkid => , isbanned => false, id => 164 }}, errorCode => ok, _type => core/server.query }
20.01 16:10:17 ->>-: core/user.isOnlineID { id => 164, _type => core/user.isOnlineID }
20.01 16:10:17 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:10:17 ->>-: core/cache.get { type => user, v => -1, id => 164, _type => core/cache.get }
20.01 16:10:17 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid164, deleted => false, email => , networktype =>   , password => uid164, isbanned => false, regdate => 2017-01-20 12:47:42.69767+03, language => en, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484905662, lastLoginDate => 20, lastLoadDate => 121 }, effects => { list => [] } }}, version => 0, id => 164 } }
20.01 16:10:17 ->>-: core/cache.get { type => questdata, v => -1, id => 164, _type => core/cache.get }
20.01 16:10:17 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 164 } }
20.01 16:10:17 NET: Client login (conid:98214942, id:164, name:uid164)
20.01 16:10:17 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 164, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:10:17 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.01 16:10:17 == NET: uid164 ret: user.login { name => uid164, type => user.login, errorCode => ok, id => 164 }
20.01 16:10:17 == NET: uid164 ret: user.join { name => Aimer, type => user.join }
20.01 16:10:17 == NET: uid164 ret: user.join { name => uid164, type => user.join }
20.01 16:10:17 == NET: Aimer ret: user.join { name => uid164, type => user.join }
20.01 16:10:17 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:17 TIME: user.ping 0.08 ms
20.01 16:10:17 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:20 TIME: user.ping 0.24 ms
20.01 16:10:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:21 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:21 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:21 TIME: user.ping 0.21 ms
20.01 16:10:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:23 TIME: user.ping 0.15 ms
20.01 16:10:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:24 ++ NET: uid164 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
20.01 16:10:24 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 164 }, _type => vdl/cache.battle.findRandom }
20.01 16:10:24 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
20.01 16:10:24 TIME: battle.find 0.58 ms
20.01 16:10:24 == NET: uid164 ret: battle.find { type => battle.find, errorCode => ok }
20.01 16:10:25 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 164, _type => core/cache.update }
20.01 16:10:25 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:10:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:25 TIME: user.ping 0.17 ms
20.01 16:10:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:27 ++ NET: Aimer req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
20.01 16:10:27 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 76 }, _type => vdl/cache.battle.findRandom }
20.01 16:10:27 -<<-: battle.enemyEvent { data => { name => Aimer, enemy.id => 164, enemy.name => uid164, id => 76, enemy.num => 2, battleId => 38, player => 1 }, _isNotify => true, id => 76, _type => battle.enemyEvent }
20.01 16:10:27 -<<-: battle.enemyEvent { data => { name => uid164, enemy.id => 76, enemy.name => Aimer, id => 164, enemy.num => 1, battleId => 38, player => 2 }, _isNotify => true, id => 164, _type => battle.enemyEvent }
20.01 16:10:27 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
20.01 16:10:27 TIME: battle.find 11.6 ms
20.01 16:10:27 == NET: Aimer ret: battle.find { type => battle.find, errorCode => ok }
20.01 16:10:27 == NET: Aimer ret: battle.enemy { data => { name => Aimer, enemy.id => 164, enemy.name => uid164, id => 76, enemy.num => 2, battleId => 38, player => 1 }, type => battle.enemy }
20.01 16:10:27 == NET: uid164 ret: battle.enemy { data => { name => uid164, enemy.id => 76, enemy.name => Aimer, id => 164, enemy.num => 1, battleId => 38, player => 2 }, type => battle.enemy }
20.01 16:10:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:30 TIME: user.ping 0.1 ms
20.01 16:10:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:34 TIME: user.ping 0.31 ms
20.01 16:10:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:38 TIME: user.ping 0.22 ms
20.01 16:10:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:41 TIME: user.ping 0.13 ms
20.01 16:10:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:42 TIMER: Check auto-disconnect...
20.01 16:10:45 STATS: vdl.0 cache, locks:4
20.01 16:10:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:45 TIME: user.ping 0.15 ms
20.01 16:10:48 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:48 TIME: user.ping 0.15 ms
20.01 16:10:48 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:49 TIME: user.ping 0.19 ms
20.01 16:10:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:10:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:10:53 TIME: user.ping 0.12 ms
20.01 16:10:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:11:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:11:01 TIME: user.ping 0.38 ms
20.01 16:11:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:11:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:11:04 TIME: user.ping 0.06 ms
20.01 16:11:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:11:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:11:08 TIME: user.ping 0.21 ms
20.01 16:11:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:11:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:11:12 TIME: user.ping 0.15 ms
20.01 16:11:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:11:15 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:11:15 TIME: user.ping 0.14 ms
20.01 16:11:15 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:11:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:11:15 TIME: user.ping 0.21 ms
20.01 16:11:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:11:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:11:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:11:19 TIME: user.ping 0.39 ms
20.01 16:11:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:11:27 TIME: user.ping 0.13 ms
20.01 16:11:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:11:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:11:30 TIME: user.ping 0.17 ms
20.01 16:11:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:11:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:11:34 TIME: user.ping 0.15 ms
20.01 16:11:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:11:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:11:38 TIME: user.ping 0.1 ms
20.01 16:11:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:11:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:11:41 TIME: user.ping 0.17 ms
20.01 16:11:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:11:42 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:11:42 TIME: user.ping 0.29 ms
20.01 16:11:42 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:11:42 TIMER: Check auto-disconnect...
20.01 16:11:45 STATS: vdl.0 cache, locks:4
20.01 16:11:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:11:47 TIME: user.ping 0.19 ms
20.01 16:11:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:11:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:11:53 TIME: user.ping 0.22 ms
20.01 16:11:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:11:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:11:57 TIME: user.ping 0.18 ms
20.01 16:11:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:12:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:12:01 TIME: user.ping 0.11 ms
20.01 16:12:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:12:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:12:04 TIME: user.ping 0.17 ms
20.01 16:12:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:12:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:12:08 TIME: user.ping 0.34 ms
20.01 16:12:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:12:09 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:12:09 TIME: user.ping 0.14 ms
20.01 16:12:09 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:12:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:12:16 TIME: user.ping 0.19 ms
20.01 16:12:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:12:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:12:21 TIME: user.ping 0.3 ms
20.01 16:12:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:12:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:12:25 TIME: user.ping 0.12 ms
20.01 16:12:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:12:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:12:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:12:29 TIME: user.ping 0.08 ms
20.01 16:12:32 ++ NET: Aimer req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 38 }
20.01 16:12:32 ->>-: vdl/cache.battle.infoRoom { roomId => 38, _type => vdl/cache.battle.infoRoom }
20.01 16:12:32 -<<-: vdl/cache.battle.infoRoom { secondId => 164, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
20.01 16:12:32 STATS: vdl.0 cache connection, 128 calls, total 0.140427112579346 sec spent, avg 1.1 ms
20.01 16:12:32 ->>-: vdl/cache.battle.makeTurn { userId => 76, roomId => 38, _type => vdl/cache.battle.makeTurn }
20.01 16:12:32 -<<-: vdl/cache.battle.makeTurn { errorCode => ok, _type => vdl/cache.battle.makeTurn, turnId => 0 }
20.01 16:12:32 TIME: battle.sendtask 2.64 ms
20.01 16:12:32 == NET: Aimer ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
20.01 16:12:32 == NET: uid164 ret: battle.task { dice => 0, from => [0,0], name => skip, side => 2, type => battle.task, messageType => battle.sendtask, to => [0,0], battleId => 38 }
20.01 16:12:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:12:33 TIME: user.ping 0.12 ms
20.01 16:12:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:12:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:12:41 TIME: user.ping 0.25 ms
20.01 16:12:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:12:41 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:12:41 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:12:41 TIME: user.ping 0.28 ms
20.01 16:12:42 TIMER: Check auto-disconnect...
20.01 16:12:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:12:45 TIME: user.ping 0.21 ms
20.01 16:12:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:12:45 STATS: vdl.0 cache, locks:4
20.01 16:12:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:12:48 TIME: user.ping 0.21 ms
20.01 16:12:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:12:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:12:52 TIME: user.ping 0.17 ms
20.01 16:12:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:12:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:12:56 TIME: user.ping 0.15 ms
20.01 16:12:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:13:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:13:04 TIME: user.ping 0.26 ms
20.01 16:13:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:13:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:13:08 TIME: user.ping 0.11 ms
20.01 16:13:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:13:08 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:13:08 TIME: user.ping 0.21 ms
20.01 16:13:08 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:13:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:13:11 TIME: user.ping 0.2 ms
20.01 16:13:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:13:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:13:15 TIME: user.ping 0.12 ms
20.01 16:13:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:13:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:13:20 TIME: user.ping 0.12 ms
20.01 16:13:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:13:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:13:27 TIME: user.ping 0.26 ms
20.01 16:13:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:13:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:13:31 TIME: user.ping 0.19 ms
20.01 16:13:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:13:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:13:35 TIME: user.ping 0.18 ms
20.01 16:13:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:13:36 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:13:36 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:13:36 TIME: user.ping 0.19 ms
20.01 16:13:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:13:38 TIME: user.ping 0.18 ms
20.01 16:13:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:13:42 TIMER: Check auto-disconnect...
20.01 16:13:45 STATS: vdl.0 cache, locks:4
20.01 16:13:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:13:46 TIME: user.ping 0.11 ms
20.01 16:13:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:13:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:13:50 TIME: user.ping 0.1 ms
20.01 16:13:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:13:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:13:54 TIME: user.ping 0.2 ms
20.01 16:13:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:13:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:13:57 TIME: user.ping 0.13 ms
20.01 16:13:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:14:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:14:01 TIME: user.ping 0.27 ms
20.01 16:14:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:14:05 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:14:05 TIME: user.ping 0.22 ms
20.01 16:14:05 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:14:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:14:10 TIME: user.ping 0.19 ms
20.01 16:14:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:14:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:14:13 TIME: user.ping 0.17 ms
20.01 16:14:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:14:17 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:14:17 TIME: user.ping 0.19 ms
20.01 16:14:17 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:14:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:14:21 TIME: user.ping 0.1 ms
20.01 16:14:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:14:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:14:25 TIME: user.ping 0.07 ms
20.01 16:14:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:14:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:14:33 TIME: user.ping 0.25 ms
20.01 16:14:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:14:35 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:14:35 TIME: user.ping 0.22 ms
20.01 16:14:35 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:14:36 ++ NET: uid164 req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 1, messageType => battle.sendtask, to => [0,0], battleId => 38 }
20.01 16:14:36 ->>-: vdl/cache.battle.infoRoom { roomId => 38, _type => vdl/cache.battle.infoRoom }
20.01 16:14:36 -<<-: vdl/cache.battle.infoRoom { secondId => 164, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 164 }
20.01 16:14:36 STATS: vdl.0 cache connection, 130 calls, total 0.143063068389893 sec spent, avg 1.1 ms
20.01 16:14:36 ->>-: vdl/cache.battle.makeTurn { userId => 164, roomId => 38, _type => vdl/cache.battle.makeTurn }
20.01 16:14:36 -<<-: vdl/cache.battle.makeTurn { errorCode => ok, _type => vdl/cache.battle.makeTurn, turnId => 0 }
20.01 16:14:36 TIME: battle.sendtask 2.85 ms
20.01 16:14:36 == NET: uid164 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
20.01 16:14:36 == NET: Aimer ret: battle.task { dice => 0, from => [0,0], name => skip, side => 1, type => battle.task, messageType => battle.sendtask, to => [0,0], battleId => 38 }
20.01 16:14:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:14:36 TIME: user.ping 0.25 ms
20.01 16:14:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:14:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:14:40 TIME: user.ping 0.19 ms
20.01 16:14:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:14:42 TIMER: Check auto-disconnect...
20.01 16:14:45 STATS: vdl.0 cache, locks:4
20.01 16:14:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:14:45 TIME: user.ping 0.12 ms
20.01 16:14:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:14:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:14:52 TIME: user.ping 0.21 ms
20.01 16:14:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:14:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:14:55 TIME: user.ping 0.3 ms
20.01 16:14:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:14:59 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:14:59 TIME: user.ping 0.11 ms
20.01 16:14:59 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:15:02 ++ NET: uid164 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:15:02 TIME: user.ping 0.17 ms
20.01 16:15:02 == NET: uid164 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:15:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:15:03 TIME: user.ping 0.18 ms
20.01 16:15:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:15:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:15:11 TIME: user.ping 0.19 ms
20.01 16:15:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:15:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:15:14 TIME: user.ping 0.16 ms
20.01 16:15:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:15:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:15:18 TIME: user.ping 0.25 ms
20.01 16:15:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:15:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:15:21 TIME: user.ping 0.11 ms
20.01 16:15:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:15:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:15:27 TIME: user.ping 0.18 ms
20.01 16:15:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:15:43 ->>-: core/server.login { host => 172.16.20.171, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.20.171, externalPort => 2030 }
20.01 16:15:43 -<<-: server.login ok
20.01 16:15:43 DB: SELECT * FROM LocalizationStrings
20.01 16:15:43 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:15:43 TIMER: Starting timer...
20.01 16:15:43 TIMER: Timer running...
20.01 16:15:43 DB: SELECT * FROM GameVars
20.01 16:15:43 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:15:43 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
20.01 16:15:43 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:15:43 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
20.01 16:15:43 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:15:43 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
20.01 16:15:43 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:15:43 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
20.01 16:15:43 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:15:43 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
20.01 16:15:43 -<<-: core/quest.getDaily ok
20.01 16:15:43 DB: SELECT * FROM UserAttributeTypes
20.01 16:15:43 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:15:43 DB: SELECT * FROM UserVariableTypes
20.01 16:15:43 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:15:43 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
20.01 16:15:43 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:15:43 DB: SELECT * FROM ItemGroups
20.01 16:15:43 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:15:43 DB: SELECT * FROM Bundles ORDER BY ID
20.01 16:15:43 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:15:43 DB: SELECT * FROM BundleItems ORDER BY ID
20.01 16:15:43 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:15:43 SHOP: loading items...
20.01 16:15:43 ->>-: core/shop.getList { _type => core/shop.getList }
20.01 16:15:43 -<<-: core/shop.getList ok
20.01 16:15:43 SHOP: 0 items loaded (0 sec)
20.01 16:15:43 DB: SELECT * FROM EffectAttributeTypes
20.01 16:15:43 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:15:43 DB: SELECT * FROM Effects
20.01 16:15:43 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:15:43 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
20.01 16:15:43 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:15:43 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
20.01 16:15:43 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:15:43 DB: SELECT * FROM Badges
20.01 16:15:43 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
20.01 16:15:43 -<<-: core/server.query ok
20.01 16:16:01 NET: Client (conid:34428539) connected to vdl.0 (clients:1)
20.01 16:16:01 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
20.01 16:16:01 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
20.01 16:16:01 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 16:16:01 -<<-: core/server.query ok
20.01 16:16:01 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
20.01 16:16:01 -<<-: core/user.isOnlineID ok
20.01 16:16:01 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
20.01 16:16:01 -<<-: core/cache.get ok
20.01 16:16:01 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
20.01 16:16:01 -<<-: core/cache.get ok
20.01 16:16:01 NET: Client login (conid:34428539, id:76, name:Aimer)
20.01 16:16:01 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:16:01 -<<-: core/user.loginPost null
20.01 16:16:01 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
20.01 16:16:01 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
20.01 16:16:01 ++ NET: Aimer req: user.data { messageType => user.data }
20.01 16:16:01 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
20.01 16:16:01 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:16:01 TIME: user.data 0.39 ms
20.01 16:16:01 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:16:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:16:04 TIME: user.ping 0.17 ms
20.01 16:16:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:16:06 NET: Client (conid:64718378) connected to vdl.0 (clients:2)
20.01 16:16:06 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTY0 }
20.01 16:16:06 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid164' AND Password = E'uid164'
20.01 16:16:06 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid164' AND Password = E'uid164', _type => core/server.query }
20.01 16:16:06 -<<-: core/server.query { list => {{ name => uid164, networkid => , isbanned => false, id => 164 }}, errorCode => ok, _type => core/server.query }
20.01 16:16:06 ->>-: core/user.isOnlineID { id => 164, _type => core/user.isOnlineID }
20.01 16:16:06 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:16:06 ->>-: core/cache.get { type => user, v => -1, id => 164, _type => core/cache.get }
20.01 16:16:06 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid164, deleted => false, email => , networktype =>   , password => uid164, isbanned => false, regdate => 2017-01-20 12:47:42.69767+03, language => en, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484905662, lastLoginDate => 20, lastLoadDate => 121 }, effects => { list => [] } }}, version => 0, id => 164 } }
20.01 16:16:06 ->>-: core/cache.get { type => questdata, v => -1, id => 164, _type => core/cache.get }
20.01 16:16:06 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 164 } }
20.01 16:16:06 NET: Client login (conid:64718378, id:164, name:uid164)
20.01 16:16:06 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 164, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:16:06 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.01 16:16:06 == NET: uid164 ret: user.login { name => uid164, type => user.login, errorCode => ok, id => 164 }
20.01 16:16:06 == NET: uid164 ret: user.join { name => Aimer, type => user.join }
20.01 16:16:06 == NET: uid164 ret: user.join { name => uid164, type => user.join }
20.01 16:16:06 == NET: Aimer ret: user.join { name => uid164, type => user.join }
20.01 16:16:08 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
20.01 16:16:08 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:16:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:16:13 TIME: user.ping 0.11 ms
20.01 16:16:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:16:13 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 164, _type => core/cache.update }
20.01 16:16:13 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:16:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:16:16 TIME: user.ping 0.14 ms
20.01 16:16:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:16:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:16:21 TIME: user.ping 0.13 ms
20.01 16:16:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:16:27 ->>-: core/server.login { host => 172.16.20.171, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.20.171, externalPort => 2030 }
20.01 16:16:27 -<<-: server.login ok
20.01 16:16:27 DB: SELECT * FROM LocalizationStrings
20.01 16:16:27 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:27 TIMER: Starting timer...
20.01 16:16:27 TIMER: Timer running...
20.01 16:16:27 DB: SELECT * FROM GameVars
20.01 16:16:27 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:27 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
20.01 16:16:27 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:27 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
20.01 16:16:27 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:27 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
20.01 16:16:27 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:27 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
20.01 16:16:27 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:27 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
20.01 16:16:27 -<<-: core/quest.getDaily ok
20.01 16:16:27 DB: SELECT * FROM UserAttributeTypes
20.01 16:16:27 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:27 DB: SELECT * FROM UserVariableTypes
20.01 16:16:27 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:27 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
20.01 16:16:27 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:27 DB: SELECT * FROM ItemGroups
20.01 16:16:27 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:27 DB: SELECT * FROM Bundles ORDER BY ID
20.01 16:16:27 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:27 DB: SELECT * FROM BundleItems ORDER BY ID
20.01 16:16:27 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:27 SHOP: loading items...
20.01 16:16:27 ->>-: core/shop.getList { _type => core/shop.getList }
20.01 16:16:27 -<<-: core/shop.getList ok
20.01 16:16:27 SHOP: 0 items loaded (0 sec)
20.01 16:16:27 DB: SELECT * FROM EffectAttributeTypes
20.01 16:16:27 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:27 DB: SELECT * FROM Effects
20.01 16:16:27 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:27 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
20.01 16:16:27 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:27 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
20.01 16:16:27 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:27 DB: SELECT * FROM Badges
20.01 16:16:27 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
20.01 16:16:27 -<<-: core/server.query ok
20.01 16:16:40 NET: Client (conid:97212560) connected to vdl.0 (clients:1)
20.01 16:16:40 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
20.01 16:16:40 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
20.01 16:16:40 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 16:16:40 -<<-: core/server.query ok
20.01 16:16:40 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
20.01 16:16:40 -<<-: core/user.isOnlineID ok
20.01 16:16:40 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
20.01 16:16:40 -<<-: core/cache.get ok
20.01 16:16:40 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
20.01 16:16:40 -<<-: core/cache.get ok
20.01 16:16:40 NET: Client login (conid:97212560, id:76, name:Aimer)
20.01 16:16:40 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:16:40 -<<-: core/user.loginPost null
20.01 16:16:40 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
20.01 16:16:40 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
20.01 16:16:40 ++ NET: Aimer req: user.data { messageType => user.data }
20.01 16:16:40 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
20.01 16:16:40 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:16:40 TIME: user.data 0.27 ms
20.01 16:16:40 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:16:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:16:41 TIME: user.ping 0.16 ms
20.01 16:16:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:16:47 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
20.01 16:16:47 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:16:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:16:52 TIME: user.ping 0.28 ms
20.01 16:16:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:16:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:16:56 TIME: user.ping 0.09 ms
20.01 16:16:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:17:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:17:00 TIME: user.ping 0.12 ms
20.01 16:17:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:17:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:17:06 TIME: user.ping 0.22 ms
20.01 16:17:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:17:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:17:12 TIME: user.ping 0.22 ms
20.01 16:17:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:17:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:17:16 TIME: user.ping 0.22 ms
20.01 16:17:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:17:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:17:19 TIME: user.ping 0.29 ms
20.01 16:17:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:17:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:17:23 TIME: user.ping 0.18 ms
20.01 16:17:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:17:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:17:26 TIME: user.ping 0.21 ms
20.01 16:17:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:17:27 TIMER: Check auto-disconnect...
20.01 16:17:27 STATS: vdl.0 cache, locks:2
20.01 16:17:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:17:29 TIME: user.ping 0.2 ms
20.01 16:17:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:17:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:17:35 TIME: user.ping 0.35 ms
20.01 16:17:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:17:36 ++ NET: Aimer req: battle.end { type => leaveGame, typeBattle => battle, tournamentId => 0, messageType => battle.end, battleId => 38 }
20.01 16:17:36 ->>-: vdl/cache.battle.infoRoom { roomId => 38, _type => vdl/cache.battle.infoRoom }
20.01 16:17:36 -<<-: vdl/cache.battle.infoRoom { secondId => 164, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
20.01 16:17:36 STATS: vdl.0 cache connection, 28 calls, total 0.0227406024932861 sec spent, avg 0.81 ms
20.01 16:17:36 ->>-: core/user.sendTo { id => 164, _type => core/user.sendTo, msg => { _type => battle.leave } }
20.01 16:17:36 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
20.01 16:17:36 ->>-: vdl/cache.battle.finishRoom { roomId => 38, _type => vdl/cache.battle.finishRoom }
20.01 16:17:36 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
20.01 16:17:36 TIME: battle.end 3.77 ms
20.01 16:17:36 == NET: Aimer ret: battle.end { type => battle.end, errorCode => ok }
20.01 16:17:36 == NET: Aimer ret: battle.leave { type => battle.leave }
20.01 16:17:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:17:40 TIME: user.ping 0.18 ms
20.01 16:17:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:17:41 NET: Client (conid:99837377) connected to vdl.0 (clients:2)
20.01 16:17:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:17:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:17:43 TIME: user.ping 0.15 ms
20.01 16:17:43 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
20.01 16:17:43 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
20.01 16:17:43 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 16:17:43 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
20.01 16:17:43 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
20.01 16:17:43 -<<-: core/user.isOnlineID { isOnline => true, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:17:43 -<<- LOCAL: core/user.disconnectEvent { _fromServerID => 1, _type => core/user.disconnectEvent, _id => 76 }
20.01 16:17:43 == NET: null ret: user.login { type => user.login, errorCode => userDisconnecting }
20.01 16:17:43 NET: Client (name:Aimer conid:97212560 TCP) disconnected from vdl.0 (clients:1)
20.01 16:17:43 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
20.01 16:17:43 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
20.01 16:17:43 -<<-: core/server.query { list => {{ id => 38 }}, errorCode => ok, _type => core/server.query }
20.01 16:17:43 ->>-: vdl/cache.battle.infoRoom { roomId => 38, _type => vdl/cache.battle.infoRoom }
20.01 16:17:43 -<<-: vdl/cache.battle.infoRoom { secondId => 164, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
20.01 16:17:43 ->>-: vdl/cache.battle.deleteRoom { roomId => 38, _type => vdl/cache.battle.deleteRoom }
20.01 16:17:43 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
20.01 16:17:43 ->>-: vdl/cache.battle.finishRoom { roomId => 38, _type => vdl/cache.battle.finishRoom }
20.01 16:17:43 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
20.01 16:17:43 ->>-: core/user.sendTo { id => 164, _type => core/user.sendTo, msg => { _type => battle.leave } }
20.01 16:17:43 -<<-: core/user.sendTo { errorCode => userNotOnline, _type => core/user.sendTo }
20.01 16:17:43 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
20.01 16:17:43 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
20.01 16:17:43 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
20.01 16:17:43 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:17:43 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
20.01 16:17:43 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
20.01 16:17:49 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
20.01 16:17:49 TRACE: User not logon yet.
20.01 16:18:01 NET: Client (name:null conid:99837377 TCP) disconnected from vdl.0 (clients:0)
20.01 16:18:01 NET: Client (conid:80808826) connected to vdl.0 (clients:1)
20.01 16:18:01 NET: Client (conid:93161878) connected to vdl.0 (clients:2)
20.01 16:18:01 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
20.01 16:18:01 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
20.01 16:18:01 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 16:18:01 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
20.01 16:18:01 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
20.01 16:18:01 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:18:01 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
20.01 16:18:01 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484905045, lastLoginDate => 20, money => 3, lastLoadDate => 121 }, effects => { list => [] } }}, version => 0, id => 76 } }
20.01 16:18:01 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
20.01 16:18:01 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 76 } }
20.01 16:18:01 NET: Client login (conid:93161878, id:76, name:Aimer)
20.01 16:18:01 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:18:01 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.01 16:18:01 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer2, messageType => user.login }
20.01 16:18:01 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer2' AND Password = E'kO2YJdf'
20.01 16:18:01 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer2' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 16:18:01 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
20.01 16:18:01 == NET: Aimer ret: user.join { name => null, type => user.join }
20.01 16:18:01 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
20.01 16:18:01 == NET: null ret: user.join { name => Aimer, type => user.join }
20.01 16:18:01 -<<-: core/server.query { list => {{ name => Aimer2, networkid => , isbanned => false, id => 163 }}, errorCode => ok, _type => core/server.query }
20.01 16:18:01 ->>-: core/user.isOnlineID { id => 163, _type => core/user.isOnlineID }
20.01 16:18:01 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:18:01 ->>-: core/cache.get { type => user, v => -1, id => 163, _type => core/cache.get }
20.01 16:18:01 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer2, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2017-01-20 12:39:54.038596+03, language => en, networkid => , params => { info => { city => , year => , email =>  }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484905194, lastLoginDate => 20, lastLoadDate => 121 }, effects => { list => [] } }}, version => 0, id => 163 } }
20.01 16:18:01 ->>-: core/cache.get { type => questdata, v => -1, id => 163, _type => core/cache.get }
20.01 16:18:01 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 163 } }
20.01 16:18:01 NET: Client login (conid:80808826, id:163, name:Aimer2)
20.01 16:18:01 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 163, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:18:01 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.01 16:18:01 == NET: Aimer2 ret: user.login { name => Aimer2, type => user.login, errorCode => ok, id => 163 }
20.01 16:18:01 == NET: Aimer2 ret: user.join { name => Aimer2, type => user.join }
20.01 16:18:01 == NET: Aimer2 ret: user.join { name => Aimer, type => user.join }
20.01 16:18:01 == NET: Aimer ret: user.join { name => Aimer2, type => user.join }
20.01 16:18:01 ++ NET: Aimer req: user.data { messageType => user.data }
20.01 16:18:01 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
20.01 16:18:01 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:18:01 TIME: user.data 0.28 ms
20.01 16:18:01 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:18:01 ++ NET: Aimer2 req: user.data { messageType => user.data }
20.01 16:18:01 ->>-: vdl/cache.user.getData { userId => 163, _type => vdl/cache.user.getData, money => 0 }
20.01 16:18:01 -<<-: vdl/cache.user.getData { info => { city => , year => , email =>  }, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.01 16:18:01 TIME: user.data 0.24 ms
20.01 16:18:01 == NET: Aimer2 ret: user.data { info => { city => , year => , email =>  }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.01 16:18:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:18:03 TIME: user.ping 0.22 ms
20.01 16:18:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:06 TIME: user.ping 0.26 ms
20.01 16:18:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:18:07 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
20.01 16:18:07 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:18:07 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 163, _type => core/cache.update }
20.01 16:18:07 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:18:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:09 TIME: user.ping 0.17 ms
20.01 16:18:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:18:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:12 TIME: user.ping 0.2 ms
20.01 16:18:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:18:13 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:13 TIME: user.ping 0.27 ms
20.01 16:18:13 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:18:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:14 TIME: user.ping 0.25 ms
20.01 16:18:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:18:17 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:17 TIME: user.ping 0.23 ms
20.01 16:18:17 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:18:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:21 TIME: user.ping 0.33 ms
20.01 16:18:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:18:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:24 TIME: user.ping 0.39 ms
20.01 16:18:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:18:25 ++ NET: Aimer2 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
20.01 16:18:25 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 163 }, _type => vdl/cache.battle.findRandom }
20.01 16:18:25 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
20.01 16:18:25 TIME: battle.find 0.62 ms
20.01 16:18:25 == NET: Aimer2 ret: battle.find { type => battle.find, errorCode => ok }
20.01 16:18:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:26 TIME: user.ping 0.21 ms
20.01 16:18:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:18:27 TIMER: Check auto-disconnect...
20.01 16:18:27 STATS: vdl.0 cache, locks:4
20.01 16:18:28 ++ NET: Aimer req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
20.01 16:18:28 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 76 }, _type => vdl/cache.battle.findRandom }
20.01 16:18:28 -<<-: battle.enemyEvent { data => { name => Aimer, enemy.id => 163, enemy.name => Aimer2, id => 76, enemy.num => 2, battleId => 39, player => 1 }, _isNotify => true, id => 76, _type => battle.enemyEvent }
20.01 16:18:28 -<<-: battle.enemyEvent { data => { name => Aimer2, enemy.id => 76, enemy.name => Aimer, id => 163, enemy.num => 1, battleId => 39, player => 2 }, _isNotify => true, id => 163, _type => battle.enemyEvent }
20.01 16:18:28 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
20.01 16:18:28 TIME: battle.find 12.9 ms
20.01 16:18:28 == NET: Aimer ret: battle.find { type => battle.find, errorCode => ok }
20.01 16:18:28 == NET: Aimer ret: battle.enemy { data => { name => Aimer, enemy.id => 163, enemy.name => Aimer2, id => 76, enemy.num => 2, battleId => 39, player => 1 }, type => battle.enemy }
20.01 16:18:28 == NET: Aimer2 ret: battle.enemy { data => { name => Aimer2, enemy.id => 76, enemy.name => Aimer, id => 163, enemy.num => 1, battleId => 39, player => 2 }, type => battle.enemy }
20.01 16:18:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:30 TIME: user.ping 0.22 ms
20.01 16:18:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:18:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:34 TIME: user.ping 0.17 ms
20.01 16:18:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:18:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:42 TIME: user.ping 0.14 ms
20.01 16:18:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:18:43 ++ NET: Aimer req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 39 }
20.01 16:18:43 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
20.01 16:18:43 -<<-: vdl/cache.battle.infoRoom { secondId => 163, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
20.01 16:18:43 STATS: vdl.0 cache connection, 57 calls, total 0.063225269317627 sec spent, avg 1.11 ms
20.01 16:18:43 TIME: battle.sendtask 1.93 ms
20.01 16:18:43 == NET: Aimer ret: battle.sendtask { name => throw, type => battle.sendtask, dices => [5,4,5,3,1,4], errorCode => ok, _type => null }
20.01 16:18:43 == NET: Aimer ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
20.01 16:18:43 == NET: Aimer2 ret: battle.task { name => throw, type => battle.task, dices => [5,4,5,3,1,4], errorCode => ok }
20.01 16:18:48 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:48 TIME: user.ping 0.17 ms
20.01 16:18:48 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:18:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:49 TIME: user.ping 0.12 ms
20.01 16:18:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:18:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:52 TIME: user.ping 0.27 ms
20.01 16:18:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:18:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:18:56 TIME: user.ping 0.23 ms
20.01 16:18:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:19:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:19:05 TIME: user.ping 0.21 ms
20.01 16:19:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:19:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:19:10 TIME: user.ping 0.06 ms
20.01 16:19:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:19:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:19:14 TIME: user.ping 0.24 ms
20.01 16:19:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:19:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:19:18 TIME: user.ping 0.13 ms
20.01 16:19:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:19:26 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:19:26 TIME: user.ping 0.27 ms
20.01 16:19:26 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:19:27 TIMER: Check auto-disconnect...
20.01 16:19:27 STATS: vdl.0 cache, locks:4
20.01 16:19:28 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:19:28 TIME: user.ping 0.18 ms
20.01 16:19:28 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:19:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:19:32 TIME: user.ping 0.17 ms
20.01 16:19:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:19:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:19:37 TIME: user.ping 0.16 ms
20.01 16:19:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:19:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:19:41 TIME: user.ping 0.17 ms
20.01 16:19:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:19:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:19:50 TIME: user.ping 0.24 ms
20.01 16:19:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:19:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:19:54 TIME: user.ping 0.14 ms
20.01 16:19:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:19:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:19:58 TIME: user.ping 0.19 ms
20.01 16:19:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:20:04 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:20:04 TIME: user.ping 0.23 ms
20.01 16:20:04 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:20:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:20:07 TIME: user.ping 0.36 ms
20.01 16:20:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:20:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:20:12 TIME: user.ping 0.21 ms
20.01 16:20:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:20:17 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:20:17 TIME: user.ping 0.07 ms
20.01 16:20:17 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:20:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:20:25 TIME: user.ping 0.2 ms
20.01 16:20:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:20:27 TIMER: Check auto-disconnect...
20.01 16:20:27 STATS: vdl.0 cache, locks:4
20.01 16:20:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:20:31 TIME: user.ping 0.32 ms
20.01 16:20:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:20:34 ++ NET: Aimer req: battle.sendtask { dice => 0, from => [0,0], name => skip, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 39 }
20.01 16:20:34 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
20.01 16:20:34 -<<-: vdl/cache.battle.infoRoom { secondId => 163, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
20.01 16:20:34 STATS: vdl.0 cache connection, 58 calls, total 0.0697600841522217 sec spent, avg 1.2 ms
20.01 16:20:34 ->>-: vdl/cache.battle.makeTurn { userId => 76, roomId => 39, _type => vdl/cache.battle.makeTurn }
20.01 16:20:34 -<<-: vdl/cache.battle.makeTurn { errorCode => ok, _type => vdl/cache.battle.makeTurn, turnId => 0 }
20.01 16:20:34 TIME: battle.sendtask 7.47 ms
20.01 16:20:34 == NET: Aimer ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
20.01 16:20:34 == NET: Aimer2 ret: battle.task { dice => 0, from => [0,0], name => skip, side => 2, type => battle.task, messageType => battle.sendtask, to => [0,0], battleId => 39 }
20.01 16:20:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:20:36 TIME: user.ping 0.2 ms
20.01 16:20:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:20:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:20:41 TIME: user.ping 0.19 ms
20.01 16:20:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:20:48 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:20:48 TIME: user.ping 0.24 ms
20.01 16:20:48 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:20:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:20:49 TIME: user.ping 0.16 ms
20.01 16:20:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:20:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:20:53 TIME: user.ping 0.19 ms
20.01 16:20:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:20:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:20:57 TIME: user.ping 0.08 ms
20.01 16:20:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:21:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:21:02 TIME: user.ping 0.2 ms
20.01 16:21:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:21:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:21:10 TIME: user.ping 0.18 ms
20.01 16:21:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:21:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:21:14 TIME: user.ping 0.22 ms
20.01 16:21:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:21:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:21:18 TIME: user.ping 0.22 ms
20.01 16:21:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:21:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:21:27 TIME: user.ping 0.22 ms
20.01 16:21:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:21:27 TIMER: Check auto-disconnect...
20.01 16:21:27 STATS: vdl.0 cache, locks:4
20.01 16:21:28 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:21:28 TIME: user.ping 0.23 ms
20.01 16:21:28 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:21:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:21:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:21:31 TIME: user.ping 0.3 ms
20.01 16:21:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:21:35 TIME: user.ping 0.17 ms
20.01 16:21:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:21:39 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:21:39 TIME: user.ping 0.17 ms
20.01 16:21:39 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:21:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:21:48 TIME: user.ping 0.17 ms
20.01 16:21:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:21:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:21:52 TIME: user.ping 0.13 ms
20.01 16:21:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:21:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:21:56 TIME: user.ping 0.31 ms
20.01 16:21:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:21:58 ++ NET: Aimer2 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 1, messageType => battle.sendtask, to => [0,0], battleId => 39 }
20.01 16:21:58 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
20.01 16:21:58 -<<-: vdl/cache.battle.infoRoom { secondId => 163, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 163 }
20.01 16:21:58 STATS: vdl.0 cache connection, 60 calls, total 0.0721333026885986 sec spent, avg 1.2 ms
20.01 16:21:58 TIME: battle.sendtask 2.02 ms
20.01 16:21:58 == NET: Aimer2 ret: battle.sendtask { name => throw, type => battle.sendtask, dices => [0,5,4,0,4,2], errorCode => ok, _type => battle.task }
20.01 16:21:58 == NET: Aimer ret: battle.task { name => throw, type => battle.task, dices => [0,5,4,0,4,2], errorCode => ok }
20.01 16:21:58 == NET: Aimer2 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
20.01 16:21:59 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:21:59 TIME: user.ping 0.17 ms
20.01 16:21:59 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:04 TIME: user.ping 0.18 ms
20.01 16:22:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:04 ++ NET: Aimer2 req: battle.sendtask { dice => 5, from => [2,6], name => swap, side => 1, messageType => battle.sendtask, to => [1,6], battleId => 39 }
20.01 16:22:04 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
20.01 16:22:04 -<<-: vdl/cache.battle.infoRoom { secondId => 163, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 163 }
20.01 16:22:04 ->>-: vdl/cache.battle.setScores { scores => [0,0], _type => vdl/cache.battle.setScores, player1 => 76, player2 => 163, battleId => 39 }
20.01 16:22:04 -<<-: vdl/cache.battle.setScores { errorCode => ok, _type => vdl/cache.battle.setScores }
20.01 16:22:04 TIME: battle.sendtask 2.03 ms
20.01 16:22:04 == NET: Aimer2 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
20.01 16:22:04 == NET: Aimer ret: battle.task { dice => 5, from => [2,6], name => swap, side => 1, type => battle.task, dices => [0,4,0,4,2], messageType => battle.sendtask, to => [1,6], battleId => 39 }
20.01 16:22:08 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:08 TIME: user.ping 0.27 ms
20.01 16:22:08 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:09 TIME: user.ping 0.12 ms
20.01 16:22:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:12 TIME: user.ping 0.17 ms
20.01 16:22:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:14 TIME: user.ping 0.27 ms
20.01 16:22:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:16 TIME: user.ping 0.14 ms
20.01 16:22:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:18 TIME: user.ping 0.16 ms
20.01 16:22:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:21 TIME: user.ping 0.29 ms
20.01 16:22:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:23 TIME: user.ping 0.19 ms
20.01 16:22:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:25 TIME: user.ping 0.17 ms
20.01 16:22:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:27 TIMER: Check auto-disconnect...
20.01 16:22:27 STATS: vdl.0 cache, locks:4
20.01 16:22:27 -<<-: battle.endEvent { type => winGame, typeBattle => battle, _isNotify => true, _type => battle.endEvent, win => 163, battleId => 39 }
20.01 16:22:27 ->>-: core/cache.get { type => user, v => -1, id => 1, _type => core/cache.get }
20.01 16:22:27 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => --- DEFAULT ATTRIBUTES ---, deleted => false, email => , networktype =>   , password => , isbanned => false, regdate => 2016-08-30 15:45:16.008574+03, language =>   , networkid => , params => { inventory => { list => [] }, attrs => {}, effects => { list => [] } }}, version => 0, id => 1 } }
20.01 16:22:27 ->>-: core/cache.get { type => questdata, v => -1, id => 1, _type => core/cache.get }
20.01 16:22:27 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 1 } }
20.01 16:22:27 ->>-: vdl/cache.battle.infoRoom { roomId => 39, _type => vdl/cache.battle.infoRoom }
20.01 16:22:27 -<<-: vdl/cache.battle.infoRoom { secondId => 163, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 163 }
20.01 16:22:27 ->>-: vdl/cache.battle.finishRoom { roomId => 39, _type => vdl/cache.battle.finishRoom }
20.01 16:22:27 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
20.01 16:22:27 == NET: Aimer ret: battle.end { type => battle.end }
20.01 16:22:27 == NET: Aimer2 ret: battle.end { type => battle.end }
20.01 16:22:28 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:28 TIME: user.ping 0.16 ms
20.01 16:22:28 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:31 TIME: user.ping 0.18 ms
20.01 16:22:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:33 TIME: user.ping 0.21 ms
20.01 16:22:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:35 TIME: user.ping 0.22 ms
20.01 16:22:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:39 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:39 TIME: user.ping 0.19 ms
20.01 16:22:39 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:43 TIME: user.ping 0.07 ms
20.01 16:22:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:46 TIME: user.ping 0.17 ms
20.01 16:22:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:48 TIME: user.ping 0.17 ms
20.01 16:22:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:51 TIME: user.ping 0.23 ms
20.01 16:22:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:51 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:51 TIME: user.ping 0.19 ms
20.01 16:22:51 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:54 TIME: user.ping 0.14 ms
20.01 16:22:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:22:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:22:56 TIME: user.ping 0.2 ms
20.01 16:22:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:02 TIME: user.ping 0.18 ms
20.01 16:23:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:05 TIME: user.ping 0.21 ms
20.01 16:23:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:07 TIME: user.ping 0.19 ms
20.01 16:23:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:10 TIME: user.ping 0.38 ms
20.01 16:23:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:13 TIME: user.ping 0.26 ms
20.01 16:23:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:13 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:13 TIME: user.ping 0.1 ms
20.01 16:23:13 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:15 TIME: user.ping 0.2 ms
20.01 16:23:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:18 TIME: user.ping 0.23 ms
20.01 16:23:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:23 TIME: user.ping 0.19 ms
20.01 16:23:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:26 TIME: user.ping 0.16 ms
20.01 16:23:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:27 TIMER: Check auto-disconnect...
20.01 16:23:27 STATS: vdl.0 cache, locks:6
20.01 16:23:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:29 TIME: user.ping 0.33 ms
20.01 16:23:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:32 TIME: user.ping 0.29 ms
20.01 16:23:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:34 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:34 TIME: user.ping 0.28 ms
20.01 16:23:34 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:35 TIME: user.ping 0.28 ms
20.01 16:23:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:37 TIME: user.ping 0.1 ms
20.01 16:23:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:42 TIME: user.ping 0.14 ms
20.01 16:23:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:45 TIME: user.ping 0.28 ms
20.01 16:23:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:48 TIME: user.ping 0.21 ms
20.01 16:23:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:51 TIME: user.ping 0.09 ms
20.01 16:23:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:53 TIME: user.ping 0.17 ms
20.01 16:23:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:55 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:55 TIME: user.ping 0.26 ms
20.01 16:23:55 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:23:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:23:56 TIME: user.ping 0.32 ms
20.01 16:23:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:00 TIME: user.ping 0.3 ms
20.01 16:24:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:04 TIME: user.ping 0.19 ms
20.01 16:24:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:07 TIME: user.ping 0.19 ms
20.01 16:24:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:10 TIME: user.ping 0.25 ms
20.01 16:24:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:12 TIME: user.ping 0.2 ms
20.01 16:24:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:15 TIME: user.ping 0.35 ms
20.01 16:24:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:17 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:17 TIME: user.ping 0.23 ms
20.01 16:24:17 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:19 TIME: user.ping 0.25 ms
20.01 16:24:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:24 TIME: user.ping 0.27 ms
20.01 16:24:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:26 TIME: user.ping 0.26 ms
20.01 16:24:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:27 TIMER: Check auto-disconnect...
20.01 16:24:27 STATS: vdl.0 cache, locks:6
20.01 16:24:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:29 TIME: user.ping 0.33 ms
20.01 16:24:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:32 TIME: user.ping 0.31 ms
20.01 16:24:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:34 TIME: user.ping 0.52 ms
20.01 16:24:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:37 TIME: user.ping 0.22 ms
20.01 16:24:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:39 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:39 TIME: user.ping 0.21 ms
20.01 16:24:39 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:41 TIME: user.ping 0.48 ms
20.01 16:24:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:46 TIME: user.ping 0.34 ms
20.01 16:24:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:49 TIME: user.ping 0.23 ms
20.01 16:24:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:51 TIME: user.ping 0.22 ms
20.01 16:24:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:54 TIME: user.ping 0.35 ms
20.01 16:24:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:57 TIME: user.ping 0.21 ms
20.01 16:24:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:24:59 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:24:59 TIME: user.ping 0.26 ms
20.01 16:24:59 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:02 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:02 TIME: user.ping 0.25 ms
20.01 16:25:02 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:04 TIME: user.ping 0.2 ms
20.01 16:25:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:08 TIME: user.ping 0.21 ms
20.01 16:25:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:10 TIME: user.ping 0.21 ms
20.01 16:25:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:13 TIME: user.ping 0.27 ms
20.01 16:25:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:15 TIME: user.ping 0.26 ms
20.01 16:25:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:18 TIME: user.ping 0.28 ms
20.01 16:25:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:23 TIME: user.ping 0.22 ms
20.01 16:25:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:27 TIMER: Check auto-disconnect...
20.01 16:25:27 STATS: vdl.0 cache, locks:6
20.01 16:25:28 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:28 TIME: user.ping 0.27 ms
20.01 16:25:28 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:29 TIME: user.ping 0.2 ms
20.01 16:25:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:32 TIME: user.ping 0.23 ms
20.01 16:25:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:43 TIME: user.ping 0.23 ms
20.01 16:25:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:45 TIME: user.ping 0.25 ms
20.01 16:25:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:48 TIME: user.ping 0.34 ms
20.01 16:25:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:51 TIME: user.ping 0.3 ms
20.01 16:25:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:53 TIME: user.ping 0.24 ms
20.01 16:25:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:54 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:54 TIME: user.ping 0.32 ms
20.01 16:25:54 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:25:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:25:56 TIME: user.ping 1.2 ms
20.01 16:26:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:02 TIME: user.ping 0.22 ms
20.01 16:26:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:05 TIME: user.ping 0.36 ms
20.01 16:26:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:07 TIME: user.ping 0.19 ms
20.01 16:26:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:10 TIME: user.ping 0.21 ms
20.01 16:26:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:12 TIME: user.ping 0.25 ms
20.01 16:26:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:15 TIME: user.ping 0.13 ms
20.01 16:26:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:16 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:16 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:16 TIME: user.ping 0.12 ms
20.01 16:26:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:20 TIME: user.ping 0.07 ms
20.01 16:26:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:24 TIME: user.ping 0.16 ms
20.01 16:26:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:26 TIME: user.ping 0.21 ms
20.01 16:26:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:27 TIMER: Check auto-disconnect...
20.01 16:26:27 STATS: vdl.0 cache, locks:6
20.01 16:26:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:29 TIME: user.ping 0.19 ms
20.01 16:26:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:32 TIME: user.ping 0.23 ms
20.01 16:26:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:34 TIME: user.ping 0.14 ms
20.01 16:26:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:38 TIME: user.ping 0.07 ms
20.01 16:26:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:41 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:41 TIME: user.ping 0.29 ms
20.01 16:26:41 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:43 TIME: user.ping 0.25 ms
20.01 16:26:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:46 TIME: user.ping 0.24 ms
20.01 16:26:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:49 TIME: user.ping 0.36 ms
20.01 16:26:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:51 TIME: user.ping 0.21 ms
20.01 16:26:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:54 TIME: user.ping 0.17 ms
20.01 16:26:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:26:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:26:57 TIME: user.ping 0.13 ms
20.01 16:26:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:02 TIME: user.ping 0.39 ms
20.01 16:27:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:04 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:04 TIME: user.ping 0.24 ms
20.01 16:27:04 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:05 TIME: user.ping 0.33 ms
20.01 16:27:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:08 TIME: user.ping 0.56 ms
20.01 16:27:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:11 TIME: user.ping 0.48 ms
20.01 16:27:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:13 TIME: user.ping 0.24 ms
20.01 16:27:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:16 TIME: user.ping 0.2 ms
20.01 16:27:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:22 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:22 TIME: user.ping 0.17 ms
20.01 16:27:22 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:25 TIME: user.ping 0.22 ms
20.01 16:27:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:26 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:26 TIME: user.ping 0.54 ms
20.01 16:27:26 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:27 TIMER: Check auto-disconnect...
20.01 16:27:27 STATS: vdl.0 cache, locks:6
20.01 16:27:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:27 TIME: user.ping 0.08 ms
20.01 16:27:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:30 TIME: user.ping 0.21 ms
20.01 16:27:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:33 TIME: user.ping 0.21 ms
20.01 16:27:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:35 TIME: user.ping 0.19 ms
20.01 16:27:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:40 TIME: user.ping 0.28 ms
20.01 16:27:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:44 TIME: user.ping 0.19 ms
20.01 16:27:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:47 TIME: user.ping 0.28 ms
20.01 16:27:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:48 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:48 TIME: user.ping 0.18 ms
20.01 16:27:48 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:49 TIME: user.ping 0.23 ms
20.01 16:27:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:52 TIME: user.ping 0.22 ms
20.01 16:27:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:27:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:27:55 TIME: user.ping 0.22 ms
20.01 16:27:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:00 TIME: user.ping 0.39 ms
20.01 16:28:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:04 TIME: user.ping 0.28 ms
20.01 16:28:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:06 TIME: user.ping 0.2 ms
20.01 16:28:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:09 TIME: user.ping 0.09 ms
20.01 16:28:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:10 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:10 TIME: user.ping 0.32 ms
20.01 16:28:10 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:11 TIME: user.ping 0.39 ms
20.01 16:28:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:14 TIME: user.ping 0.18 ms
20.01 16:28:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:20 TIME: user.ping 0.25 ms
20.01 16:28:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:23 TIME: user.ping 0.15 ms
20.01 16:28:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:25 TIME: user.ping 0.26 ms
20.01 16:28:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:27 TIMER: Check auto-disconnect...
20.01 16:28:27 STATS: vdl.0 cache, locks:6
20.01 16:28:28 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:28 TIME: user.ping 0.18 ms
20.01 16:28:28 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:31 TIME: user.ping 0.27 ms
20.01 16:28:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:31 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:31 TIME: user.ping 0.24 ms
20.01 16:28:31 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:34 TIME: user.ping 0.47 ms
20.01 16:28:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:39 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:39 TIME: user.ping 0.26 ms
20.01 16:28:39 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:42 TIME: user.ping 0.2 ms
20.01 16:28:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:45 TIME: user.ping 0.38 ms
20.01 16:28:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:47 TIME: user.ping 0.18 ms
20.01 16:28:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:50 TIME: user.ping 0.23 ms
20.01 16:28:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:52 TIME: user.ping 0.15 ms
20.01 16:28:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:53 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:53 TIME: user.ping 0.17 ms
20.01 16:28:53 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:28:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:28:57 TIME: user.ping 0.08 ms
20.01 16:28:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:01 TIME: user.ping 0.24 ms
20.01 16:29:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:04 TIME: user.ping 0.22 ms
20.01 16:29:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:06 TIME: user.ping 0.21 ms
20.01 16:29:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:09 TIME: user.ping 0.29 ms
20.01 16:29:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:11 TIME: user.ping 0.21 ms
20.01 16:29:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:14 TIME: user.ping 0.24 ms
20.01 16:29:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:14 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:14 TIME: user.ping 0.12 ms
20.01 16:29:14 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:17 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:17 TIME: user.ping 0.31 ms
20.01 16:29:17 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:22 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:22 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:22 TIME: user.ping 0.25 ms
20.01 16:29:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:25 TIME: user.ping 0.24 ms
20.01 16:29:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:27 TIMER: Check auto-disconnect...
20.01 16:29:27 STATS: vdl.0 cache, locks:6
20.01 16:29:28 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:28 TIME: user.ping 0.18 ms
20.01 16:29:28 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:30 TIME: user.ping 0.21 ms
20.01 16:29:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:33 TIME: user.ping 0.23 ms
20.01 16:29:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:35 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:35 TIME: user.ping 0.24 ms
20.01 16:29:35 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:36 TIME: user.ping 0.24 ms
20.01 16:29:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:38 TIME: user.ping 0.25 ms
20.01 16:29:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:41 TIME: user.ping 0.22 ms
20.01 16:29:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:45 TIME: user.ping 0.22 ms
20.01 16:29:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:49 TIME: user.ping 0.26 ms
20.01 16:29:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:51 TIME: user.ping 0.2 ms
20.01 16:29:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:54 TIME: user.ping 0.21 ms
20.01 16:29:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:56 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:56 TIME: user.ping 0.23 ms
20.01 16:29:56 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:57 TIME: user.ping 0.32 ms
20.01 16:29:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:29:59 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:29:59 TIME: user.ping 0.22 ms
20.01 16:29:59 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:02 TIME: user.ping 0.18 ms
20.01 16:30:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:04 TIME: user.ping 0.3 ms
20.01 16:30:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:07 TIME: user.ping 0.29 ms
20.01 16:30:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:10 TIME: user.ping 0.15 ms
20.01 16:30:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:13 TIME: user.ping 0.19 ms
20.01 16:30:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:14 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:14 TIME: user.ping 0.22 ms
20.01 16:30:14 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:18 TIME: user.ping 0.18 ms
20.01 16:30:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:21 TIME: user.ping 0.21 ms
20.01 16:30:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:23 TIME: user.ping 0.13 ms
20.01 16:30:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:26 TIME: user.ping 0.24 ms
20.01 16:30:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:27 TIMER: Check auto-disconnect...
20.01 16:30:27 STATS: vdl.0 cache, locks:6
20.01 16:30:28 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:28 TIME: user.ping 0.23 ms
20.01 16:30:28 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:31 TIME: user.ping 0.29 ms
20.01 16:30:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:34 TIME: user.ping 0.21 ms
20.01 16:30:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:34 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:34 TIME: user.ping 0.11 ms
20.01 16:30:34 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:36 TIME: user.ping 0.18 ms
20.01 16:30:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:39 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:39 TIME: user.ping 0.26 ms
20.01 16:30:39 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:42 TIME: user.ping 0.24 ms
20.01 16:30:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:47 ++ NET: Aimer req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
20.01 16:30:47 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 76 }, _type => vdl/cache.battle.findRandom }
20.01 16:30:47 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
20.01 16:30:47 STATS: vdl.0 cache connection, 67 calls, total 0.0754170417785645 sec spent, avg 1.13 ms
20.01 16:30:47 TIME: battle.find 0.68 ms
20.01 16:30:47 == NET: Aimer ret: battle.find { type => battle.find, errorCode => ok }
20.01 16:30:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:49 TIME: user.ping 0.17 ms
20.01 16:30:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:50 ++ NET: Aimer2 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
20.01 16:30:50 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 163 }, _type => vdl/cache.battle.findRandom }
20.01 16:30:50 -<<-: battle.enemyEvent { data => { name => Aimer2, enemy.id => 76, enemy.name => Aimer, id => 163, enemy.num => 2, battleId => 40, player => 1 }, _isNotify => true, id => 163, _type => battle.enemyEvent }
20.01 16:30:50 -<<-: battle.enemyEvent { data => { name => Aimer, enemy.id => 163, enemy.name => Aimer2, id => 76, enemy.num => 1, battleId => 40, player => 2 }, _isNotify => true, id => 76, _type => battle.enemyEvent }
20.01 16:30:50 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
20.01 16:30:50 TIME: battle.find 10.13 ms
20.01 16:30:50 == NET: Aimer2 ret: battle.find { type => battle.find, errorCode => ok }
20.01 16:30:50 == NET: Aimer2 ret: battle.enemy { data => { name => Aimer2, enemy.id => 76, enemy.name => Aimer, id => 163, enemy.num => 2, battleId => 40, player => 1 }, type => battle.enemy }
20.01 16:30:50 == NET: Aimer ret: battle.enemy { data => { name => Aimer, enemy.id => 163, enemy.name => Aimer2, id => 76, enemy.num => 1, battleId => 40, player => 2 }, type => battle.enemy }
20.01 16:30:51 ++ NET: Aimer2 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
20.01 16:30:51 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 163 }, _type => vdl/cache.battle.findRandom }
20.01 16:30:51 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
20.01 16:30:51 TIME: battle.find 0.71 ms
20.01 16:30:51 == NET: Aimer2 ret: battle.find { type => battle.find, errorCode => ok }
20.01 16:30:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:54 TIME: user.ping 0.35 ms
20.01 16:30:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:30:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:30:57 TIME: user.ping 0.26 ms
20.01 16:30:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:01 TIME: user.ping 0.31 ms
20.01 16:31:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:01 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:01 TIME: user.ping 0.26 ms
20.01 16:31:01 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:04 TIME: user.ping 0.22 ms
20.01 16:31:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:07 TIME: user.ping 0.2 ms
20.01 16:31:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:11 TIME: user.ping 0.37 ms
20.01 16:31:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:18 TIME: user.ping 0.12 ms
20.01 16:31:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:23 TIME: user.ping 0.06 ms
20.01 16:31:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:26 TIME: user.ping 0.23 ms
20.01 16:31:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:27 TIMER: Check auto-disconnect...
20.01 16:31:27 STATS: vdl.0 cache, locks:6
20.01 16:31:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:29 TIME: user.ping 0.26 ms
20.01 16:31:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:32 TIME: user.ping 0.16 ms
20.01 16:31:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:35 TIME: user.ping 0.21 ms
20.01 16:31:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:35 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:35 TIME: user.ping 0.12 ms
20.01 16:31:35 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:38 TIME: user.ping 0.47 ms
20.01 16:31:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:42 TIME: user.ping 0.27 ms
20.01 16:31:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:49 TIME: user.ping 0.19 ms
20.01 16:31:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:52 TIME: user.ping 0.16 ms
20.01 16:31:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:55 TIME: user.ping 0.2 ms
20.01 16:31:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:31:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:31:58 TIME: user.ping 0.19 ms
20.01 16:31:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:32:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:32:01 TIME: user.ping 0.28 ms
20.01 16:32:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:32:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:32:04 TIME: user.ping 0.19 ms
20.01 16:32:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:32:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:32:10 TIME: user.ping 0.12 ms
20.01 16:32:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:32:14 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:32:14 TIME: user.ping 0.23 ms
20.01 16:32:14 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:32:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:32:16 TIME: user.ping 0.16 ms
20.01 16:32:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:32:18 ++ NET: Aimer req: battle.end { type => leaveGame, typeBattle => battle, tournamentId => 0, messageType => battle.end, battleId => 40 }
20.01 16:32:18 ->>-: vdl/cache.battle.infoRoom { roomId => 40, _type => vdl/cache.battle.infoRoom }
20.01 16:32:18 -<<-: vdl/cache.battle.infoRoom { secondId => 76, firstId => 163, _type => vdl/cache.battle.infoRoom, turnId => 76 }
20.01 16:32:18 STATS: vdl.0 cache connection, 70 calls, total 0.0865671634674072 sec spent, avg 1.24 ms
20.01 16:32:18 ->>-: vdl/cache.battle.finishRoom { roomId => 40, _type => vdl/cache.battle.finishRoom }
20.01 16:32:18 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
20.01 16:32:18 TIME: battle.end 1.4 ms
20.01 16:32:18 == NET: Aimer ret: battle.end { type => battle.end, errorCode => ok }
20.01 16:32:18 == NET: Aimer2 ret: battle.leave { type => battle.leave }
20.01 16:32:18 == NET: Aimer ret: battle.leave { type => battle.leave }
20.01 16:38:36 ->>-: core/server.login { host => 172.16.20.171, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.20.171, externalPort => 2030 }
20.01 16:38:36 -<<-: server.login ok
20.01 16:38:36 DB: SELECT * FROM LocalizationStrings
20.01 16:38:36 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 TIMER: Starting timer...
20.01 16:38:36 TIMER: Timer running...
20.01 16:38:36 DB: SELECT * FROM GameVars
20.01 16:38:36 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
20.01 16:38:36 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
20.01 16:38:36 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
20.01 16:38:36 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
20.01 16:38:36 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
20.01 16:38:36 -<<-: core/quest.getDaily ok
20.01 16:38:36 DB: SELECT * FROM UserAttributeTypes
20.01 16:38:36 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 DB: SELECT * FROM UserVariableTypes
20.01 16:38:36 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
20.01 16:38:36 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 DB: SELECT * FROM ItemGroups
20.01 16:38:36 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 DB: SELECT * FROM Bundles ORDER BY ID
20.01 16:38:36 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 DB: SELECT * FROM BundleItems ORDER BY ID
20.01 16:38:36 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 SHOP: loading items...
20.01 16:38:36 ->>-: core/shop.getList { _type => core/shop.getList }
20.01 16:38:36 -<<-: core/shop.getList ok
20.01 16:38:36 SHOP: 0 items loaded (0 sec)
20.01 16:38:36 DB: SELECT * FROM EffectAttributeTypes
20.01 16:38:36 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 DB: SELECT * FROM Effects
20.01 16:38:36 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
20.01 16:38:36 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
20.01 16:38:36 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 DB: SELECT * FROM Badges
20.01 16:38:36 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
20.01 16:38:36 -<<-: core/server.query ok
20.01 16:38:36 NET: Client (conid:12676039) connected to vdl.0 (clients:1)
20.01 16:38:37 NET: Client (name:null conid:12676039 TCP) disconnected from vdl.0 (clients:0)
20.01 16:38:37 NET: Client (conid:1918614) connected to vdl.0 (clients:1)
20.01 16:38:37 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
20.01 16:38:37 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
20.01 16:38:37 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 16:38:37 -<<-: core/server.query ok
20.01 16:38:37 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
20.01 16:38:37 -<<-: core/user.isOnlineID ok
20.01 16:38:37 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
20.01 16:38:37 -<<-: core/cache.get ok
20.01 16:38:37 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
20.01 16:38:37 -<<-: core/cache.get ok
20.01 16:38:37 NET: Client login (conid:1918614, id:76, name:Aimer)
20.01 16:38:37 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:38:37 -<<-: core/user.loginPost null
20.01 16:38:37 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
20.01 16:38:37 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
20.01 16:38:37 ++ NET: Aimer req: user.data { messageType => user.data }
20.01 16:38:37 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
20.01 16:38:37 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:38:37 TIME: user.data 0.32 ms
20.01 16:38:37 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:38:37 NET: Client (conid:65182509) connected to vdl.0 (clients:2)
20.01 16:38:37 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer2, messageType => user.login }
20.01 16:38:37 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer2' AND Password = E'kO2YJdf'
20.01 16:38:37 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer2' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 16:38:37 -<<-: core/server.query { list => {{ name => Aimer2, networkid => , isbanned => false, id => 163 }}, errorCode => ok, _type => core/server.query }
20.01 16:38:37 ->>-: core/user.isOnlineID { id => 163, _type => core/user.isOnlineID }
20.01 16:38:37 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:38:37 ->>-: core/cache.get { type => user, v => -1, id => 163, _type => core/cache.get }
20.01 16:38:37 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer2, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2017-01-20 12:39:54.038596+03, language => en, networkid => , params => { info => { city => , year => , email =>  }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484905194, lastLoginDate => 20, lastLoadDate => 121 }, effects => { list => [] } }}, version => 0, id => 163 } }
20.01 16:38:37 ->>-: core/cache.get { type => questdata, v => -1, id => 163, _type => core/cache.get }
20.01 16:38:37 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 163 } }
20.01 16:38:37 NET: Client login (conid:65182509, id:163, name:Aimer2)
20.01 16:38:37 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 163, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:38:37 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.01 16:38:37 == NET: Aimer ret: user.join { name => Aimer2, type => user.join }
20.01 16:38:37 == NET: Aimer2 ret: user.login { name => Aimer2, type => user.login, errorCode => ok, id => 163 }
20.01 16:38:37 == NET: Aimer2 ret: user.join { name => Aimer, type => user.join }
20.01 16:38:37 == NET: Aimer2 ret: user.join { name => Aimer2, type => user.join }
20.01 16:38:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:38:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:38:37 TIME: user.ping 0.37 ms
20.01 16:38:37 ++ NET: Aimer2 req: user.data { messageType => user.data }
20.01 16:38:37 ->>-: vdl/cache.user.getData { userId => 163, _type => vdl/cache.user.getData, money => 0 }
20.01 16:38:37 -<<-: vdl/cache.user.getData { info => { city => , year => , email =>  }, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.01 16:38:37 TIME: user.data 0.23 ms
20.01 16:38:37 == NET: Aimer2 ret: user.data { info => { city => , year => , email =>  }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.01 16:38:38 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:38:38 TIME: user.ping 0.26 ms
20.01 16:38:38 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:38:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:38:40 TIME: user.ping 0.22 ms
20.01 16:38:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:38:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:38:43 TIME: user.ping 0.2 ms
20.01 16:38:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:38:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:38:45 TIME: user.ping 0.16 ms
20.01 16:38:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:38:46 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
20.01 16:38:46 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:38:46 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 163, _type => core/cache.update }
20.01 16:38:46 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:38:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:38:48 TIME: user.ping 0.21 ms
20.01 16:38:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:38:48 ++ NET: Aimer2 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
20.01 16:38:48 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 163 }, _type => vdl/cache.battle.findRandom }
20.01 16:38:48 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
20.01 16:38:48 TIME: battle.find 0.62 ms
20.01 16:38:48 == NET: Aimer2 ret: battle.find { type => battle.find, errorCode => ok }
20.01 16:38:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:38:51 TIME: user.ping 0.15 ms
20.01 16:38:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:38:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:38:54 TIME: user.ping 0.16 ms
20.01 16:38:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:38:55 ++ NET: Aimer req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
20.01 16:38:55 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 76 }, _type => vdl/cache.battle.findRandom }
20.01 16:38:55 -<<-: battle.enemyEvent { data => { name => Aimer, enemy.id => 163, enemy.name => Aimer2, id => 76, enemy.num => 2, battleId => 41, player => 1 }, _isNotify => true, id => 76, _type => battle.enemyEvent }
20.01 16:38:55 -<<-: battle.enemyEvent { data => { name => Aimer2, enemy.id => 76, enemy.name => Aimer, id => 163, enemy.num => 1, battleId => 41, player => 2 }, _isNotify => true, id => 163, _type => battle.enemyEvent }
20.01 16:38:55 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
20.01 16:38:55 TIME: battle.find 9.67 ms
20.01 16:38:55 == NET: Aimer ret: battle.find { type => battle.find, errorCode => ok }
20.01 16:38:55 == NET: Aimer2 ret: battle.enemy { data => { name => Aimer2, enemy.id => 76, enemy.name => Aimer, id => 163, enemy.num => 1, battleId => 41, player => 2 }, type => battle.enemy }
20.01 16:38:55 == NET: Aimer ret: battle.enemy { data => { name => Aimer, enemy.id => 163, enemy.name => Aimer2, id => 76, enemy.num => 2, battleId => 41, player => 1 }, type => battle.enemy }
20.01 16:39:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:39:00 TIME: user.ping 0.2 ms
20.01 16:39:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:39:07 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:39:07 TIME: user.ping 0.24 ms
20.01 16:39:07 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:39:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:39:08 TIME: user.ping 0.2 ms
20.01 16:39:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:39:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:39:11 TIME: user.ping 0.07 ms
20.01 16:39:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:39:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:39:15 TIME: user.ping 0.23 ms
20.01 16:39:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:39:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:39:19 TIME: user.ping 0.19 ms
20.01 16:39:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:39:22 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:39:22 TIME: user.ping 0.18 ms
20.01 16:39:22 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:39:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:39:26 TIME: user.ping 0.13 ms
20.01 16:39:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:39:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:39:34 TIME: user.ping 0.32 ms
20.01 16:39:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:39:36 TIMER: Check auto-disconnect...
20.01 16:39:36 STATS: vdl.0 cache, locks:4
20.01 16:39:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:39:37 TIME: user.ping 0.19 ms
20.01 16:39:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:39:38 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:39:38 TIME: user.ping 0.14 ms
20.01 16:39:38 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:39:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:39:41 TIME: user.ping 0.09 ms
20.01 16:39:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:39:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:39:44 TIME: user.ping 0.15 ms
20.01 16:39:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:39:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:39:48 TIME: user.ping 0.25 ms
20.01 16:39:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:39:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:39:51 TIME: user.ping 0.11 ms
20.01 16:39:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:39:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:39:57 TIME: user.ping 0.26 ms
20.01 16:39:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:40:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:40:02 TIME: user.ping 0.23 ms
20.01 16:40:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:40:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:40:06 TIME: user.ping 0.1 ms
20.01 16:40:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:40:07 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:40:07 TIME: user.ping 0.23 ms
20.01 16:40:07 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:40:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:40:09 TIME: user.ping 0.13 ms
20.01 16:40:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:40:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:40:12 TIME: user.ping 0.22 ms
20.01 16:40:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:40:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:40:16 TIME: user.ping 0.43 ms
20.01 16:40:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:40:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:40:21 TIME: user.ping 0.08 ms
20.01 16:40:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:40:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:40:27 TIME: user.ping 0.2 ms
20.01 16:40:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:40:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:40:30 TIME: user.ping 0.1 ms
20.01 16:40:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:40:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:40:34 TIME: user.ping 0.22 ms
20.01 16:40:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:40:36 TIMER: Check auto-disconnect...
20.01 16:40:36 STATS: vdl.0 cache, locks:4
20.01 16:40:37 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:40:37 TIME: user.ping 0.08 ms
20.01 16:40:37 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:40:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:40:37 TIME: user.ping 0.19 ms
20.01 16:40:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:40:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:40:41 TIME: user.ping 0.1 ms
20.01 16:40:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:40:50 ->>-: core/server.login { host => 172.16.20.171, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.20.171, externalPort => 2030 }
20.01 16:40:50 -<<-: server.login ok
20.01 16:40:50 DB: SELECT * FROM LocalizationStrings
20.01 16:40:50 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:40:50 TIMER: Starting timer...
20.01 16:40:50 TIMER: Timer running...
20.01 16:40:50 DB: SELECT * FROM GameVars
20.01 16:40:50 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:40:50 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
20.01 16:40:50 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:40:50 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
20.01 16:40:50 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:40:50 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
20.01 16:40:50 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:40:50 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
20.01 16:40:50 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:40:50 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
20.01 16:40:50 -<<-: core/quest.getDaily ok
20.01 16:40:50 DB: SELECT * FROM UserAttributeTypes
20.01 16:40:50 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:40:50 DB: SELECT * FROM UserVariableTypes
20.01 16:40:50 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:40:50 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
20.01 16:40:50 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:40:50 DB: SELECT * FROM ItemGroups
20.01 16:40:50 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:40:50 DB: SELECT * FROM Bundles ORDER BY ID
20.01 16:40:50 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:40:50 DB: SELECT * FROM BundleItems ORDER BY ID
20.01 16:40:50 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:40:50 SHOP: loading items...
20.01 16:40:50 ->>-: core/shop.getList { _type => core/shop.getList }
20.01 16:40:50 -<<-: core/shop.getList ok
20.01 16:40:50 SHOP: 0 items loaded (0 sec)
20.01 16:40:50 DB: SELECT * FROM EffectAttributeTypes
20.01 16:40:50 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:40:50 DB: SELECT * FROM Effects
20.01 16:40:50 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:40:50 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
20.01 16:40:50 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:40:50 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
20.01 16:40:50 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:40:50 DB: SELECT * FROM Badges
20.01 16:40:50 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
20.01 16:40:50 -<<-: core/server.query ok
20.01 16:41:02 NET: Client (conid:48276094) connected to vdl.0 (clients:1)
20.01 16:41:02 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
20.01 16:41:02 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
20.01 16:41:02 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 16:41:02 -<<-: core/server.query ok
20.01 16:41:02 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
20.01 16:41:02 -<<-: core/user.isOnlineID ok
20.01 16:41:02 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
20.01 16:41:02 -<<-: core/cache.get ok
20.01 16:41:02 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
20.01 16:41:02 -<<-: core/cache.get ok
20.01 16:41:02 NET: Client login (conid:48276094, id:76, name:Aimer)
20.01 16:41:02 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:41:02 -<<-: core/user.loginPost null
20.01 16:41:02 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
20.01 16:41:02 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
20.01 16:41:02 ++ NET: Aimer req: user.data { messageType => user.data }
20.01 16:41:02 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
20.01 16:41:02 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:41:02 TIME: user.data 0.24 ms
20.01 16:41:02 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:41:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:41:02 TIME: user.ping 0.1 ms
20.01 16:41:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:41:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:41:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:41:06 TIME: user.ping 0.22 ms
20.01 16:41:11 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
20.01 16:41:11 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:41:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:41:15 TIME: user.ping 0.08 ms
20.01 16:41:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:41:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:41:18 TIME: user.ping 0.11 ms
20.01 16:41:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:41:22 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:41:22 TIME: user.ping 0.14 ms
20.01 16:41:22 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:41:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:41:25 TIME: user.ping 0.18 ms
20.01 16:41:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:41:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:41:29 TIME: user.ping 0.13 ms
20.01 16:41:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:41:32 NET: Client (conid:79966255) connected to vdl.0 (clients:2)
20.01 16:41:32 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer2, messageType => user.login }
20.01 16:41:32 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer2' AND Password = E'kO2YJdf'
20.01 16:41:32 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer2' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 16:41:32 -<<-: core/server.query { list => {{ name => Aimer2, networkid => , isbanned => false, id => 163 }}, errorCode => ok, _type => core/server.query }
20.01 16:41:32 ->>-: core/user.isOnlineID { id => 163, _type => core/user.isOnlineID }
20.01 16:41:32 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:41:32 ->>-: core/cache.get { type => user, v => -1, id => 163, _type => core/cache.get }
20.01 16:41:32 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer2, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2017-01-20 12:39:54.038596+03, language => en, networkid => , params => { info => { city => , year => , email =>  }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484905194, lastLoginDate => 20, lastLoadDate => 121 }, effects => { list => [] } }}, version => 0, id => 163 } }
20.01 16:41:32 ->>-: core/cache.get { type => questdata, v => -1, id => 163, _type => core/cache.get }
20.01 16:41:32 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 163 } }
20.01 16:41:32 NET: Client login (conid:79966255, id:163, name:Aimer2)
20.01 16:41:32 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 163, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:41:32 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.01 16:41:32 == NET: Aimer ret: user.join { name => Aimer2, type => user.join }
20.01 16:41:32 == NET: Aimer2 ret: user.login { name => Aimer2, type => user.login, errorCode => ok, id => 163 }
20.01 16:41:32 == NET: Aimer2 ret: user.join { name => Aimer, type => user.join }
20.01 16:41:32 == NET: Aimer2 ret: user.join { name => Aimer2, type => user.join }
20.01 16:41:32 ++ NET: Aimer2 req: user.data { messageType => user.data }
20.01 16:41:32 ->>-: vdl/cache.user.getData { userId => 163, _type => vdl/cache.user.getData, money => 0 }
20.01 16:41:32 -<<-: vdl/cache.user.getData { info => { city => , year => , email =>  }, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.01 16:41:32 TIME: user.data 0.27 ms
20.01 16:41:32 == NET: Aimer2 ret: user.data { info => { city => , year => , email =>  }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.01 16:41:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:41:32 TIME: user.ping 0.07 ms
20.01 16:41:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:41:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:41:40 TIME: user.ping 0.21 ms
20.01 16:41:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:41:41 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 163, _type => core/cache.update }
20.01 16:41:41 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:41:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:41:44 TIME: user.ping 0.14 ms
20.01 16:41:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:41:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:41:47 TIME: user.ping 0.11 ms
20.01 16:41:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:41:48 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:41:48 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:41:48 TIME: user.ping 0.14 ms
20.01 16:41:50 TIMER: Check auto-disconnect...
20.01 16:41:51 STATS: vdl.0 cache, locks:4
20.01 16:41:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:41:51 TIME: user.ping 0.09 ms
20.01 16:41:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:42:44 ->>-: core/server.login { host => 172.16.20.171, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.20.171, externalPort => 2030 }
20.01 16:42:44 -<<-: server.login ok
20.01 16:42:44 DB: SELECT * FROM LocalizationStrings
20.01 16:42:44 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 TIMER: Starting timer...
20.01 16:42:44 TIMER: Timer running...
20.01 16:42:44 DB: SELECT * FROM GameVars
20.01 16:42:44 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
20.01 16:42:44 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
20.01 16:42:44 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
20.01 16:42:44 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
20.01 16:42:44 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
20.01 16:42:44 -<<-: core/quest.getDaily ok
20.01 16:42:44 DB: SELECT * FROM UserAttributeTypes
20.01 16:42:44 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 DB: SELECT * FROM UserVariableTypes
20.01 16:42:44 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
20.01 16:42:44 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 DB: SELECT * FROM ItemGroups
20.01 16:42:44 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 DB: SELECT * FROM Bundles ORDER BY ID
20.01 16:42:44 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 DB: SELECT * FROM BundleItems ORDER BY ID
20.01 16:42:44 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 SHOP: loading items...
20.01 16:42:44 ->>-: core/shop.getList { _type => core/shop.getList }
20.01 16:42:44 -<<-: core/shop.getList ok
20.01 16:42:44 SHOP: 0 items loaded (0 sec)
20.01 16:42:44 DB: SELECT * FROM EffectAttributeTypes
20.01 16:42:44 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 DB: SELECT * FROM Effects
20.01 16:42:44 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
20.01 16:42:44 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
20.01 16:42:44 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 DB: SELECT * FROM Badges
20.01 16:42:44 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
20.01 16:42:44 -<<-: core/server.query ok
20.01 16:42:44 NET: Client (conid:65377441) connected to vdl.0 (clients:1)
20.01 16:42:45 NET: Client (name:null conid:65377441 TCP) disconnected from vdl.0 (clients:0)
20.01 16:42:45 NET: Client (conid:67495920) connected to vdl.0 (clients:1)
20.01 16:42:45 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
20.01 16:42:45 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
20.01 16:42:45 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 16:42:45 -<<-: core/server.query ok
20.01 16:42:45 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
20.01 16:42:45 -<<-: core/user.isOnlineID ok
20.01 16:42:45 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
20.01 16:42:45 -<<-: core/cache.get ok
20.01 16:42:45 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
20.01 16:42:45 -<<-: core/cache.get ok
20.01 16:42:45 NET: Client login (conid:67495920, id:76, name:Aimer)
20.01 16:42:45 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:42:45 -<<-: core/user.loginPost null
20.01 16:42:45 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
20.01 16:42:45 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
20.01 16:42:45 ++ NET: Aimer req: user.data { messageType => user.data }
20.01 16:42:45 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
20.01 16:42:45 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:42:45 TIME: user.data 0.6 ms
20.01 16:42:45 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:42:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:42:46 TIME: user.ping 0.18 ms
20.01 16:42:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:42:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:42:52 TIME: user.ping 0.22 ms
20.01 16:42:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:42:54 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
20.01 16:42:54 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:42:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:42:55 TIME: user.ping 0.21 ms
20.01 16:42:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:42:57 NET: Client (conid:4125259) connected to vdl.0 (clients:2)
20.01 16:42:57 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer2, messageType => user.login }
20.01 16:42:57 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer2' AND Password = E'kO2YJdf'
20.01 16:42:57 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer2' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 16:42:57 -<<-: core/server.query { list => {{ name => Aimer2, networkid => , isbanned => false, id => 163 }}, errorCode => ok, _type => core/server.query }
20.01 16:42:57 ->>-: core/user.isOnlineID { id => 163, _type => core/user.isOnlineID }
20.01 16:42:57 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:42:57 ->>-: core/cache.get { type => user, v => -1, id => 163, _type => core/cache.get }
20.01 16:42:57 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer2, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2017-01-20 12:39:54.038596+03, language => en, networkid => , params => { info => { city => , year => , email =>  }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484905194, lastLoginDate => 20, lastLoadDate => 121 }, effects => { list => [] } }}, version => 0, id => 163 } }
20.01 16:42:57 ->>-: core/cache.get { type => questdata, v => -1, id => 163, _type => core/cache.get }
20.01 16:42:57 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 163 } }
20.01 16:42:57 NET: Client login (conid:4125259, id:163, name:Aimer2)
20.01 16:42:57 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 163, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:42:57 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.01 16:42:57 == NET: Aimer2 ret: user.login { name => Aimer2, type => user.login, errorCode => ok, id => 163 }
20.01 16:42:57 == NET: Aimer2 ret: user.join { name => Aimer, type => user.join }
20.01 16:42:57 == NET: Aimer ret: user.join { name => Aimer2, type => user.join }
20.01 16:42:57 == NET: Aimer2 ret: user.join { name => Aimer2, type => user.join }
20.01 16:42:57 ++ NET: Aimer2 req: user.data { messageType => user.data }
20.01 16:42:57 ->>-: vdl/cache.user.getData { userId => 163, _type => vdl/cache.user.getData, money => 0 }
20.01 16:42:57 -<<-: vdl/cache.user.getData { info => { city => , year => , email =>  }, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.01 16:42:57 TIME: user.data 0.25 ms
20.01 16:42:57 == NET: Aimer2 ret: user.data { info => { city => , year => , email =>  }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.01 16:42:59 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:42:59 TIME: user.ping 0.18 ms
20.01 16:42:59 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:42:59 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:42:59 TIME: user.ping 0.09 ms
20.01 16:42:59 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:43:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:43:02 TIME: user.ping 0.07 ms
20.01 16:43:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:43:04 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 163, _type => core/cache.update }
20.01 16:43:04 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:43:24 ->>-: core/server.login { host => 172.16.20.171, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.20.171, externalPort => 2030 }
20.01 16:43:24 -<<-: server.login ok
20.01 16:43:24 DB: SELECT * FROM LocalizationStrings
20.01 16:43:24 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 TIMER: Starting timer...
20.01 16:43:24 TIMER: Timer running...
20.01 16:43:24 DB: SELECT * FROM GameVars
20.01 16:43:24 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
20.01 16:43:24 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
20.01 16:43:24 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
20.01 16:43:24 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
20.01 16:43:24 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
20.01 16:43:24 -<<-: core/quest.getDaily ok
20.01 16:43:24 DB: SELECT * FROM UserAttributeTypes
20.01 16:43:24 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 DB: SELECT * FROM UserVariableTypes
20.01 16:43:24 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
20.01 16:43:24 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 DB: SELECT * FROM ItemGroups
20.01 16:43:24 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 DB: SELECT * FROM Bundles ORDER BY ID
20.01 16:43:24 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 DB: SELECT * FROM BundleItems ORDER BY ID
20.01 16:43:24 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 SHOP: loading items...
20.01 16:43:24 ->>-: core/shop.getList { _type => core/shop.getList }
20.01 16:43:24 -<<-: core/shop.getList ok
20.01 16:43:24 SHOP: 0 items loaded (0 sec)
20.01 16:43:24 DB: SELECT * FROM EffectAttributeTypes
20.01 16:43:24 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 DB: SELECT * FROM Effects
20.01 16:43:24 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
20.01 16:43:24 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
20.01 16:43:24 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 DB: SELECT * FROM Badges
20.01 16:43:24 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 NET: Client (conid:39261146) connected to vdl.0 (clients:1)
20.01 16:43:24 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
20.01 16:43:24 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
20.01 16:43:24 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 16:43:24 -<<-: core/server.query ok
20.01 16:43:24 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
20.01 16:43:24 -<<-: core/user.isOnlineID ok
20.01 16:43:24 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
20.01 16:43:24 -<<-: core/cache.get ok
20.01 16:43:24 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
20.01 16:43:24 -<<-: core/cache.get ok
20.01 16:43:24 NET: Client login (conid:39261146, id:76, name:Aimer)
20.01 16:43:24 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:43:24 -<<-: core/user.loginPost null
20.01 16:43:24 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
20.01 16:43:24 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
20.01 16:43:24 ++ NET: Aimer req: user.data { messageType => user.data }
20.01 16:43:24 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
20.01 16:43:24 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:43:24 TIME: user.data 0.42 ms
20.01 16:43:24 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:43:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:43:25 TIME: user.ping 0.11 ms
20.01 16:43:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:43:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:43:29 TIME: user.ping 0.19 ms
20.01 16:43:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:43:34 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
20.01 16:43:34 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:43:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:43:38 TIME: user.ping 0.11 ms
20.01 16:43:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:43:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:43:41 TIME: user.ping 0.2 ms
20.01 16:43:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:43:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:43:44 TIME: user.ping 0.21 ms
20.01 16:43:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:43:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:43:48 TIME: user.ping 0.12 ms
20.01 16:43:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:43:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:43:51 TIME: user.ping 0.22 ms
20.01 16:43:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:43:52 NET: Client (conid:9063307) connected to vdl.0 (clients:2)
20.01 16:43:52 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer2, messageType => user.login }
20.01 16:43:52 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer2' AND Password = E'kO2YJdf'
20.01 16:43:52 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer2' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 16:43:52 -<<-: core/server.query { list => {{ name => Aimer2, networkid => , isbanned => false, id => 163 }}, errorCode => ok, _type => core/server.query }
20.01 16:43:52 ->>-: core/user.isOnlineID { id => 163, _type => core/user.isOnlineID }
20.01 16:43:52 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:43:52 ->>-: core/cache.get { type => user, v => -1, id => 163, _type => core/cache.get }
20.01 16:43:52 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer2, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2017-01-20 12:39:54.038596+03, language => en, networkid => , params => { info => { city => , year => , email =>  }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484905194, lastLoginDate => 20, lastLoadDate => 121 }, effects => { list => [] } }}, version => 0, id => 163 } }
20.01 16:43:52 ->>-: core/cache.get { type => questdata, v => -1, id => 163, _type => core/cache.get }
20.01 16:43:52 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 163 } }
20.01 16:43:52 NET: Client login (conid:9063307, id:163, name:Aimer2)
20.01 16:43:52 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 163, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:43:52 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.01 16:43:52 == NET: Aimer ret: user.join { name => Aimer2, type => user.join }
20.01 16:43:52 == NET: Aimer2 ret: user.login { name => Aimer2, type => user.login, errorCode => ok, id => 163 }
20.01 16:43:52 == NET: Aimer2 ret: user.join { name => Aimer, type => user.join }
20.01 16:43:52 == NET: Aimer2 ret: user.join { name => Aimer2, type => user.join }
20.01 16:43:52 ++ NET: Aimer2 req: user.data { messageType => user.data }
20.01 16:43:52 ->>-: vdl/cache.user.getData { userId => 163, _type => vdl/cache.user.getData, money => 0 }
20.01 16:43:52 -<<-: vdl/cache.user.getData { info => { city => , year => , email =>  }, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.01 16:43:52 TIME: user.data 0.47 ms
20.01 16:43:52 == NET: Aimer2 ret: user.data { info => { city => , year => , email =>  }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.01 16:43:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:43:55 TIME: user.ping 0.23 ms
20.01 16:43:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:43:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:43:58 TIME: user.ping 0.14 ms
20.01 16:43:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:43:59 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 163, _type => core/cache.update }
20.01 16:43:59 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:44:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:44:06 TIME: user.ping 0.22 ms
20.01 16:44:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:44:08 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:44:08 TIME: user.ping 0.17 ms
20.01 16:44:08 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:44:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:44:09 TIME: user.ping 0.1 ms
20.01 16:44:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:44:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:44:13 TIME: user.ping 0.17 ms
20.01 16:44:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:44:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:44:16 TIME: user.ping 0.22 ms
20.01 16:44:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:44:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:44:20 TIME: user.ping 0.15 ms
20.01 16:44:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:44:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:44:23 TIME: user.ping 0.2 ms
20.01 16:44:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:44:24 TIMER: Check auto-disconnect...
20.01 16:44:24 STATS: vdl.0 cache, locks:4
20.01 16:44:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:44:31 TIME: user.ping 0.08 ms
20.01 16:44:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:44:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:44:34 TIME: user.ping 0.2 ms
20.01 16:44:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:44:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:44:38 TIME: user.ping 0.19 ms
20.01 16:44:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:44:39 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:44:39 TIME: user.ping 0.15 ms
20.01 16:44:39 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:44:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:44:41 TIME: user.ping 0.16 ms
20.01 16:44:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:44:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:44:45 TIME: user.ping 0.14 ms
20.01 16:44:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:44:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:44:48 TIME: user.ping 0.24 ms
20.01 16:44:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:44:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:44:56 TIME: user.ping 0.44 ms
20.01 16:44:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:44:59 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:44:59 TIME: user.ping 0.08 ms
20.01 16:44:59 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:45:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:45:03 TIME: user.ping 0.17 ms
20.01 16:45:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:45:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:45:06 TIME: user.ping 0.18 ms
20.01 16:45:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:45:09 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:45:09 TIME: user.ping 0.24 ms
20.01 16:45:09 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:45:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:45:10 TIME: user.ping 0.12 ms
20.01 16:45:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:45:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:45:13 TIME: user.ping 0.14 ms
20.01 16:45:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:45:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:45:19 TIME: user.ping 0.08 ms
20.01 16:45:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:45:24 TIMER: Check auto-disconnect...
20.01 16:45:24 STATS: vdl.0 cache, locks:4
20.01 16:45:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:45:25 TIME: user.ping 0.17 ms
20.01 16:45:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:45:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:45:31 TIME: user.ping 0.21 ms
20.01 16:45:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:45:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:45:41 TIME: user.ping 0.27 ms
20.01 16:45:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:45:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:45:46 TIME: user.ping 0.19 ms
20.01 16:45:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:45:49 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:45:49 TIME: user.ping 0.08 ms
20.01 16:45:49 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:45:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:45:49 TIME: user.ping 0.09 ms
20.01 16:45:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:45:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:45:53 TIME: user.ping 0.18 ms
20.01 16:45:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:45:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:45:56 TIME: user.ping 0.11 ms
20.01 16:45:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:46:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:46:00 TIME: user.ping 0.24 ms
20.01 16:46:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:46:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:46:05 TIME: user.ping 0.28 ms
20.01 16:46:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:46:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:46:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:46:11 TIME: user.ping 0.17 ms
20.01 16:46:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:46:14 TIME: user.ping 0.15 ms
20.01 16:46:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:46:17 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:46:17 TIME: user.ping 0.29 ms
20.01 16:46:17 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:46:20 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:46:20 TIME: user.ping 0.19 ms
20.01 16:46:20 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:46:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:46:21 TIME: user.ping 0.17 ms
20.01 16:46:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:46:24 TIMER: Check auto-disconnect...
20.01 16:46:24 STATS: vdl.0 cache, locks:4
20.01 16:46:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:46:24 TIME: user.ping 0.12 ms
20.01 16:46:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:46:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:46:32 TIME: user.ping 0.2 ms
20.01 16:46:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:46:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:46:35 TIME: user.ping 0.13 ms
20.01 16:46:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:46:39 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:46:39 TIME: user.ping 0.23 ms
20.01 16:46:39 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:46:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:46:42 TIME: user.ping 0.21 ms
20.01 16:46:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:46:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:46:46 TIME: user.ping 0.24 ms
20.01 16:46:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:46:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:46:49 TIME: user.ping 0.07 ms
20.01 16:46:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:46:50 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:46:50 TIME: user.ping 0.26 ms
20.01 16:46:50 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:46:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:46:53 TIME: user.ping 0.13 ms
20.01 16:46:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:47:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:47:01 TIME: user.ping 0.17 ms
20.01 16:47:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:47:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:47:04 TIME: user.ping 0.16 ms
20.01 16:47:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:47:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:47:08 TIME: user.ping 0.17 ms
20.01 16:47:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:47:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:47:11 TIME: user.ping 0.17 ms
20.01 16:47:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:47:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:47:14 TIME: user.ping 0.22 ms
20.01 16:47:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:47:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:47:18 TIME: user.ping 0.07 ms
20.01 16:47:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:47:24 TIMER: Check auto-disconnect...
20.01 16:47:24 STATS: vdl.0 cache, locks:4
20.01 16:47:24 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:47:24 TIME: user.ping 0.08 ms
20.01 16:47:24 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:47:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:47:25 TIME: user.ping 0.22 ms
20.01 16:47:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:47:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:47:29 TIME: user.ping 0.12 ms
20.01 16:47:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:47:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:47:32 TIME: user.ping 0.29 ms
20.01 16:47:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:47:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:47:36 TIME: user.ping 0.27 ms
20.01 16:47:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:47:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:47:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:47:40 TIME: user.ping 0.07 ms
20.01 16:47:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:47:48 TIME: user.ping 0.14 ms
20.01 16:47:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:47:52 ++ NET: Aimer2 req: battle.message { messageType => battle.message, message => dsasdas, battleId => 41 }
20.01 16:47:52 ->>-: vdl/cache.battle.infoRoom { roomId => 41, _type => vdl/cache.battle.infoRoom }
20.01 16:47:52 -<<-: vdl/cache.battle.infoRoom { secondId => 163, firstId => 76, _type => vdl/cache.battle.infoRoom, turnId => 76 }
20.01 16:47:52 STATS: vdl.0 cache connection, 35 calls, total 0.0361671447753906 sec spent, avg 1.03 ms
20.01 16:47:52 TIME: battle.message 0.84 ms
20.01 16:47:52 == NET: Aimer ret: battle.message { type => battle.message, message => dsasdas, player => 2 }
20.01 16:47:52 == NET: Aimer2 ret: battle.message { type => battle.message, errorCode => ok }
20.01 16:47:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:47:52 TIME: user.ping 0.09 ms
20.01 16:47:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:47:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:47:56 TIME: user.ping 0.1 ms
20.01 16:47:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:47:59 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:47:59 TIME: user.ping 0.2 ms
20.01 16:47:59 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:48:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:48:00 TIME: user.ping 0.11 ms
20.01 16:48:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:48:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:48:04 TIME: user.ping 0.11 ms
20.01 16:48:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:48:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:48:12 TIME: user.ping 0.21 ms
20.01 16:48:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:48:38 ->>-: core/server.login { host => 172.16.20.171, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.20.171, externalPort => 2030 }
20.01 16:48:38 -<<-: server.login ok
20.01 16:48:38 DB: SELECT * FROM LocalizationStrings
20.01 16:48:38 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:38 TIMER: Starting timer...
20.01 16:48:38 TIMER: Timer running...
20.01 16:48:38 DB: SELECT * FROM GameVars
20.01 16:48:38 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:38 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
20.01 16:48:38 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:38 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
20.01 16:48:38 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:38 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
20.01 16:48:38 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:38 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
20.01 16:48:38 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:38 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
20.01 16:48:38 -<<-: core/quest.getDaily ok
20.01 16:48:38 DB: SELECT * FROM UserAttributeTypes
20.01 16:48:38 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:38 DB: SELECT * FROM UserVariableTypes
20.01 16:48:38 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:38 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
20.01 16:48:38 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:38 DB: SELECT * FROM ItemGroups
20.01 16:48:38 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:38 DB: SELECT * FROM Bundles ORDER BY ID
20.01 16:48:38 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:38 DB: SELECT * FROM BundleItems ORDER BY ID
20.01 16:48:38 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:38 SHOP: loading items...
20.01 16:48:38 ->>-: core/shop.getList { _type => core/shop.getList }
20.01 16:48:38 -<<-: core/shop.getList ok
20.01 16:48:38 SHOP: 0 items loaded (0 sec)
20.01 16:48:38 DB: SELECT * FROM EffectAttributeTypes
20.01 16:48:38 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:38 DB: SELECT * FROM Effects
20.01 16:48:38 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:38 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
20.01 16:48:38 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:38 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
20.01 16:48:38 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:38 DB: SELECT * FROM Badges
20.01 16:48:38 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
20.01 16:48:38 -<<-: core/server.query ok
20.01 16:48:39 NET: Client (conid:63365049) connected to vdl.0 (clients:1)
20.01 16:48:39 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
20.01 16:48:39 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
20.01 16:48:39 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 16:48:39 -<<-: core/server.query ok
20.01 16:48:39 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
20.01 16:48:39 -<<-: core/user.isOnlineID ok
20.01 16:48:39 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
20.01 16:48:39 -<<-: core/cache.get ok
20.01 16:48:39 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
20.01 16:48:39 -<<-: core/cache.get ok
20.01 16:48:39 NET: Client login (conid:63365049, id:76, name:Aimer)
20.01 16:48:39 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:48:39 -<<-: core/user.loginPost null
20.01 16:48:39 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
20.01 16:48:39 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
20.01 16:48:39 ++ NET: Aimer req: user.data { messageType => user.data }
20.01 16:48:39 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
20.01 16:48:39 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:48:39 TIME: user.data 0.3 ms
20.01 16:48:39 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
20.01 16:48:39 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:48:39 TIME: user.ping 0.06 ms
20.01 16:48:39 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:48:43 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:48:43 TIME: user.ping 0.17 ms
20.01 16:48:43 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:48:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:48:47 TIME: user.ping 0.2 ms
20.01 16:48:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:48:48 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
20.01 16:48:48 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:48:52 NET: Client (conid:19560936) connected to vdl.0 (clients:2)
20.01 16:48:52 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer2, messageType => user.login }
20.01 16:48:52 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer2' AND Password = E'kO2YJdf'
20.01 16:48:52 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer2' AND Password = E'kO2YJdf', _type => core/server.query }
20.01 16:48:52 -<<-: core/server.query { list => {{ name => Aimer2, networkid => , isbanned => false, id => 163 }}, errorCode => ok, _type => core/server.query }
20.01 16:48:52 ->>-: core/user.isOnlineID { id => 163, _type => core/user.isOnlineID }
20.01 16:48:52 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
20.01 16:48:52 ->>-: core/cache.get { type => user, v => -1, id => 163, _type => core/cache.get }
20.01 16:48:52 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer2, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2017-01-20 12:39:54.038596+03, language => en, networkid => , params => { info => { city => , year => , email =>  }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484905194, lastLoginDate => 20, lastLoadDate => 121 }, effects => { list => [] } }}, version => 0, id => 163 } }
20.01 16:48:52 ->>-: core/cache.get { type => questdata, v => -1, id => 163, _type => core/cache.get }
20.01 16:48:52 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 163 } }
20.01 16:48:52 NET: Client login (conid:19560936, id:163, name:Aimer2)
20.01 16:48:52 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 163, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
20.01 16:48:52 -<<-: core/user.loginPost { _type => core/user.loginPost }
20.01 16:48:52 == NET: Aimer2 ret: user.login { name => Aimer2, type => user.login, errorCode => ok, id => 163 }
20.01 16:48:52 == NET: Aimer ret: user.join { name => Aimer2, type => user.join }
20.01 16:48:52 == NET: Aimer2 ret: user.join { name => Aimer, type => user.join }
20.01 16:48:52 == NET: Aimer2 ret: user.join { name => Aimer2, type => user.join }
20.01 16:48:52 ++ NET: Aimer2 req: user.data { messageType => user.data }
20.01 16:48:52 ->>-: vdl/cache.user.getData { userId => 163, _type => vdl/cache.user.getData, money => 0 }
20.01 16:48:52 -<<-: vdl/cache.user.getData { info => { city => , year => , email =>  }, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.01 16:48:52 TIME: user.data 0.69 ms
20.01 16:48:52 == NET: Aimer2 ret: user.data { info => { city => , year => , email =>  }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 0 }
20.01 16:48:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:48:55 TIME: user.ping 0.23 ms
20.01 16:48:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:48:58 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 163, _type => core/cache.update }
20.01 16:48:58 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
20.01 16:49:00 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:49:00 TIME: user.ping 0.16 ms
20.01 16:49:00 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:49:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:49:04 TIME: user.ping 0.25 ms
20.01 16:49:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:49:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:49:08 TIME: user.ping 0.11 ms
20.01 16:49:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:49:09 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:49:09 TIME: user.ping 0.2 ms
20.01 16:49:09 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:49:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:49:12 TIME: user.ping 0.28 ms
20.01 16:49:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:49:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:49:21 TIME: user.ping 0.18 ms
20.01 16:49:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:49:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:49:25 TIME: user.ping 0.17 ms
20.01 16:49:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:49:29 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:49:29 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:49:29 TIME: user.ping 0.09 ms
20.01 16:49:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:49:32 TIME: user.ping 0.15 ms
20.01 16:49:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:49:36 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:49:36 TIME: user.ping 0.14 ms
20.01 16:49:36 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:49:38 TIMER: Check auto-disconnect...
20.01 16:49:38 STATS: vdl.0 cache, locks:4
20.01 16:49:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:49:44 TIME: user.ping 0.27 ms
20.01 16:49:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:49:48 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:49:48 TIME: user.ping 0.22 ms
20.01 16:49:48 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:49:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:49:48 TIME: user.ping 0.24 ms
20.01 16:49:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:49:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:49:52 TIME: user.ping 0.12 ms
20.01 16:49:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:49:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:49:56 TIME: user.ping 0.18 ms
20.01 16:49:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:50:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:50:02 TIME: user.ping 0.15 ms
20.01 16:50:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:50:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:50:10 TIME: user.ping 0.16 ms
20.01 16:50:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:50:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:50:14 TIME: user.ping 0.22 ms
20.01 16:50:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:50:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:50:18 TIME: user.ping 0.19 ms
20.01 16:50:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:50:21 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:50:21 TIME: user.ping 0.33 ms
20.01 16:50:21 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:50:22 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:50:22 TIME: user.ping 0.27 ms
20.01 16:50:22 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:50:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:50:26 TIME: user.ping 0.22 ms
20.01 16:50:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:50:33 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:50:33 TIME: user.ping 0.13 ms
20.01 16:50:33 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:50:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:50:37 TIME: user.ping 0.21 ms
20.01 16:50:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:50:38 TIMER: Check auto-disconnect...
20.01 16:50:38 STATS: vdl.0 cache, locks:4
20.01 16:50:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:50:41 TIME: user.ping 0.17 ms
20.01 16:50:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:50:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:50:44 TIME: user.ping 0.15 ms
20.01 16:50:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:50:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:50:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:50:48 TIME: user.ping 0.07 ms
20.01 16:50:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:50:51 TIME: user.ping 0.12 ms
20.01 16:50:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:50:54 ++ NET: Aimer2 req: user.ping { messageType => user.ping, msg => ok }
20.01 16:50:54 TIME: user.ping 0.09 ms
20.01 16:50:54 == NET: Aimer2 ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:50:55 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:50:55 TIME: user.ping 0.1 ms
20.01 16:50:55 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:51:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:51:01 TIME: user.ping 0.17 ms
20.01 16:51:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:51:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:51:04 TIME: user.ping 0.19 ms
20.01 16:51:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:51:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:51:08 TIME: user.ping 0.15 ms
20.01 16:51:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:51:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:51:11 TIME: user.ping 0.14 ms
20.01 16:51:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:51:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:51:14 TIME: user.ping 0.12 ms
20.01 16:51:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
20.01 16:51:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
20.01 16:51:18 TIME: user.ping 0.08 ms
20.01 16:51:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
