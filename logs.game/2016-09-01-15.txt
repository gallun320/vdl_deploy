01.09 15:01:06 NET: Client (conid:49980566) connected to vdl.0 (clients:1)
01.09 15:01:19 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
01.09 15:01:19 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
01.09 15:01:19 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
01.09 15:01:19 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
01.09 15:01:19 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
01.09 15:01:19 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
01.09 15:01:19 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
01.09 15:01:19 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472654256, lastLoginDate => 245, lastLoadDate => 902 }, effects => { list => [] } }}, version => 0, id => 2 } }
01.09 15:01:19 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
01.09 15:01:19 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
01.09 15:01:19 NET: Client login (conid:49980566, id:2, name:test1)
01.09 15:01:19 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
01.09 15:01:19 -<<-: core/user.loginPost { _type => core/user.loginPost }
01.09 15:01:19 ++ NET: test1 req: battle.find { messageType => battle.find }
01.09 15:01:19 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
01.09 15:01:19 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
01.09 15:01:19 == NET: test1 ret: user.join { name => test1, type => user.join }
01.09 15:01:19 -<<-: vdl/cache.battle.find { list => [{ id => 6 }], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
01.09 15:01:19 ->>-: vdl/cache.battle.join { roomId => { id => 6 }, selfId => 2, _type => vdl/cache.battle.join }
01.09 15:01:19 -<<-: vdl/cache.battle.join { errorCode => true, _type => vdl/cache.battle.join, player => 2 }
01.09 15:01:19 TIME: battle.find 3.97 ms
01.09 15:01:19 == NET: test1 ret: battle.find { type => battle.find, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
01.09 15:01:25 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
01.09 15:01:25 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 15:01:50 TIMER: Check auto-disconnect...
01.09 15:01:50 STATS: vdl.0 cache, locks:2
01.09 15:01:50 TIMER: Check auto-disconnect...
01.09 15:01:50 STATS: vdl.0 cache, locks:2
01.09 15:03:21 NET: Client (conid:58757758) connected to vdl.0 (clients:2)
01.09 15:03:50 TIMER: Check auto-disconnect...
01.09 15:03:50 STATS: vdl.0 cache, locks:2
01.09 15:03:50 TIMER: Check auto-disconnect...
01.09 15:03:50 NET: Client (name:test1 conid:49980566 TCP) disconnected from vdl.0 (clients:1)
01.09 15:03:50 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
01.09 15:03:50 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
01.09 15:03:50 STATS: vdl.0 cache connection, 40 calls, total 0.0861291885375977 sec spent, avg 2.15 ms
01.09 15:03:50 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
01.09 15:03:50 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 15:03:50 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
01.09 15:03:50 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
01.09 15:03:50 STATS: vdl.0 cache, locks:0
01.09 15:04:51 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
01.09 15:04:51 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
01.09 15:04:51 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
01.09 15:04:51 -<<-: core/server.query { list => {{ name => test2, networkid => , isbanned => false, id => 3 }}, errorCode => ok, _type => core/server.query }
01.09 15:04:51 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
01.09 15:04:51 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
01.09 15:04:51 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
01.09 15:04:51 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test2, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472651424, lastLoginDate => 245, lastLoadDate => 902 }, effects => { list => [] } }}, version => 0, id => 3 } }
01.09 15:04:51 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
01.09 15:04:51 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 3 } }
01.09 15:04:51 NET: Client login (conid:58757758, id:3, name:test2)
01.09 15:04:51 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
01.09 15:04:51 -<<-: core/user.loginPost { _type => core/user.loginPost }
01.09 15:04:51 ++ NET: test2 req: battle.find { messageType => battle.find }
01.09 15:04:51 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
01.09 15:04:51 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
01.09 15:04:51 == NET: test2 ret: user.join { name => test2, type => user.join }
01.09 15:04:51 -<<-: vdl/cache.battle.find { list => [{ id => 6 }], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
01.09 15:04:51 ->>-: vdl/cache.battle.join { roomId => { id => 6 }, selfId => 3, _type => vdl/cache.battle.join }
01.09 15:04:52 -<<-: vdl/cache.battle.join { errorCode => true, _type => vdl/cache.battle.join, player => 2 }
01.09 15:04:52 TIME: battle.find 3.79 ms
01.09 15:04:52 == NET: test2 ret: battle.find { type => battle.find, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
01.09 15:05:00 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 3, _type => core/cache.update }
01.09 15:05:00 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 15:05:37 NET: Client (name:test2 conid:58757758 TCP) disconnected from vdl.0 (clients:0)
01.09 15:05:37 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 3, _type => core/cache.update }
01.09 15:05:37 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
01.09 15:05:37 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 3, _type => core/cache.update }
01.09 15:05:37 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 15:05:37 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 3, _type => core/user.logoutPost }
01.09 15:05:37 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
01.09 15:05:41 NET: Client (conid:18974480) connected to vdl.0 (clients:1)
01.09 15:05:43 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
01.09 15:05:43 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
01.09 15:05:43 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
01.09 15:05:43 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
01.09 15:05:43 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
01.09 15:05:43 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
01.09 15:05:43 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
01.09 15:05:43 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472654256, lastLoginDate => 245, lastLoadDate => 902 }, effects => { list => [] } }}, version => 0, id => 2 } }
01.09 15:05:43 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
01.09 15:05:43 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
01.09 15:05:43 NET: Client login (conid:18974480, id:2, name:test1)
01.09 15:05:43 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
01.09 15:05:43 -<<-: core/user.loginPost { _type => core/user.loginPost }
01.09 15:05:43 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
01.09 15:05:43 ++ NET: test1 req: battle.find { messageType => battle.find }
01.09 15:05:43 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
01.09 15:05:43 == NET: test1 ret: user.join { name => test1, type => user.join }
01.09 15:05:43 -<<-: vdl/cache.battle.find { list => [{ id => 6 }], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
01.09 15:05:43 ->>-: vdl/cache.battle.join { roomId => { id => 6 }, selfId => 2, _type => vdl/cache.battle.join }
01.09 15:05:43 -<<-: vdl/cache.battle.join { errorCode => true, _type => vdl/cache.battle.join, player => 2 }
01.09 15:05:43 TIME: battle.find 3.72 ms
01.09 15:05:43 == NET: test1 ret: battle.find { type => battle.find, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
01.09 15:05:50 TIMER: Check auto-disconnect...
01.09 15:05:50 STATS: vdl.0 cache, locks:2
01.09 15:05:50 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
01.09 15:05:50 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 15:05:50 STATS: vdl.0 cache connection, 61 calls, total 0.109787940979004 sec spent, avg 1.8 ms
01.09 15:05:50 TIMER: Check auto-disconnect...
01.09 15:05:50 STATS: vdl.0 cache, locks:2
01.09 15:05:50 TIMER: Check auto-disconnect...
01.09 15:05:50 STATS: vdl.0 cache, locks:2
01.09 15:05:50 TIMER: Check auto-disconnect...
01.09 15:05:50 NET: Client (name:test1 conid:18974480 TCP) disconnected from vdl.0 (clients:0)
01.09 15:05:50 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 2, _type => core/cache.update }
01.09 15:05:50 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
01.09 15:05:50 STATS: vdl.0 cache connection, 62 calls, total 0.110800981521606 sec spent, avg 1.79 ms
01.09 15:05:50 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 2, _type => core/cache.update }
01.09 15:05:50 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 15:05:50 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 2, _type => core/user.logoutPost }
01.09 15:05:50 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
01.09 15:05:50 STATS: vdl.0 cache, locks:0
01.09 15:05:50 TIMER: Check auto-disconnect...
01.09 15:05:50 STATS: vdl.0 cache, locks:0
01.09 15:05:50 TIMER: Check auto-disconnect...
01.09 15:05:50 STATS: vdl.0 cache, locks:0
01.09 15:11:15 NET: Client (conid:98194026) connected to vdl.0 (clients:1)
01.09 15:11:50 TIMER: Check auto-disconnect...
01.09 15:11:50 STATS: vdl.0 cache, locks:0
01.09 15:11:50 TIMER: Check auto-disconnect...
01.09 15:11:50 STATS: vdl.0 cache, locks:0
01.09 15:14:22 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
01.09 15:14:22 -<<-: server.login ok
01.09 15:14:22 DB: SELECT * FROM LocalizationStrings
01.09 15:14:22 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 TIMER: Starting timer...
01.09 15:14:22 TIMER: Timer running...
01.09 15:14:22 DB: SELECT * FROM GameVars
01.09 15:14:22 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.09 15:14:22 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.09 15:14:22 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.09 15:14:22 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.09 15:14:22 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.09 15:14:22 -<<-: core/quest.getDaily ok
01.09 15:14:22 DB: SELECT * FROM UserAttributeTypes
01.09 15:14:22 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 DB: SELECT * FROM UserVariableTypes
01.09 15:14:22 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.09 15:14:22 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 DB: SELECT * FROM ItemGroups
01.09 15:14:22 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 DB: SELECT * FROM Bundles ORDER BY ID
01.09 15:14:22 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 DB: SELECT * FROM BundleItems ORDER BY ID
01.09 15:14:22 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 SHOP: loading items...
01.09 15:14:22 ->>-: core/shop.getList { _type => core/shop.getList }
01.09 15:14:22 -<<-: core/shop.getList ok
01.09 15:14:22 SHOP: 0 items loaded (0 sec)
01.09 15:14:22 DB: SELECT * FROM EffectAttributeTypes
01.09 15:14:22 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 DB: SELECT * FROM Effects
01.09 15:14:22 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
01.09 15:14:22 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
01.09 15:14:22 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 DB: SELECT * FROM Badges
01.09 15:14:22 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
01.09 15:14:22 -<<-: core/server.query ok
01.09 15:14:22 TIMER: Check auto-disconnect...
01.09 15:14:22 STATS: vdl.0 cache, locks:0
01.09 15:14:22 TIMER: Check auto-disconnect...
01.09 15:14:22 STATS: vdl.0 cache, locks:0
01.09 15:17:21 NET: Client (conid:69090646) connected to vdl.0 (clients:1)
01.09 15:17:22 TIMER: Check auto-disconnect...
01.09 15:17:22 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
01.09 15:17:22 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
01.09 15:17:22 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
01.09 15:17:22 -<<-: core/server.query ok
01.09 15:17:22 STATS: vdl.0 cache connection, 21 calls, total 0.0236384868621826 sec spent, avg 1.13 ms
01.09 15:17:22 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
01.09 15:17:22 -<<-: core/user.isOnlineID ok
01.09 15:17:22 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
01.09 15:17:22 -<<-: core/cache.get ok
01.09 15:17:22 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
01.09 15:17:22 -<<-: core/cache.get ok
01.09 15:17:22 NET: Client login (conid:69090646, id:2, name:test1)
01.09 15:17:22 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
01.09 15:17:22 -<<-: core/user.loginPost null
01.09 15:17:22 ++ NET: test1 req: battle.find { messageType => battle.find }
01.09 15:17:22 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
01.09 15:17:22 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
01.09 15:17:22 == NET: test1 ret: user.join { name => test1, type => user.join }
01.09 15:17:22 -<<-: vdl/cache.battle.find { list => [6], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
01.09 15:17:22 ->>-: vdl/cache.battle.join { roomId => 6, selfId => 2, _type => vdl/cache.battle.join }
01.09 15:17:22 -<<-: vdl/cache.battle.join { errorCode => _requestException, _type => vdl/cache.battle.join }
01.09 15:17:22 TRACE: battle.find : cacheRequest exception { roomId => 6, selfId => 2, _type => vdl/cache.battle.join }
01.09 15:17:22 TRACE: battle.find : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 108
Called from modules/VDLBattleModule.hx line 70
Called from modules/VDLBattleModule.hx line 40
Called from modules/VDLBattleModule.hx line 31
Called from snipe/slave/Server.hx line 1176
01.09 15:17:22 STATS: vdl.0 cache, locks:2
01.09 15:18:12 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
01.09 15:18:12 -<<-: server.login ok
01.09 15:18:12 DB: SELECT * FROM LocalizationStrings
01.09 15:18:12 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:12 TIMER: Starting timer...
01.09 15:18:12 DB: SELECT * FROM GameVars
01.09 15:18:12 TIMER: Timer running...
01.09 15:18:12 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:12 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.09 15:18:12 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:12 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.09 15:18:12 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:12 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.09 15:18:12 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:12 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.09 15:18:12 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:12 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.09 15:18:12 -<<-: core/quest.getDaily ok
01.09 15:18:12 DB: SELECT * FROM UserAttributeTypes
01.09 15:18:12 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:12 DB: SELECT * FROM UserVariableTypes
01.09 15:18:12 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:12 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.09 15:18:12 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:12 DB: SELECT * FROM ItemGroups
01.09 15:18:12 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:12 DB: SELECT * FROM Bundles ORDER BY ID
01.09 15:18:12 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:12 DB: SELECT * FROM BundleItems ORDER BY ID
01.09 15:18:12 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:12 SHOP: loading items...
01.09 15:18:12 ->>-: core/shop.getList { _type => core/shop.getList }
01.09 15:18:12 -<<-: core/shop.getList ok
01.09 15:18:12 SHOP: 0 items loaded (0 sec)
01.09 15:18:12 DB: SELECT * FROM EffectAttributeTypes
01.09 15:18:12 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:12 DB: SELECT * FROM Effects
01.09 15:18:12 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:12 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
01.09 15:18:12 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:12 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
01.09 15:18:12 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:12 DB: SELECT * FROM Badges
01.09 15:18:12 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
01.09 15:18:12 -<<-: core/server.query ok
01.09 15:18:59 NET: Client (conid:6470223) connected to vdl.0 (clients:1)
01.09 15:19:01 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
01.09 15:19:01 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
01.09 15:19:01 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
01.09 15:19:01 -<<-: core/server.query ok
01.09 15:19:01 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
01.09 15:19:01 -<<-: core/user.isOnlineID ok
01.09 15:19:01 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
01.09 15:19:01 -<<-: core/cache.get ok
01.09 15:19:01 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
01.09 15:19:01 -<<-: core/cache.get ok
01.09 15:19:01 NET: Client login (conid:6470223, id:2, name:test1)
01.09 15:19:01 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
01.09 15:19:01 -<<-: core/user.loginPost null
01.09 15:19:01 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
01.09 15:19:01 == NET: test1 ret: user.join { name => test1, type => user.join }
01.09 15:19:01 ++ NET: test1 req: battle.find { messageType => battle.find }
01.09 15:19:01 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
01.09 15:19:01 -<<-: vdl/cache.battle.find { list => {}, count => 0, errorCode => not, _type => vdl/cache.battle.find }
01.09 15:19:01 ->>-: vdl/cache.battle.create { selfId => 2, _type => vdl/cache.battle.create }
01.09 15:19:01 -<<-: vdl/cache.battle.create { errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
01.09 15:19:01 TIME: battle.find 39.23 ms
01.09 15:19:01 == NET: test1 ret: battle.find { type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
01.09 15:19:07 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
01.09 15:19:07 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 15:19:12 TIMER: Check auto-disconnect...
01.09 15:19:12 STATS: vdl.0 cache, locks:2
01.09 15:19:48 NET: Client (conid:41852958) connected to vdl.0 (clients:2)
01.09 15:19:59 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
01.09 15:19:59 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
01.09 15:19:59 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
01.09 15:19:59 -<<-: core/server.query { list => {{ name => test2, networkid => , isbanned => false, id => 3 }}, errorCode => ok, _type => core/server.query }
01.09 15:19:59 STATS: vdl.0 cache connection, 29 calls, total 0.0697262287139893 sec spent, avg 2.4 ms
01.09 15:19:59 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
01.09 15:19:59 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
01.09 15:19:59 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
01.09 15:19:59 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test2, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:48:03.859813+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472651424, lastLoginDate => 245, lastLoadDate => 902 }, effects => { list => [] } }}, version => 0, id => 3 } }
01.09 15:19:59 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
01.09 15:19:59 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 3 } }
01.09 15:19:59 NET: Client login (conid:41852958, id:3, name:test2)
01.09 15:19:59 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
01.09 15:19:59 -<<-: core/user.loginPost { _type => core/user.loginPost }
01.09 15:19:59 == NET: test1 ret: user.join { name => test2, type => user.join }
01.09 15:19:59 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
01.09 15:19:59 ++ NET: test2 req: battle.find { messageType => battle.find }
01.09 15:19:59 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
01.09 15:19:59 == NET: test2 ret: user.join { name => test1, type => user.join }
01.09 15:19:59 == NET: test2 ret: user.join { name => test2, type => user.join }
01.09 15:19:59 -<<-: vdl/cache.battle.find { list => [7], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
01.09 15:19:59 ->>-: vdl/cache.battle.join { roomId => 7, selfId => 3, _type => vdl/cache.battle.join }
01.09 15:19:59 -<<-: vdl/cache.battle.join { errorCode => true, _type => vdl/cache.battle.join, player => 2 }
01.09 15:19:59 TIME: battle.find 3.04 ms
01.09 15:19:59 == NET: test2 ret: battle.find { type => battle.find, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
01.09 15:20:07 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 3, _type => core/cache.update }
01.09 15:20:07 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 15:25:32 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
01.09 15:25:32 -<<-: server.login ok
01.09 15:25:32 DB: SELECT * FROM LocalizationStrings
01.09 15:25:32 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 TIMER: Starting timer...
01.09 15:25:32 TIMER: Timer running...
01.09 15:25:32 DB: SELECT * FROM GameVars
01.09 15:25:32 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.09 15:25:32 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.09 15:25:32 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.09 15:25:32 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.09 15:25:32 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.09 15:25:32 -<<-: core/quest.getDaily ok
01.09 15:25:32 DB: SELECT * FROM UserAttributeTypes
01.09 15:25:32 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 DB: SELECT * FROM UserVariableTypes
01.09 15:25:32 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.09 15:25:32 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 DB: SELECT * FROM ItemGroups
01.09 15:25:32 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 DB: SELECT * FROM Bundles ORDER BY ID
01.09 15:25:32 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 DB: SELECT * FROM BundleItems ORDER BY ID
01.09 15:25:32 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 SHOP: loading items...
01.09 15:25:32 ->>-: core/shop.getList { _type => core/shop.getList }
01.09 15:25:32 -<<-: core/shop.getList ok
01.09 15:25:32 SHOP: 0 items loaded (0 sec)
01.09 15:25:32 DB: SELECT * FROM EffectAttributeTypes
01.09 15:25:32 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 DB: SELECT * FROM Effects
01.09 15:25:32 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
01.09 15:25:32 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
01.09 15:25:32 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 DB: SELECT * FROM Badges
01.09 15:25:32 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
01.09 15:25:32 -<<-: core/server.query ok
01.09 15:25:32 TIMER: Check auto-disconnect...
01.09 15:25:32 STATS: vdl.0 cache, locks:0
01.09 15:25:32 TIMER: Check auto-disconnect...
01.09 15:25:32 STATS: vdl.0 cache, locks:0
01.09 15:25:32 TIMER: Check auto-disconnect...
01.09 15:25:32 STATS: vdl.0 cache, locks:0
01.09 15:25:32 TIMER: Check auto-disconnect...
01.09 15:25:32 STATS: vdl.0 cache, locks:0
01.09 15:25:32 TIMER: Check auto-disconnect...
01.09 15:25:32 STATS: vdl.0 cache, locks:0
01.09 15:31:26 NET: Client (conid:20307204) connected to vdl.0 (clients:1)
01.09 15:31:31 ++ NET: null req: user.login { password => test, name => test2, messageType => user.login }
01.09 15:31:31 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test'
01.09 15:31:31 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test2' AND Password = E'test', _type => core/server.query }
01.09 15:31:31 -<<-: core/server.query ok
01.09 15:31:31 STATS: vdl.0 cache connection, 21 calls, total 0.020357608795166 sec spent, avg 0.97 ms
01.09 15:31:31 ->>-: core/user.isOnlineID { id => 3, _type => core/user.isOnlineID }
01.09 15:31:31 -<<-: core/user.isOnlineID ok
01.09 15:31:31 ->>-: core/cache.get { type => user, v => -1, id => 3, _type => core/cache.get }
01.09 15:31:31 -<<-: core/cache.get ok
01.09 15:31:31 ->>-: core/cache.get { type => questdata, v => -1, id => 3, _type => core/cache.get }
01.09 15:31:31 -<<-: core/cache.get ok
01.09 15:31:31 NET: Client login (conid:20307204, id:3, name:test2)
01.09 15:31:31 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 3, _type => core/user.loginPost, ipAddr => 172.16.30.52 }
01.09 15:31:31 -<<-: core/user.loginPost null
01.09 15:31:31 ++ NET: test2 req: battle.find { messageType => battle.find }
01.09 15:31:31 == NET: test2 ret: user.login { name => test2, type => user.login, errorCode => ok, id => 3 }
01.09 15:31:31 == NET: test2 ret: user.join { name => test2, type => user.join }
01.09 15:31:31 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
01.09 15:31:31 -<<-: vdl/cache.battle.find { list => {}, count => 0, errorCode => not, _type => vdl/cache.battle.find }
01.09 15:31:31 ->>-: vdl/cache.battle.create { selfId => 3, _type => vdl/cache.battle.create }
01.09 15:31:31 -<<-: vdl/cache.battle.create { errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
01.09 15:31:31 TIME: battle.find 33.99 ms
01.09 15:31:31 == NET: test2 ret: battle.find { type => battle.find, errorCode => ok, _type => vdl/cache.battle.create, player => 1 }
01.09 15:31:32 TIMER: Check auto-disconnect...
01.09 15:31:32 STATS: vdl.0 cache, locks:2
01.09 15:31:37 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 3, _type => core/cache.update }
01.09 15:31:37 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 15:32:00 NET: Client (conid:62631253) connected to vdl.0 (clients:2)
01.09 15:32:04 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login }
01.09 15:32:04 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test'
01.09 15:32:04 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'test1' AND Password = E'test', _type => core/server.query }
01.09 15:32:04 -<<-: core/server.query { list => {{ name => test1, networkid => , isbanned => false, id => 2 }}, errorCode => ok, _type => core/server.query }
01.09 15:32:04 ->>-: core/user.isOnlineID { id => 2, _type => core/user.isOnlineID }
01.09 15:32:04 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
01.09 15:32:04 ->>-: core/cache.get { type => user, v => -1, id => 2, _type => core/cache.get }
01.09 15:32:04 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => test1, deleted => false, email => , networktype =>   , password => test, isbanned => false, regdate => 2016-08-30 15:47:58.935408+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1472654256, lastLoginDate => 245, lastLoadDate => 902 }, effects => { list => [] } }}, version => 0, id => 2 } }
01.09 15:32:04 ->>-: core/cache.get { type => questdata, v => -1, id => 2, _type => core/cache.get }
01.09 15:32:04 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 2 } }
01.09 15:32:04 NET: Client login (conid:62631253, id:2, name:test1)
01.09 15:32:04 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 2, _type => core/user.loginPost, ipAddr => 172.16.27.103 }
01.09 15:32:04 -<<-: core/user.loginPost { _type => core/user.loginPost }
01.09 15:32:04 == NET: test2 ret: user.join { name => test1, type => user.join }
01.09 15:32:04 == NET: test1 ret: user.login { name => test1, type => user.login, errorCode => ok, id => 2 }
01.09 15:32:04 ++ NET: test1 req: battle.find { messageType => battle.find }
01.09 15:32:04 ->>-: vdl/cache.battle.find { _type => vdl/cache.battle.find }
01.09 15:32:04 == NET: test1 ret: user.join { name => test2, type => user.join }
01.09 15:32:04 == NET: test1 ret: user.join { name => test1, type => user.join }
01.09 15:32:04 -<<-: vdl/cache.battle.find { list => [8], count => 1, errorCode => ok, _type => vdl/cache.battle.find }
01.09 15:32:04 ->>-: vdl/cache.battle.join { roomId => 8, selfId => 2, _type => vdl/cache.battle.join }
01.09 15:32:04 -<<-: vdl/cache.battle.join { errorCode => true, _type => vdl/cache.battle.join, player => 2 }
01.09 15:32:04 TIME: battle.find 4.07 ms
01.09 15:32:04 == NET: test1 ret: battle.find { type => battle.find, errorCode => true, _type => vdl/cache.battle.join, player => 2 }
01.09 15:32:12 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 2, _type => core/cache.update }
01.09 15:32:12 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
01.09 15:44:05 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
01.09 15:44:05 -<<-: server.login ok
01.09 15:44:05 DB: SELECT * FROM LocalizationStrings
01.09 15:44:05 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.09 15:44:05 -<<-: core/server.query ok
01.09 15:44:05 TIMER: Starting timer...
01.09 15:44:05 TIMER: Timer running...
01.09 15:44:05 DB: SELECT * FROM GameVars
01.09 15:44:05 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.09 15:44:05 -<<-: core/server.query ok
01.09 15:44:05 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.09 15:44:05 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.09 15:44:05 -<<-: core/server.query ok
01.09 15:44:05 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.09 15:44:05 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.09 15:44:05 -<<-: core/server.query ok
01.09 15:44:05 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.09 15:44:05 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.09 15:44:05 -<<-: core/server.query ok
01.09 15:44:05 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.09 15:44:05 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.09 15:44:05 -<<-: core/server.query ok
01.09 15:44:05 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.09 15:44:05 -<<-: core/quest.getDaily ok
01.09 15:44:05 DB: SELECT * FROM UserAttributeTypes
01.09 15:44:05 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.09 15:44:05 -<<-: core/server.query ok
01.09 15:44:05 DB: SELECT * FROM UserVariableTypes
01.09 15:44:05 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.09 15:44:05 -<<-: core/server.query ok
01.09 15:44:05 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.09 15:44:05 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.09 15:44:05 -<<-: core/server.query ok
01.09 15:44:05 DB: SELECT * FROM ItemGroups
01.09 15:44:05 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.09 15:44:05 -<<-: core/server.query ok
01.09 15:44:05 DB: SELECT * FROM Bundles ORDER BY ID
01.09 15:44:05 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.09 15:44:05 -<<-: core/server.query ok
01.09 15:44:05 DB: SELECT * FROM BundleItems ORDER BY ID
01.09 15:44:05 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.09 15:44:05 -<<-: core/server.query ok
01.09 15:44:05 SHOP: loading items...
01.09 15:44:05 ->>-: core/shop.getList { _type => core/shop.getList }
01.09 15:44:05 -<<-: core/shop.getList ok
01.09 15:44:05 SHOP: 0 items loaded (0 sec)
01.09 15:44:05 DB: SELECT * FROM EffectAttributeTypes
01.09 15:44:05 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.09 15:44:05 -<<-: core/server.query ok
01.09 15:44:05 DB: SELECT * FROM Effects
01.09 15:44:05 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.09 15:44:05 -<<-: core/server.query ok
01.09 15:44:05 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(01.09 15:44:15 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
01.09 15:44:15 -<<-: server.login ok
01.09 15:44:15 DB: SELECT * FROM LocalizationStrings
01.09 15:44:15 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.09 15:44:15 -<<-: core/server.query ok
01.09 15:44:15 TIMER: Starting timer...
01.09 15:44:15 TIMER: Timer running...
01.09 15:44:15 DB: SELECT * FROM GameVars
01.09 15:44:15 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.09 15:44:15 -<<-: core/server.query ok
01.09 15:44:15 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.09 15:44:15 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.09 15:44:15 -<<-: core/server.query ok
01.09 15:44:15 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.09 15:44:15 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.09 15:44:15 -<<-: core/server.query ok
01.09 15:44:15 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.09 15:44:15 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.09 15:44:15 -<<-: core/server.query ok
01.09 15:44:15 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.09 15:44:15 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.09 15:44:15 -<<-: core/server.query ok
01.09 15:44:15 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.09 15:44:15 -<<-: core/quest.getDaily ok
01.09 15:44:15 DB: SELECT * FROM UserAttributeTypes
01.09 15:44:15 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.09 15:44:15 -<<-: core/server.query ok
01.09 15:44:15 DB: SELECT * FROM UserVariableTypes
01.09 15:44:15 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.09 15:44:15 -<<-: core/server.query ok
01.09 15:44:15 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.09 15:44:15 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.09 15:44:15 -<<-: core/server.query ok
01.09 15:44:15 DB: SELECT * FROM ItemGroups
01.09 15:44:15 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.09 15:44:15 -<<-: core/server.query ok
01.09 15:44:15 DB: SELECT * FROM Bundles ORDER BY ID
01.09 15:44:15 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.09 15:44:15 -<<-: core/server.query ok
01.09 15:44:15 DB: SELECT * FROM BundleItems ORDER BY ID
01.09 15:44:15 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.09 15:44:15 -<<-: core/server.query ok
01.09 15:44:15 SHOP: loading items...
01.09 15:44:15 ->>-: core/shop.getList { _type => core/shop.getList }
01.09 15:44:15 -<<-: core/shop.getList ok
01.09 15:44:15 SHOP: 0 items loaded (0 sec)
01.09 15:44:15 DB: SELECT * FROM EffectAttributeTypes
01.09 15:44:15 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.09 15:44:15 -<<-: core/server.query ok
01.09 15:44:15 DB: SELECT * FROM Effects
01.09 15:44:15 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.09 15:44:15 -<<-: core/server.query ok
01.09 15:44:15 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(01.09 15:54:31 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
01.09 15:54:31 -<<-: server.login ok
01.09 15:54:31 DB: SELECT * FROM LocalizationStrings
01.09 15:54:31 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.09 15:54:31 -<<-: core/server.query ok
01.09 15:54:31 TIMER: Starting timer...
01.09 15:54:31 TIMER: Timer running...
01.09 15:54:31 DB: SELECT * FROM GameVars
01.09 15:54:31 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.09 15:54:31 -<<-: core/server.query ok
01.09 15:54:31 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.09 15:54:31 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.09 15:54:31 -<<-: core/server.query ok
01.09 15:54:31 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.09 15:54:31 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.09 15:54:31 -<<-: core/server.query ok
01.09 15:54:31 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.09 15:54:31 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.09 15:54:31 -<<-: core/server.query ok
01.09 15:54:31 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.09 15:54:31 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.09 15:54:31 -<<-: core/server.query ok
01.09 15:54:31 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.09 15:54:31 -<<-: core/quest.getDaily ok
01.09 15:54:31 DB: SELECT * FROM UserAttributeTypes
01.09 15:54:31 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.09 15:54:31 -<<-: core/server.query ok
01.09 15:54:31 DB: SELECT * FROM UserVariableTypes
01.09 15:54:31 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.09 15:54:31 -<<-: core/server.query ok
01.09 15:54:31 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.09 15:54:31 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.09 15:54:31 -<<-: core/server.query ok
01.09 15:54:31 DB: SELECT * FROM ItemGroups
01.09 15:54:31 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.09 15:54:31 -<<-: core/server.query ok
01.09 15:54:31 DB: SELECT * FROM Bundles ORDER BY ID
01.09 15:54:31 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.09 15:54:31 -<<-: core/server.query ok
01.09 15:54:31 DB: SELECT * FROM BundleItems ORDER BY ID
01.09 15:54:31 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.09 15:54:31 -<<-: core/server.query ok
01.09 15:54:31 SHOP: loading items...
01.09 15:54:31 ->>-: core/shop.getList { _type => core/shop.getList }
01.09 15:54:31 -<<-: core/shop.getList ok
01.09 15:54:31 SHOP: 0 items loaded (0 sec)
01.09 15:54:31 DB: SELECT * FROM EffectAttributeTypes
01.09 15:54:31 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.09 15:54:31 -<<-: core/server.query ok
01.09 15:54:31 DB: SELECT * FROM Effects
01.09 15:54:31 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.09 15:54:31 -<<-: core/server.query ok
01.09 15:54:31 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part(01.09 15:58:54 ->>-: core/server.login { host => 172.16.35.21, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.21, externalPort => 2010 }
01.09 15:58:54 -<<-: server.login ok
01.09 15:58:54 DB: SELECT * FROM LocalizationStrings
01.09 15:58:54 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 TIMER: Starting timer...
01.09 15:58:54 TIMER: Timer running...
01.09 15:58:54 DB: SELECT * FROM GameVars
01.09 15:58:54 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
01.09 15:58:54 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
01.09 15:58:54 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
01.09 15:58:54 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
01.09 15:58:54 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
01.09 15:58:54 -<<-: core/quest.getDaily ok
01.09 15:58:54 DB: SELECT * FROM UserAttributeTypes
01.09 15:58:54 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 DB: SELECT * FROM UserVariableTypes
01.09 15:58:54 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
01.09 15:58:54 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 DB: SELECT * FROM ItemGroups
01.09 15:58:54 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 DB: SELECT * FROM Bundles ORDER BY ID
01.09 15:58:54 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 DB: SELECT * FROM BundleItems ORDER BY ID
01.09 15:58:54 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 SHOP: loading items...
01.09 15:58:54 ->>-: core/shop.getList { _type => core/shop.getList }
01.09 15:58:54 -<<-: core/shop.getList ok
01.09 15:58:54 SHOP: 0 items loaded (0 sec)
01.09 15:58:54 DB: SELECT * FROM EffectAttributeTypes
01.09 15:58:54 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 DB: SELECT * FROM Effects
01.09 15:58:54 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
01.09 15:58:54 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
01.09 15:58:54 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 DB: SELECT * FROM Badges
01.09 15:58:54 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
01.09 15:58:54 -<<-: core/server.query ok
01.09 15:58:54 TIMER: Check auto-disconnect...
01.09 15:58:54 STATS: vdl.0 cache, locks:0
