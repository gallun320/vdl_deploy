18.10 12:00:51 TIMER: Check auto-disconnect...
18.10 12:00:52 STATS: vdl.0 cache, locks:0
18.10 12:01:51 TIMER: Check auto-disconnect...
18.10 12:01:52 STATS: vdl.0 cache, locks:0
18.10 12:02:51 TIMER: Check auto-disconnect...
18.10 12:02:52 STATS: vdl.0 cache, locks:0
18.10 12:03:51 TIMER: Check auto-disconnect...
18.10 12:03:52 STATS: vdl.0 cache, locks:0
18.10 12:04:51 TIMER: Check auto-disconnect...
18.10 12:04:52 STATS: vdl.0 cache, locks:0
18.10 12:05:51 TIMER: Check auto-disconnect...
18.10 12:07:01 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
18.10 12:07:01 -<<-: server.login ok
18.10 12:07:01 DB: SELECT * FROM LocalizationStrings
18.10 12:07:01 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 TIMER: Starting timer...
18.10 12:07:01 TIMER: Timer running...
18.10 12:07:01 DB: SELECT * FROM GameVars
18.10 12:07:01 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.10 12:07:01 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.10 12:07:01 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.10 12:07:01 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.10 12:07:01 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.10 12:07:01 -<<-: core/quest.getDaily ok
18.10 12:07:01 DB: SELECT * FROM UserAttributeTypes
18.10 12:07:01 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 DB: SELECT * FROM UserVariableTypes
18.10 12:07:01 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.10 12:07:01 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 DB: SELECT * FROM ItemGroups
18.10 12:07:01 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 DB: SELECT * FROM Bundles ORDER BY ID
18.10 12:07:01 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 DB: SELECT * FROM BundleItems ORDER BY ID
18.10 12:07:01 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 SHOP: loading items...
18.10 12:07:01 ->>-: core/shop.getList { _type => core/shop.getList }
18.10 12:07:01 -<<-: core/shop.getList ok
18.10 12:07:01 SHOP: 0 items loaded (0.001 sec)
18.10 12:07:01 DB: SELECT * FROM EffectAttributeTypes
18.10 12:07:01 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 DB: SELECT * FROM Effects
18.10 12:07:01 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.10 12:07:01 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.10 12:07:01 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 DB: SELECT * FROM Badges
18.10 12:07:01 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.10 12:07:01 -<<-: core/server.query ok
18.10 12:07:01 TIMER: Check auto-disconnect...
18.10 12:07:01 STATS: vdl.0 cache, locks:0
18.10 12:07:01 TIMER: Check auto-disconnect...
18.10 12:07:01 STATS: vdl.0 cache, locks:0
18.10 12:07:01 TIMER: Check auto-disconnect...
18.10 12:07:01 STATS: vdl.0 cache, locks:0
18.10 12:07:01 TIMER: Check auto-disconnect...
18.10 12:07:01 STATS: vdl.0 cache, locks:0
18.10 12:07:01 TIMER: Check auto-disconnect...
18.10 12:07:01 STATS: vdl.0 cache, locks:0
18.10 12:07:01 TIMER: Check auto-disconnect...
18.10 12:07:01 STATS: vdl.0 cache, locks:0
18.10 12:07:01 TIMER: Check auto-disconnect...
18.10 12:07:01 STATS: vdl.0 cache, locks:0
18.10 12:14:32 NET: Client (conid:32671876) connected to vdl.0 (clients:1)
18.10 12:14:32 ++ NET: null req: user.register { city => kazan, password => test, name => test10, messageType => user.register }
18.10 12:14:32 DB: SELECT * FROM users
18.10 12:14:32 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
18.10 12:14:32 -<<-: core/server.query ok
18.10 12:14:32 STATS: vdl.0 cache connection, 21 calls, total 0.171027898788452 sec spent, avg 8.14 ms
18.10 12:14:32 DB: SELECT ID FROM Users WHERE Name = E'uid38'
18.10 12:14:32 == NET: null ret: user.auth { type => user.auth, token => dWlkMzg= }
18.10 12:14:32 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid38', _type => core/server.query }
18.10 12:14:32 -<<-: core/server.query ok
18.10 12:14:32 DB: SELECT nextval('Users_id_seq') AS id
18.10 12:14:32 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
18.10 12:14:32 -<<-: core/server.query ok
18.10 12:14:32 ->>-: core/user.register { password => uid38, name => uid38, fullParams => { city => kazan, password => uid38, name => uid38, networkid => , networktype => , messageType => user.register, id => 38 }, networkid => , connectionID => 32671876, networktype => , email => , id => 38, _type => core/user.register }
18.10 12:14:32 -<<-: core/user.register ok
18.10 12:14:33 -<<-: core/user.registerResponse null
18.10 12:14:33 == NET: null ret: user.register { type => user.register, errorCode => ok }
18.10 12:14:35 ++ NET: null req: user.login { password => test, name => test1, messageType => user.login, token => dWlkMzg= }
18.10 12:14:35 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid38' AND Password = E'uid38'
18.10 12:14:35 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid38' AND Password = E'uid38', _type => core/server.query }
18.10 12:14:35 -<<-: core/server.query ok
18.10 12:14:35 ->>-: core/user.isOnlineID { id => 38, _type => core/user.isOnlineID }
18.10 12:14:35 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.10 12:14:35 ->>-: core/cache.get { type => user, v => -1, id => 38, _type => core/cache.get }
18.10 12:14:35 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid38, deleted => false, email => , networktype =>   , password => uid38, isbanned => false, regdate => 2016-10-18 12:14:32.809+03, language =>   , networkid => , params => { inventory => { list => [] }, vars => {}, attrs => {}, effects => { list => [] } }}, version => 1, id => 38 } }
18.10 12:14:35 ->>-: core/cache.get { type => questdata, v => -1, id => 38, _type => core/cache.get }
18.10 12:14:35 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 38 } }
18.10 12:14:35 NET: Client login (conid:32671876, id:38, name:uid38)
18.10 12:14:35 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 38, _type => core/user.loginPost, ipAddr => 172.16.35.23 }
18.10 12:14:35 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.10 12:14:35 DB: SELECT ID FROM TempUserLogins WHERE UserID = 38 AND Date = 'today'::timestamp
18.10 12:14:35 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 38 AND Date = 'today'::timestamp, _type => core/server.query }
18.10 12:14:35 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.10 12:14:35 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (38, 'today'::timestamp)
18.10 12:14:35 == NET: uid38 ret: user.login { name => uid38, type => user.login, errorCode => ok, id => 38 }
18.10 12:14:35 == NET: uid38 ret: user.join { name => uid38, type => user.join }
18.10 12:14:35 ->>-: core/server.ping { _type => core/server.ping, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (38, 'today'::timestamp), _type => core/server.pending }} }
18.10 12:14:35 -<<-: core/server.ping { errorCode => ok, _type => core/server.ping }
18.10 12:14:41 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1476782075, lastLoginDate => 292, lastLoadDate => 1019 } }}, type => user, unlock => false, id => 38, _type => core/cache.update }
18.10 12:14:41 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
18.10 12:17:50 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
18.10 12:17:50 -<<-: server.login ok
18.10 12:17:50 DB: SELECT * FROM LocalizationStrings
18.10 12:17:50 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:17:50 TIMER: Starting timer...
18.10 12:17:50 DB: SELECT * FROM GameVars
18.10 12:17:50 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.10 12:17:50 TIMER: Timer running...
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:17:50 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.10 12:17:50 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:17:50 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.10 12:17:50 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:17:50 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.10 12:17:50 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:17:50 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.10 12:17:50 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:17:50 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.10 12:17:50 -<<-: core/quest.getDaily ok
18.10 12:17:50 DB: SELECT * FROM UserAttributeTypes
18.10 12:17:50 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:17:50 DB: SELECT * FROM UserVariableTypes
18.10 12:17:50 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:17:50 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.10 12:17:50 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:17:50 DB: SELECT * FROM ItemGroups
18.10 12:17:50 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:17:50 DB: SELECT * FROM Bundles ORDER BY ID
18.10 12:17:50 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:17:50 DB: SELECT * FROM BundleItems ORDER BY ID
18.10 12:17:50 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:17:50 SHOP: loading items...
18.10 12:17:50 ->>-: core/shop.getList { _type => core/shop.getList }
18.10 12:17:50 -<<-: core/shop.getList ok
18.10 12:17:50 SHOP: 0 items loaded (0 sec)
18.10 12:17:50 DB: SELECT * FROM EffectAttributeTypes
18.10 12:17:50 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:17:50 DB: SELECT * FROM Effects
18.10 12:17:50 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:17:50 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.10 12:17:50 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:17:50 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.10 12:17:50 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:17:50 DB: SELECT * FROM Badges
18.10 12:17:50 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.10 12:17:50 -<<-: core/server.query ok
18.10 12:18:03 NET: Client (conid:7208730) connected to vdl.0 (clients:1)
18.10 12:18:04 ++ NET: null req: user.register { city => kazan, password => test, name => test11, messageType => user.register }
18.10 12:18:04 DB: SELECT ID FROM Users WHERE Name = E'test11'
18.10 12:18:04 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'test11', _type => core/server.query }
18.10 12:18:04 -<<-: core/server.query ok
18.10 12:18:04 DB: SELECT nextval('Users_id_seq') AS id
18.10 12:18:04 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
18.10 12:18:04 -<<-: core/server.query ok
18.10 12:18:04 ->>-: core/user.register { password => test, name => test11, fullParams => { city => kazan, password => test, name => test11, networkid => , networktype => , messageType => user.register, id => 39 }, networkid => , connectionID => 7208730, networktype => , email => , id => 39, _type => core/user.register }
18.10 12:18:04 -<<-: core/user.register ok
18.10 12:18:04 -<<-: core/user.registerResponse null
18.10 12:18:04 == NET: null ret: user.register { type => user.register, errorCode => ok }
18.10 12:21:37 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
18.10 12:21:37 -<<-: server.login ok
18.10 12:21:37 DB: SELECT * FROM LocalizationStrings
18.10 12:21:37 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:37 TIMER: Starting timer...
18.10 12:21:37 TIMER: Timer running...
18.10 12:21:37 DB: SELECT * FROM GameVars
18.10 12:21:37 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:37 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.10 12:21:37 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:37 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.10 12:21:37 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:37 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.10 12:21:37 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:37 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.10 12:21:37 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:37 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.10 12:21:37 -<<-: core/quest.getDaily ok
18.10 12:21:37 DB: SELECT * FROM UserAttributeTypes
18.10 12:21:37 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:37 DB: SELECT * FROM UserVariableTypes
18.10 12:21:37 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:37 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.10 12:21:37 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:37 DB: SELECT * FROM ItemGroups
18.10 12:21:37 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:37 DB: SELECT * FROM Bundles ORDER BY ID
18.10 12:21:37 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:37 DB: SELECT * FROM BundleItems ORDER BY ID
18.10 12:21:37 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:37 SHOP: loading items...
18.10 12:21:37 ->>-: core/shop.getList { _type => core/shop.getList }
18.10 12:21:37 -<<-: core/shop.getList ok
18.10 12:21:37 SHOP: 0 items loaded (0 sec)
18.10 12:21:37 DB: SELECT * FROM EffectAttributeTypes
18.10 12:21:37 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:37 DB: SELECT * FROM Effects
18.10 12:21:37 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:37 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.10 12:21:37 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:37 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.10 12:21:37 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:37 DB: SELECT * FROM Badges
18.10 12:21:37 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.10 12:21:37 -<<-: core/server.query ok
18.10 12:21:54 NET: Client (conid:9913984) connected to vdl.0 (clients:1)
18.10 12:21:55 ++ NET: null req: user.register { city => kazan, password => test, name => test12, messageType => user.register }
18.10 12:21:55 DB: SELECT ID FROM Users WHERE Name = E'test12'
18.10 12:21:55 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'test12', _type => core/server.query }
18.10 12:21:55 -<<-: core/server.query ok
18.10 12:21:55 DB: SELECT nextval('Users_id_seq') AS id
18.10 12:21:55 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
18.10 12:21:55 -<<-: core/server.query ok
18.10 12:21:55 ->>-: core/user.register { password => test, name => test12, fullParams => { city => kazan, password => test, name => test12, networkid => , networktype => , messageType => user.register, id => 40 }, networkid => , connectionID => 9913984, networktype => , email => , id => 40, _type => core/user.register }
18.10 12:21:55 -<<-: core/user.register ok
18.10 12:21:55 -<<-: core/user.registerResponse null
18.10 12:21:55 == NET: null ret: user.register { type => user.register, errorCode => ok }
18.10 12:22:37 TIMER: Check auto-disconnect...
18.10 12:22:37 STATS: vdl.0 cache, locks:0
18.10 12:22:37 TIMER: Check auto-disconnect...
18.10 12:22:37 STATS: vdl.0 cache, locks:0
18.10 12:22:37 TIMER: Check auto-disconnect...
18.10 12:22:37 STATS: vdl.0 cache, locks:0
18.10 12:22:37 TIMER: Check auto-disconnect...
18.10 12:22:37 NET: Client (name:null conid:9913984 TCP) disconnected from vdl.0 (clients:0)
18.10 12:22:37 STATS: vdl.0 cache, locks:0
18.10 12:22:37 TIMER: Check auto-disconnect...
18.10 12:22:37 STATS: vdl.0 cache, locks:0
18.10 12:22:37 TIMER: Check auto-disconnect...
18.10 12:27:38 STATS: vdl.0 cache, locks:0
18.10 12:28:37 TIMER: Check auto-disconnect...
18.10 12:29:43 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
18.10 12:29:43 -<<-: server.login ok
18.10 12:29:43 DB: SELECT * FROM LocalizationStrings
18.10 12:29:43 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:29:43 TIMER: Starting timer...
18.10 12:29:43 TIMER: Timer running...
18.10 12:29:43 DB: SELECT * FROM GameVars
18.10 12:29:43 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:29:43 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.10 12:29:43 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:29:43 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.10 12:29:43 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:29:43 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.10 12:29:43 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:29:43 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.10 12:29:43 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:29:43 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.10 12:29:43 -<<-: core/quest.getDaily ok
18.10 12:29:43 DB: SELECT * FROM UserAttributeTypes
18.10 12:29:43 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:29:43 DB: SELECT * FROM UserVariableTypes
18.10 12:29:43 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:29:43 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.10 12:29:43 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:29:43 DB: SELECT * FROM ItemGroups
18.10 12:29:43 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:29:43 DB: SELECT * FROM Bundles ORDER BY ID
18.10 12:29:43 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:29:43 DB: SELECT * FROM BundleItems ORDER BY ID
18.10 12:29:43 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:29:43 SHOP: loading items...
18.10 12:29:43 ->>-: core/shop.getList { _type => core/shop.getList }
18.10 12:29:43 -<<-: core/shop.getList ok
18.10 12:29:43 SHOP: 0 items loaded (0.001 sec)
18.10 12:29:43 DB: SELECT * FROM EffectAttributeTypes
18.10 12:29:43 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:29:43 DB: SELECT * FROM Effects
18.10 12:29:43 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:29:43 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.10 12:29:43 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:29:43 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.10 12:29:43 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:29:43 DB: SELECT * FROM Badges
18.10 12:29:43 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.10 12:29:43 -<<-: core/server.query ok
18.10 12:30:08 NET: Client (conid:2777893) connected to vdl.0 (clients:1)
18.10 12:30:08 ++ NET: null req: user.register { city => kazan, password => test, name => test13, messageType => user.register }
18.10 12:30:08 DB: SELECT ID FROM Users WHERE Name = E'test13'
18.10 12:30:08 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'test13', _type => core/server.query }
18.10 12:30:08 -<<-: core/server.query ok
18.10 12:30:08 DB: SELECT nextval('Users_id_seq') AS id
18.10 12:30:08 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
18.10 12:30:08 -<<-: core/server.query ok
18.10 12:30:08 ->>-: core/user.register { password => test, name => test13, fullParams => { city => kazan, password => test, name => test13, networkid => , networktype => , messageType => user.register, id => 41 }, networkid => , connectionID => 2777893, networktype => , email => , id => 41, _type => core/user.register }
18.10 12:30:08 -<<-: core/user.register ok
18.10 12:30:08 -<<-: core/user.registerResponse null
18.10 12:30:08 == NET: null ret: user.register { type => user.register, errorCode => ok }
18.10 12:31:33 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
18.10 12:31:33 -<<-: server.login ok
18.10 12:31:33 DB: SELECT * FROM LocalizationStrings
18.10 12:31:33 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:33 TIMER: Starting timer...
18.10 12:31:33 DB: SELECT * FROM GameVars
18.10 12:31:33 TIMER: Timer running...
18.10 12:31:33 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:33 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.10 12:31:33 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:33 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.10 12:31:33 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:33 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.10 12:31:33 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:33 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.10 12:31:33 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:33 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.10 12:31:33 -<<-: core/quest.getDaily ok
18.10 12:31:33 DB: SELECT * FROM UserAttributeTypes
18.10 12:31:33 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:33 DB: SELECT * FROM UserVariableTypes
18.10 12:31:33 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:33 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.10 12:31:33 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:33 DB: SELECT * FROM ItemGroups
18.10 12:31:33 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:33 DB: SELECT * FROM Bundles ORDER BY ID
18.10 12:31:33 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:33 DB: SELECT * FROM BundleItems ORDER BY ID
18.10 12:31:33 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:33 SHOP: loading items...
18.10 12:31:33 ->>-: core/shop.getList { _type => core/shop.getList }
18.10 12:31:33 -<<-: core/shop.getList ok
18.10 12:31:33 SHOP: 0 items loaded (0.001 sec)
18.10 12:31:33 DB: SELECT * FROM EffectAttributeTypes
18.10 12:31:33 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:33 DB: SELECT * FROM Effects
18.10 12:31:33 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:33 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.10 12:31:33 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:33 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.10 12:31:33 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:33 DB: SELECT * FROM Badges
18.10 12:31:33 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.10 12:31:33 -<<-: core/server.query ok
18.10 12:31:51 NET: Client (conid:72393951) connected to vdl.0 (clients:1)
18.10 12:31:52 ++ NET: null req: user.register { city => kazan, password => test, name => test14, messageType => user.register }
18.10 12:31:52 DB: SELECT ID FROM Users WHERE Name = E'test14'
18.10 12:31:52 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'test14', _type => core/server.query }
18.10 12:31:52 -<<-: core/server.query ok
18.10 12:31:52 DB: SELECT nextval('Users_id_seq') AS id
18.10 12:31:52 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
18.10 12:31:52 -<<-: core/server.query ok
18.10 12:31:52 ->>-: core/user.register { password => test, name => test14, fullParams => { city => kazan, password => test, name => test14, networkid => , networktype => , messageType => user.register, id => 42 }, networkid => , connectionID => 72393951, networktype => , email => , id => 42, _type => core/user.register }
18.10 12:31:52 -<<-: core/user.register ok
18.10 12:31:52 -<<-: core/user.registerResponse null
18.10 12:31:52 == NET: null ret: user.register { type => user.register, errorCode => ok }
18.10 12:36:57 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
18.10 12:36:57 -<<-: server.login ok
18.10 12:36:57 DB: SELECT * FROM LocalizationStrings
18.10 12:36:57 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 TIMER: Starting timer...
18.10 12:36:57 TIMER: Timer running...
18.10 12:36:57 DB: SELECT * FROM GameVars
18.10 12:36:57 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.10 12:36:57 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.10 12:36:57 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.10 12:36:57 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.10 12:36:57 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.10 12:36:57 -<<-: core/quest.getDaily ok
18.10 12:36:57 DB: SELECT * FROM UserAttributeTypes
18.10 12:36:57 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 DB: SELECT * FROM UserVariableTypes
18.10 12:36:57 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.10 12:36:57 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 DB: SELECT * FROM ItemGroups
18.10 12:36:57 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 DB: SELECT * FROM Bundles ORDER BY ID
18.10 12:36:57 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 DB: SELECT * FROM BundleItems ORDER BY ID
18.10 12:36:57 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 SHOP: loading items...
18.10 12:36:57 ->>-: core/shop.getList { _type => core/shop.getList }
18.10 12:36:57 -<<-: core/shop.getList ok
18.10 12:36:57 SHOP: 0 items loaded (0 sec)
18.10 12:36:57 DB: SELECT * FROM EffectAttributeTypes
18.10 12:36:57 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 DB: SELECT * FROM Effects
18.10 12:36:57 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.10 12:36:57 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.10 12:36:57 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 DB: SELECT * FROM Badges
18.10 12:36:57 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.10 12:36:57 -<<-: core/server.query ok
18.10 12:36:57 TIMER: Check auto-disconnect...
18.10 12:37:58 STATS: vdl.0 cache, locks:0
18.10 12:38:57 TIMER: Check auto-disconnect...
18.10 12:38:58 STATS: vdl.0 cache, locks:0
18.10 12:39:57 TIMER: Check auto-disconnect...
18.10 12:39:58 STATS: vdl.0 cache, locks:0
18.10 12:40:41 NET: Client (conid:7459519) connected to vdl.0 (clients:1)
18.10 12:40:42 ++ NET: null req: user.register { city => kazan, password => test, name => test15, messageType => user.register }
18.10 12:40:42 DB: SELECT ID FROM Users WHERE Name = E'test15'
18.10 12:40:42 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'test15', _type => core/server.query }
18.10 12:40:42 -<<-: core/server.query ok
18.10 12:40:42 STATS: vdl.0 cache connection, 21 calls, total 0.065007209777832 sec spent, avg 3.1 ms
18.10 12:40:42 DB: SELECT nextval('Users_id_seq') AS id
18.10 12:40:42 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
18.10 12:40:42 -<<-: core/server.query ok
18.10 12:40:42 ->>-: core/user.register { password => test, name => test15, fullParams => { city => kazan, password => test, name => test15, networkid => , networktype => , messageType => user.register, id => 43 }, networkid => , connectionID => 7459519, networktype => , email => , id => 43, _type => core/user.register }
18.10 12:40:42 -<<-: core/user.register ok
18.10 12:40:42 -<<-: core/user.registerResponse null
18.10 12:40:42 == NET: null ret: user.register { type => user.register, errorCode => ok }
18.10 12:40:57 TIMER: Check auto-disconnect...
18.10 12:40:58 STATS: vdl.0 cache, locks:0
18.10 12:41:57 TIMER: Check auto-disconnect...
18.10 12:42:19 ->>-: core/server.login { host => 172.16.35.23, name => vdl.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
18.10 12:42:19 -<<-: server.login ok
18.10 12:42:19 DB: SELECT * FROM LocalizationStrings
18.10 12:42:19 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:42:19 TIMER: Starting timer...
18.10 12:42:19 TIMER: Timer running...
18.10 12:42:19 DB: SELECT * FROM GameVars
18.10 12:42:19 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:42:19 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.10 12:42:19 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:42:19 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.10 12:42:19 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:42:19 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.10 12:42:19 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:42:19 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.10 12:42:19 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:42:19 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.10 12:42:19 -<<-: core/quest.getDaily ok
18.10 12:42:19 DB: SELECT * FROM UserAttributeTypes
18.10 12:42:19 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:42:19 DB: SELECT * FROM UserVariableTypes
18.10 12:42:19 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:42:19 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.10 12:42:19 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:42:19 DB: SELECT * FROM ItemGroups
18.10 12:42:19 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:42:19 DB: SELECT * FROM Bundles ORDER BY ID
18.10 12:42:19 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:42:19 DB: SELECT * FROM BundleItems ORDER BY ID
18.10 12:42:19 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:42:19 SHOP: loading items...
18.10 12:42:19 ->>-: core/shop.getList { _type => core/shop.getList }
18.10 12:42:19 -<<-: core/shop.getList ok
18.10 12:42:19 SHOP: 0 items loaded (0.001 sec)
18.10 12:42:19 DB: SELECT * FROM EffectAttributeTypes
18.10 12:42:19 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:42:19 DB: SELECT * FROM Effects
18.10 12:42:19 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:42:19 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.10 12:42:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:42:19 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.10 12:42:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:42:19 DB: SELECT * FROM Badges
18.10 12:42:19 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.10 12:42:19 -<<-: core/server.query ok
18.10 12:43:02 NET: Client (conid:21751600) connected to vdl.0 (clients:1)
18.10 12:43:02 ++ NET: null req: user.register { city => kazan, password => test, name => test16, messageType => user.register }
18.10 12:43:02 DB: SELECT ID FROM Users WHERE Name = E'test16'
18.10 12:43:02 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'test16', _type => core/server.query }
18.10 12:43:02 -<<-: core/server.query ok
18.10 12:43:02 DB: SELECT nextval('Users_id_seq') AS id
18.10 12:43:02 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
18.10 12:43:02 -<<-: core/server.query ok
18.10 12:43:02 ->>-: core/user.register { password => test, name => test16, fullParams => { city => kazan, password => test, name => test16, networkid => , networktype => , messageType => user.register, id => 44 }, networkid => , connectionID => 21751600, networktype => , email => , id => 44, _type => core/user.register }
18.10 12:43:02 -<<-: core/user.register ok
18.10 12:43:02 -<<-: core/user.registerResponse null
18.10 12:43:02 == NET: null ret: user.register { type => user.register, errorCode => ok }
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 NET: Client (name:null conid:21751600 TCP) disconnected from vdl.0 (clients:0)
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
18.10 12:43:19 STATS: vdl.0 cache, locks:0
18.10 12:43:19 TIMER: Check auto-disconnect...
