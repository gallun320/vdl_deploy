18.11 19:00:07 ++ NET: null req: user.ping { messageType => user.ping, msg => ok }
18.11 19:00:07 TRACE: User not logon yet.
18.11 19:00:10 NET: Client (name:null conid:76689855 WS) disconnected from vdl.0 (clients:0)
18.11 19:00:15 NET: Client (conid:50218548) connected to vdl.0 (clients:1)
18.11 19:00:15 NET: Client (conid:50218548) switched protocol to WS
18.11 19:00:32 NET: Client (name:null conid:50218548 WS) disconnected from vdl.0 (clients:0)
18.11 19:00:35 NET: Client (conid:11847014) connected to vdl.0 (clients:1)
18.11 19:00:35 NET: Client (conid:11847014) switched protocol to WS
18.11 19:00:36 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:00:36 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:00:36 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:00:36 -<<-: core/server.query ok
18.11 19:00:36 STATS: vdl.0 cache connection, 21 calls, total 0.0225653648376465 sec spent, avg 1.07 ms
18.11 19:00:36 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:00:36 -<<-: core/user.isOnlineID ok
18.11 19:00:36 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:00:36 -<<-: core/cache.get ok
18.11 19:00:36 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:00:36 -<<-: core/cache.get ok
18.11 19:00:36 NET: Client login (conid:11847014, id:76, name:Aimer)
18.11 19:00:36 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:00:36 -<<-: core/user.loginPost null
18.11 19:00:36 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:00:36 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:00:36 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:00:36 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData }
18.11 19:00:36 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData }
18.11 19:00:36 TIME: user.data 0.88 ms
18.11 19:00:36 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData }
18.11 19:00:37 TIMER: Check auto-disconnect...
18.11 19:00:37 STATS: vdl.0 cache, locks:2
18.11 19:00:39 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:00:39 TIME: user.ping 0.18 ms
18.11 19:00:39 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:00:42 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:00:42 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:00:44 ++ NET: Aimer req: user.addMoney { count => 1, messageType => user.addMoney }
18.11 19:00:44 TIME: user.addMoney 0.49 ms
18.11 19:00:44 == NET: Aimer ret: user.addMoney { type => user.addMoney, errorCode => ok, money => 1 }
18.11 19:00:52 ->>-: core/cache.update { diff => {params => { attrs => { money => 1 } }}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:00:52 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
18.11 19:01:02 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:01:02 TIME: user.ping 0.45 ms
18.11 19:01:02 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:01:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:01:24 TIME: user.ping 0.51 ms
18.11 19:01:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:01:37 TIMER: Check auto-disconnect...
18.11 19:01:37 STATS: vdl.0 cache, locks:2
18.11 19:01:43 ++ NET: Aimer req: user.addMoney { count => 1, messageType => user.addMoney }
18.11 19:01:43 TIME: user.addMoney 0.46 ms
18.11 19:01:43 == NET: Aimer ret: user.addMoney { type => user.addMoney, errorCode => ok, money => 2 }
18.11 19:01:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:01:46 TIME: user.ping 0.23 ms
18.11 19:01:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:04:19 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
18.11 19:04:19 -<<-: server.login ok
18.11 19:04:19 DB: SELECT * FROM LocalizationStrings
18.11 19:04:19 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 TIMER: Starting timer...
18.11 19:04:19 DB: SELECT * FROM GameVars
18.11 19:04:19 TIMER: Timer running...
18.11 19:04:19 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.11 19:04:19 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.11 19:04:19 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.11 19:04:19 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.11 19:04:19 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.11 19:04:19 -<<-: core/quest.getDaily ok
18.11 19:04:19 DB: SELECT * FROM UserAttributeTypes
18.11 19:04:19 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 DB: SELECT * FROM UserVariableTypes
18.11 19:04:19 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.11 19:04:19 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 DB: SELECT * FROM ItemGroups
18.11 19:04:19 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 DB: SELECT * FROM Bundles ORDER BY ID
18.11 19:04:19 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 DB: SELECT * FROM BundleItems ORDER BY ID
18.11 19:04:19 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 SHOP: loading items...
18.11 19:04:19 ->>-: core/shop.getList { _type => core/shop.getList }
18.11 19:04:19 -<<-: core/shop.getList ok
18.11 19:04:19 SHOP: 0 items loaded (0 sec)
18.11 19:04:19 DB: SELECT * FROM EffectAttributeTypes
18.11 19:04:19 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 DB: SELECT * FROM Effects
18.11 19:04:19 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.11 19:04:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.11 19:04:19 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 DB: SELECT * FROM Badges
18.11 19:04:19 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 NET: Client (conid:33564749) connected to vdl.0 (clients:1)
18.11 19:04:19 NET: Client (conid:33564749) switched protocol to WS
18.11 19:04:19 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:04:19 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:04:19 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:04:19 -<<-: core/server.query ok
18.11 19:04:19 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:04:19 -<<-: core/user.isOnlineID ok
18.11 19:04:19 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:04:19 -<<-: core/cache.get ok
18.11 19:04:19 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:04:19 -<<-: core/cache.get ok
18.11 19:04:19 NET: Client login (conid:33564749, id:76, name:Aimer)
18.11 19:04:19 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:04:19 -<<-: core/user.loginPost null
18.11 19:04:19 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:04:19 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:04:19 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:04:19 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 2 }
18.11 19:04:19 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 2 }
18.11 19:04:19 TIME: user.data 0.93 ms
18.11 19:04:19 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 2 }
18.11 19:04:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:04:20 TIME: user.ping 0.3 ms
18.11 19:04:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:04:29 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:04:29 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:04:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:04:42 TIME: user.ping 0.37 ms
18.11 19:04:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:05:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:05:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:05:05 TIME: user.ping 0.53 ms
18.11 19:05:19 TIMER: Check auto-disconnect...
18.11 19:05:19 STATS: vdl.0 cache, locks:2
18.11 19:05:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:05:27 TIME: user.ping 0.37 ms
18.11 19:05:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:05:48 NET: Client (name:Aimer conid:33564749 WS) disconnected from vdl.0 (clients:0)
18.11 19:05:48 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
18.11 19:05:48 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
18.11 19:05:48 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.11 19:05:48 STATS: vdl.0 cache connection, 28 calls, total 0.0322387218475342 sec spent, avg 1.15 ms
18.11 19:05:48 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:05:48 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
18.11 19:05:48 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:05:48 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 497
Called from modules/VDLBattleModule.hx line 510
Called from snipe/slave/Server.hx line 994
18.11 19:05:48 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
18.11 19:05:48 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
18.11 19:05:48 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
18.11 19:05:48 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:05:48 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
18.11 19:05:48 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.11 19:06:01 NET: Client (conid:62453788) connected to vdl.0 (clients:1)
18.11 19:06:01 NET: Client (conid:62453788) switched protocol to WS
18.11 19:06:02 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:06:02 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:06:02 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:06:02 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
18.11 19:06:02 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:06:02 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.11 19:06:02 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:06:02 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479468312, lastLoginDate => 323, money => 2, lastLoadDate => 1119 }, effects => { list => [] } }}, version => 0, id => 76 } }
18.11 19:06:02 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:06:02 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 76 } }
18.11 19:06:02 NET: Client login (conid:62453788, id:76, name:Aimer)
18.11 19:06:02 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:06:02 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.11 19:06:02 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:06:02 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:06:02 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:06:02 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 2 }
18.11 19:06:02 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 2 }
18.11 19:06:02 TIME: user.data 0.9 ms
18.11 19:06:02 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 2 }
18.11 19:06:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:06:05 TIME: user.ping 0.35 ms
18.11 19:06:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:06:09 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:06:09 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:06:19 TIMER: Check auto-disconnect...
18.11 19:06:19 STATS: vdl.0 cache, locks:2
18.11 19:06:28 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:06:28 TIME: user.ping 0.4 ms
18.11 19:06:28 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:06:50 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:06:50 TIME: user.ping 0.28 ms
18.11 19:06:50 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:07:12 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:07:12 TIME: user.ping 0.21 ms
18.11 19:07:12 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:07:19 TIMER: Check auto-disconnect...
18.11 19:07:19 STATS: vdl.0 cache, locks:2
18.11 19:07:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:07:35 TIME: user.ping 0.33 ms
18.11 19:07:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:07:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:07:57 TIME: user.ping 0.29 ms
18.11 19:07:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:08:19 TIMER: Check auto-disconnect...
18.11 19:08:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:08:19 TIME: user.ping 0.35 ms
18.11 19:08:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:08:19 STATS: vdl.0 cache, locks:2
18.11 19:08:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:08:41 TIME: user.ping 0.28 ms
18.11 19:08:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:09:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:09:03 TIME: user.ping 0.18 ms
18.11 19:09:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:09:19 TIMER: Check auto-disconnect...
18.11 19:09:19 STATS: vdl.0 cache, locks:2
18.11 19:09:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:09:26 TIME: user.ping 0.28 ms
18.11 19:09:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:09:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:09:48 TIME: user.ping 0.26 ms
18.11 19:09:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:10:10 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:10:10 TIME: user.ping 0.33 ms
18.11 19:10:10 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:10:19 TIMER: Check auto-disconnect...
18.11 19:10:19 STATS: vdl.0 cache, locks:2
18.11 19:10:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:10:32 TIME: user.ping 0.28 ms
18.11 19:10:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:10:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:10:54 TIME: user.ping 0.36 ms
18.11 19:10:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:11:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:11:16 TIME: user.ping 0.26 ms
18.11 19:11:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:11:19 TIMER: Check auto-disconnect...
18.11 19:11:19 STATS: vdl.0 cache, locks:2
18.11 19:11:39 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:11:39 TIME: user.ping 0.32 ms
18.11 19:11:39 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:12:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:12:01 TIME: user.ping 0.27 ms
18.11 19:12:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:12:19 TIMER: Check auto-disconnect...
18.11 19:12:19 STATS: vdl.0 cache, locks:2
18.11 19:12:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:12:23 TIME: user.ping 0.55 ms
18.11 19:12:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:12:45 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:12:45 TIME: user.ping 0.49 ms
18.11 19:12:45 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:13:07 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:13:07 TIME: user.ping 0.33 ms
18.11 19:13:07 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:13:19 TIMER: Check auto-disconnect...
18.11 19:13:19 STATS: vdl.0 cache, locks:2
18.11 19:13:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:13:30 TIME: user.ping 0.35 ms
18.11 19:13:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:13:49 NET: Client (name:Aimer conid:62453788 WS) disconnected from vdl.0 (clients:0)
18.11 19:13:49 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
18.11 19:13:49 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
18.11 19:13:49 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.11 19:13:49 STATS: vdl.0 cache connection, 40 calls, total 0.0464069843292236 sec spent, avg 1.16 ms
18.11 19:13:49 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:13:49 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
18.11 19:13:49 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:13:49 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 497
Called from modules/VDLBattleModule.hx line 510
Called from snipe/slave/Server.hx line 994
18.11 19:13:49 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
18.11 19:13:49 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
18.11 19:13:49 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
18.11 19:13:49 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:13:49 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
18.11 19:13:49 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.11 19:13:52 NET: Client (conid:44449447) connected to vdl.0 (clients:1)
18.11 19:13:52 NET: Client (conid:44449447) switched protocol to WS
18.11 19:13:53 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:13:53 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:13:53 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:13:53 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
18.11 19:13:53 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:13:53 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.11 19:13:53 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:13:53 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479468312, lastLoginDate => 323, money => 2, lastLoadDate => 1119 }, effects => { list => [] } }}, version => 2, id => 76 } }
18.11 19:13:53 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:13:53 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 76 } }
18.11 19:13:53 NET: Client login (conid:44449447, id:76, name:Aimer)
18.11 19:13:53 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:13:53 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.11 19:13:53 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:13:53 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:13:53 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:13:53 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 2 }
18.11 19:13:53 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 2 }
18.11 19:13:53 TIME: user.data 0.7 ms
18.11 19:13:53 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 2 }
18.11 19:13:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:13:57 TIME: user.ping 0.35 ms
18.11 19:13:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:13:59 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:13:59 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
18.11 19:14:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:14:19 TIME: user.ping 0.29 ms
18.11 19:14:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:14:19 TIMER: Check auto-disconnect...
18.11 19:14:19 STATS: vdl.0 cache, locks:2
18.11 19:14:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:14:41 TIME: user.ping 0.31 ms
18.11 19:14:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:14:59 NET: Client (name:Aimer conid:44449447 WS) disconnected from vdl.0 (clients:0)
18.11 19:14:59 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
18.11 19:14:59 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
18.11 19:14:59 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.11 19:14:59 STATS: vdl.0 cache connection, 52 calls, total 0.0582602024078369 sec spent, avg 1.12 ms
18.11 19:14:59 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:14:59 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
18.11 19:14:59 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:14:59 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 497
Called from modules/VDLBattleModule.hx line 510
Called from snipe/slave/Server.hx line 994
18.11 19:14:59 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
18.11 19:14:59 -<<-: core/cache.update { errorCode => ok, version => 4, _type => core/cache.update }
18.11 19:14:59 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
18.11 19:14:59 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
18.11 19:14:59 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
18.11 19:14:59 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.11 19:15:08 NET: Client (conid:29503819) connected to vdl.0 (clients:1)
18.11 19:15:08 NET: Client (conid:29503819) switched protocol to WS
18.11 19:15:09 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:15:09 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:15:09 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:15:09 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
18.11 19:15:09 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:15:09 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.11 19:15:09 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:15:09 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479468312, lastLoginDate => 323, money => 2, lastLoadDate => 1119 }, effects => { list => [] } }}, version => 4, id => 76 } }
18.11 19:15:09 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:15:09 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 2, id => 76 } }
18.11 19:15:09 NET: Client login (conid:29503819, id:76, name:Aimer)
18.11 19:15:09 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:15:09 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.11 19:15:09 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:15:09 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:15:10 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:15:10 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 2 }
18.11 19:15:10 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 2 }
18.11 19:15:10 TIME: user.data 0.76 ms
18.11 19:15:10 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 2 }
18.11 19:15:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:15:13 TIME: user.ping 0.25 ms
18.11 19:15:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:15:19 TIMER: Check auto-disconnect...
18.11 19:15:19 STATS: vdl.0 cache, locks:2
18.11 19:15:19 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:15:19 -<<-: core/cache.update { errorCode => ok, version => 5, _type => core/cache.update }
18.11 19:15:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:15:35 TIME: user.ping 0.32 ms
18.11 19:15:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:15:39 ++ NET: Aimer req: user.addMoney { count => 1, messageType => user.addMoney }
18.11 19:15:39 TIME: user.addMoney 0.47 ms
18.11 19:15:39 == NET: Aimer ret: user.addMoney { type => user.addMoney, errorCode => ok, money => 3 }
18.11 19:15:39 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:15:39 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
18.11 19:15:39 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
18.11 19:15:39 TIME: user.data 0.98 ms
18.11 19:15:39 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
18.11 19:15:44 ->>-: core/cache.update { diff => {params => { attrs => { money => 3 } }}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:15:44 -<<-: core/cache.update { errorCode => ok, version => 6, _type => core/cache.update }
18.11 19:15:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:15:57 TIME: user.ping 0.33 ms
18.11 19:15:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:16:19 TIMER: Check auto-disconnect...
18.11 19:16:19 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:16:19 TIME: user.ping 0.27 ms
18.11 19:16:19 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:16:19 STATS: vdl.0 cache, locks:2
18.11 19:16:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:16:41 TIME: user.ping 0.51 ms
18.11 19:16:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:17:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:17:03 TIME: user.ping 0.42 ms
18.11 19:17:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:17:07 NET: Client (name:Aimer conid:29503819 WS) disconnected from vdl.0 (clients:0)
18.11 19:17:07 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
18.11 19:17:07 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
18.11 19:17:07 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.11 19:17:07 STATS: vdl.0 cache connection, 66 calls, total 0.0738868713378906 sec spent, avg 1.12 ms
18.11 19:17:07 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:17:07 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
18.11 19:17:07 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:17:07 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 497
Called from modules/VDLBattleModule.hx line 510
Called from snipe/slave/Server.hx line 994
18.11 19:17:07 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
18.11 19:17:07 -<<-: core/cache.update { errorCode => ok, version => 7, _type => core/cache.update }
18.11 19:17:07 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
18.11 19:17:07 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
18.11 19:17:07 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
18.11 19:17:07 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.11 19:17:17 NET: Client (conid:71389803) connected to vdl.0 (clients:1)
18.11 19:17:17 NET: Client (conid:71389803) switched protocol to WS
18.11 19:17:18 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:17:18 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:17:18 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:17:18 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
18.11 19:17:18 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:17:18 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.11 19:17:18 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:17:18 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479468312, lastLoginDate => 323, money => 3, lastLoadDate => 1119 }, effects => { list => [] } }}, version => 7, id => 76 } }
18.11 19:17:18 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:17:18 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 3, id => 76 } }
18.11 19:17:18 NET: Client login (conid:71389803, id:76, name:Aimer)
18.11 19:17:18 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:17:18 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.11 19:17:18 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:17:18 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:17:18 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:17:18 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
18.11 19:17:18 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
18.11 19:17:18 TIME: user.data 0.7 ms
18.11 19:17:18 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
18.11 19:17:19 TIMER: Check auto-disconnect...
18.11 19:17:19 STATS: vdl.0 cache, locks:2
18.11 19:17:22 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:17:22 TIME: user.ping 0.4 ms
18.11 19:17:22 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:17:24 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:17:24 -<<-: core/cache.update { errorCode => ok, version => 8, _type => core/cache.update }
18.11 19:17:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:17:46 TIME: user.ping 0.36 ms
18.11 19:17:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:18:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:18:08 TIME: user.ping 0.28 ms
18.11 19:18:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:18:19 TIMER: Check auto-disconnect...
18.11 19:18:19 STATS: vdl.0 cache, locks:2
18.11 19:18:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:18:30 TIME: user.ping 0.3 ms
18.11 19:18:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:18:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:18:51 TIME: user.ping 0.29 ms
18.11 19:18:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:19:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:19:15 TIME: user.ping 0.31 ms
18.11 19:19:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:19:19 TIMER: Check auto-disconnect...
18.11 19:19:19 STATS: vdl.0 cache, locks:2
18.11 19:19:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:19:37 TIME: user.ping 0.31 ms
18.11 19:19:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:19:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:19:58 TIME: user.ping 0.31 ms
18.11 19:19:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:20:04 NET: Client (name:Aimer conid:71389803 WS) disconnected from vdl.0 (clients:0)
18.11 19:20:04 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
18.11 19:20:04 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
18.11 19:20:04 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.11 19:20:04 STATS: vdl.0 cache connection, 78 calls, total 0.0839147567749023 sec spent, avg 1.08 ms
18.11 19:20:04 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:20:04 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
18.11 19:20:04 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:20:04 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 497
Called from modules/VDLBattleModule.hx line 510
Called from snipe/slave/Server.hx line 994
18.11 19:20:04 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
18.11 19:20:04 -<<-: core/cache.update { errorCode => ok, version => 9, _type => core/cache.update }
18.11 19:20:04 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
18.11 19:20:04 -<<-: core/cache.update { errorCode => ok, version => 4, _type => core/cache.update }
18.11 19:20:04 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
18.11 19:20:04 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.11 19:20:11 NET: Client (conid:78677728) connected to vdl.0 (clients:1)
18.11 19:20:11 NET: Client (conid:78677728) switched protocol to WS
18.11 19:20:12 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:20:12 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:20:12 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:20:12 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
18.11 19:20:12 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:20:12 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.11 19:20:12 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:20:12 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479468312, lastLoginDate => 323, money => 3, lastLoadDate => 1119 }, effects => { list => [] } }}, version => 9, id => 76 } }
18.11 19:20:12 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:20:12 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 4, id => 76 } }
18.11 19:20:12 NET: Client login (conid:78677728, id:76, name:Aimer)
18.11 19:20:12 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:20:12 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.11 19:20:12 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:20:12 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:20:12 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:20:12 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 3 }
18.11 19:20:12 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
18.11 19:20:12 TIME: user.data 0.85 ms
18.11 19:20:12 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 3 }
18.11 19:20:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:20:15 TIME: user.ping 0.43 ms
18.11 19:20:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:20:19 TIMER: Check auto-disconnect...
18.11 19:20:19 STATS: vdl.0 cache, locks:2
18.11 19:20:19 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:20:19 -<<-: core/cache.update { errorCode => ok, version => 10, _type => core/cache.update }
18.11 19:20:22 ++ NET: Aimer req: user.addMoney { count => 100, messageType => user.addMoney }
18.11 19:20:22 TIME: user.addMoney 0.51 ms
18.11 19:20:22 == NET: Aimer ret: user.addMoney { type => user.addMoney, errorCode => ok, money => 103 }
18.11 19:20:22 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:20:22 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 103 }
18.11 19:20:22 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 103 }
18.11 19:20:22 TIME: user.data 0.75 ms
18.11 19:20:22 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 103 }
18.11 19:20:29 ->>-: core/cache.update { diff => {params => { attrs => { money => 103 } }}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:20:29 -<<-: core/cache.update { errorCode => ok, version => 11, _type => core/cache.update }
18.11 19:20:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:20:37 TIME: user.ping 0.33 ms
18.11 19:20:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:20:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:20:58 TIME: user.ping 0.33 ms
18.11 19:20:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:21:16 NET: Client (name:Aimer conid:78677728 WS) disconnected from vdl.0 (clients:0)
18.11 19:21:16 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
18.11 19:21:16 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
18.11 19:21:16 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.11 19:21:16 STATS: vdl.0 cache connection, 92 calls, total 0.0972692966461182 sec spent, avg 1.06 ms
18.11 19:21:16 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:21:16 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
18.11 19:21:16 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:21:16 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 497
Called from modules/VDLBattleModule.hx line 510
Called from snipe/slave/Server.hx line 994
18.11 19:21:16 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
18.11 19:21:16 -<<-: core/cache.update { errorCode => ok, version => 12, _type => core/cache.update }
18.11 19:21:16 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
18.11 19:21:16 -<<-: core/cache.update { errorCode => ok, version => 5, _type => core/cache.update }
18.11 19:21:16 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
18.11 19:21:16 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.11 19:21:19 TIMER: Check auto-disconnect...
18.11 19:21:19 STATS: vdl.0 cache, locks:0
18.11 19:21:26 NET: Client (conid:17081010) connected to vdl.0 (clients:1)
18.11 19:21:26 NET: Client (conid:17081010) switched protocol to WS
18.11 19:21:27 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:21:27 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:21:27 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:21:27 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
18.11 19:21:27 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:21:27 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.11 19:21:27 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:21:27 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479468312, lastLoginDate => 323, money => 103, lastLoadDate => 1119 }, effects => { list => [] } }}, version => 0, id => 76 } }
18.11 19:21:27 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:21:27 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 76 } }
18.11 19:21:27 NET: Client login (conid:17081010, id:76, name:Aimer)
18.11 19:21:27 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:21:27 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.11 19:21:27 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:21:27 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:21:28 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:21:28 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 103 }
18.11 19:21:28 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 103 }
18.11 19:21:28 TIME: user.data 0.83 ms
18.11 19:21:28 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 103 }
18.11 19:21:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:21:31 TIME: user.ping 0.37 ms
18.11 19:21:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:21:34 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:21:34 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:21:39 ++ NET: Aimer req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
18.11 19:21:39 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
18.11 19:21:39 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ price => 300, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid12, id => 12 }], battleActive => null, rounddate => 2016-17-11 20:00, startdate => 2016-17-11 20:00 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
18.11 19:21:39 TIME: tournament.getAvailableTournament 4.41 ms
18.11 19:21:39 == NET: Aimer ret: tournament.getAvailableTournament { list => [{ price => 300, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid12, id => 12 }], battleActive => null, rounddate => 2016-17-11 20:00, startdate => 2016-17-11 20:00 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
18.11 19:21:53 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:21:53 TIME: user.ping 0.36 ms
18.11 19:21:53 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:22:15 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:22:15 TIME: user.ping 0.3 ms
18.11 19:22:15 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:22:19 TIMER: Check auto-disconnect...
18.11 19:22:19 STATS: vdl.0 cache, locks:2
18.11 19:22:37 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:22:37 TIME: user.ping 0.34 ms
18.11 19:22:37 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:22:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:22:58 TIME: user.ping 0.34 ms
18.11 19:22:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:23:19 TIMER: Check auto-disconnect...
18.11 19:23:19 STATS: vdl.0 cache, locks:2
18.11 19:23:20 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:23:20 TIME: user.ping 0.37 ms
18.11 19:23:20 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:23:41 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:23:41 TIME: user.ping 0.42 ms
18.11 19:23:41 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:24:03 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:24:03 TIME: user.ping 0.3 ms
18.11 19:24:03 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:24:19 TIMER: Check auto-disconnect...
18.11 19:24:19 STATS: vdl.0 cache, locks:2
18.11 19:24:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:24:25 TIME: user.ping 0.28 ms
18.11 19:24:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:24:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:24:46 TIME: user.ping 0.31 ms
18.11 19:24:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:25:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:25:08 TIME: user.ping 0.29 ms
18.11 19:25:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:25:19 TIMER: Check auto-disconnect...
18.11 19:25:19 STATS: vdl.0 cache, locks:2
18.11 19:25:30 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:25:30 TIME: user.ping 0.29 ms
18.11 19:25:30 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:25:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:25:51 TIME: user.ping 0.32 ms
18.11 19:25:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:26:13 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:26:13 TIME: user.ping 0.29 ms
18.11 19:26:13 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:26:19 TIMER: Check auto-disconnect...
18.11 19:26:19 STATS: vdl.0 cache, locks:2
18.11 19:26:34 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:26:34 TIME: user.ping 0.3 ms
18.11 19:26:34 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:26:56 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:26:56 TIME: user.ping 0.48 ms
18.11 19:26:56 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:27:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:27:18 TIME: user.ping 0.22 ms
18.11 19:27:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:27:19 TIMER: Check auto-disconnect...
18.11 19:27:19 STATS: vdl.0 cache, locks:2
18.11 19:27:39 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:27:39 TIME: user.ping 0.39 ms
18.11 19:27:39 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:28:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:28:01 TIME: user.ping 0.48 ms
18.11 19:28:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:28:19 TIMER: Check auto-disconnect...
18.11 19:28:19 STATS: vdl.0 cache, locks:2
18.11 19:28:23 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:28:23 TIME: user.ping 0.26 ms
18.11 19:28:23 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:28:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:28:44 TIME: user.ping 0.31 ms
18.11 19:28:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:29:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:29:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:29:06 TIME: user.ping 0.22 ms
18.11 19:29:19 TIMER: Check auto-disconnect...
18.11 19:29:19 STATS: vdl.0 cache, locks:2
18.11 19:29:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:29:27 TIME: user.ping 0.28 ms
18.11 19:29:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:29:49 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:29:49 TIME: user.ping 0.36 ms
18.11 19:29:49 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:30:11 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:30:11 TIME: user.ping 0.29 ms
18.11 19:30:11 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:30:19 TIMER: Check auto-disconnect...
18.11 19:30:19 STATS: vdl.0 cache, locks:2
18.11 19:30:32 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:30:32 TIME: user.ping 0.31 ms
18.11 19:30:32 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:30:54 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:30:54 TIME: user.ping 0.14 ms
18.11 19:30:54 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:31:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:31:16 TIME: user.ping 0.15 ms
18.11 19:31:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:31:19 TIMER: Check auto-disconnect...
18.11 19:31:19 STATS: vdl.0 cache, locks:2
18.11 19:35:23 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
18.11 19:35:23 -<<-: server.login ok
18.11 19:35:23 DB: SELECT * FROM LocalizationStrings
18.11 19:35:23 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 TIMER: Starting timer...
18.11 19:35:23 TIMER: Timer running...
18.11 19:35:23 DB: SELECT * FROM GameVars
18.11 19:35:23 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.11 19:35:23 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.11 19:35:23 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.11 19:35:23 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.11 19:35:23 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.11 19:35:23 -<<-: core/quest.getDaily ok
18.11 19:35:23 DB: SELECT * FROM UserAttributeTypes
18.11 19:35:23 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 DB: SELECT * FROM UserVariableTypes
18.11 19:35:23 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.11 19:35:23 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 DB: SELECT * FROM ItemGroups
18.11 19:35:23 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 DB: SELECT * FROM Bundles ORDER BY ID
18.11 19:35:23 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 DB: SELECT * FROM BundleItems ORDER BY ID
18.11 19:35:23 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 SHOP: loading items...
18.11 19:35:23 ->>-: core/shop.getList { _type => core/shop.getList }
18.11 19:35:23 -<<-: core/shop.getList ok
18.11 19:35:23 SHOP: 0 items loaded (0 sec)
18.11 19:35:23 DB: SELECT * FROM EffectAttributeTypes
18.11 19:35:23 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 DB: SELECT * FROM Effects
18.11 19:35:23 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.11 19:35:23 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.11 19:35:23 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 DB: SELECT * FROM Badges
18.11 19:35:23 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 NET: Client (conid:9822380) connected to vdl.0 (clients:1)
18.11 19:35:23 NET: Client (conid:9822380) switched protocol to WS
18.11 19:35:23 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:35:23 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:35:23 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:35:23 -<<-: core/server.query ok
18.11 19:35:23 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:35:23 -<<-: core/user.isOnlineID ok
18.11 19:35:23 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:35:23 -<<-: core/cache.get ok
18.11 19:35:23 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:35:23 -<<-: core/cache.get ok
18.11 19:35:23 NET: Client login (conid:9822380, id:76, name:Aimer)
18.11 19:35:23 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:35:23 -<<-: core/user.loginPost null
18.11 19:35:23 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:35:23 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:35:23 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:35:23 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 103 }
18.11 19:35:23 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 103 }
18.11 19:35:23 TIME: user.data 0.99 ms
18.11 19:35:23 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 103 }
18.11 19:35:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:35:25 TIME: user.ping 0.43 ms
18.11 19:35:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:35:33 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:35:33 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:35:37 ++ NET: Aimer req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
18.11 19:35:37 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
18.11 19:35:37 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ price => 300, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid12, id => 12 }], battleActive => null, rounddate => 2016-17-11 20:00, startdate => 2016-18-11 20:00 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
18.11 19:35:37 TIME: tournament.getAvailableTournament 5.37 ms
18.11 19:35:37 == NET: Aimer ret: tournament.getAvailableTournament { list => [{ price => 300, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid12, id => 12 }], battleActive => null, rounddate => 2016-17-11 20:00, startdate => 2016-18-11 20:00 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
18.11 19:35:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:35:46 TIME: user.ping 0.31 ms
18.11 19:35:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:35:51 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:35:51 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 103 }
18.11 19:35:51 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 103 }
18.11 19:35:51 TIME: user.data 1 ms
18.11 19:35:51 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 103 }
18.11 19:36:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:36:06 TIME: user.ping 0.51 ms
18.11 19:36:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:36:07 ++ NET: Aimer req: user.addMoney { count => 100, messageType => user.addMoney }
18.11 19:36:07 TIME: user.addMoney 0.31 ms
18.11 19:36:07 == NET: Aimer ret: user.addMoney { type => user.addMoney, errorCode => ok, money => 203 }
18.11 19:36:08 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:36:08 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 203 }
18.11 19:36:08 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 203 }
18.11 19:36:08 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 203 }
18.11 19:36:08 TIME: user.data 1 ms
18.11 19:36:11 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:36:11 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 203 }
18.11 19:36:11 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 203 }
18.11 19:36:11 TIME: user.data 0.85 ms
18.11 19:36:11 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 203 }
18.11 19:36:13 ->>-: core/cache.update { diff => {params => { attrs => { money => 203 } }}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:36:13 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
18.11 19:36:14 ++ NET: Aimer req: user.addMoney { count => 100, messageType => user.addMoney }
18.11 19:36:14 TIME: user.addMoney 0.37 ms
18.11 19:36:14 == NET: Aimer ret: user.addMoney { type => user.addMoney, errorCode => ok, money => 303 }
18.11 19:36:14 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:36:14 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:36:14 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:36:14 TIME: user.data 0.71 ms
18.11 19:36:14 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:36:18 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:36:18 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:36:18 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:36:18 TIME: user.data 1.04 ms
18.11 19:36:18 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:36:18 ++ NET: Aimer req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
18.11 19:36:18 ->>-: vdl/cache.tournament.getPrice { tournamentId => 1, _type => vdl/cache.tournament.getPrice }
18.11 19:36:18 -<<-: vdl/cache.tournament.getPrice { errorCode => _requestException, _type => vdl/cache.tournament.getPrice }
18.11 19:36:18 TRACE: tournament.addUsers : cacheRequest exception { tournamentId => 1, _type => vdl/cache.tournament.getPrice }
18.11 19:36:18 TRACE: tournament.addUsers : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 193
Called from modules/VDLTournamentModule.hx line 65
Called from snipe/slave/Server.hx line 1176
18.11 19:36:21 NET: Client (name:Aimer conid:9822380 WS) disconnected from vdl.0 (clients:0)
18.11 19:36:21 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
18.11 19:36:21 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
18.11 19:36:21 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.11 19:36:21 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:36:21 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
18.11 19:36:21 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:36:21 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 497
Called from modules/VDLBattleModule.hx line 510
Called from snipe/slave/Server.hx line 994
18.11 19:36:21 ->>-: core/cache.update { diff => {params => { attrs => { money => 303 } }}, type => user, unlock => true, id => 76, _type => core/cache.update }
18.11 19:36:21 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
18.11 19:36:21 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
18.11 19:36:21 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:36:21 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
18.11 19:36:21 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.11 19:36:23 TIMER: Check auto-disconnect...
18.11 19:36:23 STATS: vdl.0 cache, locks:0
18.11 19:36:26 NET: Client (conid:38516989) connected to vdl.0 (clients:1)
18.11 19:36:26 NET: Client (conid:38516989) switched protocol to WS
18.11 19:36:26 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:36:26 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:36:26 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:36:26 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
18.11 19:36:26 STATS: vdl.0 cache connection, 41 calls, total 0.0545446872711182 sec spent, avg 1.33 ms
18.11 19:36:26 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:36:26 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.11 19:36:26 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:36:26 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479468312, lastLoginDate => 323, money => 303, lastLoadDate => 1119 }, effects => { list => [] } }}, version => 3, id => 76 } }
18.11 19:36:26 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:36:26 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 76 } }
18.11 19:36:26 NET: Client login (conid:38516989, id:76, name:Aimer)
18.11 19:36:26 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:36:26 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.11 19:36:26 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:36:26 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:36:26 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:36:26 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:36:26 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:36:26 TIME: user.data 0.95 ms
18.11 19:36:26 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:41:07 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
18.11 19:41:07 -<<-: server.login ok
18.11 19:41:07 DB: SELECT * FROM LocalizationStrings
18.11 19:41:07 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:07 TIMER: Starting timer...
18.11 19:41:07 TIMER: Timer running...
18.11 19:41:07 DB: SELECT * FROM GameVars
18.11 19:41:07 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:07 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.11 19:41:07 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:07 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.11 19:41:07 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:07 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.11 19:41:07 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:07 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.11 19:41:07 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:07 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.11 19:41:07 -<<-: core/quest.getDaily ok
18.11 19:41:07 DB: SELECT * FROM UserAttributeTypes
18.11 19:41:07 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:07 DB: SELECT * FROM UserVariableTypes
18.11 19:41:07 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:07 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.11 19:41:07 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:07 DB: SELECT * FROM ItemGroups
18.11 19:41:07 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:07 DB: SELECT * FROM Bundles ORDER BY ID
18.11 19:41:07 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:07 DB: SELECT * FROM BundleItems ORDER BY ID
18.11 19:41:07 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:07 SHOP: loading items...
18.11 19:41:07 ->>-: core/shop.getList { _type => core/shop.getList }
18.11 19:41:07 -<<-: core/shop.getList ok
18.11 19:41:07 SHOP: 0 items loaded (0 sec)
18.11 19:41:07 DB: SELECT * FROM EffectAttributeTypes
18.11 19:41:07 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:07 DB: SELECT * FROM Effects
18.11 19:41:07 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:07 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.11 19:41:07 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:07 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.11 19:41:07 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:07 DB: SELECT * FROM Badges
18.11 19:41:07 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.11 19:41:07 -<<-: core/server.query ok
18.11 19:41:13 NET: Client (conid:79345540) connected to vdl.0 (clients:1)
18.11 19:41:13 NET: Client (conid:79345540) switched protocol to WS
18.11 19:41:14 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:41:14 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:41:14 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:41:14 -<<-: core/server.query ok
18.11 19:41:14 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:41:14 -<<-: core/user.isOnlineID ok
18.11 19:41:14 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:41:14 -<<-: core/cache.get ok
18.11 19:41:14 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:41:14 -<<-: core/cache.get ok
18.11 19:41:14 NET: Client login (conid:79345540, id:76, name:Aimer)
18.11 19:41:14 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:41:14 -<<-: core/user.loginPost null
18.11 19:41:14 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:41:14 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:41:14 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:41:14 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:41:14 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:41:14 TIME: user.data 1.05 ms
18.11 19:41:14 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:41:17 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:41:17 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:41:17 TIME: user.ping 0.51 ms
18.11 19:41:20 ++ NET: Aimer req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
18.11 19:41:20 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
18.11 19:41:20 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ price => 300, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid12, id => 12 }], battleActive => null, rounddate => 2016-17-11 20:00, startdate => 2016-18-11 20:00 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
18.11 19:41:20 TIME: tournament.getAvailableTournament 6.68 ms
18.11 19:41:20 == NET: Aimer ret: tournament.getAvailableTournament { list => [{ price => 300, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid12, id => 12 }], battleActive => null, rounddate => 2016-17-11 20:00, startdate => 2016-18-11 20:00 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
18.11 19:41:22 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:41:22 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:41:23 ++ NET: Aimer req: tournament.grid { tournamentId => 1, round => 1, messageType => tournament.grid }
18.11 19:41:23 ->>-: vdl/cache.tournament.getStatus { tournamentId => 1, _type => vdl/cache.tournament.getStatus }
18.11 19:41:23 -<<-: vdl/cache.tournament.getStatus { errorCode => ok, _type => vdl/cache.tournament.getStatus, status => starting }
18.11 19:41:23 ->>-: vdl/cache.tournament.getAvailableTournamentUsers { tournamentId => 1, _type => vdl/cache.tournament.getAvailableTournamentUsers }
18.11 19:41:23 -<<-: vdl/cache.tournament.getAvailableTournamentUsers { errorCode => ok, _type => vdl/cache.tournament.getAvailableTournamentUsers, users => [12] }
18.11 19:41:23 ->>-: vdl/cache.tournament.setGrid { battles => [{ winner => -1, round => 1, player1 => null, player2 => 12 }], tournamentId => 1, round => 1, _type => vdl/cache.tournament.setGrid, status => starting }
18.11 19:41:23 -<<-: vdl/cache.tournament.setGrid { list => [{ winner => -1, round => 1, player1 => null, player2 => 12 }], tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
18.11 19:41:23 TIME: tournament.grid 2.44 ms
18.11 19:41:23 == NET: Aimer ret: tournament.grid { list => [{ winner => -1, round => 1, player1 => null, player2 => 12 }], type => tournament.grid, tournamentId => 1, errorCode => ok, _type => vdl/cache.tournament.setGrid }
18.11 19:41:33 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:41:33 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:41:33 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:41:33 TIME: user.data 1.18 ms
18.11 19:41:33 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:41:33 ++ NET: Aimer req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
18.11 19:41:33 ->>-: vdl/cache.tournament.getPrice { tournamentId => 1, _type => vdl/cache.tournament.getPrice }
18.11 19:41:33 -<<-: vdl/cache.tournament.getPrice { errorCode => _requestException, _type => vdl/cache.tournament.getPrice }
18.11 19:41:33 TRACE: tournament.addUsers : cacheRequest exception { tournamentId => 1, _type => vdl/cache.tournament.getPrice }
18.11 19:41:33 TRACE: tournament.addUsers : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 196
Called from modules/VDLTournamentModule.hx line 65
Called from snipe/slave/Server.hx line 1176
18.11 19:41:36 NET: Client (name:Aimer conid:79345540 WS) disconnected from vdl.0 (clients:0)
18.11 19:41:36 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
18.11 19:41:36 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
18.11 19:41:36 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.11 19:41:36 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:41:36 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
18.11 19:41:36 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:41:36 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 497
Called from modules/VDLBattleModule.hx line 510
Called from snipe/slave/Server.hx line 994
18.11 19:41:36 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
18.11 19:41:36 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
18.11 19:41:36 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
18.11 19:41:36 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:41:36 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
18.11 19:41:36 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.11 19:41:41 NET: Client (conid:22087381) connected to vdl.0 (clients:1)
18.11 19:41:41 NET: Client (conid:22087381) switched protocol to WS
18.11 19:41:41 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:41:41 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:41:41 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:41:41 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
18.11 19:41:41 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:41:41 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.11 19:41:41 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:41:41 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479468312, lastLoginDate => 323, money => 303, lastLoadDate => 1119 }, effects => { list => [] } }}, version => 2, id => 76 } }
18.11 19:41:41 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:41:41 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 76 } }
18.11 19:41:41 NET: Client login (conid:22087381, id:76, name:Aimer)
18.11 19:41:41 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:41:41 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.11 19:41:41 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:41:41 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:41:41 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:41:41 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:41:41 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:41:41 TIME: user.data 0.89 ms
18.11 19:41:41 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:41:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:41:44 TIME: user.ping 0.35 ms
18.11 19:41:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:41:47 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:41:47 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
18.11 19:42:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:42:05 TIME: user.ping 0.15 ms
18.11 19:42:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:42:07 TIMER: Check auto-disconnect...
18.11 19:42:07 STATS: vdl.0 cache, locks:2
18.11 19:42:26 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:42:26 TIME: user.ping 0.37 ms
18.11 19:42:26 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:42:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:42:48 TIME: user.ping 0.36 ms
18.11 19:42:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:42:53 ++ NET: Aimer req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
18.11 19:42:53 ->>-: vdl/cache.tournament.getAvailableTournament { _type => vdl/cache.tournament.getAvailableTournament }
18.11 19:42:53 -<<-: vdl/cache.tournament.getAvailableTournament { list => [{ price => 300, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid12, id => 12 }], battleActive => null, rounddate => 2016-17-11 20:00, startdate => 2016-18-11 20:00 }], count => 1, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
18.11 19:42:53 STATS: vdl.0 cache connection, 46 calls, total 0.0669667720794678 sec spent, avg 1.46 ms
18.11 19:42:53 TIME: tournament.getAvailableTournament 4.34 ms
18.11 19:42:53 == NET: Aimer ret: tournament.getAvailableTournament { list => [{ price => 300, name => test, type => once, winner => -1, battleFinished => null, round => 1, id => 1, status => starting, userList => [{ name => uid12, id => 12 }], battleActive => null, rounddate => 2016-17-11 20:00, startdate => 2016-18-11 20:00 }], count => 1, type => tournament.getAvailableTournament, errorCode => ok, _type => vdl/cache.tournament.getAvailableTournament }
18.11 19:43:07 TIMER: Check auto-disconnect...
18.11 19:43:07 STATS: vdl.0 cache, locks:2
18.11 19:43:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:43:09 TIME: user.ping 0.29 ms
18.11 19:43:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:43:31 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:43:31 TIME: user.ping 0.35 ms
18.11 19:43:31 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:43:52 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:43:52 TIME: user.ping 0.4 ms
18.11 19:43:52 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:44:07 TIMER: Check auto-disconnect...
18.11 19:44:07 STATS: vdl.0 cache, locks:2
18.11 19:44:14 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:44:14 TIME: user.ping 0.25 ms
18.11 19:44:14 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:44:35 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:44:35 TIME: user.ping 0.32 ms
18.11 19:44:35 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:44:57 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:44:57 TIME: user.ping 0.38 ms
18.11 19:44:57 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:45:07 TIMER: Check auto-disconnect...
18.11 19:45:07 STATS: vdl.0 cache, locks:2
18.11 19:45:18 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:45:18 TIME: user.ping 0.32 ms
18.11 19:45:18 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:45:40 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:45:40 TIME: user.ping 0.34 ms
18.11 19:45:40 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:46:01 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:46:01 TIME: user.ping 0.35 ms
18.11 19:46:01 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:46:07 TIMER: Check auto-disconnect...
18.11 19:46:07 STATS: vdl.0 cache, locks:2
18.11 19:46:22 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:46:22 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:46:22 TIME: user.ping 0.13 ms
18.11 19:46:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:46:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:46:44 TIME: user.ping 0.47 ms
18.11 19:47:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:47:05 TIME: user.ping 0.42 ms
18.11 19:47:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:47:07 TIMER: Check auto-disconnect...
18.11 19:47:07 STATS: vdl.0 cache, locks:2
18.11 19:47:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:47:27 TIME: user.ping 0.58 ms
18.11 19:47:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:47:48 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:47:48 TIME: user.ping 0.28 ms
18.11 19:47:48 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:48:07 TIMER: Check auto-disconnect...
18.11 19:48:07 STATS: vdl.0 cache, locks:2
18.11 19:48:09 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:48:09 TIME: user.ping 0.34 ms
18.11 19:48:09 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:48:56 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
18.11 19:48:56 -<<-: server.login ok
18.11 19:48:56 DB: SELECT * FROM LocalizationStrings
18.11 19:48:56 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:56 TIMER: Starting timer...
18.11 19:48:56 DB: SELECT * FROM GameVars
18.11 19:48:56 TIMER: Timer running...
18.11 19:48:56 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:56 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.11 19:48:56 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:56 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.11 19:48:56 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:56 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.11 19:48:56 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:56 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.11 19:48:56 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:56 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.11 19:48:56 -<<-: core/quest.getDaily ok
18.11 19:48:56 DB: SELECT * FROM UserAttributeTypes
18.11 19:48:56 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:56 DB: SELECT * FROM UserVariableTypes
18.11 19:48:56 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:56 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.11 19:48:56 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:56 DB: SELECT * FROM ItemGroups
18.11 19:48:56 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:56 DB: SELECT * FROM Bundles ORDER BY ID
18.11 19:48:56 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:56 DB: SELECT * FROM BundleItems ORDER BY ID
18.11 19:48:56 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:56 SHOP: loading items...
18.11 19:48:56 ->>-: core/shop.getList { _type => core/shop.getList }
18.11 19:48:56 -<<-: core/shop.getList ok
18.11 19:48:56 SHOP: 0 items loaded (0 sec)
18.11 19:48:56 DB: SELECT * FROM EffectAttributeTypes
18.11 19:48:56 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:56 DB: SELECT * FROM Effects
18.11 19:48:56 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:56 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.11 19:48:56 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:56 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.11 19:48:56 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:56 DB: SELECT * FROM Badges
18.11 19:48:56 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.11 19:48:56 -<<-: core/server.query ok
18.11 19:48:57 NET: Client (conid:7163034) connected to vdl.0 (clients:1)
18.11 19:48:57 NET: Client (conid:7163034) switched protocol to WS
18.11 19:48:57 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:48:57 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:48:57 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:48:57 -<<-: core/server.query ok
18.11 19:48:57 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:48:57 -<<-: core/user.isOnlineID ok
18.11 19:48:57 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:48:57 -<<-: core/cache.get ok
18.11 19:48:57 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:48:57 -<<-: core/cache.get ok
18.11 19:48:57 NET: Client login (conid:7163034, id:76, name:Aimer)
18.11 19:48:57 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:48:57 -<<-: core/user.loginPost null
18.11 19:48:57 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:48:57 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:48:57 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:48:57 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:48:57 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:48:57 TIME: user.data 0.94 ms
18.11 19:48:57 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:48:58 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:48:58 TIME: user.ping 0.34 ms
18.11 19:48:58 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:49:03 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:49:03 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:49:03 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:49:03 TIME: user.data 1.03 ms
18.11 19:49:03 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:49:03 ++ NET: Aimer req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
18.11 19:49:03 ->>-: vdl/cache.tournament.getPrice { tournamentId => 1, _type => vdl/cache.tournament.getPrice }
18.11 19:49:03 -<<-: vdl/cache.tournament.getPrice { errorCode => _requestException, _type => vdl/cache.tournament.getPrice }
18.11 19:49:03 TRACE: tournament.addUsers : cacheRequest exception { tournamentId => 1, _type => vdl/cache.tournament.getPrice }
18.11 19:49:03 TRACE: tournament.addUsers : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 196
Called from modules/VDLTournamentModule.hx line 65
Called from snipe/slave/Server.hx line 1176
18.11 19:49:06 NET: Client (name:Aimer conid:7163034 WS) disconnected from vdl.0 (clients:0)
18.11 19:49:06 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
18.11 19:49:06 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
18.11 19:49:06 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.11 19:49:06 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:49:06 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
18.11 19:49:06 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:49:06 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 497
Called from modules/VDLBattleModule.hx line 510
Called from snipe/slave/Server.hx line 994
18.11 19:49:06 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => true, id => 76, _type => core/cache.update }
18.11 19:49:06 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:49:06 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
18.11 19:49:06 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:49:06 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
18.11 19:49:06 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.11 19:49:11 NET: Client (conid:4302795) connected to vdl.0 (clients:1)
18.11 19:49:11 NET: Client (conid:4302795) switched protocol to WS
18.11 19:49:11 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:49:11 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:49:11 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:49:11 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
18.11 19:49:11 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:49:11 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.11 19:49:11 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:49:11 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479468312, lastLoginDate => 323, money => 303, lastLoadDate => 1119 }, effects => { list => [] } }}, version => 1, id => 76 } }
18.11 19:49:11 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:49:11 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 76 } }
18.11 19:49:11 NET: Client login (conid:4302795, id:76, name:Aimer)
18.11 19:49:11 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:49:11 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.11 19:49:11 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:49:11 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:49:11 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:49:11 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:49:11 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:49:11 TIME: user.data 4.06 ms
18.11 19:49:11 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:49:16 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:49:16 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
18.11 19:49:24 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:49:24 TIME: user.ping 0.42 ms
18.11 19:49:24 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:49:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:49:44 TIME: user.ping 0.33 ms
18.11 19:49:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:49:56 TIMER: Check auto-disconnect...
18.11 19:49:56 STATS: vdl.0 cache, locks:2
18.11 19:50:05 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:50:05 TIME: user.ping 0.33 ms
18.11 19:50:05 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:50:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:50:25 TIME: user.ping 0.38 ms
18.11 19:50:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:50:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:50:46 TIME: user.ping 0.16 ms
18.11 19:50:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:50:56 TIMER: Check auto-disconnect...
18.11 19:50:56 STATS: vdl.0 cache, locks:2
18.11 19:51:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:51:06 TIME: user.ping 0.32 ms
18.11 19:51:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:51:27 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:51:27 TIME: user.ping 0.17 ms
18.11 19:51:27 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:51:47 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:51:47 TIME: user.ping 0.35 ms
18.11 19:51:47 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:51:56 TIMER: Check auto-disconnect...
18.11 19:51:56 STATS: vdl.0 cache, locks:2
18.11 19:52:08 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:52:08 TIME: user.ping 0.28 ms
18.11 19:52:08 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:52:50 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
18.11 19:52:50 -<<-: server.login ok
18.11 19:52:50 DB: SELECT * FROM LocalizationStrings
18.11 19:52:50 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 TIMER: Starting timer...
18.11 19:52:50 TIMER: Timer running...
18.11 19:52:50 DB: SELECT * FROM GameVars
18.11 19:52:50 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.11 19:52:50 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.11 19:52:50 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.11 19:52:50 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.11 19:52:50 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.11 19:52:50 -<<-: core/quest.getDaily ok
18.11 19:52:50 DB: SELECT * FROM UserAttributeTypes
18.11 19:52:50 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 DB: SELECT * FROM UserVariableTypes
18.11 19:52:50 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.11 19:52:50 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 DB: SELECT * FROM ItemGroups
18.11 19:52:50 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 DB: SELECT * FROM Bundles ORDER BY ID
18.11 19:52:50 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 DB: SELECT * FROM BundleItems ORDER BY ID
18.11 19:52:50 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 SHOP: loading items...
18.11 19:52:50 ->>-: core/shop.getList { _type => core/shop.getList }
18.11 19:52:50 -<<-: core/shop.getList ok
18.11 19:52:50 SHOP: 0 items loaded (0 sec)
18.11 19:52:50 DB: SELECT * FROM EffectAttributeTypes
18.11 19:52:50 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 DB: SELECT * FROM Effects
18.11 19:52:50 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.11 19:52:50 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.11 19:52:50 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 DB: SELECT * FROM Badges
18.11 19:52:50 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 NET: Client (conid:29557678) connected to vdl.0 (clients:1)
18.11 19:52:50 NET: Client (conid:29557678) switched protocol to WS
18.11 19:52:50 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:52:50 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:52:50 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:52:50 -<<-: core/server.query ok
18.11 19:52:50 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:52:50 -<<-: core/user.isOnlineID ok
18.11 19:52:50 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:52:50 -<<-: core/cache.get ok
18.11 19:52:50 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:52:50 -<<-: core/cache.get ok
18.11 19:52:50 NET: Client login (conid:29557678, id:76, name:Aimer)
18.11 19:52:50 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:52:50 -<<-: core/user.loginPost null
18.11 19:52:50 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:52:50 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:52:50 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:52:50 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:52:50 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:52:50 TIME: user.data 1.17 ms
18.11 19:52:50 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:52:51 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:52:51 TIME: user.ping 0.25 ms
18.11 19:52:51 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:52:55 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:52:55 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:52:55 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:52:55 TIME: user.data 1.25 ms
18.11 19:52:55 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:52:55 ++ NET: Aimer req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
18.11 19:52:55 ->>-: vdl/cache.tournament.getPrice { tournamentId => 1, _type => vdl/cache.tournament.getPrice }
18.11 19:52:55 -<<-: vdl/cache.tournament.getPrice { errorCode => _requestException, _type => vdl/cache.tournament.getPrice }
18.11 19:52:55 TRACE: tournament.addUsers : cacheRequest exception { tournamentId => 1, _type => vdl/cache.tournament.getPrice }
18.11 19:52:55 TRACE: tournament.addUsers : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLTournamentModule.hx line 196
Called from modules/VDLTournamentModule.hx line 65
Called from snipe/slave/Server.hx line 1176
18.11 19:52:58 NET: Client (name:Aimer conid:29557678 WS) disconnected from vdl.0 (clients:0)
18.11 19:52:58 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
18.11 19:52:58 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
18.11 19:52:58 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.11 19:52:58 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:52:58 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
18.11 19:52:58 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:52:58 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 497
Called from modules/VDLBattleModule.hx line 510
Called from snipe/slave/Server.hx line 994
18.11 19:52:58 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => true, id => 76, _type => core/cache.update }
18.11 19:52:58 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:52:58 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
18.11 19:52:58 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:52:58 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
18.11 19:52:58 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.11 19:53:03 NET: Client (conid:69601791) connected to vdl.0 (clients:1)
18.11 19:53:03 NET: Client (conid:69601791) switched protocol to WS
18.11 19:53:03 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:53:03 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:53:03 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:53:03 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
18.11 19:53:03 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:53:03 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.11 19:53:03 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:53:03 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479468312, lastLoginDate => 323, money => 303, lastLoadDate => 1119 }, effects => { list => [] } }}, version => 1, id => 76 } }
18.11 19:53:03 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:53:03 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 76 } }
18.11 19:53:03 NET: Client login (conid:69601791, id:76, name:Aimer)
18.11 19:53:03 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:53:03 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.11 19:53:03 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:53:03 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:53:03 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:53:03 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:53:03 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:53:03 TIME: user.data 0.91 ms
18.11 19:53:03 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:53:10 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:53:10 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
18.11 19:53:17 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:53:17 TIME: user.ping 0.27 ms
18.11 19:53:17 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:53:38 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:53:38 TIME: user.ping 0.28 ms
18.11 19:53:38 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:53:50 TIMER: Check auto-disconnect...
18.11 19:53:50 STATS: vdl.0 cache, locks:2
18.11 19:54:14 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
18.11 19:54:14 -<<-: server.login ok
18.11 19:54:14 DB: SELECT * FROM LocalizationStrings
18.11 19:54:14 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:14 TIMER: Starting timer...
18.11 19:54:14 TIMER: Timer running...
18.11 19:54:14 DB: SELECT * FROM GameVars
18.11 19:54:14 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:14 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.11 19:54:14 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:14 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.11 19:54:14 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:14 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.11 19:54:14 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:14 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.11 19:54:14 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:14 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.11 19:54:14 -<<-: core/quest.getDaily ok
18.11 19:54:14 DB: SELECT * FROM UserAttributeTypes
18.11 19:54:14 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:14 DB: SELECT * FROM UserVariableTypes
18.11 19:54:14 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:14 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.11 19:54:14 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:14 DB: SELECT * FROM ItemGroups
18.11 19:54:14 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:14 DB: SELECT * FROM Bundles ORDER BY ID
18.11 19:54:14 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:14 DB: SELECT * FROM BundleItems ORDER BY ID
18.11 19:54:14 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:14 SHOP: loading items...
18.11 19:54:14 ->>-: core/shop.getList { _type => core/shop.getList }
18.11 19:54:14 -<<-: core/shop.getList ok
18.11 19:54:14 SHOP: 0 items loaded (0 sec)
18.11 19:54:14 DB: SELECT * FROM EffectAttributeTypes
18.11 19:54:14 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:14 DB: SELECT * FROM Effects
18.11 19:54:14 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:14 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.11 19:54:14 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:14 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.11 19:54:14 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:14 DB: SELECT * FROM Badges
18.11 19:54:14 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.11 19:54:14 -<<-: core/server.query ok
18.11 19:54:19 NET: Client (conid:34434910) connected to vdl.0 (clients:1)
18.11 19:54:19 NET: Client (conid:34434910) switched protocol to WS
18.11 19:54:19 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:54:19 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:54:19 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:54:19 -<<-: core/server.query ok
18.11 19:54:19 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:54:19 -<<-: core/user.isOnlineID ok
18.11 19:54:19 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:54:19 -<<-: core/cache.get ok
18.11 19:54:19 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:54:19 -<<-: core/cache.get ok
18.11 19:54:19 NET: Client login (conid:34434910, id:76, name:Aimer)
18.11 19:54:19 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:54:19 -<<-: core/user.loginPost null
18.11 19:54:19 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:54:19 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:54:19 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:54:19 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:54:19 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:54:19 TIME: user.data 0.97 ms
18.11 19:54:19 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:54:20 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:54:20 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:54:20 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:54:20 TIME: user.data 1.23 ms
18.11 19:54:20 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:54:20 ++ NET: Aimer req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
18.11 19:54:20 ->>-: vdl/cache.tournament.getPrice { tournamentId => 1, _type => vdl/cache.tournament.getPrice }
18.11 19:54:20 -<<-: vdl/cache.tournament.getPrice { price => 300, _type => vdl/cache.tournament.getPrice }
18.11 19:54:20 TIME: tournament.addUsers 3.33 ms
18.11 19:54:20 == NET: Aimer ret: tournament.addUsers { type => tournament.addUsers, errorCode => not enough money }
18.11 19:54:21 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:54:21 TIME: user.ping 0.41 ms
18.11 19:54:21 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:54:24 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:54:24 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:54:42 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:54:42 TIME: user.ping 0.44 ms
18.11 19:54:42 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:55:17 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
18.11 19:55:17 -<<-: server.login ok
18.11 19:55:17 DB: SELECT * FROM LocalizationStrings
18.11 19:55:17 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:17 TIMER: Starting timer...
18.11 19:55:17 TIMER: Timer running...
18.11 19:55:17 DB: SELECT * FROM GameVars
18.11 19:55:17 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:17 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.11 19:55:17 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:17 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.11 19:55:17 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:17 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.11 19:55:17 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:17 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.11 19:55:17 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:17 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.11 19:55:17 -<<-: core/quest.getDaily ok
18.11 19:55:17 DB: SELECT * FROM UserAttributeTypes
18.11 19:55:17 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:17 DB: SELECT * FROM UserVariableTypes
18.11 19:55:17 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:17 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.11 19:55:17 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:17 DB: SELECT * FROM ItemGroups
18.11 19:55:17 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:17 DB: SELECT * FROM Bundles ORDER BY ID
18.11 19:55:17 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:17 DB: SELECT * FROM BundleItems ORDER BY ID
18.11 19:55:17 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:17 SHOP: loading items...
18.11 19:55:17 ->>-: core/shop.getList { _type => core/shop.getList }
18.11 19:55:17 -<<-: core/shop.getList ok
18.11 19:55:17 SHOP: 0 items loaded (0 sec)
18.11 19:55:17 DB: SELECT * FROM EffectAttributeTypes
18.11 19:55:17 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:17 DB: SELECT * FROM Effects
18.11 19:55:17 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:17 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.11 19:55:17 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:17 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.11 19:55:17 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:17 DB: SELECT * FROM Badges
18.11 19:55:17 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.11 19:55:17 -<<-: core/server.query ok
18.11 19:55:23 NET: Client (conid:61715660) connected to vdl.0 (clients:1)
18.11 19:55:23 NET: Client (conid:61715660) switched protocol to WS
18.11 19:55:23 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:55:23 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:55:23 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:55:23 -<<-: core/server.query ok
18.11 19:55:23 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:55:23 -<<-: core/user.isOnlineID ok
18.11 19:55:23 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:55:23 -<<-: core/cache.get ok
18.11 19:55:23 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:55:23 -<<-: core/cache.get ok
18.11 19:55:23 NET: Client login (conid:61715660, id:76, name:Aimer)
18.11 19:55:23 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:55:23 -<<-: core/user.loginPost null
18.11 19:55:23 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:55:23 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:55:23 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:55:23 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:55:23 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:55:23 TIME: user.data 1.36 ms
18.11 19:55:23 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:55:23 ++ NET: Aimer req: tournament.addUsers { tournamentId => 1, messageType => tournament.addUsers }
18.11 19:55:23 ->>-: vdl/cache.tournament.getPrice { tournamentId => 1, _type => vdl/cache.tournament.getPrice }
18.11 19:55:23 -<<-: vdl/cache.tournament.getPrice { price => 300, _type => vdl/cache.tournament.getPrice }
18.11 19:55:23 TIME: tournament.addUsers 4.16 ms
18.11 19:55:23 == NET: Aimer ret: tournament.addUsers { type => tournament.addUsers, errorCode => not enough money }
18.11 19:55:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:55:25 TIME: user.ping 0.36 ms
18.11 19:55:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:55:32 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:55:32 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:55:46 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:55:46 TIME: user.ping 0.32 ms
18.11 19:55:46 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:56:06 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:56:06 TIME: user.ping 0.44 ms
18.11 19:56:06 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:57:14 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
18.11 19:57:14 -<<-: server.login ok
18.11 19:57:14 DB: SELECT * FROM LocalizationStrings
18.11 19:57:14 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 TIMER: Starting timer...
18.11 19:57:14 TIMER: Timer running...
18.11 19:57:14 DB: SELECT * FROM GameVars
18.11 19:57:14 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.11 19:57:14 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.11 19:57:14 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.11 19:57:14 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.11 19:57:14 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.11 19:57:14 -<<-: core/quest.getDaily ok
18.11 19:57:14 DB: SELECT * FROM UserAttributeTypes
18.11 19:57:14 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 DB: SELECT * FROM UserVariableTypes
18.11 19:57:14 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.11 19:57:14 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 DB: SELECT * FROM ItemGroups
18.11 19:57:14 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 DB: SELECT * FROM Bundles ORDER BY ID
18.11 19:57:14 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 DB: SELECT * FROM BundleItems ORDER BY ID
18.11 19:57:14 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 SHOP: loading items...
18.11 19:57:14 ->>-: core/shop.getList { _type => core/shop.getList }
18.11 19:57:14 -<<-: core/shop.getList ok
18.11 19:57:14 SHOP: 0 items loaded (0 sec)
18.11 19:57:14 DB: SELECT * FROM EffectAttributeTypes
18.11 19:57:14 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 DB: SELECT * FROM Effects
18.11 19:57:14 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.11 19:57:14 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.11 19:57:14 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 DB: SELECT * FROM Badges
18.11 19:57:14 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 NET: Client (conid:9973924) connected to vdl.0 (clients:1)
18.11 19:57:14 NET: Client (conid:9973924) switched protocol to WS
18.11 19:57:14 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:57:14 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:57:14 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:57:14 -<<-: core/server.query ok
18.11 19:57:14 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:57:14 -<<-: core/user.isOnlineID ok
18.11 19:57:14 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:57:14 -<<-: core/cache.get ok
18.11 19:57:14 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:57:14 -<<-: core/cache.get ok
18.11 19:57:14 NET: Client login (conid:9973924, id:76, name:Aimer)
18.11 19:57:14 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:57:14 -<<-: core/user.loginPost null
18.11 19:57:14 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:57:14 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:57:14 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:57:14 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:57:14 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:57:14 TIME: user.data 0.61 ms
18.11 19:57:14 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:57:16 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:57:16 TIME: user.ping 0.33 ms
18.11 19:57:16 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:57:24 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:57:24 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:59:02 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
18.11 19:59:02 -<<-: server.login ok
18.11 19:59:02 DB: SELECT * FROM LocalizationStrings
18.11 19:59:02 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 TIMER: Starting timer...
18.11 19:59:02 TIMER: Timer running...
18.11 19:59:02 DB: SELECT * FROM GameVars
18.11 19:59:02 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.11 19:59:02 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.11 19:59:02 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.11 19:59:02 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.11 19:59:02 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.11 19:59:02 -<<-: core/quest.getDaily ok
18.11 19:59:02 DB: SELECT * FROM UserAttributeTypes
18.11 19:59:02 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 DB: SELECT * FROM UserVariableTypes
18.11 19:59:02 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.11 19:59:02 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 DB: SELECT * FROM ItemGroups
18.11 19:59:02 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 DB: SELECT * FROM Bundles ORDER BY ID
18.11 19:59:02 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 DB: SELECT * FROM BundleItems ORDER BY ID
18.11 19:59:02 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 SHOP: loading items...
18.11 19:59:02 ->>-: core/shop.getList { _type => core/shop.getList }
18.11 19:59:02 -<<-: core/shop.getList ok
18.11 19:59:02 SHOP: 0 items loaded (0 sec)
18.11 19:59:02 DB: SELECT * FROM EffectAttributeTypes
18.11 19:59:02 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 DB: SELECT * FROM Effects
18.11 19:59:02 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.11 19:59:02 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.11 19:59:02 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 DB: SELECT * FROM Badges
18.11 19:59:02 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 NET: Client (conid:36135377) connected to vdl.0 (clients:1)
18.11 19:59:02 NET: Client (conid:36135377) switched protocol to WS
18.11 19:59:02 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:59:02 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:59:02 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:59:02 -<<-: core/server.query ok
18.11 19:59:02 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:59:02 -<<-: core/user.isOnlineID ok
18.11 19:59:02 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:59:02 -<<-: core/cache.get ok
18.11 19:59:02 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:59:02 -<<-: core/cache.get ok
18.11 19:59:02 NET: Client login (conid:36135377, id:76, name:Aimer)
18.11 19:59:02 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:59:02 -<<-: core/user.loginPost null
18.11 19:59:02 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:59:02 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:59:02 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:59:02 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:59:02 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:59:02 TIME: user.data 0.65 ms
18.11 19:59:02 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:59:04 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:59:04 TIME: user.ping 0.18 ms
18.11 19:59:04 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:59:12 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:59:12 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:59:25 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:59:25 TIME: user.ping 0.18 ms
18.11 19:59:25 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:59:32 NET: Client (name:Aimer conid:36135377 WS) disconnected from vdl.0 (clients:0)
18.11 19:59:32 DB: SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true
18.11 19:59:32 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=76 OR secondid=76 AND finished <> true, _type => core/server.query }
18.11 19:59:32 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.11 19:59:32 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:59:32 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
18.11 19:59:32 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.11 19:59:32 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 497
Called from modules/VDLBattleModule.hx line 510
Called from snipe/slave/Server.hx line 994
18.11 19:59:32 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 76, _type => core/cache.update }
18.11 19:59:32 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
18.11 19:59:32 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 76, _type => core/cache.update }
18.11 19:59:32 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.11 19:59:32 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 76, _type => core/user.logoutPost }
18.11 19:59:32 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.11 19:59:39 NET: Client (conid:64633216) connected to vdl.0 (clients:1)
18.11 19:59:39 NET: Client (conid:64633216) switched protocol to WS
18.11 19:59:40 ++ NET: null req: user.login { password => kO2YJdf, name => Aimer, messageType => user.login }
18.11 19:59:40 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf'
18.11 19:59:40 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Aimer' AND Password = E'kO2YJdf', _type => core/server.query }
18.11 19:59:40 -<<-: core/server.query { list => {{ name => Aimer, networkid => , isbanned => false, id => 76 }}, errorCode => ok, _type => core/server.query }
18.11 19:59:40 ->>-: core/user.isOnlineID { id => 76, _type => core/user.isOnlineID }
18.11 19:59:40 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.11 19:59:40 ->>-: core/cache.get { type => user, v => -1, id => 76, _type => core/cache.get }
18.11 19:59:40 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => Aimer, deleted => false, email => , networktype =>   , password => kO2YJdf, isbanned => false, regdate => 2016-10-19 18:05:38.946809+03, language => en, networkid => , params => { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479468312, lastLoginDate => 323, money => 303, lastLoadDate => 1119 }, effects => { list => [] } }}, version => 2, id => 76 } }
18.11 19:59:40 ->>-: core/cache.get { type => questdata, v => -1, id => 76, _type => core/cache.get }
18.11 19:59:40 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 76 } }
18.11 19:59:40 NET: Client login (conid:64633216, id:76, name:Aimer)
18.11 19:59:40 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 76, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
18.11 19:59:40 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.11 19:59:40 == NET: Aimer ret: user.login { name => Aimer, type => user.login, errorCode => ok, id => 76 }
18.11 19:59:40 == NET: Aimer ret: user.join { name => Aimer, type => user.join }
18.11 19:59:40 ++ NET: Aimer req: user.data { messageType => user.data }
18.11 19:59:40 ->>-: vdl/cache.user.getData { userId => 76, _type => vdl/cache.user.getData, money => 303 }
18.11 19:59:40 -<<-: vdl/cache.user.getData { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:59:40 TIME: user.data 0.52 ms
18.11 19:59:40 == NET: Aimer ret: user.data { info => { city => Kazan, year => 1993, email => rabpoll1@ya.ru }, type => user.data, errorCode => ok, _type => vdl/cache.user.getData, money => 303 }
18.11 19:59:44 ++ NET: Aimer req: user.ping { messageType => user.ping, msg => ok }
18.11 19:59:44 TIME: user.ping 0.19 ms
18.11 19:59:44 == NET: Aimer ret: user.ping { type => user.ping, errorCode => ok }
18.11 19:59:47 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 76, _type => core/cache.update }
18.11 19:59:47 -<<-: core/cache.update { errorCode => ok, version => 3, _type => core/cache.update }
