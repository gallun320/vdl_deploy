19.11 18:11:16 ->>-: core/server.login { host => 172.16.30.23, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.30.23, externalPort => 2030 }
19.11 18:11:16 -<<-: server.login ok
19.11 18:11:16 DB: SELECT * FROM LocalizationStrings
19.11 18:11:16 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:16 TIMER: Starting timer...
19.11 18:11:16 TIMER: Timer running...
19.11 18:11:16 DB: SELECT * FROM GameVars
19.11 18:11:16 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:16 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
19.11 18:11:16 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:16 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
19.11 18:11:16 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:16 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
19.11 18:11:16 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:16 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
19.11 18:11:16 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:16 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
19.11 18:11:16 -<<-: core/quest.getDaily ok
19.11 18:11:16 DB: SELECT * FROM UserAttributeTypes
19.11 18:11:16 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:16 DB: SELECT * FROM UserVariableTypes
19.11 18:11:16 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:16 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
19.11 18:11:16 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:16 DB: SELECT * FROM ItemGroups
19.11 18:11:16 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:16 DB: SELECT * FROM Bundles ORDER BY ID
19.11 18:11:16 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:16 DB: SELECT * FROM BundleItems ORDER BY ID
19.11 18:11:16 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:16 SHOP: loading items...
19.11 18:11:16 ->>-: core/shop.getList { _type => core/shop.getList }
19.11 18:11:16 -<<-: core/shop.getList ok
19.11 18:11:16 SHOP: 0 items loaded (0 sec)
19.11 18:11:16 DB: SELECT * FROM EffectAttributeTypes
19.11 18:11:16 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:16 DB: SELECT * FROM Effects
19.11 18:11:16 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:16 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
19.11 18:11:16 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:16 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
19.11 18:11:16 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:16 DB: SELECT * FROM Badges
19.11 18:11:16 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
19.11 18:11:16 -<<-: core/server.query ok
19.11 18:11:25 NET: Client (conid:43276706) connected to vdl.0 (clients:1)
19.11 18:11:26 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTQw }
19.11 18:11:26 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid140' AND Password = E'uid140'
19.11 18:11:26 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid140' AND Password = E'uid140', _type => core/server.query }
19.11 18:11:26 -<<-: core/server.query ok
19.11 18:11:26 ->>-: core/user.isOnlineID { id => 140, _type => core/user.isOnlineID }
19.11 18:11:26 -<<-: core/user.isOnlineID ok
19.11 18:11:26 ->>-: core/cache.get { type => user, v => -1, id => 140, _type => core/cache.get }
19.11 18:11:26 -<<-: core/cache.get ok
19.11 18:11:26 ->>-: core/cache.get { type => questdata, v => -1, id => 140, _type => core/cache.get }
19.11 18:11:26 -<<-: core/cache.get ok
19.11 18:11:26 NET: Client login (conid:43276706, id:140, name:uid140)
19.11 18:11:26 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 140, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
19.11 18:11:26 -<<-: core/user.loginPost null
19.11 18:11:26 == NET: uid140 ret: user.login { name => uid140, type => user.login, errorCode => ok, id => 140 }
19.11 18:11:26 == NET: uid140 ret: user.join { name => uid140, type => user.join }
19.11 18:11:29 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 18:11:29 TIME: user.ping 0.18 ms
19.11 18:11:29 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 18:11:31 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 140, _type => core/cache.update }
19.11 18:11:31 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 18:11:33 NET: Client (conid:87050227) connected to vdl.0 (clients:2)
19.11 18:11:34 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTk= }
19.11 18:11:34 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid19' AND Password = E'uid19'
19.11 18:11:34 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid19' AND Password = E'uid19', _type => core/server.query }
19.11 18:11:34 -<<-: core/server.query { list => {{ name => uid19, networkid => , isbanned => false, id => 19 }}, errorCode => ok, _type => core/server.query }
19.11 18:11:34 ->>-: core/user.isOnlineID { id => 19, _type => core/user.isOnlineID }
19.11 18:11:34 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
19.11 18:11:34 ->>-: core/cache.get { type => user, v => -1, id => 19, _type => core/cache.get }
19.11 18:11:34 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid19, deleted => false, email => , networktype =>   , password => uid19, isbanned => false, regdate => 2016-10-12 13:11:41.868111+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479560179, lastLoginDate => 324, lastLoadDate => 1120 }, effects => { list => [] } }}, version => 0, id => 19 } }
19.11 18:11:34 ->>-: core/cache.get { type => questdata, v => -1, id => 19, _type => core/cache.get }
19.11 18:11:34 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 19 } }
19.11 18:11:34 NET: Client login (conid:87050227, id:19, name:uid19)
19.11 18:11:34 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 19, _type => core/user.loginPost, ipAddr => 172.16.20.65 }
19.11 18:11:34 -<<-: core/user.loginPost { _type => core/user.loginPost }
19.11 18:11:34 == NET: uid19 ret: user.login { name => uid19, type => user.login, errorCode => ok, id => 19 }
19.11 18:11:34 == NET: uid140 ret: user.join { name => uid19, type => user.join }
19.11 18:11:34 == NET: uid19 ret: user.join { name => uid140, type => user.join }
19.11 18:11:34 == NET: uid19 ret: user.join { name => uid19, type => user.join }
19.11 18:11:34 NET: Client (name:uid19 conid:87050227 TCP) disconnected from vdl.0 (clients:1)
19.11 18:11:34 DB: SELECT id FROM battle WHERE firstid=19 OR secondid=19 AND finished <> true
19.11 18:11:34 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=19 OR secondid=19 AND finished <> true, _type => core/server.query }
19.11 18:11:34 -<<-: core/server.query { list => {{ id => 11 }, { id => 12 }}, errorCode => ok, _type => core/server.query }
19.11 18:11:34 ->>-: vdl/cache.battle.infoRoom { roomId => 12, _type => vdl/cache.battle.infoRoom }
19.11 18:11:34 NET: Client (conid:26225480) connected to vdl.0 (clients:2)
19.11 18:11:34 -<<-: vdl/cache.battle.infoRoom { secondId => 140, firstId => 19, _type => vdl/cache.battle.infoRoom, turnId => 140 }
19.11 18:11:34 ->>-: vdl/cache.battle.deleteRoom { roomId => 12, _type => vdl/cache.battle.deleteRoom }
19.11 18:11:34 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
19.11 18:11:34 ->>-: vdl/cache.battle.finishRoom { roomId => 12, _type => vdl/cache.battle.finishRoom }
19.11 18:11:34 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
19.11 18:11:34 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => true, id => 19, _type => core/cache.update }
19.11 18:11:34 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 18:11:34 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 19, _type => core/cache.update }
19.11 18:11:34 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 18:11:34 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 19, _type => core/user.logoutPost }
19.11 18:11:34 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
19.11 18:11:34 == NET: uid140 ret: battle.leave { type => battle.leave }
19.11 18:11:34 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTk= }
19.11 18:11:34 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid19' AND Password = E'uid19'
19.11 18:11:34 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid19' AND Password = E'uid19', _type => core/server.query }
19.11 18:11:34 -<<-: core/server.query { list => {{ name => uid19, networkid => , isbanned => false, id => 19 }}, errorCode => ok, _type => core/server.query }
19.11 18:11:34 ->>-: core/user.isOnlineID { id => 19, _type => core/user.isOnlineID }
19.11 18:11:34 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
19.11 18:11:34 ->>-: core/cache.get { type => user, v => -1, id => 19, _type => core/cache.get }
19.11 18:11:34 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid19, deleted => false, email => , networktype =>   , password => uid19, isbanned => false, regdate => 2016-10-12 13:11:41.868111+03, language => en, networkid => , params => { inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1479560179, lastLoginDate => 324, lastLoadDate => 1120 }, effects => { list => [] } }}, version => 1, id => 19 } }
19.11 18:11:34 ->>-: core/cache.get { type => questdata, v => -1, id => 19, _type => core/cache.get }
19.11 18:11:34 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 19 } }
19.11 18:11:34 NET: Client login (conid:26225480, id:19, name:uid19)
19.11 18:11:34 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 19, _type => core/user.loginPost, ipAddr => 172.16.20.65 }
19.11 18:11:34 -<<-: core/user.loginPost { _type => core/user.loginPost }
19.11 18:11:34 == NET: uid19 ret: user.login { name => uid19, type => user.login, errorCode => ok, id => 19 }
19.11 18:11:34 == NET: uid140 ret: user.join { name => uid19, type => user.join }
19.11 18:11:34 == NET: uid19 ret: user.join { name => uid140, type => user.join }
19.11 18:11:34 == NET: uid19 ret: user.join { name => uid19, type => user.join }
19.11 18:11:39 ++ NET: uid19 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
19.11 18:11:39 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 19 }, _type => vdl/cache.battle.findRandom }
19.11 18:11:39 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
19.11 18:11:39 TIME: battle.find 0.72 ms
19.11 18:11:39 == NET: uid19 ret: battle.find { type => battle.find, errorCode => ok }
19.11 18:11:41 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 19, _type => core/cache.update }
19.11 18:11:41 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
19.11 18:11:42 ++ NET: uid140 req: battle.find { type => random, messageType => battle.find, roundTime => 60 }
19.11 18:11:42 ->>-: vdl/cache.battle.findRandom { user => { time => 60, player => 140 }, _type => vdl/cache.battle.findRandom }
19.11 18:11:42 -<<-: battle.enemyEvent { data => { name => uid140, enemy.id => 19, enemy.name => uid19, id => 140, enemy.num => 2, battleId => 13, player => 1 }, _isNotify => true, id => 140, _type => battle.enemyEvent }
19.11 18:11:42 -<<-: battle.enemyEvent { data => { name => uid19, enemy.id => 140, enemy.name => uid140, id => 19, enemy.num => 1, battleId => 13, player => 2 }, _isNotify => true, id => 19, _type => battle.enemyEvent }
19.11 18:11:42 -<<-: vdl/cache.battle.findRandom { errorCode => ok, _type => vdl/cache.battle.findRandom }
19.11 18:11:42 TIME: battle.find 43.53 ms
19.11 18:11:42 == NET: uid140 ret: battle.find { type => battle.find, errorCode => ok }
19.11 18:11:42 == NET: uid140 ret: battle.enemy { data => { name => uid140, enemy.id => 19, enemy.name => uid19, id => 140, enemy.num => 2, battleId => 13, player => 1 }, type => battle.enemy }
19.11 18:11:42 == NET: uid19 ret: battle.enemy { data => { name => uid19, enemy.id => 140, enemy.name => uid140, id => 19, enemy.num => 1, battleId => 13, player => 2 }, type => battle.enemy }
19.11 18:11:48 ++ NET: uid140 req: battle.sendtask { dice => 0, from => [0,0], name => throw, side => 2, messageType => battle.sendtask, to => [0,0], battleId => 13 }
19.11 18:11:48 ->>-: vdl/cache.battle.infoRoom { roomId => 13, _type => vdl/cache.battle.infoRoom }
19.11 18:11:48 -<<-: vdl/cache.battle.infoRoom { secondId => 19, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 140 }
19.11 18:11:48 TIME: battle.sendtask 0.59 ms
19.11 18:11:48 == NET: uid140 ret: battle.sendtask { name => throw, type => battle.task, dices => [0,0,5,5,2,3], errorCode => ok }
19.11 18:11:48 == NET: uid19 ret: battle.task { name => throw, type => battle.task, dices => [0,0,5,5,2,3], errorCode => ok }
19.11 18:11:48 == NET: uid140 ret: battle.sendtask { type => battle.sendtask, errorCode => ok }
19.11 18:11:49 ++ NET: uid140 req: user.ping { messageType => user.ping, msg => ok }
19.11 18:11:49 TIME: user.ping 0.19 ms
19.11 18:11:49 == NET: uid140 ret: user.ping { type => user.ping, errorCode => ok }
19.11 18:11:51 ++ NET: uid140 req: battle.sendtask { dice => 5, from => [7,3], name => swap, side => 2, messageType => battle.sendtask, to => [8,3], battleId => 13 }
19.11 18:11:51 ->>-: vdl/cache.battle.infoRoom { roomId => 13, _type => vdl/cache.battle.infoRoom }
19.11 18:11:51 -<<-: vdl/cache.battle.infoRoom { secondId => 19, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 140 }
19.11 18:11:51 ->>-: vdl/cache.battle.setScores { scores => [0,0], _type => vdl/cache.battle.setScores, player1 => 140, player2 => 19, battleId => 13 }
19.11 18:11:51 -<<-: vdl/cache.battle.setScores { errorCode => ok, _type => vdl/cache.battle.setScores }
19.11 18:11:51 == NET: uid140 ret: battle.sendtask { type => battle.sendtask, errorCode => ok, _type => vdl/cache.battle.setScores }
19.11 18:11:51 TIME: battle.sendtask 2.69 ms
19.11 18:11:51 == NET: uid19 ret: battle.task { dice => 5, from => [7,3], name => swap, side => 2, type => battle.task, dices => [0,0,5,2,3], messageType => battle.sendtask, to => [8,3], battleId => 13 }
19.11 18:11:52 ++ NET: uid140 req: battle.sendtask { dice => 5, from => [8,3], name => swap, side => 2, messageType => battle.sendtask, to => [9,3], battleId => 13 }
19.11 18:11:52 ->>-: vdl/cache.battle.infoRoom { roomId => 13, _type => vdl/cache.battle.infoRoom }
19.11 18:11:52 -<<-: vdl/cache.battle.infoRoom { secondId => 19, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 140 }
19.11 18:11:52 ->>-: vdl/cache.battle.setScores { scores => [1,0], _type => vdl/cache.battle.setScores, player1 => 140, player2 => 19, battleId => 13 }
19.11 18:11:54 -<<-: vdl/cache.battle.setScores { errorCode => _requestException, _type => vdl/cache.battle.setScores }
19.11 18:11:54 TRACE: battle.sendtask : cacheRequest exception { scores => [1,0], _type => vdl/cache.battle.setScores, player1 => 140, player2 => 19, battleId => 13 }
19.11 18:11:54 TRACE: battle.sendtask : 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 437
Called from modules/VDLBattleModule.hx line 413
Called from modules/VDLBattleModule.hx line 64
Called from modules/VDLBattleModule.hx line 42
Called from snipe/slave/Server.hx line 1176
19.11 18:11:54 == NET: uid19 ret: battle.task { dice => 5, from => [8,3], name => swap, side => 2, type => battle.task, dices => [0,0,2,3], messageType => battle.sendtask, to => [9,3], battleId => 13 }
19.11 18:11:55 NET: Client (name:uid140 conid:43276706 TCP) disconnected from vdl.0 (clients:1)
19.11 18:11:55 DB: SELECT id FROM battle WHERE firstid=140 OR secondid=140 AND finished <> true
19.11 18:11:55 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=140 OR secondid=140 AND finished <> true, _type => core/server.query }
19.11 18:11:55 NET: Client (conid:2386703) connected to vdl.0 (clients:2)
19.11 18:11:55 -<<-: core/server.query { list => {{ id => 11 }, { id => 13 }}, errorCode => ok, _type => core/server.query }
19.11 18:11:55 ->>-: vdl/cache.battle.infoRoom { roomId => 13, _type => vdl/cache.battle.infoRoom }
19.11 18:11:55 -<<-: vdl/cache.battle.infoRoom { secondId => 19, firstId => 140, _type => vdl/cache.battle.infoRoom, turnId => 140 }
19.11 18:11:55 ->>-: vdl/cache.battle.deleteRoom { roomId => 13, _type => vdl/cache.battle.deleteRoom }
19.11 18:11:55 -<<-: vdl/cache.battle.deleteRoom { errorCode => ok, _type => vdl/cache.battle.deleteRoom }
19.11 18:11:55 ->>-: vdl/cache.battle.finishRoom { roomId => 13, _type => vdl/cache.battle.finishRoom }
19.11 18:11:55 -<<-: vdl/cache.battle.finishRoom { errorCode => ok, _type => vdl/cache.battle.finishRoom }
19.11 18:11:55 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 140, _type => core/cache.update }
19.11 18:11:55 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
19.11 18:11:55 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 140, _type => core/cache.update }
19.11 18:11:55 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
19.11 18:11:55 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 140, _type => core/user.logoutPost }
19.11 18:11:55 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
19.11 18:11:55 == NET: uid19 ret: battle.leave { type => battle.leave }
19.11 18:11:55 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTQw }
19.11 18:11:55 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid140' AND Password = E'uid140'
19.11 18:11:55 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid140' AND Password = E'uid140', _type => core/server.query }
19.11 18:11:55 -<<-: core/server.query { list => {{ name => uid140, networkid => , isbanned => false, id => 140 }}, errorCode => ok, _type => core/server.query }
19.11 18:11:55 ->>-: core/user.isOnlineID { id => 140, _type => core/user.isOnlineID }
19.11 18:11:55 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
19.11 18:11:55 ->>-: core/cache.get { type => user, v => -1, id => 140, _type => core/cache.get }
19.11 18:11:55 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid140, deleted => false, email => , networktype =>   , password => uid140, isbanned => false, regdate => 2016-11-19 17:25:00.661+03, language => en, networkid => , params => { attrs => { _lastTime.24hr => 1479567029, lastLoginDate => 324, lastLoadDate => 1120 }, effects => { list => [] } }}, version => 2, id => 140 } }
19.11 18:11:55 ->>-: core/cache.get { type => questdata, v => -1, id => 140, _type => core/cache.get }
19.11 18:11:55 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 1, id => 140 } }
19.11 18:11:55 NET: Client login (conid:2386703, id:140, name:uid140)
19.11 18:11:55 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 140, _type => core/user.loginPost, ipAddr => 172.16.30.15 }
19.11 18:11:55 -<<-: core/user.loginPost { _type => core/user.loginPost }
19.11 18:11:55 == NET: uid19 ret: user.join { name => uid140, type => user.join }
19.11 18:11:55 == NET: uid140 ret: user.login { name => uid140, type => user.login, errorCode => ok, id => 140 }
19.11 18:11:55 == NET: uid140 ret: user.join { name => uid19, type => user.join }
19.11 18:11:55 == NET: u