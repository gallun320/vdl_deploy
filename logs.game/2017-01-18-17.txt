18.01 17:00:20 TIMER: Check auto-disconnect...
18.01 17:00:21 STATS: vdl.0 cache, locks:0
18.01 17:01:20 TIMER: Check auto-disconnect...
18.01 17:01:21 STATS: vdl.0 cache, locks:0
18.01 17:02:20 TIMER: Check auto-disconnect...
18.01 17:02:21 STATS: vdl.0 cache, locks:0
18.01 17:03:20 TIMER: Check auto-disconnect...
18.01 17:03:21 STATS: vdl.0 cache, locks:0
18.01 17:04:20 TIMER: Check auto-disconnect...
18.01 17:04:21 STATS: vdl.0 cache, locks:0
18.01 17:05:20 TIMER: Check auto-disconnect...
18.01 17:05:21 STATS: vdl.0 cache, locks:0
18.01 17:06:20 TIMER: Check auto-disconnect...
18.01 17:06:21 STATS: vdl.0 cache, locks:0
18.01 17:07:20 TIMER: Check auto-disconnect...
18.01 17:07:21 STATS: vdl.0 cache, locks:0
18.01 17:08:20 TIMER: Check auto-disconnect...
18.01 17:08:21 STATS: vdl.0 cache, locks:0
18.01 17:09:20 TIMER: Check auto-disconnect...
18.01 17:09:21 STATS: vdl.0 cache, locks:0
18.01 17:10:20 TIMER: Check auto-disconnect...
18.01 17:10:21 STATS: vdl.0 cache, locks:0
18.01 17:10:43 NET: Client (conid:15943565) connected to vdl.0 (clients:1)
18.01 17:10:44 ++ NET: null req: user.register { messageType => user.register }
18.01 17:10:44 DB: SELECT * FROM users
18.01 17:10:44 ->>-: core/server.query { q => SELECT * FROM users, _type => core/server.query }
18.01 17:10:44 -<<-: core/server.query ok
18.01 17:10:44 STATS: vdl.0 cache connection, 21 calls, total 0.0302040576934814 sec spent, avg 1.44 ms
18.01 17:10:44 DB: SELECT ID FROM Users WHERE Name = E'uid162'
18.01 17:10:44 == NET: null ret: user.auth { type => user.auth, token => dWlkMTYy }
18.01 17:10:44 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'uid162', _type => core/server.query }
18.01 17:10:44 -<<-: core/server.query ok
18.01 17:10:44 DB: SELECT nextval('Users_id_seq') AS id
18.01 17:10:44 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
18.01 17:10:44 -<<-: core/server.query ok
18.01 17:10:44 ->>-: core/user.register { password => uid162, name => uid162, fullParams => { password => uid162, name => uid162, networkid => , networktype => , messageType => user.register, id => 162 }, networkid => , connectionID => 15943565, networktype => , email => , id => 162, _type => core/user.register }
18.01 17:10:44 -<<-: core/user.register ok
18.01 17:10:44 -<<-: core/user.registerResponse null
18.01 17:10:44 == NET: null ret: user.register { type => user.register, errorCode => ok }
18.01 17:10:44 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTYy }
18.01 17:10:44 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid162' AND Password = E'uid162'
18.01 17:10:44 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid162' AND Password = E'uid162', _type => core/server.query }
18.01 17:10:44 -<<-: core/server.query ok
18.01 17:10:44 ->>-: core/user.isOnlineID { id => 162, _type => core/user.isOnlineID }
18.01 17:10:44 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.01 17:10:44 ->>-: core/cache.get { type => user, v => -1, id => 162, _type => core/cache.get }
18.01 17:10:44 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid162, deleted => false, email => , networktype =>   , password => uid162, isbanned => false, regdate => 2017-01-18 17:10:44.031496+03, language =>   , networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => {}, effects => { list => [] } }}, version => 1, id => 162 } }
18.01 17:10:44 ->>-: core/cache.get { type => questdata, v => -1, id => 162, _type => core/cache.get }
18.01 17:10:44 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => {}}, version => 0, id => 162 } }
18.01 17:10:44 NET: Client login (conid:15943565, id:162, name:uid162)
18.01 17:10:44 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 162, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
18.01 17:10:44 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.01 17:10:44 DB: SELECT ID FROM TempUserLogins WHERE UserID = 162 AND Date = 'today'::timestamp
18.01 17:10:44 ->>-: core/server.query { q => SELECT ID FROM TempUserLogins WHERE UserID = 162 AND Date = 'today'::timestamp, _type => core/server.query }
18.01 17:10:44 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.01 17:10:44 PENDING: INSERT INTO TempUserLogins (UserID, Date) VALUES (162, 'today'::timestamp)
18.01 17:10:44 ++ NET: uid162 req: user.login { messageType => user.login, token => dWlkMTYy }
18.01 17:10:44 TRACE: User already logon.
18.01 17:10:44 TRACE: 
Called from snipe/slave/Server.hx line 870
Called from snipe/slave/Server.hx line 1124
18.01 17:10:44 == NET: uid162 ret: user.login { name => uid162, type => user.login, errorCode => ok, id => 162 }
18.01 17:10:44 == NET: uid162 ret: user.join { name => uid162, type => user.join }
18.01 17:10:44 ->>-: core/cache.update { diff => {language => en, params => { attrs => { _lastTime.24hr => 1484748644, lastLoginDate => 18, lastLoadDate => 119 } }}, type => user, unlock => true, id => 162, _type => core/cache.update, _notify => {{ q => INSERT INTO TempUserLogins (UserID, Date) VALUES (162, 'today'::timestamp), _type => core/server.pending }} }
18.01 17:10:44 -<<-: core/cache.update { errorCode => ok, version => 2, _type => core/cache.update }
18.01 17:10:44 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 162, _type => core/cache.update }
18.01 17:10:44 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.01 17:10:44 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 162, _type => core/user.logoutPost }
18.01 17:10:44 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.01 17:10:44 TRACE: Could not login.
18.01 17:10:44 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
18.01 17:10:47 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 17:10:47 TIME: user.ping 0.13 ms
18.01 17:10:47 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 17:11:20 TIMER: Check auto-disconnect...
18.01 17:11:21 STATS: vdl.0 cache, locks:0
18.01 17:12:20 TIMER: Check auto-disconnect...
18.01 17:12:21 STATS: vdl.0 cache, locks:0
18.01 17:13:20 TIMER: Check auto-disconnect...
18.01 17:13:21 STATS: vdl.0 cache, locks:0
18.01 17:14:20 TIMER: Check auto-disconnect...
18.01 17:14:20 NET: Client (name:uid162 conid:15943565 TCP) disconnected from vdl.0 (clients:0)
18.01 17:14:20 DB: SELECT id FROM battle WHERE firstid=162 OR secondid=162 AND finished <> true
18.01 17:14:20 ->>-: core/server.query { q => SELECT id FROM battle WHERE firstid=162 OR secondid=162 AND finished <> true, _type => core/server.query }
18.01 17:14:20 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
18.01 17:14:20 STATS: vdl.0 cache connection, 34 calls, total 0.0433230400085449 sec spent, avg 1.27 ms
18.01 17:14:20 ->>-: vdl/cache.battle.infoRoom { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.01 17:14:20 -<<-: vdl/cache.battle.infoRoom { errorCode => _requestException, _type => vdl/cache.battle.infoRoom }
18.01 17:14:20 TRACE: logoutPost battle exception: cacheRequest exception { roomId => 0, _type => vdl/cache.battle.infoRoom }
18.01 17:14:20 TRACE: 
Called from snipe/slave/CacheConnection.hx line 199
Called from modules/VDLBattleModule.hx line 502
Called from modules/VDLBattleModule.hx line 515
Called from snipe/slave/Server.hx line 994
18.01 17:14:20 ->>-: core/cache.update { diff => {}, type => user, unlock => true, id => 162, _type => core/cache.update }
18.01 17:14:20 -<<-: core/cache.update { errorCode => mustBeLocked, version => 0, _type => core/cache.update }
18.01 17:14:20 ->>-: core/cache.update { diff => {}, type => questdata, unlock => true, id => 162, _type => core/cache.update }
18.01 17:14:20 -<<-: core/cache.update { errorCode => mustBeLocked, version => 0, _type => core/cache.update }
18.01 17:14:20 ->>-: core/user.logoutPost { networkid => , networktype =>   , id => 162, _type => core/user.logoutPost }
18.01 17:14:20 -<<-: core/user.logoutPost { errorCode => ok, _type => core/user.logoutPost }
18.01 17:14:21 STATS: vdl.0 cache, locks:0
18.01 17:15:20 TIMER: Check auto-disconnect...
18.01 17:15:21 STATS: vdl.0 cache, locks:0
18.01 17:16:20 TIMER: Check auto-disconnect...
18.01 17:16:21 STATS: vdl.0 cache, locks:0
18.01 17:17:20 TIMER: Check auto-disconnect...
18.01 17:17:21 STATS: vdl.0 cache, locks:0
18.01 17:18:20 TIMER: Check auto-disconnect...
18.01 17:18:21 STATS: vdl.0 cache, locks:0
18.01 17:19:20 TIMER: Check auto-disconnect...
18.01 17:19:21 STATS: vdl.0 cache, locks:0
18.01 17:20:20 TIMER: Check auto-disconnect...
18.01 17:20:21 STATS: vdl.0 cache, locks:0
18.01 17:21:20 TIMER: Check auto-disconnect...
18.01 17:21:21 STATS: vdl.0 cache, locks:0
18.01 17:22:20 TIMER: Check auto-disconnect...
18.01 17:22:21 STATS: vdl.0 cache, locks:0
18.01 17:22:50 NET: Client (conid:14380252) connected to vdl.0 (clients:1)
18.01 17:22:51 ++ NET: null req: user.login { messageType => user.login, token => dWlkMTYy }
18.01 17:22:51 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid162' AND Password = E'uid162'
18.01 17:22:51 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'uid162' AND Password = E'uid162', _type => core/server.query }
18.01 17:22:51 -<<-: core/server.query { list => {{ name => uid162, networkid => , isbanned => false, id => 162 }}, errorCode => ok, _type => core/server.query }
18.01 17:22:51 STATS: vdl.0 cache connection, 39 calls, total 0.0534036159515381 sec spent, avg 1.37 ms
18.01 17:22:51 ->>-: core/user.isOnlineID { id => 162, _type => core/user.isOnlineID }
18.01 17:22:51 -<<-: core/user.isOnlineID { isOnline => false, errorCode => ok, _type => core/user.isOnlineID }
18.01 17:22:51 ->>-: core/cache.get { type => user, v => -1, id => 162, _type => core/cache.get }
18.01 17:22:51 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {name => uid162, deleted => false, email => , networktype =>   , password => uid162, isbanned => false, regdate => 2017-01-18 17:10:44.031496+03, language => en, networkid => , params => { info => { city => , year => null, email => null }, inventory => { list => [] }, vars => {}, attrs => { _lastTime.24hr => 1484748644, lastLoginDate => 18, lastLoadDate => 119 }, effects => { list => [] } }}, version => 0, id => 162 } }
18.01 17:22:51 ->>-: core/cache.get { type => questdata, v => -1, id => 162, _type => core/cache.get }
18.01 17:22:51 -<<-: core/cache.get { errorCode => ok, _type => core/cache.get, block => { list => {params => { quests => { list => [] } }}, version => 0, id => 162 } }
18.01 17:22:51 NET: Client login (conid:14380252, id:162, name:uid162)
18.01 17:22:51 ->>-: core/user.loginPost { lang => en, networkid => , platform => web, networktype =>   , id => 162, _type => core/user.loginPost, ipAddr => 172.16.20.200 }
18.01 17:22:51 -<<-: core/user.loginPost { _type => core/user.loginPost }
18.01 17:22:51 == NET: uid162 ret: user.login { name => uid162, type => user.login, errorCode => ok, id => 162 }
18.01 17:22:51 == NET: uid162 ret: user.join { name => uid162, type => user.join }
18.01 17:22:54 ++ NET: uid162 req: user.ping { messageType => user.ping, msg => ok }
18.01 17:22:54 TIME: user.ping 0.07 ms
18.01 17:22:54 == NET: uid162 ret: user.ping { type => user.ping, errorCode => ok }
18.01 17:22:56 ->>-: core/cache.update { diff => {language => en}, type => user, unlock => false, id => 162, _type => core/cache.update }
18.01 17:22:56 -<<-: core/cache.update { errorCode => ok, version => 1, _type => core/cache.update }
18.01 17:23:20 TIMER: Check auto-disconnect...
18.01 17:23:47 ->>-: core/server.login { host => 172.16.20.171, name => vdl.0, port => 2030, type => game, _type => core/server.login, externalHost => 172.16.20.171, externalPort => 2030 }
18.01 17:23:47 -<<-: server.login ok
18.01 17:23:47 DB: SELECT * FROM LocalizationStrings
18.01 17:23:47 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 TIMER: Starting timer...
18.01 17:23:47 TIMER: Timer running...
18.01 17:23:47 DB: SELECT * FROM GameVars
18.01 17:23:47 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
18.01 17:23:47 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
18.01 17:23:47 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
18.01 17:23:47 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
18.01 17:23:47 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
18.01 17:23:47 -<<-: core/quest.getDaily ok
18.01 17:23:47 DB: SELECT * FROM UserAttributeTypes
18.01 17:23:47 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 DB: SELECT * FROM UserVariableTypes
18.01 17:23:47 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
18.01 17:23:47 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 DB: SELECT * FROM ItemGroups
18.01 17:23:47 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 DB: SELECT * FROM Bundles ORDER BY ID
18.01 17:23:47 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 DB: SELECT * FROM BundleItems ORDER BY ID
18.01 17:23:47 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 SHOP: loading items...
18.01 17:23:47 ->>-: core/shop.getList { _type => core/shop.getList }
18.01 17:23:47 -<<-: core/shop.getList ok
18.01 17:23:47 SHOP: 0 items loaded (0 sec)
18.01 17:23:47 DB: SELECT * FROM EffectAttributeTypes
18.01 17:23:47 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 DB: SELECT * FROM Effects
18.01 17:23:47 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
18.01 17:23:47 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
18.01 17:23:47 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 DB: SELECT * FROM Badges
18.01 17:23:47 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
18.01 17:23:47 -<<-: core/server.query ok
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
18.01 17:23:47 STATS: vdl.0 cache, locks:0
18.01 17:23:47 TIMER: Check auto-disconnect...
